{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"CombatEngine\", {\n    enumerable: true,\n    get: function () {\n      return CombatEngine;\n    }\n  });\n  Object.defineProperty(exports, \"DamageCalculator\", {\n    enumerable: true,\n    get: function () {\n      return DamageCalculator;\n    }\n  });\n  Object.defineProperty(exports, \"StatusEffectManager\", {\n    enumerable: true,\n    get: function () {\n      return StatusEffectManager;\n    }\n  });\n  Object.defineProperty(exports, \"combatEngine\", {\n    enumerable: true,\n    get: function () {\n      return combatEngine;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  // Core Combat Engine - Tick-based system running at 10 TPS\n  var CombatEngine = /*#__PURE__*/function () {\n    function CombatEngine() {\n      (0, _classCallCheck.default)(this, CombatEngine);\n      this.tickRate = 10;\n      // 10 ticks per second\n      this.tickInterval = 1000 / this.tickRate;\n      // 100ms per tick\n      this.lastTick = 0;\n      this.isRunning = false;\n      this.tickCallbacks = [];\n      this.lastTick = Date.now();\n    }\n\n    // Start the combat engine\n    return (0, _createClass.default)(CombatEngine, [{\n      key: \"start\",\n      value: function start() {\n        if (this.isRunning) return;\n        this.isRunning = true;\n        this.lastTick = Date.now();\n        this.gameLoop();\n      }\n\n      // Stop the combat engine\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.isRunning = false;\n      }\n\n      // Add callback to be called every tick\n    }, {\n      key: \"addTickCallback\",\n      value: function addTickCallback(callback) {\n        this.tickCallbacks.push(callback);\n      }\n\n      // Remove tick callback\n    }, {\n      key: \"removeTickCallback\",\n      value: function removeTickCallback(callback) {\n        var index = this.tickCallbacks.indexOf(callback);\n        if (index > -1) {\n          this.tickCallbacks.splice(index, 1);\n        }\n      }\n\n      // Main game loop - runs at 10 TPS\n    }, {\n      key: \"gameLoop\",\n      value: function gameLoop() {\n        if (!this.isRunning) return;\n        var now = Date.now();\n        var deltaTime = now - this.lastTick;\n\n        // Only process if enough time has passed for next tick\n        if (deltaTime >= this.tickInterval) {\n          // Execute all tick callbacks\n          this.tickCallbacks.forEach(callback => {\n            try {\n              callback();\n            } catch (error) {\n              console.error('Error in tick callback:', error);\n            }\n          });\n          this.lastTick = now;\n        }\n\n        // Schedule next frame\n        requestAnimationFrame(() => this.gameLoop());\n      }\n\n      // Get current tick timestamp for cooldown calculations\n    }, {\n      key: \"getCurrentTick\",\n      value: function getCurrentTick() {\n        return Math.floor(this.lastTick / this.tickInterval);\n      }\n\n      // Convert seconds to ticks\n    }, {\n      key: \"secondsToTicks\",\n      value: function secondsToTicks(seconds) {\n        return Math.floor(seconds * this.tickRate);\n      }\n\n      // Convert ticks to seconds\n    }, {\n      key: \"ticksToSeconds\",\n      value: function ticksToSeconds(ticks) {\n        return ticks / this.tickRate;\n      }\n    }]);\n  }(); // Damage calculation system\n  var DamageCalculator = /*#__PURE__*/function () {\n    function DamageCalculator() {\n      (0, _classCallCheck.default)(this, DamageCalculator);\n    }\n    return (0, _createClass.default)(DamageCalculator, null, [{\n      key: \"calculateDamage\",\n      value:\n      // Calculate base damage with crit chance\n      function calculateDamage(baseDamage, attackerStats, defenderStats) {\n        var finalDamage = baseDamage;\n        var isCritical = false;\n\n        // Apply attack stat bonus\n        finalDamage *= 1 + attackerStats.attack / 100;\n\n        // Check for critical hit\n        if (Math.random() < attackerStats.critChance / 100) {\n          finalDamage *= 1 + attackerStats.critDamage / 100;\n          isCritical = true;\n        }\n\n        // Apply defense reduction\n        var damageReduction = defenderStats.defense / (defenderStats.defense + 100);\n        finalDamage *= 1 - damageReduction;\n\n        // Minimum damage is 1\n        finalDamage = Math.max(1, Math.floor(finalDamage));\n        return {\n          damage: finalDamage,\n          isCritical,\n          damageType: 'physical'\n        };\n      }\n\n      // Calculate DoT damage per tick\n    }, {\n      key: \"calculateDoTDamage\",\n      value: function calculateDoTDamage(effect, attackerStats) {\n        var damage = effect.value;\n        damage *= 1 + attackerStats.attack / 100;\n        return Math.max(1, Math.floor(damage));\n      }\n    }]);\n  }(); // Combat stats interface\n  // Status effect system\n  var StatusEffectManager = /*#__PURE__*/function () {\n    function StatusEffectManager() {\n      (0, _classCallCheck.default)(this, StatusEffectManager);\n      this.effects = new Map();\n    }\n    return (0, _createClass.default)(StatusEffectManager, [{\n      key: \"addEffect\",\n      value:\n      // Add status effect to entity\n      function addEffect(entityId, effect) {\n        if (!this.effects.has(entityId)) {\n          this.effects.set(entityId, []);\n        }\n        var entityEffects = this.effects.get(entityId);\n\n        // Check if effect is stackable or should replace existing\n        var existingIndex = entityEffects.findIndex(e => e.id === effect.id);\n        if (existingIndex >= 0) {\n          var existing = entityEffects[existingIndex];\n          if (effect.stackable && existing.stacks && existing.stacks < 10) {\n            existing.stacks++;\n            existing.remainingTicks = Math.max(existing.remainingTicks, effect.remainingTicks);\n          } else {\n            // Replace existing effect\n            entityEffects[existingIndex] = effect;\n          }\n        } else {\n          entityEffects.push(effect);\n        }\n      }\n\n      // Process status effects for all entities each tick\n    }, {\n      key: \"processTick\",\n      value: function processTick(currentTick) {\n        var tickResults = new Map();\n        this.effects.forEach((entityEffects, entityId) => {\n          var results = [];\n\n          // Process each effect\n          for (var i = entityEffects.length - 1; i >= 0; i--) {\n            var effect = entityEffects[i];\n\n            // Check if it's time to trigger this effect\n            if (currentTick >= effect.lastTick + effect.tickInterval) {\n              // Apply effect\n              var result = this.applyEffect(effect);\n              if (result) {\n                results.push(result);\n              }\n              effect.lastTick = currentTick;\n              effect.remainingTicks--;\n            }\n\n            // Remove expired effects\n            if (effect.remainingTicks <= 0) {\n              entityEffects.splice(i, 1);\n            }\n          }\n          if (results.length > 0) {\n            tickResults.set(entityId, results);\n          }\n        });\n        return tickResults;\n      }\n\n      // Apply individual status effect\n    }, {\n      key: \"applyEffect\",\n      value: function applyEffect(effect) {\n        switch (effect.type) {\n          case 'dot':\n            var stacks = effect.stacks || 1;\n            return {\n              damage: effect.value * stacks,\n              isCritical: false,\n              damageType: 'magical'\n            };\n          case 'heal':\n            return {\n              damage: -effect.value,\n              // negative damage = healing\n              isCritical: false,\n              damageType: 'true'\n            };\n          default:\n            return null;\n        }\n      }\n\n      // Get all effects for an entity\n    }, {\n      key: \"getEffects\",\n      value: function getEffects(entityId) {\n        return this.effects.get(entityId) || [];\n      }\n\n      // Clear all effects for an entity\n    }, {\n      key: \"clearEffects\",\n      value: function clearEffects(entityId) {\n        this.effects.delete(entityId);\n      }\n    }]);\n  }(); // Global combat engine instance\n  var combatEngine = new CombatEngine();\n});","lineCount":286,"map":[[12,2,2,0,"Object"],[12,8,2,0],[12,9,2,0,"defineProperty"],[12,23,2,0],[12,24,2,0,"exports"],[12,31,2,0],[13,4,2,0,"enumerable"],[13,14,2,0],[14,4,2,0,"get"],[14,7,2,0],[14,18,2,0,"get"],[14,19,2,0],[15,6,2,0],[15,13,2,0,"CombatEngine"],[15,25,2,0],[16,4,2,0],[17,2,2,0],[18,2,96,0,"Object"],[18,8,96,0],[18,9,96,0,"defineProperty"],[18,23,96,0],[18,24,96,0,"exports"],[18,31,96,0],[19,4,96,0,"enumerable"],[19,14,96,0],[20,4,96,0,"get"],[20,7,96,0],[20,18,96,0,"get"],[20,19,96,0],[21,6,96,0],[21,13,96,0,"DamageCalculator"],[21,29,96,0],[22,4,96,0],[23,2,96,0],[24,2,161,0,"Object"],[24,8,161,0],[24,9,161,0,"defineProperty"],[24,23,161,0],[24,24,161,0,"exports"],[24,31,161,0],[25,4,161,0,"enumerable"],[25,14,161,0],[26,4,161,0,"get"],[26,7,161,0],[26,18,161,0,"get"],[26,19,161,0],[27,6,161,0],[27,13,161,0,"StatusEffectManager"],[27,32,161,0],[28,4,161,0],[29,2,161,0],[30,2,261,0,"Object"],[30,8,261,0],[30,9,261,0,"defineProperty"],[30,23,261,0],[30,24,261,0,"exports"],[30,31,261,0],[31,4,261,0,"enumerable"],[31,14,261,0],[32,4,261,0,"get"],[32,7,261,0],[32,18,261,0,"get"],[32,19,261,0],[33,6,261,0],[33,13,261,0,"combatEngine"],[33,25,261,0],[34,4,261,0],[35,2,261,0],[36,2,261,47],[36,6,261,47,"_babelRuntimeHelpersClassCallCheck"],[36,40,261,47],[36,43,261,47,"require"],[36,50,261,47],[36,51,261,47,"_dependencyMap"],[36,65,261,47],[37,2,261,47],[37,6,261,47,"_classCallCheck"],[37,21,261,47],[37,24,261,47,"_interopDefault"],[37,39,261,47],[37,40,261,47,"_babelRuntimeHelpersClassCallCheck"],[37,74,261,47],[38,2,261,47],[38,6,261,47,"_babelRuntimeHelpersCreateClass"],[38,37,261,47],[38,40,261,47,"require"],[38,47,261,47],[38,48,261,47,"_dependencyMap"],[38,62,261,47],[39,2,261,47],[39,6,261,47,"_createClass"],[39,18,261,47],[39,21,261,47,"_interopDefault"],[39,36,261,47],[39,37,261,47,"_babelRuntimeHelpersCreateClass"],[39,68,261,47],[40,2,1,0],[41,2,1,0],[41,6,2,13,"CombatEngine"],[41,18,2,25],[42,4,9,2],[42,13,9,2,"CombatEngine"],[42,26,9,2],[42,28,9,16],[43,6,9,16],[43,10,9,16,"_classCallCheck"],[43,25,9,16],[43,26,9,16,"default"],[43,33,9,16],[43,41,9,16,"CombatEngine"],[43,53,9,16],[44,6,9,16],[44,11,3,10,"tickRate"],[44,19,3,18],[44,22,3,21],[44,24,3,23],[45,6,3,25],[46,6,3,25],[46,11,4,10,"tickInterval"],[46,23,4,22],[46,26,4,33],[46,30,4,37],[46,33,4,40],[46,37,4,44],[46,38,4,45,"tickRate"],[46,46,4,53],[47,6,4,55],[48,6,4,55],[48,11,5,10,"lastTick"],[48,19,5,18],[48,22,5,29],[48,23,5,30],[49,6,5,30],[49,11,6,10,"isRunning"],[49,20,6,19],[49,23,6,31],[49,28,6,36],[50,6,6,36],[50,11,7,10,"tickCallbacks"],[50,24,7,23],[50,27,7,45],[50,29,7,47],[51,6,10,4],[51,10,10,8],[51,11,10,9,"lastTick"],[51,19,10,17],[51,22,10,20,"Date"],[51,26,10,24],[51,27,10,25,"now"],[51,30,10,28],[51,31,10,29],[51,32,10,30],[52,4,11,2],[54,4,13,2],[55,4,13,2],[55,15,13,2,"_createClass"],[55,27,13,2],[55,28,13,2,"default"],[55,35,13,2],[55,37,13,2,"CombatEngine"],[55,49,13,2],[56,6,13,2,"key"],[56,9,13,2],[57,6,13,2,"value"],[57,11,13,2],[57,13,14,2],[57,22,14,2,"start"],[57,27,14,7,"start"],[57,28,14,7],[57,30,14,16],[58,8,15,4],[58,12,15,8],[58,16,15,12],[58,17,15,13,"isRunning"],[58,26,15,22],[58,28,15,24],[59,8,17,4],[59,12,17,8],[59,13,17,9,"isRunning"],[59,22,17,18],[59,25,17,21],[59,29,17,25],[60,8,18,4],[60,12,18,8],[60,13,18,9,"lastTick"],[60,21,18,17],[60,24,18,20,"Date"],[60,28,18,24],[60,29,18,25,"now"],[60,32,18,28],[60,33,18,29],[60,34,18,30],[61,8,19,4],[61,12,19,8],[61,13,19,9,"gameLoop"],[61,21,19,17],[61,22,19,18],[61,23,19,19],[62,6,20,2],[64,6,22,2],[65,4,22,2],[66,6,22,2,"key"],[66,9,22,2],[67,6,22,2,"value"],[67,11,22,2],[67,13,23,2],[67,22,23,2,"stop"],[67,26,23,6,"stop"],[67,27,23,6],[67,29,23,15],[68,8,24,4],[68,12,24,8],[68,13,24,9,"isRunning"],[68,22,24,18],[68,25,24,21],[68,30,24,26],[69,6,25,2],[71,6,27,2],[72,4,27,2],[73,6,27,2,"key"],[73,9,27,2],[74,6,27,2,"value"],[74,11,27,2],[74,13,28,2],[74,22,28,2,"addTickCallback"],[74,37,28,17,"addTickCallback"],[74,38,28,18,"callback"],[74,46,28,38],[74,48,28,46],[75,8,29,4],[75,12,29,8],[75,13,29,9,"tickCallbacks"],[75,26,29,22],[75,27,29,23,"push"],[75,31,29,27],[75,32,29,28,"callback"],[75,40,29,36],[75,41,29,37],[76,6,30,2],[78,6,32,2],[79,4,32,2],[80,6,32,2,"key"],[80,9,32,2],[81,6,32,2,"value"],[81,11,32,2],[81,13,33,2],[81,22,33,2,"removeTickCallback"],[81,40,33,20,"removeTickCallback"],[81,41,33,21,"callback"],[81,49,33,41],[81,51,33,49],[82,8,34,4],[82,12,34,10,"index"],[82,17,34,15],[82,20,34,18],[82,24,34,22],[82,25,34,23,"tickCallbacks"],[82,38,34,36],[82,39,34,37,"indexOf"],[82,46,34,44],[82,47,34,45,"callback"],[82,55,34,53],[82,56,34,54],[83,8,35,4],[83,12,35,8,"index"],[83,17,35,13],[83,20,35,16],[83,21,35,17],[83,22,35,18],[83,24,35,20],[84,10,36,6],[84,14,36,10],[84,15,36,11,"tickCallbacks"],[84,28,36,24],[84,29,36,25,"splice"],[84,35,36,31],[84,36,36,32,"index"],[84,41,36,37],[84,43,36,39],[84,44,36,40],[84,45,36,41],[85,8,37,4],[86,6,38,2],[88,6,40,2],[89,4,40,2],[90,6,40,2,"key"],[90,9,40,2],[91,6,40,2,"value"],[91,11,40,2],[91,13,41,2],[91,22,41,10,"gameLoop"],[91,30,41,18,"gameLoop"],[91,31,41,18],[91,33,41,27],[92,8,42,4],[92,12,42,8],[92,13,42,9],[92,17,42,13],[92,18,42,14,"isRunning"],[92,27,42,23],[92,29,42,25],[93,8,44,4],[93,12,44,10,"now"],[93,15,44,13],[93,18,44,16,"Date"],[93,22,44,20],[93,23,44,21,"now"],[93,26,44,24],[93,27,44,25],[93,28,44,26],[94,8,45,4],[94,12,45,10,"deltaTime"],[94,21,45,19],[94,24,45,22,"now"],[94,27,45,25],[94,30,45,28],[94,34,45,32],[94,35,45,33,"lastTick"],[94,43,45,41],[96,8,47,4],[97,8,48,4],[97,12,48,8,"deltaTime"],[97,21,48,17],[97,25,48,21],[97,29,48,25],[97,30,48,26,"tickInterval"],[97,42,48,38],[97,44,48,40],[98,10,49,6],[99,10,50,6],[99,14,50,10],[99,15,50,11,"tickCallbacks"],[99,28,50,24],[99,29,50,25,"forEach"],[99,36,50,32],[99,37,50,33,"callback"],[99,45,50,41],[99,49,50,45],[100,12,51,8],[100,16,51,12],[101,14,52,10,"callback"],[101,22,52,18],[101,23,52,19],[101,24,52,20],[102,12,53,8],[102,13,53,9],[102,14,53,10],[102,21,53,17,"error"],[102,26,53,22],[102,28,53,24],[103,14,54,10,"console"],[103,21,54,17],[103,22,54,18,"error"],[103,27,54,23],[103,28,54,24],[103,53,54,49],[103,55,54,51,"error"],[103,60,54,56],[103,61,54,57],[104,12,55,8],[105,10,56,6],[105,11,56,7],[105,12,56,8],[106,10,58,6],[106,14,58,10],[106,15,58,11,"lastTick"],[106,23,58,19],[106,26,58,22,"now"],[106,29,58,25],[107,8,59,4],[109,8,61,4],[110,8,62,4,"requestAnimationFrame"],[110,29,62,25],[110,30,62,26],[110,36,62,32],[110,40,62,36],[110,41,62,37,"gameLoop"],[110,49,62,45],[110,50,62,46],[110,51,62,47],[110,52,62,48],[111,6,63,2],[113,6,65,2],[114,4,65,2],[115,6,65,2,"key"],[115,9,65,2],[116,6,65,2,"value"],[116,11,65,2],[116,13,66,2],[116,22,66,2,"getCurrentTick"],[116,36,66,16,"getCurrentTick"],[116,37,66,16],[116,39,66,27],[117,8,67,4],[117,15,67,11,"Math"],[117,19,67,15],[117,20,67,16,"floor"],[117,25,67,21],[117,26,67,22],[117,30,67,26],[117,31,67,27,"lastTick"],[117,39,67,35],[117,42,67,38],[117,46,67,42],[117,47,67,43,"tickInterval"],[117,59,67,55],[117,60,67,56],[118,6,68,2],[120,6,70,2],[121,4,70,2],[122,6,70,2,"key"],[122,9,70,2],[123,6,70,2,"value"],[123,11,70,2],[123,13,71,2],[123,22,71,2,"secondsToTicks"],[123,36,71,16,"secondsToTicks"],[123,37,71,17,"seconds"],[123,44,71,32],[123,46,71,42],[124,8,72,4],[124,15,72,11,"Math"],[124,19,72,15],[124,20,72,16,"floor"],[124,25,72,21],[124,26,72,22,"seconds"],[124,33,72,29],[124,36,72,32],[124,40,72,36],[124,41,72,37,"tickRate"],[124,49,72,45],[124,50,72,46],[125,6,73,2],[127,6,75,2],[128,4,75,2],[129,6,75,2,"key"],[129,9,75,2],[130,6,75,2,"value"],[130,11,75,2],[130,13,76,2],[130,22,76,2,"ticksToSeconds"],[130,36,76,16,"ticksToSeconds"],[130,37,76,17,"ticks"],[130,42,76,30],[130,44,76,40],[131,8,77,4],[131,15,77,11,"ticks"],[131,20,77,16],[131,23,77,19],[131,27,77,23],[131,28,77,24,"tickRate"],[131,36,77,32],[132,6,78,2],[133,4,78,3],[134,2,78,3],[134,7,81,0],[135,2,81,0],[135,6,96,13,"DamageCalculator"],[135,22,96,29],[136,4,96,29],[136,13,96,29,"DamageCalculator"],[136,30,96,29],[137,6,96,29],[137,10,96,29,"_classCallCheck"],[137,25,96,29],[137,26,96,29,"default"],[137,33,96,29],[137,41,96,29,"DamageCalculator"],[137,57,96,29],[138,4,96,29],[139,4,96,29],[139,15,96,29,"_createClass"],[139,27,96,29],[139,28,96,29,"default"],[139,35,96,29],[139,37,96,29,"DamageCalculator"],[139,53,96,29],[140,6,96,29,"key"],[140,9,96,29],[141,6,96,29,"value"],[141,11,96,29],[142,6,97,2],[143,6,98,2],[143,15,98,9,"calculateDamage"],[143,30,98,24,"calculateDamage"],[143,31,99,4,"baseDamage"],[143,41,99,22],[143,43,100,4,"attackerStats"],[143,56,100,30],[143,58,101,4,"defenderStats"],[143,71,101,30],[143,73,102,18],[144,8,103,4],[144,12,103,8,"finalDamage"],[144,23,103,19],[144,26,103,22,"baseDamage"],[144,36,103,32],[145,8,104,4],[145,12,104,8,"isCritical"],[145,22,104,18],[145,25,104,21],[145,30,104,26],[147,8,106,4],[148,8,107,4,"finalDamage"],[148,19,107,15],[148,23,107,20],[148,24,107,21],[148,27,107,24,"attackerStats"],[148,40,107,37],[148,41,107,38,"attack"],[148,47,107,44],[148,50,107,47],[148,53,107,51],[150,8,109,4],[151,8,110,4],[151,12,110,8,"Math"],[151,16,110,12],[151,17,110,13,"random"],[151,23,110,19],[151,24,110,20],[151,25,110,21],[151,28,110,24,"attackerStats"],[151,41,110,37],[151,42,110,38,"critChance"],[151,52,110,48],[151,55,110,51],[151,58,110,54],[151,60,110,56],[152,10,111,6,"finalDamage"],[152,21,111,17],[152,25,111,22],[152,26,111,23],[152,29,111,26,"attackerStats"],[152,42,111,39],[152,43,111,40,"critDamage"],[152,53,111,50],[152,56,111,53],[152,59,111,57],[153,10,112,6,"isCritical"],[153,20,112,16],[153,23,112,19],[153,27,112,23],[154,8,113,4],[156,8,115,4],[157,8,116,4],[157,12,116,10,"damageReduction"],[157,27,116,25],[157,30,116,28,"defenderStats"],[157,43,116,41],[157,44,116,42,"defense"],[157,51,116,49],[157,55,116,53,"defenderStats"],[157,68,116,66],[157,69,116,67,"defense"],[157,76,116,74],[157,79,116,77],[157,82,116,80],[157,83,116,81],[158,8,117,4,"finalDamage"],[158,19,117,15],[158,23,117,20],[158,24,117,21],[158,27,117,24,"damageReduction"],[158,42,117,40],[160,8,119,4],[161,8,120,4,"finalDamage"],[161,19,120,15],[161,22,120,18,"Math"],[161,26,120,22],[161,27,120,23,"max"],[161,30,120,26],[161,31,120,27],[161,32,120,28],[161,34,120,30,"Math"],[161,38,120,34],[161,39,120,35,"floor"],[161,44,120,40],[161,45,120,41,"finalDamage"],[161,56,120,52],[161,57,120,53],[161,58,120,54],[162,8,122,4],[162,15,122,11],[163,10,123,6,"damage"],[163,16,123,12],[163,18,123,14,"finalDamage"],[163,29,123,25],[164,10,124,6,"isCritical"],[164,20,124,16],[165,10,125,6,"damageType"],[165,20,125,16],[165,22,125,18],[166,8,126,4],[166,9,126,5],[167,6,127,2],[169,6,129,2],[170,4,129,2],[171,6,129,2,"key"],[171,9,129,2],[172,6,129,2,"value"],[172,11,129,2],[172,13,130,2],[172,22,130,9,"calculateDoTDamage"],[172,40,130,27,"calculateDoTDamage"],[172,41,130,28,"effect"],[172,47,130,48],[172,49,130,50,"attackerStats"],[172,62,130,76],[172,64,130,86],[173,8,131,4],[173,12,131,8,"damage"],[173,18,131,14],[173,21,131,17,"effect"],[173,27,131,23],[173,28,131,24,"value"],[173,33,131,29],[174,8,132,4,"damage"],[174,14,132,10],[174,18,132,15],[174,19,132,16],[174,22,132,19,"attackerStats"],[174,35,132,32],[174,36,132,33,"attack"],[174,42,132,39],[174,45,132,42],[174,48,132,46],[175,8,133,4],[175,15,133,11,"Math"],[175,19,133,15],[175,20,133,16,"max"],[175,23,133,19],[175,24,133,20],[175,25,133,21],[175,27,133,23,"Math"],[175,31,133,27],[175,32,133,28,"floor"],[175,37,133,33],[175,38,133,34,"damage"],[175,44,133,40],[175,45,133,41],[175,46,133,42],[176,6,134,2],[177,4,134,3],[178,2,134,3],[178,7,137,0],[179,2,149,0],[180,2,149,0],[180,6,161,13,"StatusEffectManager"],[180,25,161,32],[181,4,161,32],[181,13,161,32,"StatusEffectManager"],[181,33,161,32],[182,6,161,32],[182,10,161,32,"_classCallCheck"],[182,25,161,32],[182,26,161,32,"default"],[182,33,161,32],[182,41,161,32,"StatusEffectManager"],[182,60,161,32],[183,6,161,32],[183,11,162,10,"effects"],[183,18,162,17],[183,21,162,49],[183,25,162,53,"Map"],[183,28,162,56],[183,29,162,57],[183,30,162,58],[184,4,162,58],[185,4,162,58],[185,15,162,58,"_createClass"],[185,27,162,58],[185,28,162,58,"default"],[185,35,162,58],[185,37,162,58,"StatusEffectManager"],[185,56,162,58],[186,6,162,58,"key"],[186,9,162,58],[187,6,162,58,"value"],[187,11,162,58],[188,6,164,2],[189,6,165,2],[189,15,165,2,"addEffect"],[189,24,165,11,"addEffect"],[189,25,165,12,"entityId"],[189,33,165,28],[189,35,165,30,"effect"],[189,41,165,50],[189,43,165,58],[190,8,166,4],[190,12,166,8],[190,13,166,9],[190,17,166,13],[190,18,166,14,"effects"],[190,25,166,21],[190,26,166,22,"has"],[190,29,166,25],[190,30,166,26,"entityId"],[190,38,166,34],[190,39,166,35],[190,41,166,37],[191,10,167,6],[191,14,167,10],[191,15,167,11,"effects"],[191,22,167,18],[191,23,167,19,"set"],[191,26,167,22],[191,27,167,23,"entityId"],[191,35,167,31],[191,37,167,33],[191,39,167,35],[191,40,167,36],[192,8,168,4],[193,8,170,4],[193,12,170,10,"entityEffects"],[193,25,170,23],[193,28,170,26],[193,32,170,30],[193,33,170,31,"effects"],[193,40,170,38],[193,41,170,39,"get"],[193,44,170,42],[193,45,170,43,"entityId"],[193,53,170,51],[193,54,170,53],[195,8,172,4],[196,8,173,4],[196,12,173,10,"existingIndex"],[196,25,173,23],[196,28,173,26,"entityEffects"],[196,41,173,39],[196,42,173,40,"findIndex"],[196,51,173,49],[196,52,173,50,"e"],[196,53,173,51],[196,57,173,55,"e"],[196,58,173,56],[196,59,173,57,"id"],[196,61,173,59],[196,66,173,64,"effect"],[196,72,173,70],[196,73,173,71,"id"],[196,75,173,73],[196,76,173,74],[197,8,175,4],[197,12,175,8,"existingIndex"],[197,25,175,21],[197,29,175,25],[197,30,175,26],[197,32,175,28],[198,10,176,6],[198,14,176,12,"existing"],[198,22,176,20],[198,25,176,23,"entityEffects"],[198,38,176,36],[198,39,176,37,"existingIndex"],[198,52,176,50],[198,53,176,51],[199,10,177,6],[199,14,177,10,"effect"],[199,20,177,16],[199,21,177,17,"stackable"],[199,30,177,26],[199,34,177,30,"existing"],[199,42,177,38],[199,43,177,39,"stacks"],[199,49,177,45],[199,53,177,49,"existing"],[199,61,177,57],[199,62,177,58,"stacks"],[199,68,177,64],[199,71,177,67],[199,73,177,69],[199,75,177,71],[200,12,178,8,"existing"],[200,20,178,16],[200,21,178,17,"stacks"],[200,27,178,23],[200,29,178,25],[201,12,179,8,"existing"],[201,20,179,16],[201,21,179,17,"remainingTicks"],[201,35,179,31],[201,38,179,34,"Math"],[201,42,179,38],[201,43,179,39,"max"],[201,46,179,42],[201,47,179,43,"existing"],[201,55,179,51],[201,56,179,52,"remainingTicks"],[201,70,179,66],[201,72,179,68,"effect"],[201,78,179,74],[201,79,179,75,"remainingTicks"],[201,93,179,89],[201,94,179,90],[202,10,180,6],[202,11,180,7],[202,17,180,13],[203,12,181,8],[204,12,182,8,"entityEffects"],[204,25,182,21],[204,26,182,22,"existingIndex"],[204,39,182,35],[204,40,182,36],[204,43,182,39,"effect"],[204,49,182,45],[205,10,183,6],[206,8,184,4],[206,9,184,5],[206,15,184,11],[207,10,185,6,"entityEffects"],[207,23,185,19],[207,24,185,20,"push"],[207,28,185,24],[207,29,185,25,"effect"],[207,35,185,31],[207,36,185,32],[208,8,186,4],[209,6,187,2],[211,6,189,2],[212,4,189,2],[213,6,189,2,"key"],[213,9,189,2],[214,6,189,2,"value"],[214,11,189,2],[214,13,190,2],[214,22,190,2,"processTick"],[214,33,190,13,"processTick"],[214,34,190,14,"currentTick"],[214,45,190,33],[214,47,190,64],[215,8,191,4],[215,12,191,10,"tickResults"],[215,23,191,21],[215,26,191,24],[215,30,191,28,"Map"],[215,33,191,31],[215,34,191,56],[215,35,191,57],[216,8,193,4],[216,12,193,8],[216,13,193,9,"effects"],[216,20,193,16],[216,21,193,17,"forEach"],[216,28,193,24],[216,29,193,25],[216,30,193,26,"entityEffects"],[216,43,193,39],[216,45,193,41,"entityId"],[216,53,193,49],[216,58,193,54],[217,10,194,6],[217,14,194,12,"results"],[217,21,194,35],[217,24,194,38],[217,26,194,40],[219,10,196,6],[220,10,197,6],[220,15,197,11],[220,19,197,15,"i"],[220,20,197,16],[220,23,197,19,"entityEffects"],[220,36,197,32],[220,37,197,33,"length"],[220,43,197,39],[220,46,197,42],[220,47,197,43],[220,49,197,45,"i"],[220,50,197,46],[220,54,197,50],[220,55,197,51],[220,57,197,53,"i"],[220,58,197,54],[220,60,197,56],[220,62,197,58],[221,12,198,8],[221,16,198,14,"effect"],[221,22,198,20],[221,25,198,23,"entityEffects"],[221,38,198,36],[221,39,198,37,"i"],[221,40,198,38],[221,41,198,39],[223,12,200,8],[224,12,201,8],[224,16,201,12,"currentTick"],[224,27,201,23],[224,31,201,27,"effect"],[224,37,201,33],[224,38,201,34,"lastTick"],[224,46,201,42],[224,49,201,45,"effect"],[224,55,201,51],[224,56,201,52,"tickInterval"],[224,68,201,64],[224,70,201,66],[225,14,202,10],[226,14,203,10],[226,18,203,16,"result"],[226,24,203,22],[226,27,203,25],[226,31,203,29],[226,32,203,30,"applyEffect"],[226,43,203,41],[226,44,203,42,"effect"],[226,50,203,48],[226,51,203,49],[227,14,204,10],[227,18,204,14,"result"],[227,24,204,20],[227,26,204,22],[228,16,205,12,"results"],[228,23,205,19],[228,24,205,20,"push"],[228,28,205,24],[228,29,205,25,"result"],[228,35,205,31],[228,36,205,32],[229,14,206,10],[230,14,208,10,"effect"],[230,20,208,16],[230,21,208,17,"lastTick"],[230,29,208,25],[230,32,208,28,"currentTick"],[230,43,208,39],[231,14,209,10,"effect"],[231,20,209,16],[231,21,209,17,"remainingTicks"],[231,35,209,31],[231,37,209,33],[232,12,210,8],[234,12,212,8],[235,12,213,8],[235,16,213,12,"effect"],[235,22,213,18],[235,23,213,19,"remainingTicks"],[235,37,213,33],[235,41,213,37],[235,42,213,38],[235,44,213,40],[236,14,214,10,"entityEffects"],[236,27,214,23],[236,28,214,24,"splice"],[236,34,214,30],[236,35,214,31,"i"],[236,36,214,32],[236,38,214,34],[236,39,214,35],[236,40,214,36],[237,12,215,8],[238,10,216,6],[239,10,218,6],[239,14,218,10,"results"],[239,21,218,17],[239,22,218,18,"length"],[239,28,218,24],[239,31,218,27],[239,32,218,28],[239,34,218,30],[240,12,219,8,"tickResults"],[240,23,219,19],[240,24,219,20,"set"],[240,27,219,23],[240,28,219,24,"entityId"],[240,36,219,32],[240,38,219,34,"results"],[240,45,219,41],[240,46,219,42],[241,10,220,6],[242,8,221,4],[242,9,221,5],[242,10,221,6],[243,8,223,4],[243,15,223,11,"tickResults"],[243,26,223,22],[244,6,224,2],[246,6,226,2],[247,4,226,2],[248,6,226,2,"key"],[248,9,226,2],[249,6,226,2,"value"],[249,11,226,2],[249,13,227,2],[249,22,227,10,"applyEffect"],[249,33,227,21,"applyEffect"],[249,34,227,22,"effect"],[249,40,227,42],[249,42,227,65],[250,8,228,4],[250,16,228,12,"effect"],[250,22,228,18],[250,23,228,19,"type"],[250,27,228,23],[251,10,229,6],[251,15,229,11],[251,20,229,16],[252,12,230,8],[252,16,230,14,"stacks"],[252,22,230,20],[252,25,230,23,"effect"],[252,31,230,29],[252,32,230,30,"stacks"],[252,38,230,36],[252,42,230,40],[252,43,230,41],[253,12,231,8],[253,19,231,15],[254,14,232,10,"damage"],[254,20,232,16],[254,22,232,18,"effect"],[254,28,232,24],[254,29,232,25,"value"],[254,34,232,30],[254,37,232,33,"stacks"],[254,43,232,39],[255,14,233,10,"isCritical"],[255,24,233,20],[255,26,233,22],[255,31,233,27],[256,14,234,10,"damageType"],[256,24,234,20],[256,26,234,22],[257,12,235,8],[257,13,235,9],[258,10,237,6],[258,15,237,11],[258,21,237,17],[259,12,238,8],[259,19,238,15],[260,14,239,10,"damage"],[260,20,239,16],[260,22,239,18],[260,23,239,19,"effect"],[260,29,239,25],[260,30,239,26,"value"],[260,35,239,31],[261,14,239,33],[262,14,240,10,"isCritical"],[262,24,240,20],[262,26,240,22],[262,31,240,27],[263,14,241,10,"damageType"],[263,24,241,20],[263,26,241,22],[264,12,242,8],[264,13,242,9],[265,10,244,6],[266,12,245,8],[266,19,245,15],[266,23,245,19],[267,8,246,4],[268,6,247,2],[270,6,249,2],[271,4,249,2],[272,6,249,2,"key"],[272,9,249,2],[273,6,249,2,"value"],[273,11,249,2],[273,13,250,2],[273,22,250,2,"getEffects"],[273,32,250,12,"getEffects"],[273,33,250,13,"entityId"],[273,41,250,29],[273,43,250,47],[274,8,251,4],[274,15,251,11],[274,19,251,15],[274,20,251,16,"effects"],[274,27,251,23],[274,28,251,24,"get"],[274,31,251,27],[274,32,251,28,"entityId"],[274,40,251,36],[274,41,251,37],[274,45,251,41],[274,47,251,43],[275,6,252,2],[277,6,254,2],[278,4,254,2],[279,6,254,2,"key"],[279,9,254,2],[280,6,254,2,"value"],[280,11,254,2],[280,13,255,2],[280,22,255,2,"clearEffects"],[280,34,255,14,"clearEffects"],[280,35,255,15,"entityId"],[280,43,255,31],[280,45,255,39],[281,8,256,4],[281,12,256,8],[281,13,256,9,"effects"],[281,20,256,16],[281,21,256,17,"delete"],[281,27,256,23],[281,28,256,24,"entityId"],[281,36,256,32],[281,37,256,33],[282,6,257,2],[283,4,257,3],[284,2,257,3],[284,7,260,0],[285,2,261,7],[285,6,261,13,"combatEngine"],[285,18,261,25],[285,21,261,28],[285,25,261,32,"CombatEngine"],[285,37,261,44],[285,38,261,45],[285,39,261,46],[286,0,261,47],[286,3]],"functionMap":{"names":["<global>","CombatEngine","constructor","start","stop","addTickCallback","removeTickCallback","gameLoop","tickCallbacks.forEach$argument_0","requestAnimationFrame$argument_0","getCurrentTick","secondsToTicks","ticksToSeconds","DamageCalculator","DamageCalculator.calculateDamage","DamageCalculator.calculateDoTDamage","StatusEffectManager","StatusEffectManager#addEffect","entityEffects.findIndex$argument_0","StatusEffectManager#processTick","effects.forEach$argument_0","StatusEffectManager#applyEffect","StatusEffectManager#getEffects","StatusEffectManager#clearEffects"],"mappings":"AAA;OCC;ECO;GDE;EEG;GFM;EGG;GHE;EIG;GJE;EKG;GLK;EMG;iCCS;ODM;0BEM,qBF;GNC;ESG;GTE;EUG;GVE;EWG;GXE;CDC;OaiB;ECE;GD6B;EEG;GFI;CbC;OgB0B;ECI;kDCQ,uBD;GDc;EGG;yBCG;KD4B;GHG;EKG;GLoB;EMG;GNE;EOG;GPE;ChBC"},"hasCjsExports":false},"type":"js/module"}]}