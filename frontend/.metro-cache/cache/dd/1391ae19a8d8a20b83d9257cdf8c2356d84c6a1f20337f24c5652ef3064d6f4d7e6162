{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      const xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      const goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    // CRITICAL FIX: Use React ref to capture dead enemies for XP processing to avoid closure issues\n    const deadEnemiesRef = (0, _react.useRef)([]);\n    const handleCombatTick = React.default.useCallback(() => {\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      setCombatState(prev => {\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        const allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Use React ref to store dead enemies to avoid closure scoping issues\n        deadEnemiesRef.current = [...allDeadEnemies]; // Store in ref for XP processing\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        const currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            const animationDuration = 750; // 750ms death fade\n            const isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      });\n\n      // BULK XP PROCESSING - Use ref to get dead enemies (FIXED: Closure scoping issue)\n      const deadEnemiesToProcess = deadEnemiesRef.current; // Get from ref instead of closure variable\n      if (deadEnemiesToProcess.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        const unprocessedEnemies = deadEnemiesToProcess; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG deadEnemiesToProcess xpAwarded status:`, deadEnemiesToProcess.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${deadEnemiesToProcess.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          let totalXP = 0;\n          let totalGold = 0;\n          const zoneKills = [];\n          const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          const goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier;\n            totalGold += 10 * goldMultiplier;\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              const wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 195,\n      y: 400\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        const ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        const ninjaY = currentNinjaPosition.y + 20;\n        const aoeRadius = ability.stats.aoeRadius;\n        const enemiesInRange = state.enemies.filter(enemy => {\n          const enemyX = enemy.position.x + 17.5; // Center of enemy\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = (0, _react.useCallback)(slotIndex => {\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, [combatState.abilityManager, combatState.enemies]);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      const tickInterval = Platform.default.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${Platform.default.OS}`);\n      const combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      const newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            const timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 5\n    }, this);\n  };\n});","lineCount":1152,"map":[[13,2,96,0,"Object"],[13,8,96,0],[13,9,96,0,"defineProperty"],[13,23,96,0],[13,24,96,0,"exports"],[13,31,96,0],[14,4,96,0,"enumerable"],[14,14,96,0],[15,4,96,0,"get"],[15,7,96,0],[15,18,96,0,"get"],[15,19,96,0],[16,6,96,0],[16,13,96,0,"useCombat"],[16,22,96,0],[17,4,96,0],[18,2,96,0],[19,2,106,0,"Object"],[19,8,106,0],[19,9,106,0,"defineProperty"],[19,23,106,0],[19,24,106,0,"exports"],[19,31,106,0],[20,4,106,0,"enumerable"],[20,14,106,0],[21,4,106,0,"get"],[21,7,106,0],[21,18,106,0,"get"],[21,19,106,0],[22,6,106,0],[22,13,106,0,"CombatProvider"],[22,27,106,0],[23,4,106,0],[24,2,106,0],[25,2,1,0],[25,6,1,0,"_react"],[25,12,1,0],[25,15,1,0,"require"],[25,22,1,0],[25,23,1,0,"_dependencyMap"],[25,37,1,0],[26,2,1,0],[26,6,1,0,"React"],[26,11,1,0],[26,14,1,0,"_interopDefault"],[26,29,1,0],[26,30,1,0,"_react"],[26,36,1,0],[27,2,1,110],[27,6,1,110,"_reactNativeWebDistExportsPlatform"],[27,40,1,110],[27,43,1,110,"require"],[27,50,1,110],[27,51,1,110,"_dependencyMap"],[27,65,1,110],[28,2,1,110],[28,6,1,110,"Platform"],[28,14,1,110],[28,17,1,110,"_interopDefault"],[28,32,1,110],[28,33,1,110,"_reactNativeWebDistExportsPlatform"],[28,67,1,110],[29,2,3,0],[29,6,3,0,"_engineCombatEngine"],[29,25,3,0],[29,28,3,0,"require"],[29,35,3,0],[29,36,3,0,"_dependencyMap"],[29,50,3,0],[30,2,4,0],[30,6,4,0,"_typesAbilityTypes"],[30,24,4,0],[30,27,4,0,"require"],[30,34,4,0],[30,35,4,0,"_dependencyMap"],[30,49,4,0],[31,2,5,0],[31,6,5,0,"_GameContext"],[31,18,5,0],[31,21,5,0,"require"],[31,28,5,0],[31,29,5,0,"_dependencyMap"],[31,43,5,0],[32,2,6,0],[32,6,6,0,"_ZoneContext"],[32,18,6,0],[32,21,6,0,"require"],[32,28,6,0],[32,29,6,0,"_dependencyMap"],[32,43,6,0],[33,2,6,40],[33,6,6,40,"_reactJsxDevRuntime"],[33,25,6,40],[33,28,6,40,"require"],[33,35,6,40],[33,36,6,40,"_dependencyMap"],[33,50,6,40],[34,2,94,0],[34,8,94,6,"CombatContext"],[34,21,94,19],[34,37,94,22],[34,41,94,22,"createContext"],[34,47,94,35],[34,48,94,35,"createContext"],[34,61,94,35],[34,63,94,67,"undefined"],[34,72,94,76],[34,73,94,77],[35,2,96,7],[35,8,96,13,"useCombat"],[35,17,96,22],[35,20,96,25,"useCombat"],[35,21,96,25],[35,26,96,50],[36,4,97,2],[36,10,97,8,"context"],[36,17,97,15],[36,20,97,18],[36,24,97,18,"useContext"],[36,30,97,28],[36,31,97,28,"useContext"],[36,41,97,28],[36,43,97,29,"CombatContext"],[36,56,97,42],[36,57,97,43],[37,4,98,2],[37,8,98,6],[37,9,98,7,"context"],[37,16,98,14],[37,18,98,16],[38,6,99,4],[38,12,99,10],[38,16,99,14,"Error"],[38,21,99,19],[38,22,99,20],[38,70,99,68],[38,71,99,69],[39,4,100,2],[40,4,101,2],[40,11,101,9,"context"],[40,18,101,16],[41,2,102,0],[41,3,102,1],[42,2,104,0],[42,6,104,4,"enemyCounter"],[42,18,104,16],[42,21,104,19],[42,22,104,20],[42,23,104,21],[42,24,104,22],[44,2,106,7],[44,8,106,13,"CombatProvider"],[44,22,106,27],[44,25,106,30,"CombatProvider"],[44,26,106,31],[45,4,106,33,"children"],[46,2,106,67],[46,3,106,68],[46,8,106,73],[47,4,107,2],[47,10,107,8,"game"],[47,14,107,12],[47,17,107,15],[47,21,107,15,"useGame"],[47,33,107,22],[47,34,107,22,"useGame"],[47,41,107,22],[47,43,107,23],[47,44,107,24],[48,4,108,2],[48,10,108,8],[49,6,108,10,"currentZone"],[49,17,108,21],[50,6,108,23,"currentZoneLevel"],[50,22,108,39],[51,6,108,41,"recordEnemyKill"],[51,21,108,56],[52,6,108,58,"spawnZoneEnemy"],[53,4,108,73],[53,5,108,74],[53,8,108,77],[53,12,108,77,"useZone"],[53,24,108,84],[53,25,108,84,"useZone"],[53,32,108,84],[53,34,108,85],[53,35,108,86],[55,4,110,2],[56,4,111,2],[56,10,111,8,"initialCombatState"],[56,28,111,39],[56,31,111,42],[57,6,112,4,"isInCombat"],[57,16,112,14],[57,18,112,16],[57,23,112,21],[58,6,113,4,"currentTick"],[58,17,113,15],[58,19,113,17],[58,20,113,18],[59,6,114,4,"enemies"],[59,13,114,11],[59,15,114,13],[59,17,114,15],[60,6,115,4,"abilityManager"],[60,20,115,18],[60,22,115,20],[60,26,115,24,"AbilityManager"],[60,44,115,38],[60,45,115,38,"AbilityManager"],[60,59,115,38],[60,60,115,39],[60,61,115,40],[61,6,116,4,"statusEffects"],[61,19,116,17],[61,21,116,19],[61,25,116,23,"StatusEffectManager"],[61,44,116,42],[61,45,116,42,"StatusEffectManager"],[61,64,116,42],[61,65,116,43],[61,66,116,44],[62,6,117,4,"playerStats"],[62,17,117,15],[62,19,117,17],[63,8,118,6,"attack"],[63,14,118,12],[63,16,118,14],[63,18,118,16],[64,8,118,18],[65,8,119,6,"defense"],[65,15,119,13],[65,17,119,15],[65,18,119,16],[66,8,120,6,"health"],[66,14,120,12],[66,16,120,14],[66,19,120,17],[67,8,121,6,"maxHealth"],[67,17,121,15],[67,19,121,17],[67,22,121,20],[68,8,122,6,"critChance"],[68,18,122,16],[68,20,122,18],[68,21,122,19],[69,8,123,6,"critDamage"],[69,18,123,16],[69,20,123,18],[69,23,123,21],[70,8,124,6,"cooldownReduction"],[70,25,124,23],[70,27,124,25],[71,6,125,4],[72,4,126,2],[72,5,126,3],[73,4,128,2],[73,10,128,8],[73,11,128,9,"combatState"],[73,22,128,20],[73,24,128,22,"setCombatState"],[73,38,128,36],[73,39,128,37],[73,42,128,40],[73,46,128,40,"useState"],[73,52,128,48],[73,53,128,48,"useState"],[73,61,128,48],[73,63,128,62,"initialCombatState"],[73,81,128,80],[73,82,128,81],[75,4,130,2],[76,4,131,2],[76,8,131,2,"useEffect"],[76,14,131,11],[76,15,131,11,"useEffect"],[76,24,131,11],[76,26,131,12],[76,32,131,18],[77,6,132,4],[77,10,132,8,"game"],[77,14,132,12],[77,15,132,13,"gameState"],[77,24,132,22],[77,25,132,23,"abilityData"],[77,36,132,34],[77,40,132,38,"combatState"],[77,51,132,49],[77,52,132,50,"abilityManager"],[77,66,132,64],[77,68,132,66],[78,8,133,6,"console"],[78,15,133,13],[78,16,133,14,"log"],[78,19,133,17],[78,20,133,18],[78,68,133,66],[78,70,133,68,"game"],[78,74,133,72],[78,75,133,73,"gameState"],[78,84,133,82],[78,85,133,83,"abilityData"],[78,96,133,94],[78,97,133,95],[79,8,134,6,"combatState"],[79,19,134,17],[79,20,134,18,"abilityManager"],[79,34,134,32],[79,35,134,33,"restoreFromSaveData"],[79,54,134,52],[79,55,134,53,"game"],[79,59,134,57],[79,60,134,58,"gameState"],[79,69,134,67],[79,70,134,68,"abilityData"],[79,81,134,79],[79,82,134,80],[81,8,136,6],[82,8,137,6,"setCombatState"],[82,22,137,20],[82,23,137,21,"prev"],[82,27,137,25],[82,32,137,30],[83,10,137,32],[83,13,137,35,"prev"],[84,8,137,40],[84,9,137,41],[84,10,137,42],[84,11,137,43],[85,6,138,4],[86,4,139,2],[86,5,139,3],[86,7,139,5],[86,8,139,6,"game"],[86,12,139,10],[86,13,139,11,"gameState"],[86,22,139,20],[86,23,139,21,"abilityData"],[86,34,139,32],[86,36,139,34,"combatState"],[86,47,139,45],[86,48,139,46,"abilityManager"],[86,62,139,60],[86,63,139,61],[86,64,139,62],[88,4,141,2],[89,4,142,2],[89,8,142,2,"useEffect"],[89,14,142,11],[89,15,142,11,"useEffect"],[89,24,142,11],[89,26,142,12],[89,32,142,18],[90,6,143,4],[90,10,143,8,"game"],[90,14,143,12],[90,15,143,13,"gameState"],[90,24,143,22],[90,25,143,23,"ninja"],[90,30,143,28],[90,32,143,30],[91,8,144,6],[91,14,144,12,"effectiveStats"],[91,28,144,26],[91,31,144,29,"game"],[91,35,144,33],[91,36,144,34,"getEffectiveStats"],[91,53,144,51],[91,54,144,52],[91,55,144,53],[92,8,146,6,"setCombatState"],[92,22,146,20],[92,23,146,21,"prev"],[92,27,146,25],[92,31,146,29],[93,10,147,8],[94,10,148,8],[94,14,148,12,"prev"],[94,18,148,16],[94,19,148,17,"playerStats"],[94,30,148,28],[94,31,148,29,"maxHealth"],[94,40,148,38],[94,45,148,43],[94,48,148,46],[94,52,148,50,"prev"],[94,56,148,54],[94,57,148,55,"playerStats"],[94,68,148,66],[94,69,148,67,"attack"],[94,75,148,73],[94,80,148,78],[94,82,148,80],[94,84,148,82],[95,12,149,10,"console"],[95,19,149,17],[95,20,149,18,"log"],[95,23,149,21],[95,24,149,22],[95,60,149,58,"effectiveStats"],[95,74,149,72],[95,75,149,73,"health"],[95,81,149,79],[95,93,149,91,"effectiveStats"],[95,107,149,105],[95,108,149,106,"attack"],[95,114,149,112],[95,127,149,125,"effectiveStats"],[95,141,149,139],[95,142,149,140,"defense"],[95,149,149,147],[95,151,149,149],[95,152,149,150],[96,12,151,10],[96,19,151,17],[97,14,152,12],[97,17,152,15,"prev"],[97,21,152,19],[98,14,153,12,"playerStats"],[98,25,153,23],[98,27,153,25],[99,16,154,14,"attack"],[99,22,154,20],[99,24,154,22,"effectiveStats"],[99,38,154,36],[99,39,154,37,"attack"],[99,45,154,43],[100,16,155,14,"defense"],[100,23,155,21],[100,25,155,23,"effectiveStats"],[100,39,155,37],[100,40,155,38,"defense"],[100,47,155,45],[101,16,156,14,"health"],[101,22,156,20],[101,24,156,22,"effectiveStats"],[101,38,156,36],[101,39,156,37,"health"],[101,45,156,43],[102,16,156,45],[103,16,157,14,"maxHealth"],[103,25,157,23],[103,27,157,25,"effectiveStats"],[103,41,157,39],[103,42,157,40,"health"],[103,48,157,46],[104,16,158,14,"critChance"],[104,26,158,24],[104,28,158,26,"effectiveStats"],[104,42,158,40],[104,43,158,41,"critChance"],[104,53,158,51],[104,57,158,55],[104,58,158,56],[105,16,159,14,"critDamage"],[105,26,159,24],[105,28,159,26,"effectiveStats"],[105,42,159,40],[105,43,159,41,"critDamage"],[105,53,159,51],[105,57,159,55],[105,60,159,58],[106,16,160,14,"cooldownReduction"],[106,33,160,31],[106,35,160,33,"effectiveStats"],[106,49,160,47],[106,50,160,48,"cooldownReduction"],[106,67,160,65],[106,71,160,69],[107,14,161,12],[108,12,162,10],[108,13,162,11],[109,10,163,8],[110,10,164,8],[110,17,164,15,"prev"],[110,21,164,19],[111,8,165,6],[111,9,165,7],[111,10,165,8],[112,6,166,4],[113,4,167,2],[113,5,167,3],[113,7,167,5],[113,8,167,6,"game"],[113,12,167,10],[113,13,167,11,"gameState"],[113,22,167,20],[113,23,167,21,"ninja"],[113,28,167,26],[113,29,167,27],[113,30,167,28],[114,4,169,2],[114,10,169,8],[114,11,169,9,"projectiles"],[114,22,169,20],[114,24,169,22,"setProjectiles"],[114,38,169,36],[114,39,169,37],[114,42,169,40],[114,46,169,40,"useState"],[114,52,169,48],[114,53,169,48,"useState"],[114,61,169,48],[114,63,169,69],[114,65,169,71],[114,66,169,72],[115,4,170,2],[115,10,170,8],[115,11,170,9,"lastExplosionTime"],[115,28,170,26],[115,30,170,28,"setLastExplosionTime"],[115,50,170,48],[115,51,170,49],[115,54,170,52],[115,58,170,52,"useState"],[115,64,170,60],[115,65,170,60,"useState"],[115,73,170,60],[115,75,170,69],[115,76,170,70],[115,77,170,71],[116,4,171,2],[117,4,172,2],[119,4,174,2],[120,4,175,2],[120,10,175,8,"handleEnemyKill"],[120,25,175,23],[120,28,175,26],[120,32,175,26,"useCallback"],[120,38,175,37],[120,39,175,37,"useCallback"],[120,50,175,37],[120,52,175,39,"enemy"],[120,57,175,57],[120,61,175,62],[121,6,176,4],[122,6,177,4],[122,12,177,10,"xpReward"],[122,20,177,18],[122,23,177,21],[122,24,177,22,"enemy"],[122,29,177,27],[122,30,177,28,"zoneXP"],[122,36,177,34],[122,40,177,38],[122,41,177,39],[122,46,177,44,"game"],[122,50,177,48],[122,51,177,49,"gameState"],[122,60,177,58],[122,61,177,59,"subscriptionBenefits"],[122,81,177,79],[122,83,177,81,"xp_multiplier"],[122,96,177,94],[122,100,177,98],[122,103,177,101],[122,104,177,102],[123,6,178,4],[123,12,178,10,"goldReward"],[123,22,178,20],[123,25,178,23],[123,27,178,25],[123,31,178,29,"game"],[123,35,178,33],[123,36,178,34,"gameState"],[123,45,178,43],[123,46,178,44,"subscriptionBenefits"],[123,66,178,64],[123,68,178,66,"drop_multiplier"],[123,83,178,81],[123,87,178,85],[123,90,178,88],[123,91,178,89],[124,6,180,4,"console"],[124,13,180,11],[124,14,180,12,"log"],[124,17,180,15],[124,18,180,16],[124,46,180,44,"xpReward"],[124,54,180,52],[124,65,180,63,"goldReward"],[124,75,180,73],[124,88,180,86,"enemy"],[124,93,180,91],[124,94,180,92,"name"],[124,98,180,96],[124,100,180,98],[124,101,180,99],[126,6,182,4],[127,6,183,4,"game"],[127,10,183,8],[127,11,183,9,"updateNinja"],[127,22,183,20],[127,23,183,21,"prev"],[127,27,183,25],[127,32,183,30],[128,8,184,6,"experience"],[128,18,184,16],[128,20,184,18,"prev"],[128,24,184,22],[128,25,184,23,"experience"],[128,35,184,33],[128,38,184,36,"xpReward"],[128,46,184,44],[129,8,185,6,"gold"],[129,12,185,10],[129,14,185,12,"prev"],[129,18,185,16],[129,19,185,17,"gold"],[129,23,185,21],[129,26,185,24,"goldReward"],[130,6,186,4],[130,7,186,5],[130,8,186,6],[130,9,186,7],[132,6,188,4],[133,6,189,4,"setCombatState"],[133,20,189,18],[133,21,189,19,"prevState"],[133,30,189,28],[133,35,189,33],[134,8,190,6],[134,11,190,9,"prevState"],[134,20,190,18],[135,8,191,6,"enemies"],[135,15,191,13],[135,17,191,15,"prevState"],[135,26,191,24],[135,27,191,25,"enemies"],[135,34,191,32],[135,35,191,33,"map"],[135,38,191,36],[135,39,191,37,"e"],[135,40,191,38],[135,44,192,8,"e"],[135,45,192,9],[135,46,192,10,"id"],[135,48,192,12],[135,53,192,17,"enemy"],[135,58,192,22],[135,59,192,23,"id"],[135,61,192,25],[135,64,192,28],[136,10,192,30],[136,13,192,33,"e"],[136,14,192,34],[137,10,192,36,"xpAwarded"],[137,19,192,45],[137,21,192,47],[138,8,192,52],[138,9,192,53],[138,12,192,56,"e"],[138,13,193,6],[139,6,194,4],[139,7,194,5],[139,8,194,6],[139,9,194,7],[141,6,196,4],[142,6,197,4],[142,10,197,8,"enemy"],[142,15,197,13],[142,16,197,14,"zoneTypeId"],[142,26,197,24],[142,28,197,26],[143,8,198,6,"recordEnemyKill"],[143,23,198,21],[143,24,198,22],[144,10,199,8,"id"],[144,12,199,10],[144,14,199,12,"enemy"],[144,19,199,17],[144,20,199,18,"id"],[144,22,199,20],[145,10,200,8,"typeId"],[145,16,200,14],[145,18,200,16,"enemy"],[145,23,200,21],[145,24,200,22,"zoneTypeId"],[145,34,200,32],[146,10,201,8,"name"],[146,14,201,12],[146,16,201,14,"enemy"],[146,21,201,19],[146,22,201,20,"name"],[146,26,201,24],[147,10,202,8,"icon"],[147,14,202,12],[147,16,202,14],[147,20,202,18],[148,10,203,8,"hp"],[148,12,203,10],[148,14,203,12],[148,15,203,13],[149,10,204,8,"maxHP"],[149,15,204,13],[149,17,204,15,"enemy"],[149,22,204,20],[149,23,204,21,"maxHealth"],[149,32,204,30],[150,10,205,8,"attack"],[150,16,205,14],[150,18,205,16,"enemy"],[150,23,205,21],[150,24,205,22,"stats"],[150,29,205,27],[150,30,205,28,"attack"],[150,36,205,34],[151,10,206,8,"xp"],[151,12,206,10],[151,14,206,12,"enemy"],[151,19,206,17],[151,20,206,18,"zoneXP"],[151,26,206,24],[151,30,206,28],[151,31,206,29],[152,10,207,8,"position"],[152,18,207,16],[152,20,207,18,"enemy"],[152,25,207,23],[152,26,207,24,"position"],[153,8,208,6],[153,9,208,7],[153,10,208,8],[154,6,209,4],[155,4,210,2],[155,5,210,3],[155,7,210,5],[155,8,210,6,"game"],[155,12,210,10],[155,13,210,11,"updateNinja"],[155,24,210,22],[155,26,210,24,"game"],[155,30,210,28],[155,31,210,29,"gameState"],[155,40,210,38],[155,41,210,39,"subscriptionBenefits"],[155,61,210,59],[155,63,210,61,"recordEnemyKill"],[155,78,210,76],[155,79,210,77],[155,80,210,78],[157,4,212,2],[158,4,213,2],[159,4,214,2],[160,4,215,2],[160,10,215,8,"deadEnemiesRef"],[160,24,215,22],[160,27,215,25],[160,31,215,25,"useRef"],[160,37,215,31],[160,38,215,31,"useRef"],[160,44,215,31],[160,46,215,47],[160,48,215,49],[160,49,215,50],[161,4,217,2],[161,10,217,8,"handleCombatTick"],[161,26,217,24],[161,29,217,27,"React"],[161,34,217,32],[161,35,217,32,"default"],[161,42,217,32],[161,43,217,33,"useCallback"],[161,54,217,44],[161,55,217,45],[161,61,217,51],[162,6,218,4,"console"],[162,13,218,11],[162,14,218,12,"log"],[162,17,218,15],[162,18,218,16],[162,87,218,85],[162,88,218,86],[163,6,219,4,"console"],[163,13,219,11],[163,14,219,12,"log"],[163,17,219,15],[163,18,219,16],[163,65,219,63,"isManualControlActive"],[163,86,219,84],[163,99,219,97,"game"],[163,103,219,101],[163,104,219,102,"gameState"],[163,113,219,111],[163,114,219,112,"isAlive"],[163,121,219,119],[163,123,219,121],[163,124,219,122],[164,6,221,4,"setCombatState"],[164,20,221,18],[164,21,221,19,"prev"],[164,25,221,23],[164,29,221,27],[165,8,222,6],[165,14,222,12,"newTick"],[165,21,222,19],[165,24,222,22,"combatEngine"],[165,43,222,34],[165,44,222,34,"combatEngine"],[165,56,222,34],[165,57,222,35,"getCurrentTick"],[165,71,222,49],[165,72,222,50],[165,73,222,51],[166,8,223,6],[166,14,223,12,"newState"],[166,22,223,20],[166,25,223,23],[167,10,223,25],[167,13,223,28,"prev"],[167,17,223,32],[168,10,223,34,"currentTick"],[168,21,223,45],[168,23,223,47,"newTick"],[169,8,223,55],[169,9,223,56],[170,8,225,6],[170,12,225,10],[170,13,225,11,"newState"],[170,21,225,19],[170,22,225,20,"isInCombat"],[170,32,225,30],[170,34,225,32],[170,41,225,39,"newState"],[170,49,225,47],[172,8,227,6],[173,8,228,6,"newState"],[173,16,228,14],[173,17,228,15,"abilityManager"],[173,31,228,29],[173,32,228,30,"updateCooldowns"],[173,47,228,45],[173,48,228,46,"newTick"],[173,55,228,53],[173,56,228,54],[175,8,230,6],[176,8,231,6],[176,14,231,12,"effectResults"],[176,27,231,25],[176,30,231,28,"newState"],[176,38,231,36],[176,39,231,37,"statusEffects"],[176,52,231,50],[176,53,231,51,"processTick"],[176,64,231,62],[176,65,231,63,"newTick"],[176,72,231,70],[176,73,231,71],[178,8,233,6],[179,8,234,6,"effectResults"],[179,21,234,19],[179,22,234,20,"forEach"],[179,29,234,27],[179,30,234,28],[179,31,234,29,"results"],[179,38,234,36],[179,40,234,38,"entityId"],[179,48,234,46],[179,53,234,51],[180,10,235,8],[180,16,235,14,"enemyIndex"],[180,26,235,24],[180,29,235,27,"newState"],[180,37,235,35],[180,38,235,36,"enemies"],[180,45,235,43],[180,46,235,44,"findIndex"],[180,55,235,53],[180,56,235,54,"e"],[180,57,235,55],[180,61,235,59,"e"],[180,62,235,60],[180,63,235,61,"id"],[180,65,235,63],[180,70,235,68,"entityId"],[180,78,235,76],[180,79,235,77],[181,10,236,8],[181,14,236,12,"enemyIndex"],[181,24,236,22],[181,28,236,26],[181,29,236,27],[181,31,236,29],[182,12,237,10,"results"],[182,19,237,17],[182,20,237,18,"forEach"],[182,27,237,25],[182,28,237,26,"result"],[182,34,237,32],[182,38,237,36],[183,14,238,12,"newState"],[183,22,238,20],[183,23,238,21,"enemies"],[183,30,238,28],[183,31,238,29,"enemyIndex"],[183,41,238,39],[183,42,238,40],[183,43,238,41,"health"],[183,49,238,47],[183,53,238,51,"result"],[183,59,238,57],[183,60,238,58,"damage"],[183,66,238,64],[184,14,239,12,"newState"],[184,22,239,20],[184,23,239,21,"enemies"],[184,30,239,28],[184,31,239,29,"enemyIndex"],[184,41,239,39],[184,42,239,40],[184,43,239,41,"lastDamaged"],[184,54,239,52],[184,57,239,55,"newTick"],[184,64,239,62],[185,12,240,10],[185,13,240,11],[185,14,240,12],[186,10,241,8],[187,8,242,6],[187,9,242,7],[187,10,242,8],[189,8,244,6],[190,8,245,6],[191,8,246,6],[191,12,246,10,"newState"],[191,20,246,18],[191,21,246,19,"playerStats"],[191,32,246,30],[191,36,246,34,"game"],[191,40,246,38],[191,41,246,39,"gameState"],[191,50,246,48],[191,51,246,49,"ninja"],[191,56,246,54],[191,58,246,56],[192,10,247,8],[192,16,247,14,"effectiveStats"],[192,30,247,28],[192,33,247,31,"game"],[192,37,247,35],[192,38,247,36,"getEffectiveStats"],[192,55,247,53],[192,56,247,54],[192,57,247,55],[194,10,249,8],[195,10,250,8],[195,14,250,12,"newState"],[195,22,250,20],[195,23,250,21,"playerStats"],[195,34,250,32],[195,35,250,33,"attack"],[195,41,250,39],[195,46,250,44,"effectiveStats"],[195,60,250,58],[195,61,250,59,"attack"],[195,67,250,65],[195,71,251,12,"newState"],[195,79,251,20],[195,80,251,21,"playerStats"],[195,91,251,32],[195,92,251,33,"defense"],[195,99,251,40],[195,104,251,45,"effectiveStats"],[195,118,251,59],[195,119,251,60,"defense"],[195,126,251,67],[195,130,252,12,"newState"],[195,138,252,20],[195,139,252,21,"playerStats"],[195,150,252,32],[195,151,252,33,"maxHealth"],[195,160,252,42],[195,165,252,47,"effectiveStats"],[195,179,252,61],[195,180,252,62,"maxHealth"],[195,189,252,71],[195,191,252,73],[196,12,254,10,"console"],[196,19,254,17],[196,20,254,18,"log"],[196,23,254,21],[196,24,254,22],[196,58,254,56,"newState"],[196,66,254,64],[196,67,254,65,"playerStats"],[196,78,254,76],[196,79,254,77,"attack"],[196,85,254,83],[196,91,254,89,"effectiveStats"],[196,105,254,103],[196,106,254,104,"attack"],[196,112,254,110],[196,125,254,123,"newState"],[196,133,254,131],[196,134,254,132,"playerStats"],[196,145,254,143],[196,146,254,144,"defense"],[196,153,254,151],[196,159,254,157,"effectiveStats"],[196,173,254,171],[196,174,254,172,"defense"],[196,181,254,179],[196,192,254,190,"newState"],[196,200,254,198],[196,201,254,199,"playerStats"],[196,212,254,210],[196,213,254,211,"maxHealth"],[196,222,254,220],[196,228,254,226,"effectiveStats"],[196,242,254,240],[196,243,254,241,"maxHealth"],[196,252,254,250],[196,254,254,252],[196,255,254,253],[198,12,256,10],[199,12,257,10],[199,16,257,14,"newHealth"],[199,25,257,23],[199,28,257,26,"newState"],[199,36,257,34],[199,37,257,35,"playerStats"],[199,48,257,46],[199,49,257,47,"health"],[199,55,257,53],[200,12,258,10],[200,16,258,14,"newState"],[200,24,258,22],[200,25,258,23,"playerStats"],[200,36,258,34],[200,37,258,35,"maxHealth"],[200,46,258,44],[200,51,258,49,"effectiveStats"],[200,65,258,63],[200,66,258,64,"maxHealth"],[200,75,258,73],[200,77,258,75],[201,14,259,12],[202,14,260,12],[202,18,260,16,"effectiveStats"],[202,32,260,30],[202,33,260,31,"maxHealth"],[202,42,260,40],[202,45,260,43,"newState"],[202,53,260,51],[202,54,260,52,"playerStats"],[202,65,260,63],[202,66,260,64,"maxHealth"],[202,75,260,73],[202,78,260,76],[202,81,260,79],[202,83,260,81],[203,16,261,14],[204,16,262,14],[204,22,262,20,"healthRatio"],[204,33,262,31],[204,36,262,34,"newState"],[204,44,262,42],[204,45,262,43,"playerStats"],[204,56,262,54],[204,57,262,55,"maxHealth"],[204,66,262,64],[204,69,262,67],[204,70,262,68],[204,73,263,16,"newState"],[204,81,263,24],[204,82,263,25,"playerStats"],[204,93,263,36],[204,94,263,37,"health"],[204,100,263,43],[204,103,263,46,"newState"],[204,111,263,54],[204,112,263,55,"playerStats"],[204,123,263,66],[204,124,263,67,"maxHealth"],[204,133,263,76],[204,136,263,79],[204,137,263,80],[205,16,264,14,"newHealth"],[205,25,264,23],[205,28,264,26,"Math"],[205,32,264,30],[205,33,264,31,"floor"],[205,38,264,36],[205,39,264,37,"effectiveStats"],[205,53,264,51],[205,54,264,52,"maxHealth"],[205,63,264,61],[205,66,264,64,"healthRatio"],[205,77,264,75],[205,78,264,76],[206,14,265,12],[206,15,265,13],[206,21,265,19],[206,25,265,23,"newState"],[206,33,265,31],[206,34,265,32,"playerStats"],[206,45,265,43],[206,46,265,44,"health"],[206,52,265,50],[206,55,265,53,"effectiveStats"],[206,69,265,67],[206,70,265,68,"maxHealth"],[206,79,265,77],[206,81,265,79],[207,16,266,14],[208,16,267,14,"newHealth"],[208,25,267,23],[208,28,267,26,"effectiveStats"],[208,42,267,40],[208,43,267,41,"maxHealth"],[208,52,267,50],[209,14,268,12],[210,14,269,12],[211,12,270,10],[212,12,272,10,"newState"],[212,20,272,18],[212,21,272,19,"playerStats"],[212,32,272,30],[212,35,272,33],[213,14,273,12],[213,17,273,15,"newState"],[213,25,273,23],[213,26,273,24,"playerStats"],[213,37,273,35],[214,14,274,12,"attack"],[214,20,274,18],[214,22,274,20,"effectiveStats"],[214,36,274,34],[214,37,274,35,"attack"],[214,43,274,41],[215,14,275,12,"defense"],[215,21,275,19],[215,23,275,21,"effectiveStats"],[215,37,275,35],[215,38,275,36,"defense"],[215,45,275,43],[216,14,276,12,"maxHealth"],[216,23,276,21],[216,25,276,23,"effectiveStats"],[216,39,276,37],[216,40,276,38,"maxHealth"],[216,49,276,47],[217,14,276,49],[218,14,277,12,"health"],[218,20,277,18],[218,22,277,20,"newHealth"],[218,31,277,29],[219,14,277,31],[220,14,278,12,"critChance"],[220,24,278,22],[220,26,278,24,"effectiveStats"],[220,40,278,38],[220,41,278,39,"critChance"],[220,51,278,49],[220,55,278,53,"newState"],[220,63,278,61],[220,64,278,62,"playerStats"],[220,75,278,73],[220,76,278,74,"critChance"],[220,86,278,84],[221,14,279,12,"critDamage"],[221,24,279,22],[221,26,279,24,"effectiveStats"],[221,40,279,38],[221,41,279,39,"critDamage"],[221,51,279,49],[221,55,279,53,"newState"],[221,63,279,61],[221,64,279,62,"playerStats"],[221,75,279,73],[221,76,279,74,"critDamage"],[221,86,279,84],[222,14,280,12,"cooldownReduction"],[222,31,280,29],[222,33,280,31,"effectiveStats"],[222,47,280,45],[222,48,280,46,"cooldownReduction"],[222,65,280,63],[222,69,280,67,"newState"],[222,77,280,75],[222,78,280,76,"playerStats"],[222,89,280,87],[222,90,280,88,"cooldownReduction"],[223,12,281,10],[223,13,281,11],[224,10,282,8],[226,10,284,8],[227,10,285,8],[227,14,285,12,"game"],[227,18,285,16],[227,19,285,17,"gameState"],[227,28,285,26],[227,29,285,27,"isAlive"],[227,36,285,34],[227,40,286,12,"game"],[227,44,286,16],[227,45,286,17,"gameState"],[227,54,286,26],[227,55,286,27,"ninja"],[227,60,286,32],[227,61,286,33,"health"],[227,67,286,39],[227,72,286,44,"effectiveStats"],[227,86,286,58],[227,87,286,59,"maxHealth"],[227,96,286,68],[227,100,287,12,"newState"],[227,108,287,20],[227,109,287,21,"playerStats"],[227,120,287,32],[227,121,287,33,"health"],[227,127,287,39],[227,130,287,42,"effectiveStats"],[227,144,287,56],[227,145,287,57,"maxHealth"],[227,154,287,66],[227,157,287,69],[227,160,287,72],[227,162,287,74],[228,12,288,10,"console"],[228,19,288,17],[228,20,288,18,"log"],[228,23,288,21],[228,24,288,22],[228,58,288,56,"newState"],[228,66,288,64],[228,67,288,65,"playerStats"],[228,78,288,76],[228,79,288,77,"health"],[228,85,288,83],[228,91,288,89,"game"],[228,95,288,93],[228,96,288,94,"gameState"],[228,105,288,103],[228,106,288,104,"ninja"],[228,111,288,109],[228,112,288,110,"health"],[228,118,288,116],[228,139,288,137],[228,140,288,138],[229,12,289,10,"newState"],[229,20,289,18],[229,21,289,19,"playerStats"],[229,32,289,30],[229,33,289,31,"health"],[229,39,289,37],[229,42,289,40,"game"],[229,46,289,44],[229,47,289,45,"gameState"],[229,56,289,54],[229,57,289,55,"ninja"],[229,62,289,60],[229,63,289,61,"health"],[229,69,289,67],[230,10,290,8],[231,8,291,6],[233,8,293,6],[234,8,294,6,"newState"],[234,16,294,14],[234,17,294,15,"enemies"],[234,24,294,22],[234,25,294,23,"forEach"],[234,32,294,30],[234,33,294,31,"enemy"],[234,38,294,36],[234,42,294,40],[235,10,295,8],[235,14,295,12],[235,15,295,13,"enemy"],[235,20,295,18],[235,21,295,19,"isBoss"],[235,27,295,25],[235,29,295,27],[236,12,295,29],[237,12,296,10],[238,12,297,10],[238,18,297,16,"MOVEMENT_SPEED"],[238,32,297,30],[238,35,297,33],[238,39,297,37],[238,40,297,38],[238,41,297,39],[239,12,298,10],[239,18,298,16,"SCREEN_WIDTH"],[239,30,298,28],[239,33,298,31],[239,36,298,34],[240,12,299,10],[240,18,299,16,"GAME_AREA_HEIGHT"],[240,34,299,32],[240,37,299,35],[240,40,299,38],[240,41,299,39],[240,42,299,40],[241,12,300,10],[241,18,300,16,"ENEMY_SIZE"],[241,28,300,26],[241,31,300,29],[241,33,300,31],[243,12,302,10],[244,12,303,10],[244,18,303,16,"playerX"],[244,25,303,23],[244,28,303,26,"currentNinjaPosition"],[244,48,303,46],[244,49,303,47,"x"],[244,50,303,48],[245,12,304,10],[245,18,304,16,"playerY"],[245,25,304,23],[245,28,304,26,"currentNinjaPosition"],[245,48,304,46],[245,49,304,47,"y"],[245,50,304,48],[247,12,306,10],[248,12,307,10],[248,18,307,16,"deltaX"],[248,24,307,22],[248,27,307,25,"playerX"],[248,34,307,32],[248,37,307,35,"enemy"],[248,42,307,40],[248,43,307,41,"position"],[248,51,307,49],[248,52,307,50,"x"],[248,53,307,51],[249,12,308,10],[249,18,308,16,"deltaY"],[249,24,308,22],[249,27,308,25,"playerY"],[249,34,308,32],[249,37,308,35,"enemy"],[249,42,308,40],[249,43,308,41,"position"],[249,51,308,49],[249,52,308,50,"y"],[249,53,308,51],[250,12,309,10],[250,18,309,16,"distance"],[250,26,309,24],[250,29,309,27,"Math"],[250,33,309,31],[250,34,309,32,"sqrt"],[250,38,309,36],[250,39,309,37,"deltaX"],[250,45,309,43],[250,48,309,46,"deltaX"],[250,54,309,52],[250,57,309,55,"deltaY"],[250,63,309,61],[250,66,309,64,"deltaY"],[250,72,309,70],[250,73,309,71],[252,12,311,10],[253,12,312,10],[253,18,312,16,"ATTACK_RANGE"],[253,30,312,28],[253,33,312,31],[253,35,312,33],[253,36,312,34],[253,37,312,35],[254,12,313,10],[254,18,313,16,"ATTACK_COOLDOWN"],[254,33,313,31],[254,36,313,34],[254,38,313,36],[254,39,313,37],[254,40,313,38],[256,12,315,10],[256,16,315,14,"distance"],[256,24,315,22],[256,28,315,26,"ATTACK_RANGE"],[256,40,315,38],[256,42,315,40],[257,14,316,12],[258,14,317,12],[258,18,317,16],[258,19,317,17,"enemy"],[258,24,317,22],[258,25,317,23,"lastAttackTick"],[258,39,317,37],[258,41,317,39,"enemy"],[258,46,317,44],[258,47,317,45,"lastAttackTick"],[258,61,317,59],[258,64,317,62],[258,65,317,63],[259,14,319,12],[259,18,319,16,"newState"],[259,26,319,24],[259,27,319,25,"currentTick"],[259,38,319,36],[259,41,319,39,"enemy"],[259,46,319,44],[259,47,319,45,"lastAttackTick"],[259,61,319,59],[259,65,319,63,"ATTACK_COOLDOWN"],[259,80,319,78],[259,82,319,80],[260,16,320,14],[261,16,321,14],[261,20,321,18],[261,21,321,19,"game"],[261,25,321,23],[261,26,321,24,"gameState"],[261,35,321,33],[261,36,321,34,"isAlive"],[261,43,321,41],[261,45,321,43],[262,18,322,16,"console"],[262,25,322,23],[262,26,322,24,"log"],[262,29,322,27],[262,30,322,28],[262,49,322,47,"enemy"],[262,54,322,52],[262,55,322,53,"name"],[262,59,322,57],[262,93,322,91],[262,94,322,92],[263,18,323,16],[264,18,324,16,"enemy"],[264,23,324,21],[264,24,324,22,"lastAttackTick"],[264,38,324,36],[264,41,324,39,"newState"],[264,49,324,47],[264,50,324,48,"currentTick"],[264,61,324,59],[265,16,325,14],[265,17,325,15],[265,23,325,21],[266,18,326,16],[267,18,327,16],[267,24,327,22,"isPlayerInvincible"],[267,42,327,40],[267,45,327,43,"game"],[267,49,327,47],[267,50,327,48,"gameState"],[267,59,327,57],[267,60,327,58,"isInvincible"],[267,72,327,70],[267,76,328,41,"game"],[267,80,328,45],[267,81,328,46,"gameState"],[267,90,328,55],[267,91,328,56,"invincibilityEndTime"],[267,111,328,76],[267,115,329,41,"Date"],[267,119,329,45],[267,120,329,46,"now"],[267,123,329,49],[267,124,329,50],[267,125,329,51],[267,128,329,54,"game"],[267,132,329,58],[267,133,329,59,"gameState"],[267,142,329,68],[267,143,329,69,"invincibilityEndTime"],[267,163,329,89],[268,18,331,16],[268,22,331,20,"isPlayerInvincible"],[268,40,331,38],[268,42,331,40],[269,20,332,18,"console"],[269,27,332,25],[269,28,332,26,"log"],[269,31,332,29],[269,32,332,30],[269,51,332,49,"enemy"],[269,56,332,54],[269,57,332,55,"name"],[269,61,332,59],[269,101,332,99],[269,102,332,100],[270,20,333,18],[271,20,334,18,"enemy"],[271,25,334,23],[271,26,334,24,"lastAttackTick"],[271,40,334,38],[271,43,334,41,"newState"],[271,51,334,49],[271,52,334,50,"currentTick"],[271,63,334,61],[272,18,335,16],[272,19,335,17],[272,25,335,23],[273,20,336,16],[274,20,337,16],[274,26,337,22,"baseAttack"],[274,36,337,32],[274,39,337,35,"enemy"],[274,44,337,40],[274,45,337,41,"stats"],[274,50,337,46],[274,51,337,47,"attack"],[274,57,337,53],[274,60,337,56],[274,63,337,59],[274,64,337,60],[274,65,337,61],[275,20,338,16],[275,26,338,22,"attackDamage"],[275,38,338,34],[275,41,338,37,"Math"],[275,45,338,41],[275,46,338,42,"floor"],[275,51,338,47],[275,52,338,48,"baseAttack"],[275,62,338,58],[275,66,338,62],[275,69,338,65],[275,72,338,68,"Math"],[275,76,338,72],[275,77,338,73,"random"],[275,83,338,79],[275,84,338,80],[275,85,338,81],[275,88,338,84],[275,91,338,87],[275,92,338,88],[275,93,338,89],[275,94,338,90],[275,95,338,91],[276,20,339,16],[276,26,339,22,"playerDefense"],[276,39,339,35],[276,42,339,38,"newState"],[276,50,339,46],[276,51,339,47,"playerStats"],[276,62,339,58],[276,63,339,59,"defense"],[276,70,339,66],[277,20,340,16],[277,26,340,22,"finalDamage"],[277,37,340,33],[277,40,340,36,"Math"],[277,44,340,40],[277,45,340,41,"max"],[277,48,340,44],[277,49,340,45],[277,50,340,46],[277,52,340,48,"attackDamage"],[277,64,340,60],[277,67,340,63,"Math"],[277,71,340,67],[277,72,340,68,"floor"],[277,77,340,73],[277,78,340,74,"playerDefense"],[277,91,340,87],[277,94,340,90],[277,97,340,93],[277,98,340,94],[277,99,340,95],[277,100,340,96],[277,101,340,97],[279,20,342,16,"console"],[279,27,342,23],[279,28,342,24,"log"],[279,31,342,27],[279,32,342,28],[279,53,342,49,"enemy"],[279,58,342,54],[279,59,342,55,"name"],[279,63,342,59],[279,86,342,82,"finalDamage"],[279,97,342,93],[279,109,342,105,"attackDamage"],[279,121,342,117],[279,132,342,128,"Math"],[279,136,342,132],[279,137,342,133,"floor"],[279,142,342,138],[279,143,342,139,"playerDefense"],[279,156,342,152],[279,159,342,155],[279,162,342,158],[279,163,342,159],[279,184,342,180],[279,185,342,181],[281,20,344,16],[282,20,345,16],[282,26,345,22,"newPlayerHealth"],[282,41,345,37],[282,44,345,40,"Math"],[282,48,345,44],[282,49,345,45,"max"],[282,52,345,48],[282,53,345,49],[282,54,345,50],[282,56,345,52,"newState"],[282,64,345,60],[282,65,345,61,"playerStats"],[282,76,345,72],[282,77,345,73,"health"],[282,83,345,79],[282,86,345,82,"finalDamage"],[282,97,345,93],[282,98,345,94],[283,20,346,16,"newState"],[283,28,346,24],[283,29,346,25,"playerStats"],[283,40,346,36],[283,41,346,37,"health"],[283,47,346,43],[283,50,346,46,"newPlayerHealth"],[283,65,346,61],[284,20,348,16,"console"],[284,27,348,23],[284,28,348,24,"log"],[284,31,348,27],[284,32,348,28],[284,53,348,49,"newState"],[284,61,348,57],[284,62,348,58,"playerStats"],[284,73,348,69],[284,74,348,70,"health"],[284,80,348,76],[284,84,348,80,"newState"],[284,92,348,88],[284,93,348,89,"playerStats"],[284,104,348,100],[284,105,348,101,"maxHealth"],[284,114,348,110],[284,124,348,120,"finalDamage"],[284,135,348,131],[284,145,348,141],[284,146,348,142],[286,20,350,16],[287,20,351,16,"enemy"],[287,25,351,21],[287,26,351,22,"lastAttackTick"],[287,40,351,36],[287,43,351,39,"newState"],[287,51,351,47],[287,52,351,48,"currentTick"],[287,63,351,59],[289,20,353,16],[290,20,354,16],[290,24,354,20,"newPlayerHealth"],[290,39,354,35],[290,43,354,39],[290,44,354,40],[290,46,354,42],[291,22,355,18,"console"],[291,29,355,25],[291,30,355,26,"log"],[291,33,355,29],[291,34,355,30],[291,84,355,80],[291,85,355,81],[292,22,356,18],[293,22,357,18,"game"],[293,26,357,22],[293,27,357,23,"updateGameState"],[293,42,357,38],[293,43,357,39],[294,24,357,41,"isAlive"],[294,31,357,48],[294,33,357,50],[295,22,357,56],[295,23,357,57],[295,24,357,58],[296,20,358,16],[297,18,359,16],[298,16,360,14],[299,14,361,12],[300,12,362,10],[300,13,362,11],[300,19,362,17],[301,14,363,12],[302,14,364,12],[303,14,365,12],[303,18,365,16,"distance"],[303,26,365,24],[303,29,365,27],[303,31,365,29],[303,33,365,31],[304,16,366,14],[305,16,367,14],[305,22,367,20,"normalizedX"],[305,33,367,31],[305,36,367,34,"deltaX"],[305,42,367,40],[305,45,367,43,"distance"],[305,53,367,51],[306,16,368,14],[306,22,368,20,"normalizedY"],[306,33,368,31],[306,36,368,34,"deltaY"],[306,42,368,40],[306,45,368,43,"distance"],[306,53,368,51],[308,16,370,14],[309,16,371,14],[309,22,371,20,"randomFactor"],[309,34,371,32],[309,37,371,35],[309,40,371,38],[309,41,371,39],[309,42,371,40],[310,16,372,14],[310,22,372,20,"finalX"],[310,28,372,26],[310,31,372,29,"normalizedX"],[310,42,372,40],[310,45,372,43],[310,46,372,44,"Math"],[310,50,372,48],[310,51,372,49,"random"],[310,57,372,55],[310,58,372,56],[310,59,372,57],[310,62,372,60],[310,65,372,63],[310,69,372,67,"randomFactor"],[310,81,372,79],[311,16,373,14],[311,22,373,20,"finalY"],[311,28,373,26],[311,31,373,29,"normalizedY"],[311,42,373,40],[311,45,373,43],[311,46,373,44,"Math"],[311,50,373,48],[311,51,373,49,"random"],[311,57,373,55],[311,58,373,56],[311,59,373,57],[311,62,373,60],[311,65,373,63],[311,69,373,67,"randomFactor"],[311,81,373,79],[313,16,375,14],[314,16,376,14],[314,20,376,18,"newX"],[314,24,376,22],[314,27,376,25,"enemy"],[314,32,376,30],[314,33,376,31,"position"],[314,41,376,39],[314,42,376,40,"x"],[314,43,376,41],[314,46,376,45,"finalX"],[314,52,376,51],[314,55,376,54,"MOVEMENT_SPEED"],[314,69,376,69],[315,16,377,14],[315,20,377,18,"newY"],[315,24,377,22],[315,27,377,25,"enemy"],[315,32,377,30],[315,33,377,31,"position"],[315,41,377,39],[315,42,377,40,"y"],[315,43,377,41],[315,46,377,45,"finalY"],[315,52,377,51],[315,55,377,54,"MOVEMENT_SPEED"],[315,69,377,69],[317,16,379,14],[318,16,380,14,"newX"],[318,20,380,18],[318,23,380,21,"Math"],[318,27,380,25],[318,28,380,26,"max"],[318,31,380,29],[318,32,380,30],[318,33,380,31],[318,35,380,33,"Math"],[318,39,380,37],[318,40,380,38,"min"],[318,43,380,41],[318,44,380,42,"SCREEN_WIDTH"],[318,56,380,54],[318,59,380,57,"ENEMY_SIZE"],[318,69,380,67],[318,71,380,69,"newX"],[318,75,380,73],[318,76,380,74],[318,77,380,75],[319,16,381,14,"newY"],[319,20,381,18],[319,23,381,21,"Math"],[319,27,381,25],[319,28,381,26,"max"],[319,31,381,29],[319,32,381,30],[319,33,381,31],[319,35,381,33,"Math"],[319,39,381,37],[319,40,381,38,"min"],[319,43,381,41],[319,44,381,42,"GAME_AREA_HEIGHT"],[319,60,381,58],[319,63,381,61,"ENEMY_SIZE"],[319,73,381,71],[319,75,381,73,"newY"],[319,79,381,77],[319,80,381,78],[319,81,381,79],[321,16,383,14],[322,16,384,14,"enemy"],[322,21,384,19],[322,22,384,20,"position"],[322,30,384,28],[322,31,384,29,"x"],[322,32,384,30],[322,35,384,33,"newX"],[322,39,384,37],[323,16,385,14,"enemy"],[323,21,385,19],[323,22,385,20,"position"],[323,30,385,28],[323,31,385,29,"y"],[323,32,385,30],[323,35,385,33,"newY"],[323,39,385,37],[324,14,386,12],[325,14,387,12],[326,12,388,10],[327,10,389,8],[328,8,390,6],[328,9,390,7],[328,10,390,8],[330,8,392,6],[331,8,393,6],[331,12,393,10,"newState"],[331,20,393,18],[331,21,393,19,"shadowClone"],[331,32,393,30],[331,34,393,32],[332,10,394,8],[333,10,395,8,"newState"],[333,18,395,16],[333,19,395,17,"shadowClone"],[333,30,395,28],[333,31,395,29,"remainingTicks"],[333,45,395,43],[333,47,395,45],[335,10,397,8],[336,10,398,8],[336,16,398,14,"cloneOffset"],[336,27,398,25],[336,30,398,28],[336,32,398,30],[336,33,398,31],[336,34,398,32],[337,10,399,8,"newState"],[337,18,399,16],[337,19,399,17,"shadowClone"],[337,30,399,28],[337,31,399,29,"position"],[337,39,399,37],[337,40,399,38,"x"],[337,41,399,39],[337,44,399,42,"currentNinjaPosition"],[337,64,399,62],[337,65,399,63,"x"],[337,66,399,64],[337,69,399,67,"cloneOffset"],[337,80,399,78],[338,10,400,8,"newState"],[338,18,400,16],[338,19,400,17,"shadowClone"],[338,30,400,28],[338,31,400,29,"position"],[338,39,400,37],[338,40,400,38,"y"],[338,41,400,39],[338,44,400,42,"currentNinjaPosition"],[338,64,400,62],[338,65,400,63,"y"],[338,66,400,64],[338,69,400,67],[338,71,400,69],[340,10,402,8],[341,10,403,8],[341,14,403,12,"newState"],[341,22,403,20],[341,23,403,21,"shadowClone"],[341,34,403,32],[341,35,403,33,"remainingTicks"],[341,49,403,47],[341,53,403,51],[341,54,403,52],[341,56,403,54],[342,12,404,10,"console"],[342,19,404,17],[342,20,404,18,"log"],[342,23,404,21],[342,24,404,22],[342,75,404,73],[342,76,404,74],[343,12,405,10,"newState"],[343,20,405,18],[343,21,405,19,"shadowClone"],[343,32,405,30],[343,35,405,33,"undefined"],[343,44,405,42],[344,10,406,8],[344,11,406,9],[344,17,406,15],[345,12,407,10],[346,12,408,10],[347,12,409,10],[347,18,409,16,"CLONE_ATTACK_INTERVAL"],[347,39,409,37],[347,42,409,40],[347,44,409,42],[348,12,410,10],[348,16,410,14,"newState"],[348,24,410,22],[348,25,410,23,"currentTick"],[348,36,410,34],[348,39,410,37,"CLONE_ATTACK_INTERVAL"],[348,60,410,58],[348,65,410,63],[348,66,410,64],[348,70,410,68,"newState"],[348,78,410,76],[348,79,410,77,"enemies"],[348,86,410,84],[348,87,410,85,"length"],[348,93,410,91],[348,96,410,94],[348,97,410,95],[348,99,410,97],[349,14,411,12,"console"],[349,21,411,19],[349,22,411,20,"log"],[349,25,411,23],[349,26,411,24],[349,83,411,81],[349,84,411,82],[351,14,413,12],[352,14,414,12],[352,20,414,18,"target"],[352,26,414,24],[352,29,414,27,"findClosestEnemyInternal"],[352,53,414,51],[352,54,414,52,"newState"],[352,62,414,60],[352,63,414,61,"enemies"],[352,70,414,68],[352,71,414,69],[353,14,415,12],[353,18,415,16,"target"],[353,24,415,22],[353,26,415,24],[354,16,416,14],[355,16,417,14],[355,22,417,20,"cloneDamage"],[355,33,417,31],[355,36,417,34,"Math"],[355,40,417,38],[355,41,417,39,"floor"],[355,46,417,44],[355,47,417,45,"newState"],[355,55,417,53],[355,56,417,54,"playerStats"],[355,67,417,65],[355,68,417,66,"attack"],[355,74,417,72],[355,77,417,75],[355,80,417,78],[355,81,417,79],[357,16,419,14],[358,16,420,14,"createProjectile"],[358,32,420,30],[358,33,420,31,"target"],[358,39,420,37],[358,41,420,39,"cloneDamage"],[358,52,420,50],[358,54,420,52,"newState"],[358,62,420,60],[358,63,420,61,"shadowClone"],[358,74,420,72],[358,75,420,73,"position"],[358,83,420,81],[358,85,420,83],[359,18,421,16,"id"],[359,20,421,18],[359,22,421,20],[359,43,421,41],[360,18,422,16,"name"],[360,22,422,20],[360,24,422,22],[360,45,422,43],[361,18,423,16,"icon"],[361,22,423,20],[361,24,423,22],[362,16,424,14],[362,17,424,15],[362,18,424,16],[363,14,425,12],[364,12,426,10],[365,10,427,8],[366,8,428,6],[368,8,430,6],[369,8,431,6],[370,8,432,6,"console"],[370,15,432,13],[370,16,432,14,"log"],[370,19,432,17],[370,20,432,18],[370,63,432,61,"isManualControlActive"],[370,84,432,82],[370,97,432,95,"game"],[370,101,432,99],[370,102,432,100,"gameState"],[370,111,432,109],[370,112,432,110,"isAlive"],[370,119,432,117],[370,121,432,119],[370,122,432,120],[371,8,433,6],[371,12,433,10],[371,13,433,11,"isManualControlActive"],[371,34,433,32],[371,38,433,36,"game"],[371,42,433,40],[371,43,433,41,"gameState"],[371,52,433,50],[371,53,433,51,"isAlive"],[371,60,433,58],[371,62,433,60],[372,10,434,8],[372,15,434,13],[372,19,434,17,"i"],[372,20,434,18],[372,23,434,21],[372,24,434,22],[372,26,434,24,"i"],[372,27,434,25],[372,30,434,28],[372,31,434,29],[372,33,434,31,"i"],[372,34,434,32],[372,36,434,34],[372,38,434,36],[373,12,435,10],[373,16,435,14,"newState"],[373,24,435,22],[373,25,435,23,"abilityManager"],[373,39,435,37],[373,40,435,38,"isAbilityReady"],[373,54,435,52],[373,55,435,53,"i"],[373,56,435,54],[373,57,435,55],[373,61,435,59,"newState"],[373,69,435,67],[373,70,435,68,"enemies"],[373,77,435,75],[373,78,435,76,"length"],[373,84,435,82],[373,87,435,85],[373,88,435,86],[373,90,435,88],[374,14,436,12],[374,18,436,16,"newState"],[374,26,436,24],[374,27,436,25,"abilityManager"],[374,41,436,39],[374,42,436,40,"useAbility"],[374,52,436,50],[374,53,436,51,"i"],[374,54,436,52],[374,56,436,54,"newTick"],[374,63,436,61],[374,64,436,62],[374,66,436,64],[375,16,437,14,"console"],[375,23,437,21],[375,24,437,22,"log"],[375,27,437,25],[375,28,437,26],[375,73,437,71,"i"],[375,74,437,72],[375,76,437,74],[375,77,437,75],[376,16,438,14,"castAbility"],[376,27,438,25],[376,28,438,26,"newState"],[376,36,438,34],[376,38,438,36,"i"],[376,39,438,37],[376,40,438,38],[377,14,439,12],[378,12,440,10],[379,10,441,8],[380,8,442,6],[382,8,444,6],[383,8,445,6],[384,8,446,6],[384,14,446,12,"allDeadEnemies"],[384,28,446,26],[384,31,446,29,"newState"],[384,39,446,37],[384,40,446,38,"enemies"],[384,47,446,45],[384,48,446,46,"filter"],[384,54,446,52],[384,55,446,53,"enemy"],[384,60,446,58],[384,64,446,62,"enemy"],[384,69,446,67],[384,70,446,68,"health"],[384,76,446,74],[384,80,446,78],[384,81,446,79],[384,82,446,80],[386,8,448,6],[387,8,449,6,"deadEnemiesRef"],[387,22,449,20],[387,23,449,21,"current"],[387,30,449,28],[387,33,449,31],[387,34,449,32],[387,37,449,35,"allDeadEnemies"],[387,51,449,49],[387,52,449,50],[387,53,449,51],[387,54,449,52],[389,8,451,6],[390,8,452,6],[390,12,452,10,"allDeadEnemies"],[390,26,452,24],[390,27,452,25,"length"],[390,33,452,31],[390,36,452,34],[390,37,452,35],[390,39,452,37],[391,10,453,8,"console"],[391,17,453,15],[391,18,453,16,"log"],[391,21,453,19],[391,22,453,20],[391,34,453,32,"allDeadEnemies"],[391,48,453,46],[391,49,453,47,"length"],[391,55,453,53],[391,83,453,81],[391,85,453,83,"allDeadEnemies"],[391,99,453,97],[391,100,453,98,"map"],[391,103,453,101],[391,104,453,102,"e"],[391,105,453,103],[391,109,453,107],[391,112,453,110,"e"],[391,113,453,111],[391,114,453,112,"name"],[391,118,453,116],[391,122,453,120,"e"],[391,123,453,121],[391,124,453,122,"health"],[391,130,453,128],[391,145,453,143,"e"],[391,146,453,144],[391,147,453,145,"isDying"],[391,154,453,152],[391,157,453,155],[391,158,453,156],[391,159,453,157],[392,8,454,6],[394,8,456,6],[395,8,457,6],[395,14,457,12,"currentTime"],[395,25,457,23],[395,28,457,26,"Date"],[395,32,457,30],[395,33,457,31,"now"],[395,36,457,34],[395,37,457,35],[395,38,457,36],[396,8,458,6,"newState"],[396,16,458,14],[396,17,458,15,"enemies"],[396,24,458,22],[396,27,458,25,"newState"],[396,35,458,33],[396,36,458,34,"enemies"],[396,43,458,41],[396,44,458,42,"filter"],[396,50,458,48],[396,51,458,49,"enemy"],[396,56,458,54],[396,60,458,58],[397,10,459,8],[397,14,459,12,"enemy"],[397,19,459,17],[397,20,459,18,"isDying"],[397,27,459,25],[397,31,459,29,"enemy"],[397,36,459,34],[397,37,459,35,"deathStartTime"],[397,51,459,49],[397,53,459,51],[398,12,460,10],[398,18,460,16,"animationDuration"],[398,35,460,33],[398,38,460,36],[398,41,460,39],[398,42,460,40],[398,43,460,41],[399,12,461,10],[399,18,461,16,"isAnimationComplete"],[399,37,461,35],[399,40,461,38,"currentTime"],[399,51,461,49],[399,54,461,52,"enemy"],[399,59,461,57],[399,60,461,58,"deathStartTime"],[399,74,461,72],[399,78,461,76,"animationDuration"],[399,95,461,93],[400,12,462,10],[400,16,462,14,"isAnimationComplete"],[400,35,462,33],[400,37,462,35],[401,14,463,12,"console"],[401,21,463,19],[401,22,463,20,"log"],[401,25,463,23],[401,26,463,24],[401,58,463,56,"enemy"],[401,63,463,61],[401,64,463,62,"name"],[401,68,463,66],[401,86,463,84,"currentTime"],[401,97,463,95],[401,100,463,98,"enemy"],[401,105,463,103],[401,106,463,104,"deathStartTime"],[401,120,463,118],[401,129,463,127],[401,130,463,128],[402,14,464,12],[402,21,464,19],[402,26,464,24],[402,27,464,25],[402,28,464,26],[403,12,465,10],[404,10,466,8],[405,10,467,8],[405,17,467,15],[405,21,467,19],[405,22,467,20],[405,23,467,21],[406,8,468,6],[406,9,468,7],[406,10,468,8],[408,8,470,6],[409,8,471,6],[409,12,471,10,"allDeadEnemies"],[409,26,471,24],[409,27,471,25,"length"],[409,33,471,31],[409,36,471,34],[409,37,471,35],[409,39,471,37],[410,10,472,8,"console"],[410,17,472,15],[410,18,472,16,"log"],[410,21,472,19],[410,22,472,20],[410,49,472,47,"allDeadEnemies"],[410,63,472,61],[410,64,472,62,"length"],[410,70,472,68],[410,86,472,84],[410,88,472,86,"allDeadEnemies"],[410,102,472,100],[410,103,472,101,"map"],[410,106,472,104],[410,107,472,105,"e"],[410,108,472,106],[410,112,472,110],[410,115,472,113,"e"],[410,116,472,114],[410,117,472,115,"id"],[410,119,472,117],[410,123,472,121,"e"],[410,124,472,122],[410,125,472,123,"health"],[410,131,472,129],[410,136,472,134],[410,137,472,135],[410,138,472,136],[411,8,473,6],[413,8,475,6],[414,8,476,6],[414,14,476,12,"lowHealthEnemies"],[414,30,476,28],[414,33,476,31,"newState"],[414,41,476,39],[414,42,476,40,"enemies"],[414,49,476,47],[414,50,476,48,"filter"],[414,56,476,54],[414,57,476,55,"enemy"],[414,62,476,60],[414,66,476,64,"enemy"],[414,71,476,69],[414,72,476,70,"health"],[414,78,476,76],[414,82,476,80],[414,84,476,82],[414,88,476,86,"enemy"],[414,93,476,91],[414,94,476,92,"health"],[414,100,476,98],[414,103,476,101],[414,104,476,102],[414,105,476,103],[415,8,477,6],[415,12,477,10,"lowHealthEnemies"],[415,28,477,26],[415,29,477,27,"length"],[415,35,477,33],[415,38,477,36],[415,39,477,37],[415,41,477,39],[416,10,478,8,"console"],[416,17,478,15],[416,18,478,16,"log"],[416,21,478,19],[416,22,478,20],[416,61,478,59],[416,63,478,61,"lowHealthEnemies"],[416,79,478,77],[416,80,478,78,"map"],[416,83,478,81],[416,84,478,82,"e"],[416,85,478,83],[416,89,478,87],[416,92,478,90,"e"],[416,93,478,91],[416,94,478,92,"id"],[416,96,478,94],[416,100,478,98,"e"],[416,101,478,99],[416,102,478,100,"health"],[416,108,478,106],[416,112,478,110,"e"],[416,113,478,111],[416,114,478,112,"maxHealth"],[416,123,478,121],[416,128,478,126],[416,129,478,127],[416,130,478,128],[417,8,479,6],[419,8,481,6],[420,8,482,6],[420,14,482,12,"beforeCount"],[420,25,482,23],[420,28,482,26,"newState"],[420,36,482,34],[420,37,482,35,"enemies"],[420,44,482,42],[420,45,482,43,"length"],[420,51,482,49],[421,8,483,6,"newState"],[421,16,483,14],[421,17,483,15,"enemies"],[421,24,483,22],[421,27,483,25,"newState"],[421,35,483,33],[421,36,483,34,"enemies"],[421,43,483,41],[421,44,483,42,"filter"],[421,50,483,48],[421,51,483,49,"enemy"],[421,56,483,54],[421,60,483,58,"enemy"],[421,65,483,63],[421,66,483,64,"health"],[421,72,483,70],[421,75,483,73],[421,76,483,74],[421,77,483,75],[422,8,484,6],[422,14,484,12,"afterCount"],[422,24,484,22],[422,27,484,25,"newState"],[422,35,484,33],[422,36,484,34,"enemies"],[422,43,484,41],[422,44,484,42,"length"],[422,50,484,48],[423,8,486,6],[423,12,486,10,"beforeCount"],[423,23,486,21],[423,28,486,26,"afterCount"],[423,38,486,36],[423,40,486,38],[424,10,487,8,"console"],[424,17,487,15],[424,18,487,16,"log"],[424,21,487,19],[424,22,487,20],[424,52,487,50,"beforeCount"],[424,63,487,61],[424,66,487,64,"afterCount"],[424,76,487,74],[424,102,487,100],[424,103,487,101],[425,8,488,6],[427,8,490,6],[428,8,491,6],[429,8,492,6],[429,14,492,12,"MAX_ENEMIES"],[429,25,492,23],[429,28,492,26],[429,30,492,28],[429,31,492,29],[429,32,492,30],[430,8,493,6],[430,14,493,12,"MIN_SPAWN_DELAY"],[430,29,493,27],[430,32,493,30],[430,35,493,33],[430,36,493,34],[430,37,493,35],[431,8,494,6],[431,14,494,12,"now"],[431,17,494,15],[431,20,494,18,"Date"],[431,24,494,22],[431,25,494,23,"now"],[431,28,494,26],[431,29,494,27],[431,30,494,28],[432,8,495,6],[432,14,495,12,"hasBoss"],[432,21,495,19],[432,24,495,22,"newState"],[432,32,495,30],[432,33,495,31,"enemies"],[432,40,495,38],[432,41,495,39,"some"],[432,45,495,43],[432,46,495,44,"enemy"],[432,51,495,49],[432,55,495,53,"enemy"],[432,60,495,58],[432,61,495,59,"isBoss"],[432,67,495,65],[432,68,495,66],[434,8,497,6],[435,8,498,6],[435,12,498,10],[435,13,498,11,"newState"],[435,21,498,19],[435,22,498,20,"lastSpawnTime"],[435,35,498,33],[435,37,498,35],[436,10,499,8,"newState"],[436,18,499,16],[436,19,499,17,"lastSpawnTime"],[436,32,499,30],[436,35,499,33,"now"],[436,38,499,36],[437,8,500,6],[438,8,502,6,"console"],[438,15,502,13],[438,16,502,14,"log"],[438,19,502,17],[438,20,502,18],[438,53,502,51,"newState"],[438,61,502,59],[438,62,502,60,"enemies"],[438,69,502,67],[438,70,502,68,"length"],[438,76,502,74],[438,85,502,83,"MAX_ENEMIES"],[438,96,502,94],[438,109,502,107,"hasBoss"],[438,116,502,114],[438,118,502,116],[438,119,502,117],[440,8,504,6],[441,8,505,6],[441,12,505,10],[441,13,505,11,"hasBoss"],[441,20,505,18],[441,24,505,22,"newState"],[441,32,505,30],[441,33,505,31,"enemies"],[441,40,505,38],[441,41,505,39,"length"],[441,47,505,45],[441,50,505,48,"MAX_ENEMIES"],[441,61,505,59],[441,65,505,64,"now"],[441,68,505,67],[441,71,505,70,"newState"],[441,79,505,78],[441,80,505,79,"lastSpawnTime"],[441,93,505,92],[441,97,505,97,"MIN_SPAWN_DELAY"],[441,112,505,112],[441,114,505,114],[442,10,506,8,"console"],[442,17,506,15],[442,18,506,16,"log"],[442,21,506,19],[442,22,506,20],[442,43,506,41,"newState"],[442,51,506,49],[442,52,506,50,"enemies"],[442,59,506,57],[442,60,506,58,"length"],[442,66,506,64],[442,69,506,67],[442,70,506,68],[442,74,506,72,"MAX_ENEMIES"],[442,85,506,83],[442,87,506,85],[442,88,506,86],[443,10,507,8,"spawnTestEnemy"],[443,24,507,22],[443,25,507,23,"newState"],[443,33,507,31],[443,34,507,32],[444,10,508,8,"newState"],[444,18,508,16],[444,19,508,17,"lastSpawnTime"],[444,32,508,30],[444,35,508,33,"now"],[444,38,508,36],[445,8,509,6],[446,8,511,6],[446,15,511,13,"newState"],[446,23,511,21],[447,6,512,4],[447,7,512,5],[447,8,512,6],[449,6,514,4],[450,6,515,4],[450,12,515,10,"deadEnemiesToProcess"],[450,32,515,30],[450,35,515,33,"deadEnemiesRef"],[450,49,515,47],[450,50,515,48,"current"],[450,57,515,55],[450,58,515,56],[450,59,515,57],[451,6,516,4],[451,10,516,8,"deadEnemiesToProcess"],[451,30,516,28],[451,31,516,29,"length"],[451,37,516,35],[451,40,516,38],[451,41,516,39],[451,43,516,41],[452,8,517,6],[453,8,518,6],[454,8,519,6],[454,14,519,12,"unprocessedEnemies"],[454,32,519,30],[454,35,519,33,"deadEnemiesToProcess"],[454,55,519,53],[454,56,519,54],[454,57,519,55],[456,8,521,6],[457,8,522,6,"console"],[457,15,522,13],[457,16,522,14,"log"],[457,19,522,17],[457,20,522,18],[457,69,522,67],[457,71,522,69,"deadEnemiesToProcess"],[457,91,522,89],[457,92,522,90,"map"],[457,95,522,93],[457,96,522,94,"e"],[457,97,522,95],[457,102,522,100],[458,10,522,101,"id"],[458,12,522,103],[458,14,522,105,"e"],[458,15,522,106],[458,16,522,107,"id"],[458,18,522,109],[459,10,522,111,"name"],[459,14,522,115],[459,16,522,117,"e"],[459,17,522,118],[459,18,522,119,"name"],[459,22,522,123],[460,10,522,125,"xpAwarded"],[460,19,522,134],[460,21,522,136,"e"],[460,22,522,137],[460,23,522,138,"xpAwarded"],[461,8,522,147],[461,9,522,148],[461,10,522,149],[461,11,522,150],[461,12,522,151],[462,8,523,6,"console"],[462,15,523,13],[462,16,523,14,"log"],[462,19,523,17],[462,20,523,18],[462,43,523,41,"deadEnemiesToProcess"],[462,63,523,61],[462,64,523,62,"length"],[462,70,523,68],[462,87,523,85,"unprocessedEnemies"],[462,105,523,103],[462,106,523,104,"length"],[462,112,523,110],[462,126,523,124],[462,127,523,125],[463,8,525,6],[463,12,525,10,"unprocessedEnemies"],[463,30,525,28],[463,31,525,29,"length"],[463,37,525,35],[463,40,525,38],[463,41,525,39],[463,43,525,41],[464,10,526,8],[465,10,527,8],[465,14,527,12,"totalXP"],[465,21,527,19],[465,24,527,22],[465,25,527,23],[466,10,528,8],[466,14,528,12,"totalGold"],[466,23,528,21],[466,26,528,24],[466,27,528,25],[467,10,529,8],[467,16,529,14,"zoneKills"],[467,25,529,30],[467,28,529,33],[467,30,529,35],[468,10,531,8],[468,16,531,14,"xpMultiplier"],[468,28,531,26],[468,31,531,29,"game"],[468,35,531,33],[468,36,531,34,"gameState"],[468,45,531,43],[468,46,531,44,"subscriptionBenefits"],[468,66,531,64],[468,68,531,66,"xp_multiplier"],[468,81,531,79],[468,85,531,83],[468,88,531,86],[469,10,532,8],[469,16,532,14,"goldMultiplier"],[469,30,532,28],[469,33,532,31,"game"],[469,37,532,35],[469,38,532,36,"gameState"],[469,47,532,45],[469,48,532,46,"subscriptionBenefits"],[469,68,532,66],[469,70,532,68,"drop_multiplier"],[469,85,532,83],[469,89,532,87],[469,92,532,90],[470,10,534,8,"unprocessedEnemies"],[470,28,534,26],[470,29,534,27,"forEach"],[470,36,534,34],[470,37,534,35,"enemy"],[470,42,534,40],[470,46,534,44],[471,12,535,10,"totalXP"],[471,19,535,17],[471,23,535,21],[471,24,535,22,"enemy"],[471,29,535,27],[471,30,535,28,"zoneXP"],[471,36,535,34],[471,40,535,38],[471,41,535,39],[471,45,535,43,"xpMultiplier"],[471,57,535,55],[472,12,536,10,"totalGold"],[472,21,536,19],[472,25,536,23],[472,27,536,25],[472,30,536,28,"goldMultiplier"],[472,44,536,42],[473,12,538,10],[473,16,538,14,"enemy"],[473,21,538,19],[473,22,538,20,"zoneTypeId"],[473,32,538,30],[473,34,538,32],[474,14,539,12,"zoneKills"],[474,23,539,21],[474,24,539,22,"push"],[474,28,539,26],[474,29,539,27],[475,16,540,14,"id"],[475,18,540,16],[475,20,540,18,"enemy"],[475,25,540,23],[475,26,540,24,"id"],[475,28,540,26],[476,16,541,14,"typeId"],[476,22,541,20],[476,24,541,22,"enemy"],[476,29,541,27],[476,30,541,28,"zoneTypeId"],[476,40,541,38],[477,16,542,14,"name"],[477,20,542,18],[477,22,542,20,"enemy"],[477,27,542,25],[477,28,542,26,"name"],[477,32,542,30],[478,16,543,14,"icon"],[478,20,543,18],[478,22,543,20],[478,26,543,24],[479,16,544,14,"hp"],[479,18,544,16],[479,20,544,18],[479,21,544,19],[480,16,545,14,"maxHP"],[480,21,545,19],[480,23,545,21,"enemy"],[480,28,545,26],[480,29,545,27,"maxHealth"],[480,38,545,36],[481,16,546,14,"attack"],[481,22,546,20],[481,24,546,22,"enemy"],[481,29,546,27],[481,30,546,28,"stats"],[481,35,546,33],[481,36,546,34,"attack"],[481,42,546,40],[482,16,547,14,"xp"],[482,18,547,16],[482,20,547,18,"enemy"],[482,25,547,23],[482,26,547,24,"zoneXP"],[482,32,547,30],[482,36,547,34],[482,37,547,35],[483,16,548,14,"position"],[483,24,548,22],[483,26,548,24,"enemy"],[483,31,548,29],[483,32,548,30,"position"],[484,14,549,12],[484,15,549,13],[484,16,549,14],[485,12,550,10],[486,10,551,8],[486,11,551,9],[486,12,551,10],[488,10,553,8],[489,10,554,8,"game"],[489,14,554,12],[489,15,554,13,"updateNinja"],[489,26,554,24],[489,27,554,25,"prev"],[489,31,554,29],[489,36,554,34],[490,12,555,10,"experience"],[490,22,555,20],[490,24,555,22,"prev"],[490,28,555,26],[490,29,555,27,"experience"],[490,39,555,37],[490,42,555,40,"totalXP"],[490,49,555,47],[491,12,556,10,"gold"],[491,16,556,14],[491,18,556,16,"prev"],[491,22,556,20],[491,23,556,21,"gold"],[491,27,556,25],[491,30,556,28,"totalGold"],[492,10,557,8],[492,11,557,9],[492,12,557,10],[492,13,557,11],[494,10,559,8],[495,10,560,8,"zoneKills"],[495,19,560,17],[495,20,560,18,"forEach"],[495,27,560,25],[495,28,560,26,"zoneEnemy"],[495,37,560,35],[495,41,560,39,"recordEnemyKill"],[495,56,560,54],[495,57,560,55,"zoneEnemy"],[495,66,560,64],[495,67,560,65],[495,68,560,66],[497,10,562,8],[498,10,563,8,"setCombatState"],[498,24,563,22],[498,25,563,23,"prev"],[498,29,563,27],[498,34,563,32],[499,12,564,10],[499,15,564,13,"prev"],[499,19,564,17],[500,12,565,10,"enemies"],[500,19,565,17],[500,21,565,19,"prev"],[500,25,565,23],[500,26,565,24,"enemies"],[500,33,565,31],[500,34,565,32,"map"],[500,37,565,35],[500,38,565,36,"enemy"],[500,43,565,41],[500,47,565,45],[501,14,566,12],[501,20,566,18,"wasProcessed"],[501,32,566,30],[501,35,566,33,"unprocessedEnemies"],[501,53,566,51],[501,54,566,52,"find"],[501,58,566,56],[501,59,566,57,"processed"],[501,68,566,66],[501,72,566,70,"processed"],[501,81,566,79],[501,82,566,80,"id"],[501,84,566,82],[501,89,566,87,"enemy"],[501,94,566,92],[501,95,566,93,"id"],[501,97,566,95],[501,98,566,96],[502,14,567,12],[502,21,567,19,"wasProcessed"],[502,33,567,31],[502,36,567,34],[503,16,567,36],[503,19,567,39,"enemy"],[503,24,567,44],[504,16,567,46,"xpAwarded"],[504,25,567,55],[504,27,567,57],[505,14,567,62],[505,15,567,63],[505,18,567,66,"enemy"],[505,23,567,71],[506,12,568,10],[506,13,568,11],[507,10,569,8],[507,11,569,9],[507,12,569,10],[507,13,569,11],[508,8,570,6],[509,6,571,4],[510,4,572,2],[510,5,572,3],[510,7,572,5],[510,8,572,6,"game"],[510,12,572,10],[510,13,572,11,"updateNinja"],[510,24,572,22],[510,26,572,24,"game"],[510,30,572,28],[510,31,572,29,"gameState"],[510,40,572,38],[510,41,572,39,"subscriptionBenefits"],[510,61,572,59],[510,63,572,61,"recordEnemyKill"],[510,78,572,76],[510,80,572,78,"spawnTestEnemy"],[510,94,572,92],[510,96,572,94,"spawnZoneEnemy"],[510,110,572,108],[510,111,572,109],[510,112,572,110],[510,113,572,111],[510,114,572,112],[512,4,574,2],[513,4,575,2],[513,10,575,8,"findClosestEnemyInternal"],[513,34,575,32],[513,37,575,36,"enemies"],[513,44,575,58],[513,48,575,83],[514,6,576,4],[514,10,576,8,"enemies"],[514,17,576,15],[514,18,576,16,"length"],[514,24,576,22],[514,29,576,27],[514,30,576,28],[514,32,576,30],[514,39,576,37],[514,43,576,41],[516,6,578,4],[517,6,579,4],[517,12,579,10,"SCREEN_WIDTH"],[517,24,579,22],[517,27,579,25],[517,30,579,28],[518,6,580,4],[518,12,580,10,"GAME_AREA_HEIGHT"],[518,28,580,26],[518,31,580,29],[518,34,580,32],[518,37,580,35],[518,40,580,38],[518,41,580,39],[518,42,580,40],[519,6,581,4],[519,12,581,10,"ninjaX"],[519,18,581,16],[519,21,581,19,"SCREEN_WIDTH"],[519,33,581,31],[519,36,581,34],[519,37,581,35],[520,6,582,4],[520,12,582,10,"ninjaY"],[520,18,582,16],[520,21,582,19,"GAME_AREA_HEIGHT"],[520,37,582,35],[520,40,582,38],[520,41,582,39],[521,6,584,4],[521,10,584,8,"closestEnemy"],[521,22,584,20],[521,25,584,23,"enemies"],[521,32,584,30],[521,33,584,31],[521,34,584,32],[521,35,584,33],[522,6,585,4],[522,10,585,8,"closestDistance"],[522,25,585,23],[522,28,585,26,"Infinity"],[522,36,585,34],[523,6,587,4,"enemies"],[523,13,587,11],[523,14,587,12,"forEach"],[523,21,587,19],[523,22,587,20,"enemy"],[523,27,587,25],[523,31,587,29],[524,8,588,6],[524,14,588,12,"distance"],[524,22,588,20],[524,25,588,23,"Math"],[524,29,588,27],[524,30,588,28,"sqrt"],[524,34,588,32],[524,35,589,8,"Math"],[524,39,589,12],[524,40,589,13,"pow"],[524,43,589,16],[524,44,589,17,"enemy"],[524,49,589,22],[524,50,589,23,"position"],[524,58,589,31],[524,59,589,32,"x"],[524,60,589,33],[524,63,589,36,"ninjaX"],[524,69,589,42],[524,71,589,44],[524,72,589,45],[524,73,589,46],[524,76,590,8,"Math"],[524,80,590,12],[524,81,590,13,"pow"],[524,84,590,16],[524,85,590,17,"enemy"],[524,90,590,22],[524,91,590,23,"position"],[524,99,590,31],[524,100,590,32,"y"],[524,101,590,33],[524,104,590,36,"ninjaY"],[524,110,590,42],[524,112,590,44],[524,113,590,45],[524,114,591,6],[524,115,591,7],[525,8,593,6],[525,12,593,10,"distance"],[525,20,593,18],[525,23,593,21,"closestDistance"],[525,38,593,36],[525,40,593,38],[526,10,594,8,"closestDistance"],[526,25,594,23],[526,28,594,26,"distance"],[526,36,594,34],[527,10,595,8,"closestEnemy"],[527,22,595,20],[527,25,595,23,"enemy"],[527,30,595,28],[528,8,596,6],[529,6,597,4],[529,7,597,5],[529,8,597,6],[530,6,599,4,"console"],[530,13,599,11],[530,14,599,12,"log"],[530,17,599,15],[530,18,599,16],[530,60,599,58,"closestDistance"],[530,75,599,73],[530,76,599,74,"toFixed"],[530,83,599,81],[530,84,599,82],[530,85,599,83],[530,86,599,84],[530,88,599,86],[530,89,599,87],[531,6,600,4],[531,13,600,11,"closestEnemy"],[531,25,600,23],[532,4,601,2],[532,5,601,3],[534,4,603,2],[535,4,604,2],[535,10,604,8,"findClosestEnemy"],[535,26,604,24],[535,29,604,27,"findClosestEnemy"],[535,30,604,27],[535,35,604,53],[536,6,605,4],[536,13,605,11,"findClosestEnemyInternal"],[536,37,605,35],[536,38,605,36,"combatState"],[536,49,605,47],[536,50,605,48,"enemies"],[536,57,605,55],[536,58,605,56],[537,4,606,2],[537,5,606,3],[539,4,608,2],[540,4,609,2],[541,4,610,2],[541,10,610,8],[541,11,610,9,"currentNinjaPosition"],[541,31,610,29],[541,33,610,31,"setCurrentNinjaPosition"],[541,56,610,54],[541,57,610,55],[541,60,610,58],[541,64,610,58,"useState"],[541,70,610,66],[541,71,610,66,"useState"],[541,79,610,66],[541,81,610,91],[542,6,610,93,"x"],[542,7,610,94],[542,9,610,96],[542,12,610,99],[543,6,610,101,"y"],[543,7,610,102],[543,9,610,104],[544,4,610,108],[544,5,610,109],[544,6,610,110],[545,4,611,2],[545,10,611,8],[545,11,611,9,"isManualControlActive"],[545,32,611,30],[545,34,611,32,"setIsManualControlActive"],[545,58,611,56],[545,59,611,57],[545,62,611,60],[545,66,611,60,"useState"],[545,72,611,68],[545,73,611,68,"useState"],[545,81,611,68],[545,83,611,69],[545,88,611,74],[545,89,611,75],[547,4,613,2],[548,4,614,2],[548,10,614,8,"updateNinjaPosition"],[548,29,614,27],[548,32,614,30],[548,36,614,30,"useCallback"],[548,42,614,41],[548,43,614,41,"useCallback"],[548,54,614,41],[548,56,614,43,"newPosition"],[548,67,614,78],[548,71,614,83],[549,6,615,4,"setCurrentNinjaPosition"],[549,29,615,27],[549,30,615,28,"newPosition"],[549,41,615,39],[549,42,615,40],[550,4,616,2],[550,5,616,3],[550,7,616,5],[550,9,616,7],[550,10,616,8],[552,4,618,2],[553,4,619,2],[553,10,619,8,"setManualControlActive"],[553,32,619,30],[553,35,619,33],[553,39,619,33,"useCallback"],[553,45,619,44],[553,46,619,44,"useCallback"],[553,57,619,44],[553,59,619,46,"active"],[553,65,619,61],[553,69,619,66],[554,6,620,4,"setIsManualControlActive"],[554,30,620,28],[554,31,620,29,"active"],[554,37,620,35],[554,38,620,36],[555,6,621,4,"console"],[555,13,621,11],[555,14,621,12,"log"],[555,17,621,15],[555,18,621,16],[555,39,621,37,"active"],[555,45,621,43],[555,48,621,46],[555,59,621,57],[555,62,621,60],[555,75,621,73],[555,88,621,86,"active"],[555,94,621,92],[555,97,621,95],[555,105,621,103],[555,108,621,106],[555,117,621,115],[555,119,621,117],[555,120,621,118],[556,4,622,2],[556,5,622,3],[556,7,622,5],[556,9,622,7],[556,10,622,8],[558,4,624,2],[559,4,625,2],[560,4,626,2],[562,4,628,2],[563,4,629,2],[563,10,629,8,"castAbility"],[563,21,629,19],[563,24,629,22,"castAbility"],[563,25,629,23,"state"],[563,30,629,41],[563,32,629,43,"slotIndex"],[563,41,629,60],[563,46,629,65],[564,6,630,4],[564,12,630,10,"deck"],[564,16,630,14],[564,19,630,17,"state"],[564,24,630,22],[564,25,630,23,"abilityManager"],[564,39,630,37],[564,40,630,38,"getDeck"],[564,47,630,45],[564,48,630,46],[564,49,630,47],[565,6,631,4],[565,12,631,10,"ability"],[565,19,631,17],[565,22,631,20,"deck"],[565,26,631,24],[565,27,631,25,"slots"],[565,32,631,30],[565,33,631,31,"slotIndex"],[565,42,631,40],[565,43,631,41],[566,6,632,4],[566,10,632,8],[566,11,632,9,"ability"],[566,18,632,16],[566,20,632,18],[567,6,634,4,"console"],[567,13,634,11],[567,14,634,12,"log"],[567,17,634,15],[567,18,634,16],[567,43,634,41,"ability"],[567,50,634,48],[567,51,634,49,"id"],[567,53,634,51],[567,67,634,65,"slotIndex"],[567,76,634,74],[567,78,634,76],[567,79,634,77],[569,6,636,4],[570,6,637,4],[570,10,637,8,"damage"],[570,16,637,14],[570,19,637,17,"ability"],[570,26,637,24],[570,27,637,25,"stats"],[570,32,637,30],[570,33,637,31,"baseDamage"],[570,43,637,41],[572,6,639,4],[573,6,640,4,"deck"],[573,10,640,8],[573,11,640,9,"activeSynergies"],[573,26,640,24],[573,27,640,25,"forEach"],[573,34,640,32],[573,35,640,33,"synergy"],[573,42,640,40],[573,46,640,44],[574,8,641,6],[574,12,641,10,"synergy"],[574,19,641,17],[574,20,641,18,"bonus"],[574,25,641,23],[574,26,641,24,"damageBonus"],[574,37,641,35],[574,41,642,10,"synergy"],[574,48,642,17],[574,49,642,18,"requiredTags"],[574,61,642,30],[574,62,642,31,"some"],[574,66,642,35],[574,67,642,36,"tag"],[574,70,642,39],[574,74,642,43,"ability"],[574,81,642,50],[574,82,642,51,"tags"],[574,86,642,55],[574,87,642,56,"includes"],[574,95,642,64],[574,96,642,65,"tag"],[574,99,642,68],[574,100,642,69],[574,101,642,70],[574,103,642,72],[575,10,643,8,"damage"],[575,16,643,14],[575,20,643,19],[575,21,643,20],[575,24,643,23,"synergy"],[575,31,643,30],[575,32,643,31,"bonus"],[575,37,643,36],[575,38,643,37,"damageBonus"],[575,49,643,48],[575,52,643,51],[575,55,643,55],[576,8,644,6],[577,6,645,4],[577,7,645,5],[577,8,645,6],[579,6,647,4],[580,6,648,4],[580,12,648,10,"isAOE"],[580,17,648,15],[580,20,648,18,"ability"],[580,27,648,25],[580,28,648,26,"effects"],[580,35,648,33],[580,36,648,34,"includes"],[580,44,648,42],[580,45,648,43],[580,50,648,48],[580,51,648,49],[580,55,648,53,"ability"],[580,62,648,60],[580,63,648,61,"stats"],[580,68,648,66],[580,69,648,67,"aoeRadius"],[580,78,648,76],[581,6,649,4,"console"],[581,13,649,11],[581,14,649,12,"log"],[581,17,649,15],[581,18,649,16],[581,39,649,37,"ability"],[581,46,649,44],[581,47,649,45,"name"],[581,51,649,49],[581,66,649,64,"JSON"],[581,70,649,68],[581,71,649,69,"stringify"],[581,80,649,78],[581,81,649,79,"ability"],[581,88,649,86],[581,89,649,87,"effects"],[581,96,649,94],[581,97,649,95],[581,113,649,111,"ability"],[581,120,649,118],[581,121,649,119,"stats"],[581,126,649,124],[581,127,649,125,"aoeRadius"],[581,136,649,134],[581,148,649,146,"isAOE"],[581,153,649,151],[581,155,649,153],[581,156,649,154],[582,6,651,4],[582,10,651,8,"isAOE"],[582,15,651,13],[582,17,651,15],[583,8,652,6,"console"],[583,15,652,13],[583,16,652,14,"log"],[583,19,652,17],[583,20,652,18],[583,39,652,37,"ability"],[583,46,652,44],[583,47,652,45,"name"],[583,51,652,49],[583,67,652,65,"ability"],[583,74,652,72],[583,75,652,73,"stats"],[583,80,652,78],[583,81,652,79,"aoeRadius"],[583,90,652,88],[583,92,652,90],[583,93,652,91],[585,8,654,6],[586,8,655,6],[587,8,656,6],[587,14,656,12,"ninjaX"],[587,20,656,18],[587,23,656,21,"currentNinjaPosition"],[587,43,656,41],[587,44,656,42,"x"],[587,45,656,43],[587,48,656,46],[587,50,656,48],[587,51,656,49],[587,52,656,50],[588,8,657,6],[588,14,657,12,"ninjaY"],[588,20,657,18],[588,23,657,21,"currentNinjaPosition"],[588,43,657,41],[588,44,657,42,"y"],[588,45,657,43],[588,48,657,46],[588,50,657,48],[589,8,658,6],[589,14,658,12,"aoeRadius"],[589,23,658,21],[589,26,658,24,"ability"],[589,33,658,31],[589,34,658,32,"stats"],[589,39,658,37],[589,40,658,38,"aoeRadius"],[589,49,658,47],[590,8,660,6],[590,14,660,12,"enemiesInRange"],[590,28,660,26],[590,31,660,29,"state"],[590,36,660,34],[590,37,660,35,"enemies"],[590,44,660,42],[590,45,660,43,"filter"],[590,51,660,49],[590,52,660,50,"enemy"],[590,57,660,55],[590,61,660,59],[591,10,661,8],[591,16,661,14,"enemyX"],[591,22,661,20],[591,25,661,23,"enemy"],[591,30,661,28],[591,31,661,29,"position"],[591,39,661,37],[591,40,661,38,"x"],[591,41,661,39],[591,44,661,42],[591,48,661,46],[591,49,661,47],[591,50,661,48],[592,10,662,8],[592,16,662,14,"enemyY"],[592,22,662,20],[592,25,662,23,"enemy"],[592,30,662,28],[592,31,662,29,"position"],[592,39,662,37],[592,40,662,38,"y"],[592,41,662,39],[592,44,662,42],[592,48,662,46],[593,10,663,8],[593,16,663,14,"distance"],[593,24,663,22],[593,27,663,25,"Math"],[593,31,663,29],[593,32,663,30,"sqrt"],[593,36,663,34],[593,37,663,35,"Math"],[593,41,663,39],[593,42,663,40,"pow"],[593,45,663,43],[593,46,663,44,"enemyX"],[593,52,663,50],[593,55,663,53,"ninjaX"],[593,61,663,59],[593,63,663,61],[593,64,663,62],[593,65,663,63],[593,68,663,66,"Math"],[593,72,663,70],[593,73,663,71,"pow"],[593,76,663,74],[593,77,663,75,"enemyY"],[593,83,663,81],[593,86,663,84,"ninjaY"],[593,92,663,90],[593,94,663,92],[593,95,663,93],[593,96,663,94],[593,97,663,95],[594,10,664,8],[594,17,664,15,"distance"],[594,25,664,23],[594,29,664,27,"aoeRadius"],[594,38,664,36],[595,8,665,6],[595,9,665,7],[595,10,665,8],[596,8,667,6,"console"],[596,15,667,13],[596,16,667,14,"log"],[596,19,667,17],[596,20,667,18],[596,45,667,43,"enemiesInRange"],[596,59,667,57],[596,60,667,58,"length"],[596,66,667,64],[596,88,667,86,"aoeRadius"],[596,97,667,95],[596,107,667,105],[596,108,667,106],[598,8,669,6],[599,8,670,6,"enemiesInRange"],[599,22,670,20],[599,23,670,21,"forEach"],[599,30,670,28],[599,31,670,29,"enemy"],[599,36,670,34],[599,40,670,38],[600,10,671,8],[600,16,671,14,"damageResult"],[600,28,671,26],[600,31,671,29,"DamageCalculator"],[600,50,671,45],[600,51,671,45,"DamageCalculator"],[600,67,671,45],[600,68,671,46,"calculateDamage"],[600,83,671,61],[600,84,671,62,"damage"],[600,90,671,68],[600,92,671,70,"state"],[600,97,671,75],[600,98,671,76,"playerStats"],[600,109,671,87],[600,111,671,89,"enemy"],[600,116,671,94],[600,117,671,95,"stats"],[600,122,671,100],[600,123,671,101],[601,10,672,8,"createProjectile"],[601,26,672,24],[601,27,672,25,"enemy"],[601,32,672,30],[601,34,672,32,"damageResult"],[601,46,672,44],[601,47,672,45,"damage"],[601,53,672,51],[601,55,672,53,"currentNinjaPosition"],[601,75,672,73],[601,77,672,75],[602,12,673,10,"id"],[602,14,673,12],[602,16,673,14,"ability"],[602,23,673,21],[602,24,673,22,"id"],[602,26,673,24],[603,12,674,10,"name"],[603,16,674,14],[603,18,674,16,"ability"],[603,25,674,23],[603,26,674,24,"name"],[603,30,674,28],[604,12,675,10,"icon"],[604,16,675,14],[604,18,675,16,"ability"],[604,25,675,23],[604,26,675,24,"icon"],[605,10,676,8],[605,11,676,9],[605,12,676,10],[606,10,677,8,"console"],[606,17,677,15],[606,18,677,16,"log"],[606,21,677,19],[606,22,677,20],[606,37,677,35,"enemy"],[606,42,677,40],[606,43,677,41,"name"],[606,47,677,45],[606,55,677,53,"damageResult"],[606,67,677,65],[606,68,677,66,"damage"],[606,74,677,72],[606,83,677,81],[606,84,677,82],[608,10,679,8],[609,10,680,8],[609,14,680,12,"damageResult"],[609,26,680,24],[609,27,680,25,"damage"],[609,33,680,31],[609,37,680,35,"enemy"],[609,42,680,40],[609,43,680,41,"health"],[609,49,680,47],[609,51,680,49],[610,12,681,10,"console"],[610,19,681,17],[610,20,681,18,"log"],[610,23,681,21],[610,24,681,22],[610,67,681,65,"enemy"],[610,72,681,70],[610,73,681,71,"name"],[610,77,681,75],[610,90,681,88,"damageResult"],[610,102,681,100],[610,103,681,101,"damage"],[610,109,681,107],[610,124,681,122,"enemy"],[610,129,681,127],[610,130,681,128,"health"],[610,136,681,134],[610,139,681,137],[610,140,681,138],[611,10,682,8],[612,8,683,6],[612,9,683,7],[612,10,683,8],[613,8,685,6,"console"],[613,15,685,13],[613,16,685,14,"log"],[613,19,685,17],[613,20,685,18],[613,26,685,24,"ability"],[613,33,685,31],[613,34,685,32,"name"],[613,38,685,36],[613,56,685,54,"enemiesInRange"],[613,70,685,68],[613,71,685,69,"length"],[613,77,685,75],[613,93,685,91,"damage"],[613,99,685,97],[613,118,685,116],[613,119,685,117],[614,6,687,4],[614,7,687,5],[614,13,687,11],[615,8,688,6],[616,8,689,6],[616,14,689,12,"target"],[616,20,689,18],[616,23,689,21,"findClosestEnemyInternal"],[616,47,689,45],[616,48,689,46,"state"],[616,53,689,51],[616,54,689,52,"enemies"],[616,61,689,59],[616,62,689,60],[617,8,690,6],[617,12,690,10],[617,13,690,11,"target"],[617,19,690,17],[617,21,690,19],[618,8,692,6],[618,14,692,12,"damageResult"],[618,26,692,24],[618,29,692,27,"DamageCalculator"],[618,48,692,43],[618,49,692,43,"DamageCalculator"],[618,65,692,43],[618,66,692,44,"calculateDamage"],[618,81,692,59],[618,82,692,60,"damage"],[618,88,692,66],[618,90,692,68,"state"],[618,95,692,73],[618,96,692,74,"playerStats"],[618,107,692,85],[618,109,692,87,"target"],[618,115,692,93],[618,116,692,94,"stats"],[618,121,692,99],[618,122,692,100],[620,8,694,6],[621,8,695,6,"console"],[621,15,695,13],[621,16,695,14,"log"],[621,19,695,17],[621,20,695,18],[621,71,695,69,"target"],[621,77,695,75],[621,78,695,76,"name"],[621,82,695,80],[621,91,695,89,"damageResult"],[621,103,695,101],[621,104,695,102,"damage"],[621,110,695,108],[621,119,695,117],[621,120,695,118],[622,8,696,6,"createProjectile"],[622,24,696,22],[622,25,696,23,"target"],[622,31,696,29],[622,33,696,31,"damageResult"],[622,45,696,43],[622,46,696,44,"damage"],[622,52,696,50],[622,54,696,52,"currentNinjaPosition"],[622,74,696,72],[622,76,696,74],[623,10,697,8,"id"],[623,12,697,10],[623,14,697,12,"ability"],[623,21,697,19],[623,22,697,20,"id"],[623,24,697,22],[624,10,698,8,"name"],[624,14,698,12],[624,16,698,14,"ability"],[624,23,698,21],[624,24,698,22,"name"],[624,28,698,26],[625,10,699,8,"icon"],[625,14,699,12],[625,16,699,14,"ability"],[625,23,699,21],[625,24,699,22,"icon"],[626,8,700,6],[626,9,700,7],[626,10,700,8],[627,8,702,6,"console"],[627,15,702,13],[627,16,702,14,"log"],[627,19,702,17],[627,20,702,18],[627,26,702,24,"ability"],[627,33,702,31],[627,34,702,32,"name"],[627,38,702,36],[627,66,702,64,"damageResult"],[627,78,702,76],[627,79,702,77,"damage"],[627,85,702,83],[627,95,702,93,"damageResult"],[627,107,702,105],[627,108,702,106,"isCritical"],[627,118,702,116],[627,121,702,119],[627,131,702,129],[627,134,702,132],[627,136,702,134],[627,138,702,136],[627,139,702,137],[629,8,704,6],[630,8,705,6],[630,12,705,10,"damageResult"],[630,24,705,22],[630,25,705,23,"damage"],[630,31,705,29],[630,35,705,33,"target"],[630,41,705,39],[630,42,705,40,"health"],[630,48,705,46],[630,50,705,48],[631,10,706,8,"console"],[631,17,706,15],[631,18,706,16,"log"],[631,21,706,19],[631,22,706,20],[631,75,706,73,"target"],[631,81,706,79],[631,82,706,80,"name"],[631,86,706,84],[631,99,706,97,"damageResult"],[631,111,706,109],[631,112,706,110,"damage"],[631,118,706,116],[631,133,706,131,"target"],[631,139,706,137],[631,140,706,138,"health"],[631,146,706,144],[631,149,706,147],[631,150,706,148],[632,8,707,6],[633,6,708,4],[635,6,710,4],[636,6,711,4],[636,10,711,8,"ability"],[636,17,711,15],[636,18,711,16,"effects"],[636,25,711,23],[636,26,711,24,"includes"],[636,34,711,32],[636,35,711,33],[636,40,711,38],[636,41,711,39],[636,45,711,43,"ability"],[636,52,711,50],[636,53,711,51,"stats"],[636,58,711,56],[636,59,711,57,"duration"],[636,67,711,65],[636,69,711,67],[637,8,712,6],[637,14,712,12,"targets"],[637,21,712,19],[637,24,712,22,"isAOE"],[637,29,712,27],[637,32,713,8,"state"],[637,37,713,13],[637,38,713,14,"enemies"],[637,45,713,21],[637,46,713,22,"filter"],[637,52,713,28],[637,53,713,29,"enemy"],[637,58,713,34],[637,62,713,38],[638,10,714,10],[638,16,714,16,"ninjaX"],[638,22,714,22],[638,25,714,25,"currentNinjaPosition"],[638,45,714,45],[638,46,714,46,"x"],[638,47,714,47],[638,50,714,50],[638,52,714,52],[639,10,715,10],[639,16,715,16,"ninjaY"],[639,22,715,22],[639,25,715,25,"currentNinjaPosition"],[639,45,715,45],[639,46,715,46,"y"],[639,47,715,47],[639,50,715,50],[639,52,715,52],[640,10,716,10],[640,16,716,16,"enemyX"],[640,22,716,22],[640,25,716,25,"enemy"],[640,30,716,30],[640,31,716,31,"position"],[640,39,716,39],[640,40,716,40,"x"],[640,41,716,41],[640,44,716,44],[640,48,716,48],[641,10,717,10],[641,16,717,16,"enemyY"],[641,22,717,22],[641,25,717,25,"enemy"],[641,30,717,30],[641,31,717,31,"position"],[641,39,717,39],[641,40,717,40,"y"],[641,41,717,41],[641,44,717,44],[641,48,717,48],[642,10,718,10],[642,16,718,16,"distance"],[642,24,718,24],[642,27,718,27,"Math"],[642,31,718,31],[642,32,718,32,"sqrt"],[642,36,718,36],[642,37,718,37,"Math"],[642,41,718,41],[642,42,718,42,"pow"],[642,45,718,45],[642,46,718,46,"enemyX"],[642,52,718,52],[642,55,718,55,"ninjaX"],[642,61,718,61],[642,63,718,63],[642,64,718,64],[642,65,718,65],[642,68,718,68,"Math"],[642,72,718,72],[642,73,718,73,"pow"],[642,76,718,76],[642,77,718,77,"enemyY"],[642,83,718,83],[642,86,718,86,"ninjaY"],[642,92,718,92],[642,94,718,94],[642,95,718,95],[642,96,718,96],[642,97,718,97],[643,10,719,10],[643,17,719,17,"distance"],[643,25,719,25],[643,29,719,29,"ability"],[643,36,719,36],[643,37,719,37,"stats"],[643,42,719,42],[643,43,719,43,"aoeRadius"],[643,52,719,52],[644,8,720,8],[644,9,720,9],[644,10,720,10],[644,13,721,8],[644,14,721,9,"findClosestEnemyInternal"],[644,38,721,33],[644,39,721,34,"state"],[644,44,721,39],[644,45,721,40,"enemies"],[644,52,721,47],[644,53,721,48],[644,54,721,49],[644,55,721,50,"filter"],[644,61,721,56],[644,62,721,57,"Boolean"],[644,69,721,64],[644,70,721,65],[645,8,723,6,"targets"],[645,15,723,13],[645,16,723,14,"forEach"],[645,23,723,21],[645,24,723,22,"target"],[645,30,723,28],[645,34,723,32],[646,10,724,8,"state"],[646,15,724,13],[646,16,724,14,"statusEffects"],[646,29,724,27],[646,30,724,28,"addEffect"],[646,39,724,37],[646,40,724,38,"target"],[646,46,724,44],[646,47,724,45,"id"],[646,49,724,47],[646,51,724,49],[647,12,725,10,"id"],[647,14,725,12],[647,16,725,14],[647,19,725,17,"ability"],[647,26,725,24],[647,27,725,25,"id"],[647,29,725,27],[647,35,725,33],[648,12,726,10,"type"],[648,16,726,14],[648,18,726,16],[648,23,726,21],[649,12,727,10,"remainingTicks"],[649,26,727,24],[649,28,727,26,"Math"],[649,32,727,30],[649,33,727,31,"floor"],[649,38,727,36],[649,39,727,37,"ability"],[649,46,727,44],[649,47,727,45,"stats"],[649,52,727,50],[649,53,727,51,"duration"],[649,61,727,59],[649,64,727,62],[649,66,727,64],[649,67,727,65],[650,12,728,10,"tickInterval"],[650,24,728,22],[650,26,728,24],[650,28,728,26],[651,12,729,10,"lastTick"],[651,20,729,18],[651,22,729,20,"state"],[651,27,729,25],[651,28,729,26,"currentTick"],[651,39,729,37],[652,12,730,10,"value"],[652,17,730,15],[652,19,730,17,"Math"],[652,23,730,21],[652,24,730,22,"floor"],[652,29,730,27],[652,30,730,28,"damage"],[652,36,730,34],[652,39,730,37],[652,42,730,40],[652,43,730,41],[653,12,731,10,"stackable"],[653,21,731,19],[653,23,731,21],[654,10,732,8],[654,11,732,9],[654,12,732,10],[655,8,733,6],[655,9,733,7],[655,10,733,8],[656,6,734,4],[658,6,736,4],[659,6,737,4],[659,10,737,8,"ability"],[659,17,737,15],[659,18,737,16,"effects"],[659,25,737,23],[659,26,737,24,"includes"],[659,34,737,32],[659,35,737,33],[659,41,737,39],[659,42,737,40],[659,46,737,44,"ability"],[659,53,737,51],[659,54,737,52,"id"],[659,56,737,54],[659,61,737,59],[659,75,737,73],[659,77,737,75],[660,8,738,6,"console"],[660,15,738,13],[660,16,738,14,"log"],[660,19,738,17],[660,20,738,18],[660,66,738,64,"ability"],[660,73,738,71],[660,74,738,72,"stats"],[660,79,738,77],[660,80,738,78,"duration"],[660,88,738,86],[660,98,738,96],[660,99,738,97],[662,8,740,6],[663,8,741,6],[663,14,741,12,"cloneX"],[663,20,741,18],[663,23,741,21,"currentNinjaPosition"],[663,43,741,41],[663,44,741,42,"x"],[663,45,741,43],[663,48,741,46],[663,50,741,48],[663,51,741,49],[663,52,741,50],[664,8,742,6],[664,14,742,12,"cloneY"],[664,20,742,18],[664,23,742,21,"currentNinjaPosition"],[664,43,742,41],[664,44,742,42,"y"],[664,45,742,43],[664,48,742,46],[664,50,742,48],[664,51,742,49],[664,52,742,50],[666,8,744,6,"state"],[666,13,744,11],[666,14,744,12,"shadowClone"],[666,25,744,23],[666,28,744,26],[667,10,745,8,"id"],[667,12,745,10],[667,14,745,12],[667,30,745,28,"Date"],[667,34,745,32],[667,35,745,33,"now"],[667,38,745,36],[667,39,745,37],[667,40,745,38],[667,42,745,40],[668,10,746,8,"remainingTicks"],[668,24,746,22],[668,26,746,24,"Math"],[668,30,746,28],[668,31,746,29,"floor"],[668,36,746,34],[668,37,746,35,"ability"],[668,44,746,42],[668,45,746,43,"stats"],[668,50,746,48],[668,51,746,49,"duration"],[668,59,746,57],[668,62,746,60],[668,64,746,62],[668,65,746,63],[669,10,746,65],[670,10,747,8,"position"],[670,18,747,16],[670,20,747,18],[671,12,747,20,"x"],[671,13,747,21],[671,15,747,23,"cloneX"],[671,21,747,29],[672,12,747,31,"y"],[672,13,747,32],[672,15,747,34,"cloneY"],[673,10,747,41],[673,11,747,42],[674,10,748,8,"damageMultiplier"],[674,26,748,24],[674,28,748,26],[674,31,748,29],[674,32,748,31],[675,8,749,6],[675,9,749,7],[676,8,751,6,"console"],[676,15,751,13],[676,16,751,14,"log"],[676,19,751,17],[676,20,751,18],[676,63,751,61,"ability"],[676,70,751,68],[676,71,751,69,"stats"],[676,76,751,74],[676,77,751,75,"duration"],[676,85,751,83],[676,108,751,106],[676,109,751,107],[677,6,752,4],[678,4,753,2],[678,5,753,3],[680,4,755,2],[681,4,756,2],[681,10,756,8,"createProjectile"],[681,26,756,24],[681,29,756,27,"createProjectile"],[681,30,756,28,"targetEnemy"],[681,41,756,52],[681,43,756,54,"damage"],[681,49,756,68],[681,51,756,70,"ninjaPos"],[681,59,756,103],[681,61,756,105,"abilityInfo"],[681,72,756,159],[681,74,756,161,"isAOE"],[681,79,756,176],[681,81,756,178,"aoeRadius"],[681,90,756,196],[681,95,756,201],[682,6,757,4],[682,10,757,8],[682,11,757,9,"targetEnemy"],[682,22,757,20],[682,24,757,22],[683,8,758,6,"console"],[683,15,758,13],[683,16,758,14,"log"],[683,19,758,17],[683,20,758,18],[683,65,758,63],[683,66,758,64],[684,8,759,6],[684,15,759,13],[684,19,759,17],[685,6,760,4],[687,6,762,4],[688,6,763,4,"console"],[688,13,763,11],[688,14,763,12,"log"],[688,17,763,15],[688,18,763,16],[688,52,763,50,"damage"],[688,58,763,56],[688,70,763,68,"targetEnemy"],[688,81,763,79],[688,82,763,80,"name"],[688,86,763,84],[688,91,763,89,"targetEnemy"],[688,102,763,100],[688,103,763,101,"health"],[688,109,763,107],[688,113,763,111,"targetEnemy"],[688,124,763,122],[688,125,763,123,"maxHealth"],[688,134,763,132],[688,140,763,138],[688,141,763,139],[689,6,765,4],[689,12,765,10,"SCREEN_WIDTH"],[689,24,765,22],[689,27,765,25],[689,30,765,28],[690,6,766,4],[690,12,766,10,"GAME_AREA_HEIGHT"],[690,28,766,26],[690,31,766,29],[690,34,766,32],[690,37,766,35],[690,40,766,38],[690,41,766,39],[690,42,766,40],[691,6,767,4],[691,12,767,10,"NINJA_SIZE"],[691,22,767,20],[691,25,767,23],[691,27,767,25],[693,6,769,4],[694,6,770,4],[694,12,770,10,"ninjaX"],[694,18,770,16],[694,21,770,19,"ninjaPos"],[694,29,770,27],[694,32,770,30,"ninjaPos"],[694,40,770,38],[694,41,770,39,"x"],[694,42,770,40],[694,45,770,43,"NINJA_SIZE"],[694,55,770,53],[694,58,770,56],[694,59,770,57],[694,62,770,60,"SCREEN_WIDTH"],[694,74,770,72],[694,77,770,75],[694,78,770,76],[695,6,771,4],[695,12,771,10,"ninjaY"],[695,18,771,16],[695,21,771,19,"ninjaPos"],[695,29,771,27],[695,32,771,30,"ninjaPos"],[695,40,771,38],[695,41,771,39,"y"],[695,42,771,40],[695,45,771,43,"NINJA_SIZE"],[695,55,771,53],[695,58,771,56],[695,59,771,57],[695,62,771,60,"GAME_AREA_HEIGHT"],[695,78,771,76],[695,81,771,79],[695,82,771,80],[696,6,772,4],[696,12,772,10,"ENEMY_SIZE"],[696,22,772,20],[696,25,772,23],[696,27,772,25],[697,6,774,4],[697,12,774,10,"projectileId"],[697,24,774,22],[697,27,774,25],[697,35,774,33,"Date"],[697,39,774,37],[697,40,774,38,"now"],[697,43,774,41],[697,44,774,42],[697,45,774,43],[697,49,774,47,"Math"],[697,53,774,51],[697,54,774,52,"random"],[697,60,774,58],[697,61,774,59],[697,62,774,60],[697,64,774,62],[698,6,776,4],[698,12,776,10,"projectile"],[698,22,776,38],[698,25,776,41],[699,8,777,6,"id"],[699,10,777,8],[699,12,777,10,"projectileId"],[699,24,777,22],[700,8,778,6,"x"],[700,9,778,7],[700,11,778,9,"ninjaX"],[700,17,778,15],[701,8,779,6,"y"],[701,9,779,7],[701,11,779,9,"ninjaY"],[701,17,779,15],[702,8,780,6,"targetX"],[702,15,780,13],[702,17,780,15,"targetEnemy"],[702,28,780,26],[702,29,780,27,"position"],[702,37,780,35],[702,38,780,36,"x"],[702,39,780,37],[702,42,780,40,"ENEMY_SIZE"],[702,52,780,50],[702,55,780,53],[702,56,780,54],[703,8,781,6,"targetY"],[703,15,781,13],[703,17,781,15,"targetEnemy"],[703,28,781,26],[703,29,781,27,"position"],[703,37,781,35],[703,38,781,36,"y"],[703,39,781,37],[703,42,781,40,"ENEMY_SIZE"],[703,52,781,50],[703,55,781,53],[703,56,781,54],[704,8,782,6,"targetEnemyId"],[704,21,782,19],[704,23,782,21,"targetEnemy"],[704,34,782,32],[704,35,782,33,"id"],[704,37,782,35],[705,8,783,6,"damage"],[705,14,783,12],[705,16,783,14,"damage"],[705,22,783,20],[706,8,784,6,"startTime"],[706,17,784,15],[706,19,784,17,"Date"],[706,23,784,21],[706,24,784,22,"now"],[706,27,784,25],[706,28,784,26],[706,29,784,27],[707,8,785,6,"duration"],[707,16,785,14],[707,18,785,16],[707,21,785,19],[708,8,785,21],[709,8,786,6],[710,8,787,6,"abilityId"],[710,17,787,15],[710,19,787,17,"abilityInfo"],[710,30,787,28],[710,32,787,30,"id"],[710,34,787,32],[710,38,787,36],[710,54,787,52],[711,8,788,6,"abilityName"],[711,19,788,17],[711,21,788,19,"abilityInfo"],[711,32,788,30],[711,34,788,32,"name"],[711,38,788,36],[711,42,788,40],[711,58,788,56],[712,8,789,6,"abilityIcon"],[712,19,789,17],[712,21,789,19,"abilityInfo"],[712,32,789,30],[712,34,789,32,"icon"],[712,38,789,36],[712,42,789,40],[712,46,789,44],[713,8,789,46],[714,8,790,6],[715,8,791,6,"isAOE"],[715,13,791,11],[715,15,791,13,"isAOE"],[715,20,791,18],[715,24,791,22],[715,29,791,27],[716,8,792,6,"aoeRadius"],[716,17,792,15],[716,19,792,17,"aoeRadius"],[716,28,792,26],[716,32,792,30],[717,6,793,4],[717,7,793,5],[718,6,795,4,"console"],[718,13,795,11],[718,14,795,12,"log"],[718,17,795,15],[718,18,795,16],[718,44,795,42,"abilityInfo"],[718,55,795,53],[718,57,795,55,"name"],[718,61,795,59],[718,65,795,63],[718,81,795,79],[718,101,795,99,"projectileId"],[718,113,795,111],[718,128,795,126,"targetEnemy"],[718,139,795,137],[718,140,795,138,"name"],[718,144,795,142],[718,152,795,150,"damage"],[718,158,795,156],[718,167,795,165],[718,168,795,166],[719,6,796,4,"console"],[719,13,796,11],[719,14,796,12,"log"],[719,17,796,15],[719,18,796,16],[719,48,796,46,"isAOE"],[719,53,796,51],[719,68,796,66,"aoeRadius"],[719,77,796,75],[719,89,796,87,"damage"],[719,95,796,93],[719,97,796,95],[719,98,796,96],[720,6,798,4,"console"],[720,13,798,11],[720,14,798,12,"log"],[720,17,798,15],[720,18,798,16],[720,53,798,51,"targetEnemy"],[720,64,798,62],[720,65,798,63,"id"],[720,67,798,65],[720,75,798,73,"damage"],[720,81,798,79],[720,90,798,88],[720,91,798,89],[721,6,799,4,"console"],[721,13,799,11],[721,14,799,12,"log"],[721,17,799,15],[721,18,799,16],[721,53,799,51,"ninjaX"],[721,59,799,57],[721,64,799,62,"ninjaY"],[721,70,799,68],[721,87,799,85,"projectile"],[721,97,799,95],[721,98,799,96,"targetX"],[721,105,799,103],[721,110,799,108,"projectile"],[721,120,799,118],[721,121,799,119,"targetY"],[721,128,799,126],[721,131,799,129],[721,132,799,130],[722,6,801,4,"setProjectiles"],[722,20,801,18],[722,21,801,19,"prev"],[722,25,801,23],[722,29,801,27],[722,30,801,28],[722,33,801,31,"prev"],[722,37,801,35],[722,39,801,37,"projectile"],[722,49,801,47],[722,50,801,48],[722,51,801,49],[724,6,803,4],[725,6,804,4],[727,6,806,4],[727,13,806,11,"projectile"],[727,23,806,21],[728,4,807,2],[728,5,807,3],[730,4,809,2],[731,4,810,2],[731,10,810,8,"spawnTestEnemy"],[731,24,810,22],[731,27,810,26,"state"],[731,32,810,44],[731,36,810,49],[732,6,811,4,"console"],[732,13,811,11],[732,14,811,12,"log"],[732,17,811,15],[732,18,811,16],[732,83,811,81],[732,84,811,82],[734,6,813,4],[735,6,814,4],[735,12,814,10,"zoneEnemy"],[735,21,814,19],[735,24,814,22,"spawnZoneEnemy"],[735,38,814,36],[735,39,814,37],[735,40,814,38],[736,6,815,4],[736,10,815,8],[736,11,815,9,"zoneEnemy"],[736,20,815,18],[736,22,815,20],[737,8,816,6,"console"],[737,15,816,13],[737,16,816,14,"log"],[737,19,816,17],[737,20,816,18],[737,76,816,74],[737,77,816,75],[738,8,817,6],[739,8,818,6,"spawnBasicTestEnemy"],[739,27,818,25],[739,28,818,26,"state"],[739,33,818,31],[739,34,818,32],[740,8,819,6],[741,6,820,4],[742,6,822,4,"console"],[742,13,822,11],[742,14,822,12,"log"],[742,17,822,15],[742,18,822,16],[742,44,822,42,"zoneEnemy"],[742,53,822,51],[742,54,822,52,"name"],[742,58,822,56],[742,63,822,61,"zoneEnemy"],[742,72,822,70],[742,73,822,71,"typeId"],[742,79,822,77],[742,94,822,92,"currentZone"],[742,105,822,103],[742,107,822,105,"id"],[742,109,822,107],[742,119,822,117,"currentZoneLevel"],[742,135,822,133],[742,137,822,135,"level"],[742,142,822,140],[742,144,822,142],[742,145,822,143],[744,6,824,4],[745,6,825,4],[745,12,825,10,"combatEnemy"],[745,23,825,34],[745,26,825,37],[746,8,826,6,"id"],[746,10,826,8],[746,12,826,10,"zoneEnemy"],[746,21,826,19],[746,22,826,20,"id"],[746,24,826,22],[747,8,827,6,"name"],[747,12,827,10],[747,14,827,12,"zoneEnemy"],[747,23,827,21],[747,24,827,22,"name"],[747,28,827,26],[748,8,828,6,"health"],[748,14,828,12],[748,16,828,14,"zoneEnemy"],[748,25,828,23],[748,26,828,24,"hp"],[748,28,828,26],[749,8,829,6,"maxHealth"],[749,17,829,15],[749,19,829,17,"zoneEnemy"],[749,28,829,26],[749,29,829,27,"maxHP"],[749,34,829,32],[750,8,830,6,"stats"],[750,13,830,11],[750,15,830,13],[751,10,831,8,"attack"],[751,16,831,14],[751,18,831,16,"zoneEnemy"],[751,27,831,25],[751,28,831,26,"attack"],[751,34,831,32],[752,10,832,8,"defense"],[752,17,832,15],[752,19,832,17],[752,21,832,19],[753,10,832,21],[754,10,833,8,"health"],[754,16,833,14],[754,18,833,16,"zoneEnemy"],[754,27,833,25],[754,28,833,26,"hp"],[754,30,833,28],[755,10,834,8,"maxHealth"],[755,19,834,17],[755,21,834,19,"zoneEnemy"],[755,30,834,28],[755,31,834,29,"maxHP"],[755,36,834,34],[756,10,835,8,"critChance"],[756,20,835,18],[756,22,835,20],[756,23,835,21],[757,10,836,8,"critDamage"],[757,20,836,18],[757,22,836,20],[757,25,836,23],[758,10,837,8,"cooldownReduction"],[758,27,837,25],[758,29,837,27],[759,8,838,6],[759,9,838,7],[760,8,839,6,"position"],[760,16,839,14],[760,18,839,16,"zoneEnemy"],[760,27,839,25],[760,28,839,26,"position"],[760,36,839,34],[761,8,840,6,"lastDamaged"],[761,19,840,17],[761,21,840,19],[761,22,840,20],[762,8,841,6],[763,8,842,6,"zoneTypeId"],[763,18,842,16],[763,20,842,18,"zoneEnemy"],[763,29,842,27],[763,30,842,28,"typeId"],[763,36,842,34],[764,8,843,6,"zoneXP"],[764,14,843,12],[764,16,843,14,"zoneEnemy"],[764,25,843,23],[764,26,843,24,"xp"],[765,6,844,4],[765,7,844,5],[766,6,846,4,"console"],[766,13,846,11],[766,14,846,12,"log"],[766,17,846,15],[766,18,846,16],[766,42,846,40,"combatEnemy"],[766,53,846,51],[766,54,846,52,"name"],[766,58,846,56],[766,67,846,65,"combatEnemy"],[766,78,846,76],[766,79,846,77,"health"],[766,85,846,83],[766,100,846,98,"currentZone"],[766,111,846,109],[766,113,846,111,"id"],[766,115,846,113],[766,125,846,123,"currentZoneLevel"],[766,141,846,139],[766,143,846,141,"level"],[766,148,846,146],[766,150,846,148],[766,151,846,149],[767,6,847,4,"state"],[767,11,847,9],[767,12,847,10,"enemies"],[767,19,847,17],[767,20,847,18,"push"],[767,24,847,22],[767,25,847,23,"combatEnemy"],[767,36,847,34],[767,37,847,35],[768,4,848,2],[768,5,848,3],[770,4,850,2],[771,4,851,2],[771,10,851,8,"spawnBasicTestEnemy"],[771,29,851,27],[771,32,851,31,"state"],[771,37,851,49],[771,41,851,54],[772,6,852,4],[772,12,852,10,"SCREEN_WIDTH"],[772,24,852,22],[772,27,852,25],[772,30,852,28],[773,6,853,4],[773,12,853,10,"GAME_AREA_HEIGHT"],[773,28,853,26],[773,31,853,29],[773,34,853,32],[773,37,853,35],[773,40,853,38],[774,6,854,4],[774,12,854,10,"ENEMY_SIZE"],[774,22,854,20],[774,25,854,23],[774,27,854,25],[775,6,856,4],[775,12,856,10,"x"],[775,13,856,11],[775,16,856,14,"Math"],[775,20,856,18],[775,21,856,19,"random"],[775,27,856,25],[775,28,856,26],[775,29,856,27],[775,33,856,31,"SCREEN_WIDTH"],[775,45,856,43],[775,48,856,46,"ENEMY_SIZE"],[775,58,856,56],[775,61,856,59],[775,62,856,60],[775,63,856,61],[775,66,856,64,"ENEMY_SIZE"],[775,76,856,74],[776,6,857,4],[776,12,857,10,"y"],[776,13,857,11],[776,16,857,14,"Math"],[776,20,857,18],[776,21,857,19,"random"],[776,27,857,25],[776,28,857,26],[776,29,857,27],[776,33,857,31,"GAME_AREA_HEIGHT"],[776,49,857,47],[776,52,857,50,"ENEMY_SIZE"],[776,62,857,60],[776,65,857,63],[776,66,857,64],[776,67,857,65],[776,70,857,68,"ENEMY_SIZE"],[776,80,857,78],[777,6,859,4],[777,12,859,10,"enemy"],[777,17,859,28],[777,20,859,31],[778,8,860,6,"id"],[778,10,860,8],[778,12,860,10],[778,30,860,28,"Date"],[778,34,860,32],[778,35,860,33,"now"],[778,38,860,36],[778,39,860,37],[778,40,860,38],[778,44,860,42,"Math"],[778,48,860,46],[778,49,860,47,"random"],[778,55,860,53],[778,56,860,54],[778,57,860,55],[778,59,860,57],[779,8,861,6,"name"],[779,12,861,10],[779,14,861,12],[779,26,861,24,"Math"],[779,30,861,28],[779,31,861,29,"floor"],[779,36,861,34],[779,37,861,35,"Math"],[779,41,861,39],[779,42,861,40,"random"],[779,48,861,46],[779,49,861,47],[779,50,861,48],[779,53,861,51],[779,56,861,54],[779,57,861,55],[779,59,861,57],[780,8,862,6,"health"],[780,14,862,12],[780,16,862,14],[780,18,862,16],[781,8,863,6,"maxHealth"],[781,17,863,15],[781,19,863,17],[781,21,863,19],[782,8,864,6,"stats"],[782,13,864,11],[782,15,864,13],[783,10,865,8,"attack"],[783,16,865,14],[783,18,865,16],[783,20,865,18],[784,10,866,8,"defense"],[784,17,866,15],[784,19,866,17],[784,21,866,19],[785,10,867,8,"health"],[785,16,867,14],[785,18,867,16],[785,20,867,18],[786,10,868,8,"maxHealth"],[786,19,868,17],[786,21,868,19],[786,23,868,21],[787,10,869,8,"critChance"],[787,20,869,18],[787,22,869,20],[787,23,869,21],[788,10,870,8,"critDamage"],[788,20,870,18],[788,22,870,20],[788,25,870,23],[789,10,871,8,"cooldownReduction"],[789,27,871,25],[789,29,871,27],[790,8,872,6],[790,9,872,7],[791,8,873,6,"position"],[791,16,873,14],[791,18,873,16],[792,10,873,18,"x"],[792,11,873,19],[793,10,873,21,"y"],[794,8,873,23],[794,9,873,24],[795,8,874,6,"lastDamaged"],[795,19,874,17],[795,21,874,19],[796,6,875,4],[796,7,875,5],[797,6,877,4,"console"],[797,13,877,11],[797,14,877,12,"log"],[797,17,877,15],[797,18,877,16],[797,42,877,40,"enemy"],[797,47,877,45],[797,48,877,46,"name"],[797,52,877,50],[797,60,877,58,"Math"],[797,64,877,62],[797,65,877,63,"round"],[797,70,877,68],[797,71,877,69,"x"],[797,72,877,70],[797,73,877,71],[797,78,877,76,"Math"],[797,82,877,80],[797,83,877,81,"round"],[797,88,877,86],[797,89,877,87,"y"],[797,90,877,88],[797,91,877,89],[797,94,877,92],[797,95,877,93],[798,6,878,4,"state"],[798,11,878,9],[798,12,878,10,"enemies"],[798,19,878,17],[798,20,878,18,"push"],[798,24,878,22],[798,25,878,23,"enemy"],[798,30,878,28],[798,31,878,29],[799,4,879,2],[799,5,879,3],[801,4,881,2],[802,4,882,2],[803,4,883,2],[803,10,883,8,"startCombat"],[803,21,883,19],[803,24,883,22,"React"],[803,29,883,27],[803,30,883,27,"default"],[803,37,883,27],[803,38,883,28,"useCallback"],[803,49,883,39],[803,50,883,40],[803,56,883,46],[804,6,884,4,"console"],[804,13,884,11],[804,14,884,12,"log"],[804,17,884,15],[804,18,884,16],[804,63,884,61],[804,64,884,62],[805,6,885,4,"console"],[805,13,885,11],[805,14,885,12,"log"],[805,17,885,15],[805,18,885,16],[805,37,885,35],[805,39,885,37,"combatEngine"],[805,58,885,49],[805,59,885,49,"combatEngine"],[805,71,885,49],[805,72,885,50],[806,6,886,4,"console"],[806,13,886,11],[806,14,886,12,"log"],[806,17,886,15],[806,18,886,16],[806,51,886,49],[806,53,886,51,"handleCombatTick"],[806,69,886,67],[806,70,886,68],[807,6,887,4,"setCombatState"],[807,20,887,18],[807,21,887,19,"prev"],[807,25,887,23],[807,30,887,28],[808,8,887,30],[808,11,887,33,"prev"],[808,15,887,37],[809,8,887,39,"isInCombat"],[809,18,887,49],[809,20,887,51],[810,6,887,56],[810,7,887,57],[810,8,887,58],[810,9,887,59],[812,6,889,4],[813,6,890,4,"combatEngine"],[813,25,890,16],[813,26,890,16,"combatEngine"],[813,38,890,16],[813,39,890,17,"addTickCallback"],[813,54,890,32],[813,55,890,33,"handleCombatTick"],[813,71,890,49],[813,72,890,50],[814,6,891,4,"console"],[814,13,891,11],[814,14,891,12,"log"],[814,17,891,15],[814,18,891,16],[814,62,891,60],[814,63,891,61],[816,6,893,4],[817,6,894,4,"combatEngine"],[817,25,894,16],[817,26,894,16,"combatEngine"],[817,38,894,16],[817,39,894,17,"start"],[817,44,894,22],[817,45,894,23],[817,46,894,24],[818,6,895,4,"console"],[818,13,895,11],[818,14,895,12,"log"],[818,17,895,15],[818,18,895,16],[818,51,895,49],[818,52,895,50],[819,4,896,2],[819,5,896,3],[819,7,896,5],[819,8,896,6,"combatEngine"],[819,27,896,18],[819,28,896,18,"combatEngine"],[819,40,896,18],[819,42,896,20,"handleCombatTick"],[819,58,896,36],[819,59,896,37],[819,60,896,38],[821,4,898,2],[822,4,899,2],[822,10,899,8,"stopCombat"],[822,20,899,18],[822,23,899,21,"React"],[822,28,899,26],[822,29,899,26,"default"],[822,36,899,26],[822,37,899,27,"useCallback"],[822,48,899,38],[822,49,899,39],[822,55,899,45],[823,6,900,4,"setCombatState"],[823,20,900,18],[823,21,900,19,"prev"],[823,25,900,23],[823,30,900,28],[824,8,900,30],[824,11,900,33,"prev"],[824,15,900,37],[825,8,900,39,"isInCombat"],[825,18,900,49],[825,20,900,51],[826,6,900,57],[826,7,900,58],[826,8,900,59],[826,9,900,60],[827,6,901,4,"combatEngine"],[827,25,901,16],[827,26,901,16,"combatEngine"],[827,38,901,16],[827,39,901,17,"removeTickCallback"],[827,57,901,35],[827,58,901,36,"handleCombatTick"],[827,74,901,52],[827,75,901,53],[828,4,902,2],[828,5,902,3],[828,7,902,5],[828,8,902,6,"combatEngine"],[828,27,902,18],[828,28,902,18,"combatEngine"],[828,40,902,18],[828,42,902,20,"handleCombatTick"],[828,58,902,36],[828,59,902,37],[828,60,902,38],[830,4,904,2],[831,4,905,2],[831,10,905,8,"equipAbility"],[831,22,905,20],[831,25,905,23,"equipAbility"],[831,26,905,24,"abilityId"],[831,35,905,41],[831,37,905,43,"slotIndex"],[831,46,905,60],[831,51,905,74],[832,6,906,4],[832,13,906,11,"combatState"],[832,24,906,22],[832,25,906,23,"abilityManager"],[832,39,906,37],[832,40,906,38,"equipAbility"],[832,52,906,50],[832,53,906,51,"abilityId"],[832,62,906,60],[832,64,906,62,"slotIndex"],[832,73,906,71],[832,74,906,72],[833,4,907,2],[833,5,907,3],[834,4,909,2],[834,10,909,8,"getDeck"],[834,17,909,15],[834,20,909,18,"getDeck"],[834,21,909,18],[834,26,909,24],[835,6,910,4],[835,13,910,11,"combatState"],[835,24,910,22],[835,25,910,23,"abilityManager"],[835,39,910,37],[835,40,910,38,"getDeck"],[835,47,910,45],[835,48,910,46],[835,49,910,47],[836,4,911,2],[836,5,911,3],[837,4,913,2],[837,10,913,8,"getAvailableAbilities"],[837,31,913,29],[837,34,913,32,"getAvailableAbilities"],[837,35,913,32],[837,40,913,38],[838,6,914,4],[838,13,914,11,"combatState"],[838,24,914,22],[838,25,914,23,"abilityManager"],[838,39,914,37],[838,40,914,38,"getAvailableAbilities"],[838,61,914,59],[838,62,914,60],[838,63,914,61],[839,4,915,2],[839,5,915,3],[840,4,917,2],[840,10,917,8,"upgradeAbility"],[840,24,917,22],[840,27,917,26,"abilityId"],[840,36,917,43],[840,40,917,57],[841,6,918,4],[841,13,918,11,"combatState"],[841,24,918,22],[841,25,918,23,"abilityManager"],[841,39,918,37],[841,40,918,38,"upgradeAbility"],[841,54,918,52],[841,55,918,53,"abilityId"],[841,64,918,62],[841,65,918,63],[842,4,919,2],[842,5,919,3],[844,4,921,2],[845,4,922,2],[845,10,922,8,"clearAllEnemies"],[845,25,922,23],[845,28,922,26,"clearAllEnemies"],[845,29,922,26],[845,34,922,32],[846,6,923,4,"console"],[846,13,923,11],[846,14,923,12,"log"],[846,17,923,15],[846,18,923,16],[846,67,923,65],[846,68,923,66],[847,6,924,4,"setCombatState"],[847,20,924,18],[847,21,924,19,"prev"],[847,25,924,23],[847,30,924,28],[848,8,925,6],[848,11,925,9,"prev"],[848,15,925,13],[849,8,926,6,"enemies"],[849,15,926,13],[849,17,926,15],[850,6,927,4],[850,7,927,5],[850,8,927,6],[850,9,927,7],[851,4,928,2],[851,5,928,3],[853,4,930,2],[854,4,931,2],[856,4,933,2],[857,4,934,2],[857,10,934,8,"spawnEnemy"],[857,20,934,18],[857,23,934,22,"position"],[857,31,934,57],[857,35,934,75],[858,6,935,4],[858,12,935,10,"SCREEN_WIDTH"],[858,24,935,22],[858,27,935,25],[858,30,935,28],[859,6,936,4],[859,12,936,10,"GAME_AREA_HEIGHT"],[859,28,936,26],[859,31,936,29],[859,34,936,32],[859,37,936,35],[859,40,936,38],[859,41,936,39],[859,42,936,40],[860,6,937,4],[860,12,937,10,"ENEMY_SIZE"],[860,22,937,20],[860,25,937,23],[860,27,937,25],[862,6,939,4],[863,6,940,4],[863,12,940,10,"x"],[863,13,940,11],[863,16,940,14,"position"],[863,24,940,22],[863,26,940,24,"x"],[863,27,940,25],[863,31,940,29,"Math"],[863,35,940,33],[863,36,940,34,"random"],[863,42,940,40],[863,43,940,41],[863,44,940,42],[863,48,940,46,"SCREEN_WIDTH"],[863,60,940,58],[863,63,940,61,"ENEMY_SIZE"],[863,73,940,71],[863,76,940,74],[863,77,940,75],[863,78,940,76],[863,81,940,79,"ENEMY_SIZE"],[863,91,940,89],[864,6,941,4],[864,12,941,10,"y"],[864,13,941,11],[864,16,941,14,"position"],[864,24,941,22],[864,26,941,24,"y"],[864,27,941,25],[864,31,941,29,"Math"],[864,35,941,33],[864,36,941,34,"random"],[864,42,941,40],[864,43,941,41],[864,44,941,42],[864,48,941,46,"GAME_AREA_HEIGHT"],[864,64,941,62],[864,67,941,65,"ENEMY_SIZE"],[864,77,941,75],[864,80,941,78],[864,81,941,79],[864,82,941,80],[864,85,941,83,"ENEMY_SIZE"],[864,95,941,93],[865,6,943,4],[865,12,943,10,"enemy"],[865,17,943,28],[865,20,943,31],[866,8,944,6,"id"],[866,10,944,8],[866,12,944,10],[866,21,944,19],[866,23,944,21,"enemyCounter"],[866,35,944,33],[866,37,944,35],[867,8,945,6,"name"],[867,12,945,10],[867,14,945,12],[867,24,945,22],[868,8,946,6,"health"],[868,14,946,12],[868,16,946,14],[868,19,946,17],[869,8,947,6,"maxHealth"],[869,17,947,15],[869,19,947,17],[869,22,947,20],[870,8,948,6,"stats"],[870,13,948,11],[870,15,948,13],[871,10,949,8,"attack"],[871,16,949,14],[871,18,949,16],[871,20,949,18],[872,10,950,8,"defense"],[872,17,950,15],[872,19,950,17],[872,21,950,19],[873,10,951,8,"health"],[873,16,951,14],[873,18,951,16],[873,21,951,19],[874,10,952,8,"maxHealth"],[874,19,952,17],[874,21,952,19],[874,24,952,22],[875,10,953,8,"critChance"],[875,20,953,18],[875,22,953,20],[875,23,953,21],[876,10,954,8,"critDamage"],[876,20,954,18],[876,22,954,20],[876,25,954,23],[877,10,955,8,"cooldownReduction"],[877,27,955,25],[877,29,955,27],[878,8,956,6],[878,9,956,7],[879,8,957,6,"position"],[879,16,957,14],[879,18,957,16],[880,10,957,18,"x"],[880,11,957,19],[881,10,957,21,"y"],[882,8,957,23],[882,9,957,24],[883,8,958,6,"lastDamaged"],[883,19,958,17],[883,21,958,19],[884,6,959,4],[884,7,959,5],[885,6,961,4,"setCombatState"],[885,20,961,18],[885,21,961,19,"prev"],[885,25,961,23],[885,30,961,28],[886,8,962,6],[886,11,962,9,"prev"],[886,15,962,13],[887,8,963,6,"enemies"],[887,15,963,13],[887,17,963,15],[887,18,963,16],[887,21,963,19,"prev"],[887,25,963,23],[887,26,963,24,"enemies"],[887,33,963,31],[887,35,963,33,"enemy"],[887,40,963,38],[888,6,964,4],[888,7,964,5],[888,8,964,6],[888,9,964,7],[889,6,966,4],[889,13,966,11,"enemy"],[889,18,966,16],[890,4,967,2],[890,5,967,3],[892,4,969,2],[893,4,970,2],[893,10,970,8,"spawnBoss"],[893,19,970,17],[893,22,970,21,"bossEnemy"],[893,31,970,43],[893,35,970,48],[894,6,971,4,"console"],[894,13,971,11],[894,14,971,12,"log"],[894,17,971,15],[894,18,971,16],[894,39,971,37,"bossEnemy"],[894,48,971,46],[894,49,971,47,"name"],[894,53,971,51],[894,90,971,88],[894,91,971,89],[895,6,972,4,"setCombatState"],[895,20,972,18],[895,21,972,19,"prev"],[895,25,972,23],[895,30,972,28],[896,8,973,6],[896,11,973,9,"prev"],[896,15,973,13],[897,8,974,6,"enemies"],[897,15,974,13],[897,17,974,15],[897,18,974,16,"bossEnemy"],[897,27,974,25],[897,28,974,26],[897,29,974,27],[898,6,975,4],[898,7,975,5],[898,8,975,6],[898,9,975,7],[899,4,976,2],[899,5,976,3],[901,4,978,2],[902,4,979,2],[902,10,979,8,"clearSpecificEnemy"],[902,28,979,26],[902,31,979,30,"enemyId"],[902,38,979,45],[902,42,979,50],[903,6,980,4,"setCombatState"],[903,20,980,18],[903,21,980,19,"prev"],[903,25,980,23],[903,30,980,28],[904,8,981,6],[904,11,981,9,"prev"],[904,15,981,13],[905,8,982,6,"enemies"],[905,15,982,13],[905,17,982,15,"prev"],[905,21,982,19],[905,22,982,20,"enemies"],[905,29,982,27],[905,30,982,28,"filter"],[905,36,982,34],[905,37,982,35,"enemy"],[905,42,982,40],[905,46,982,44,"enemy"],[905,51,982,49],[905,52,982,50,"id"],[905,54,982,52],[905,59,982,57,"enemyId"],[905,66,982,64],[906,6,983,4],[906,7,983,5],[906,8,983,6],[906,9,983,7],[907,4,984,2],[907,5,984,3],[909,4,986,2],[910,4,987,2],[910,10,987,8,"useAbilityManually"],[910,28,987,26],[910,31,987,29],[910,35,987,29,"useCallback"],[910,41,987,40],[910,42,987,40,"useCallback"],[910,53,987,40],[910,55,987,42,"slotIndex"],[910,64,987,59],[910,68,987,73],[911,6,988,4,"console"],[911,13,988,11],[911,14,988,12,"log"],[911,17,988,15],[911,18,988,16],[911,64,988,62,"slotIndex"],[911,73,988,71],[911,82,988,80],[911,83,988,81],[912,6,989,4,"console"],[912,13,989,11],[912,14,989,12,"log"],[912,17,989,15],[912,18,989,16],[912,65,989,63,"slotIndex"],[912,74,989,72],[912,76,989,74],[912,77,989,75],[913,6,990,4,"console"],[913,13,990,11],[913,14,990,12,"log"],[913,17,990,15],[913,18,990,16],[913,53,990,51,"slotIndex"],[913,62,990,60],[913,64,990,62],[913,65,990,63],[915,6,992,4],[916,6,993,4],[916,10,993,8],[916,11,993,9,"game"],[916,15,993,13],[916,16,993,14,"gameState"],[916,25,993,23],[916,26,993,24,"isAlive"],[916,33,993,31],[916,35,993,33],[917,8,994,6,"console"],[917,15,994,13],[917,16,994,14,"log"],[917,19,994,17],[917,20,994,18],[917,70,994,68],[917,71,994,69],[918,8,995,6],[918,15,995,13],[918,20,995,18],[919,6,996,4],[921,6,998,4],[922,6,999,4],[922,12,999,10,"isReady"],[922,19,999,17],[922,22,999,20,"combatState"],[922,33,999,31],[922,34,999,32,"abilityManager"],[922,48,999,46],[922,49,999,47,"isAbilityReady"],[922,63,999,61],[922,64,999,62,"slotIndex"],[922,73,999,71],[922,74,999,72],[923,6,1000,4],[923,10,1000,8],[923,11,1000,9,"isReady"],[923,18,1000,16],[923,20,1000,18],[924,8,1001,6,"console"],[924,15,1001,13],[924,16,1001,14,"log"],[924,19,1001,17],[924,20,1001,18],[924,41,1001,39,"slotIndex"],[924,50,1001,48],[924,85,1001,83],[924,86,1001,84],[925,8,1002,6],[925,15,1002,13],[925,20,1002,18],[926,6,1003,4],[928,6,1005,4],[929,6,1006,4],[929,10,1006,8,"combatState"],[929,21,1006,19],[929,22,1006,20,"enemies"],[929,29,1006,27],[929,30,1006,28,"length"],[929,36,1006,34],[929,41,1006,39],[929,42,1006,40],[929,44,1006,42],[930,8,1007,6,"console"],[930,15,1007,13],[930,16,1007,14,"log"],[930,19,1007,17],[930,20,1007,18],[930,69,1007,67],[930,70,1007,68],[931,8,1008,6],[931,15,1008,13],[931,20,1008,18],[932,6,1009,4],[934,6,1011,4],[935,6,1012,4],[935,12,1012,10,"currentTick"],[935,23,1012,21],[935,26,1012,24,"combatEngine"],[935,45,1012,36],[935,46,1012,36,"combatEngine"],[935,58,1012,36],[935,59,1012,37,"getCurrentTick"],[935,73,1012,51],[935,74,1012,52],[935,75,1012,53],[936,6,1013,4],[936,12,1013,10,"success"],[936,19,1013,17],[936,22,1013,20,"combatState"],[936,33,1013,31],[936,34,1013,32,"abilityManager"],[936,48,1013,46],[936,49,1013,47,"useAbility"],[936,59,1013,57],[936,60,1013,58,"slotIndex"],[936,69,1013,67],[936,71,1013,69,"currentTick"],[936,82,1013,80],[936,83,1013,81],[937,6,1015,4],[937,10,1015,8,"success"],[937,17,1015,15],[937,19,1015,17],[938,8,1016,6],[939,8,1017,6,"setCombatState"],[939,22,1017,20],[939,23,1017,21,"prev"],[939,27,1017,25],[939,31,1017,29],[940,10,1018,8],[940,16,1018,14,"newState"],[940,24,1018,22],[940,27,1018,25],[941,12,1018,27],[941,15,1018,30,"prev"],[942,10,1018,35],[942,11,1018,36],[943,10,1019,8,"castAbility"],[943,21,1019,19],[943,22,1019,20,"newState"],[943,30,1019,28],[943,32,1019,30,"slotIndex"],[943,41,1019,39],[943,42,1019,40],[944,10,1020,8],[944,17,1020,15,"newState"],[944,25,1020,23],[945,8,1021,6],[945,9,1021,7],[945,10,1021,8],[946,8,1023,6,"console"],[946,15,1023,13],[946,16,1023,14,"log"],[946,19,1023,17],[946,20,1023,18],[946,65,1023,63,"slotIndex"],[946,74,1023,72],[946,76,1023,74],[946,77,1023,75],[947,8,1024,6],[947,15,1024,13],[947,19,1024,17],[948,6,1025,4],[948,7,1025,5],[948,13,1025,11],[949,8,1026,6,"console"],[949,15,1026,13],[949,16,1026,14,"log"],[949,19,1026,17],[949,20,1026,18],[949,61,1026,59,"slotIndex"],[949,70,1026,68],[949,72,1026,70],[949,73,1026,71],[950,8,1027,6],[950,15,1027,13],[950,20,1027,18],[951,6,1028,4],[952,4,1029,2],[952,5,1029,3],[952,7,1029,5],[952,8,1029,6,"combatState"],[952,19,1029,17],[952,20,1029,18,"abilityManager"],[952,34,1029,32],[952,36,1029,34,"combatState"],[952,47,1029,45],[952,48,1029,46,"enemies"],[952,55,1029,53],[952,56,1029,54],[952,57,1029,55],[953,4,1030,2],[953,8,1030,2,"useEffect"],[953,14,1030,11],[953,15,1030,11,"useEffect"],[953,24,1030,11],[953,26,1030,12],[953,32,1030,18],[954,6,1031,4,"combatEngine"],[954,25,1031,16],[954,26,1031,16,"combatEngine"],[954,38,1031,16],[954,39,1031,17,"start"],[954,44,1031,22],[954,45,1031,23],[954,46,1031,24],[956,6,1033,4],[957,6,1034,4],[958,6,1035,4,"console"],[958,13,1035,11],[958,14,1035,12,"log"],[958,17,1035,15],[958,18,1035,16],[958,97,1035,95],[958,98,1035,96],[959,6,1037,4],[959,13,1037,11],[959,19,1037,17],[960,8,1038,6,"combatEngine"],[960,27,1038,18],[960,28,1038,18,"combatEngine"],[960,40,1038,18],[960,41,1038,19,"stop"],[960,45,1038,23],[960,46,1038,24],[960,47,1038,25],[961,6,1039,4],[961,7,1039,5],[962,4,1040,2],[962,5,1040,3],[962,7,1040,5],[962,9,1040,7],[962,10,1040,8],[964,4,1042,2],[965,4,1043,2],[965,8,1043,2,"useEffect"],[965,14,1043,11],[965,15,1043,11,"useEffect"],[965,24,1043,11],[965,26,1043,12],[965,32,1043,18],[966,6,1044,4],[967,6,1045,4],[967,12,1045,10,"tickInterval"],[967,24,1045,22],[967,27,1045,25,"Platform"],[967,35,1045,33],[967,36,1045,33,"default"],[967,43,1045,33],[967,44,1045,34,"OS"],[967,46,1045,36],[967,51,1045,41],[967,56,1045,46],[967,59,1045,49],[967,62,1045,52],[967,65,1045,55],[967,68,1045,58],[967,69,1045,59],[967,70,1045,60],[968,6,1046,4,"console"],[968,13,1046,11],[968,14,1046,12,"log"],[968,17,1046,15],[968,18,1046,16],[968,91,1046,89,"tickInterval"],[968,103,1046,101],[968,112,1046,110,"Platform"],[968,120,1046,118],[968,121,1046,118,"default"],[968,128,1046,118],[968,129,1046,119,"OS"],[968,131,1046,121],[968,133,1046,123],[968,134,1046,124],[969,6,1047,4],[969,12,1047,10,"combatTickInterval"],[969,30,1047,28],[969,33,1047,31,"setInterval"],[969,44,1047,42],[969,45,1047,43,"handleCombatTick"],[969,61,1047,59],[969,63,1047,61,"tickInterval"],[969,75,1047,73],[969,76,1047,74],[970,6,1049,4],[970,13,1049,11],[970,19,1049,17],[971,8,1050,6,"console"],[971,15,1050,13],[971,16,1050,14,"log"],[971,19,1050,17],[971,20,1050,18],[971,51,1050,49],[971,52,1050,50],[972,8,1051,6,"clearInterval"],[972,21,1051,19],[972,22,1051,20,"combatTickInterval"],[972,40,1051,38],[972,41,1051,39],[973,6,1052,4],[973,7,1052,5],[974,4,1053,2],[974,5,1053,3],[974,7,1053,5],[974,8,1053,6,"handleCombatTick"],[974,24,1053,22],[974,25,1053,23],[974,26,1053,24],[976,4,1055,2],[977,4,1056,2],[977,8,1056,2,"useEffect"],[977,14,1056,11],[977,15,1056,11,"useEffect"],[977,24,1056,11],[977,26,1056,12],[977,32,1056,18],[978,6,1057,4],[978,12,1057,10,"processProjectileImpacts"],[978,36,1057,34],[978,39,1057,37,"processProjectileImpacts"],[978,40,1057,37],[978,45,1057,43],[979,8,1058,6,"setProjectiles"],[979,22,1058,20],[979,23,1058,21,"currentProjectiles"],[979,41,1058,39],[979,45,1058,43],[980,10,1059,8],[980,17,1059,15,"currentProjectiles"],[980,35,1059,33],[980,36,1059,34,"map"],[980,39,1059,37],[980,40,1059,38,"projectile"],[980,50,1059,48],[980,54,1059,52],[981,12,1060,10],[981,16,1060,14],[981,17,1060,15,"projectile"],[981,27,1060,25],[981,29,1060,27],[981,36,1060,34],[981,40,1060,38],[983,12,1062,10],[984,12,1063,10],[984,18,1063,16,"currentTime"],[984,29,1063,27],[984,32,1063,30,"Date"],[984,36,1063,34],[984,37,1063,35,"now"],[984,40,1063,38],[984,41,1063,39],[984,42,1063,40],[985,12,1064,10],[985,18,1064,16,"startTime"],[985,27,1064,25],[985,30,1064,28,"projectile"],[985,40,1064,38],[985,41,1064,39,"startTime"],[985,50,1064,48],[985,54,1064,52,"currentTime"],[985,65,1064,63],[986,12,1065,10],[986,18,1065,16,"elapsedTime"],[986,29,1065,27],[986,32,1065,30,"currentTime"],[986,43,1065,41],[986,46,1065,44,"startTime"],[986,55,1065,53],[987,12,1066,10],[987,18,1066,16,"progress"],[987,26,1066,24],[987,29,1066,27,"Math"],[987,33,1066,31],[987,34,1066,32,"min"],[987,37,1066,35],[987,38,1066,36,"elapsedTime"],[987,49,1066,47],[987,53,1066,51,"projectile"],[987,63,1066,61],[987,64,1066,62,"duration"],[987,72,1066,70],[987,76,1066,74],[987,79,1066,77],[987,80,1066,78],[987,82,1066,80],[987,83,1066,81],[987,84,1066,82],[989,12,1068,10],[990,12,1069,10],[990,16,1069,14,"progress"],[990,24,1069,22],[990,28,1069,26],[990,29,1069,27],[990,33,1069,31],[990,34,1069,32,"projectile"],[990,44,1069,42],[990,45,1069,43,"hasHit"],[990,51,1069,49],[990,53,1069,51],[991,14,1070,12],[992,14,1071,12,"console"],[992,21,1071,19],[992,22,1071,20,"log"],[992,25,1071,23],[992,26,1071,24],[992,51,1071,49,"projectile"],[992,61,1071,59],[992,62,1071,60,"abilityName"],[992,73,1071,71],[992,97,1071,95],[992,98,1071,96],[993,14,1073,12,"setCombatState"],[993,28,1073,26],[993,29,1073,27,"prev"],[993,33,1073,31],[993,37,1073,35],[994,16,1074,14],[994,22,1074,20,"newState"],[994,30,1074,28],[994,33,1074,31],[995,18,1074,33],[995,21,1074,36,"prev"],[996,16,1074,41],[996,17,1074,42],[997,16,1076,14],[997,20,1076,18,"projectile"],[997,30,1076,28],[997,31,1076,29,"isAOE"],[997,36,1076,34],[997,40,1076,38,"projectile"],[997,50,1076,48],[997,51,1076,49,"aoeRadius"],[997,60,1076,58],[997,64,1076,62,"projectile"],[997,74,1076,72],[997,75,1076,73,"aoeRadius"],[997,84,1076,82],[997,87,1076,85],[997,88,1076,86],[997,90,1076,88],[998,18,1077,16],[999,18,1078,16,"console"],[999,25,1078,23],[999,26,1078,24,"log"],[999,29,1078,27],[999,30,1078,28],[999,59,1078,57,"projectile"],[999,69,1078,67],[999,70,1078,68,"abilityName"],[999,81,1078,79],[999,97,1078,95,"projectile"],[999,107,1078,105],[999,108,1078,106,"aoeRadius"],[999,117,1078,115],[999,119,1078,117],[999,120,1078,118],[1000,18,1080,16],[1000,24,1080,22,"impactX"],[1000,31,1080,29],[1000,34,1080,32,"projectile"],[1000,44,1080,42],[1000,45,1080,43,"targetX"],[1000,52,1080,50],[1001,18,1081,16],[1001,24,1081,22,"impactY"],[1001,31,1081,29],[1001,34,1081,32,"projectile"],[1001,44,1081,42],[1001,45,1081,43,"targetY"],[1001,52,1081,50],[1002,18,1082,16],[1002,24,1082,22,"enemiesKilled"],[1002,37,1082,50],[1002,40,1082,53],[1002,42,1082,55],[1004,18,1084,16],[1005,18,1085,16,"newState"],[1005,26,1085,24],[1005,27,1085,25,"enemies"],[1005,34,1085,32],[1005,37,1085,35,"newState"],[1005,45,1085,43],[1005,46,1085,44,"enemies"],[1005,53,1085,51],[1005,54,1085,52,"map"],[1005,57,1085,55],[1005,58,1085,56,"enemy"],[1005,63,1085,61],[1005,67,1085,65],[1006,20,1086,18],[1006,24,1086,22,"enemy"],[1006,29,1086,27],[1006,30,1086,28,"health"],[1006,36,1086,34],[1006,40,1086,38],[1006,41,1086,39],[1006,45,1086,43,"enemy"],[1006,50,1086,48],[1006,51,1086,49,"markedForDeath"],[1006,65,1086,63],[1006,67,1086,65],[1006,74,1086,72,"enemy"],[1006,79,1086,77],[1007,20,1088,18],[1007,26,1088,24,"enemyX"],[1007,32,1088,30],[1007,35,1088,33,"enemy"],[1007,40,1088,38],[1007,41,1088,39,"position"],[1007,49,1088,47],[1007,50,1088,48,"x"],[1007,51,1088,49],[1007,54,1088,52],[1007,58,1088,56],[1007,59,1088,57],[1007,60,1088,58],[1008,20,1089,18],[1008,26,1089,24,"enemyY"],[1008,32,1089,30],[1008,35,1089,33,"enemy"],[1008,40,1089,38],[1008,41,1089,39,"position"],[1008,49,1089,47],[1008,50,1089,48,"y"],[1008,51,1089,49],[1008,54,1089,52],[1008,58,1089,56],[1009,20,1090,18],[1009,26,1090,24,"distance"],[1009,34,1090,32],[1009,37,1090,35,"Math"],[1009,41,1090,39],[1009,42,1090,40,"sqrt"],[1009,46,1090,44],[1009,47,1090,45,"Math"],[1009,51,1090,49],[1009,52,1090,50,"pow"],[1009,55,1090,53],[1009,56,1090,54,"enemyX"],[1009,62,1090,60],[1009,65,1090,63,"impactX"],[1009,72,1090,70],[1009,74,1090,72],[1009,75,1090,73],[1009,76,1090,74],[1009,79,1090,77,"Math"],[1009,83,1090,81],[1009,84,1090,82,"pow"],[1009,87,1090,85],[1009,88,1090,86,"enemyY"],[1009,94,1090,92],[1009,97,1090,95,"impactY"],[1009,104,1090,102],[1009,106,1090,104],[1009,107,1090,105],[1009,108,1090,106],[1009,109,1090,107],[1010,20,1092,18,"console"],[1010,27,1092,25],[1010,28,1092,26,"log"],[1010,31,1092,29],[1010,32,1092,30],[1010,58,1092,56,"enemy"],[1010,63,1092,61],[1010,64,1092,62,"name"],[1010,68,1092,66],[1010,76,1092,74,"enemyX"],[1010,82,1092,80],[1010,87,1092,85,"enemyY"],[1010,93,1092,91],[1010,109,1092,107,"impactX"],[1010,116,1092,114],[1010,121,1092,119,"impactY"],[1010,128,1092,126],[1010,135,1092,133,"distance"],[1010,143,1092,141],[1010,144,1092,142,"toFixed"],[1010,151,1092,149],[1010,152,1092,150],[1010,153,1092,151],[1010,154,1092,152],[1010,169,1092,167,"projectile"],[1010,179,1092,177],[1010,180,1092,178,"aoeRadius"],[1010,189,1092,187],[1010,194,1092,192],[1010,195,1092,193],[1011,20,1094,18],[1011,24,1094,22,"distance"],[1011,32,1094,30],[1011,36,1094,34,"projectile"],[1011,46,1094,44],[1011,47,1094,45,"aoeRadius"],[1011,56,1094,54],[1011,58,1094,56],[1012,22,1095,20],[1013,22,1096,20],[1013,28,1096,26,"newHealth"],[1013,37,1096,35],[1013,40,1096,38,"Math"],[1013,44,1096,42],[1013,45,1096,43,"max"],[1013,48,1096,46],[1013,49,1096,47],[1013,50,1096,48],[1013,52,1096,50,"enemy"],[1013,57,1096,55],[1013,58,1096,56,"health"],[1013,64,1096,62],[1013,67,1096,65,"projectile"],[1013,77,1096,75],[1013,78,1096,76,"damage"],[1013,84,1096,82],[1013,85,1096,83],[1014,22,1098,20,"console"],[1014,29,1098,27],[1014,30,1098,28,"log"],[1014,33,1098,31],[1014,34,1098,32],[1014,52,1098,50,"enemy"],[1014,57,1098,55],[1014,58,1098,56,"name"],[1014,62,1098,60],[1014,74,1098,72,"projectile"],[1014,84,1098,82],[1014,85,1098,83,"damage"],[1014,91,1098,89],[1014,103,1098,101,"enemy"],[1014,108,1098,106],[1014,109,1098,107,"health"],[1014,115,1098,113],[1014,122,1098,120,"newHealth"],[1014,131,1098,129],[1014,134,1098,132],[1014,135,1098,133],[1016,22,1100,20],[1017,22,1101,20],[1017,26,1101,24,"newHealth"],[1017,35,1101,33],[1017,39,1101,37],[1017,40,1101,38],[1017,44,1101,42,"enemy"],[1017,49,1101,47],[1017,50,1101,48,"health"],[1017,56,1101,54],[1017,59,1101,57],[1017,60,1101,58],[1017,62,1101,60],[1018,24,1102,22,"console"],[1018,31,1102,29],[1018,32,1102,30,"log"],[1018,35,1102,33],[1018,36,1102,34],[1018,52,1102,50,"enemy"],[1018,57,1102,55],[1018,58,1102,56,"name"],[1018,62,1102,60],[1018,76,1102,74,"projectile"],[1018,86,1102,84],[1018,87,1102,85,"abilityName"],[1018,98,1102,96],[1018,101,1102,99],[1018,102,1102,100],[1019,24,1103,22,"enemiesKilled"],[1019,37,1103,35],[1019,38,1103,36,"push"],[1019,42,1103,40],[1019,43,1103,41,"enemy"],[1019,48,1103,46],[1019,49,1103,47],[1019,50,1103,48],[1019,51,1103,49],[1021,24,1105,22],[1021,31,1105,29],[1022,26,1106,24],[1022,29,1106,27,"enemy"],[1022,34,1106,32],[1023,26,1107,24,"health"],[1023,32,1107,30],[1023,34,1107,32],[1023,35,1107,33],[1024,26,1108,24,"markedForDeath"],[1024,40,1108,38],[1024,42,1108,40],[1024,46,1108,44],[1025,26,1109,24,"lastDamaged"],[1025,37,1109,35],[1025,39,1109,37,"combatEngine"],[1025,58,1109,49],[1025,59,1109,49,"combatEngine"],[1025,71,1109,49],[1025,72,1109,50,"getCurrentTick"],[1025,86,1109,64],[1025,87,1109,65],[1026,24,1110,22],[1026,25,1110,23],[1027,22,1111,20],[1027,23,1111,21],[1027,29,1111,27],[1028,24,1112,22],[1028,31,1112,29],[1029,26,1113,24],[1029,29,1113,27,"enemy"],[1029,34,1113,32],[1030,26,1114,24,"health"],[1030,32,1114,30],[1030,34,1114,32,"newHealth"],[1030,43,1114,41],[1031,26,1115,24,"lastDamaged"],[1031,37,1115,35],[1031,39,1115,37,"combatEngine"],[1031,58,1115,49],[1031,59,1115,49,"combatEngine"],[1031,71,1115,49],[1031,72,1115,50,"getCurrentTick"],[1031,86,1115,64],[1031,87,1115,65],[1032,24,1116,22],[1032,25,1116,23],[1033,22,1117,20],[1034,20,1118,18],[1035,20,1120,18],[1035,27,1120,25,"enemy"],[1035,32,1120,30],[1035,33,1120,31],[1035,34,1120,32],[1036,18,1121,16],[1036,19,1121,17],[1036,20,1121,18],[1038,18,1123,16],[1039,18,1124,16],[1039,22,1124,20,"enemiesKilled"],[1039,35,1124,33],[1039,36,1124,34,"length"],[1039,42,1124,40],[1039,45,1124,43],[1039,46,1124,44],[1039,48,1124,46],[1040,20,1125,18,"console"],[1040,27,1125,25],[1040,28,1125,26,"log"],[1040,31,1125,29],[1040,32,1125,30],[1040,52,1125,50,"enemiesKilled"],[1040,65,1125,63],[1040,66,1125,64,"length"],[1040,72,1125,70],[1040,94,1125,92,"projectile"],[1040,104,1125,102],[1040,105,1125,103,"abilityName"],[1040,116,1125,114],[1040,118,1125,116],[1040,119,1125,117],[1041,20,1126,18],[1042,20,1127,18,"enemiesKilled"],[1042,33,1127,31],[1042,34,1127,32,"forEach"],[1042,41,1127,39],[1042,42,1127,40,"enemy"],[1042,47,1127,45],[1042,51,1127,49,"handleEnemyKill"],[1042,66,1127,64],[1042,67,1127,65,"enemy"],[1042,72,1127,70],[1042,73,1127,71],[1042,74,1127,72],[1043,18,1128,16],[1044,16,1130,14],[1044,17,1130,15],[1044,23,1130,21],[1045,18,1131,16],[1046,18,1132,16],[1046,24,1132,22,"enemyIndex"],[1046,34,1132,32],[1046,37,1132,35,"newState"],[1046,45,1132,43],[1046,46,1132,44,"enemies"],[1046,53,1132,51],[1046,54,1132,52,"findIndex"],[1046,63,1132,61],[1046,64,1132,62,"e"],[1046,65,1132,63],[1046,69,1132,67,"e"],[1046,70,1132,68],[1046,71,1132,69,"id"],[1046,73,1132,71],[1046,78,1132,76,"projectile"],[1046,88,1132,86],[1046,89,1132,87,"targetEnemyId"],[1046,102,1132,100],[1046,103,1132,101],[1047,18,1134,16],[1047,22,1134,20,"enemyIndex"],[1047,32,1134,30],[1047,36,1134,34],[1047,37,1134,35],[1047,41,1134,39,"newState"],[1047,49,1134,47],[1047,50,1134,48,"enemies"],[1047,57,1134,55],[1047,58,1134,56,"enemyIndex"],[1047,68,1134,66],[1047,69,1134,67],[1047,70,1134,68,"health"],[1047,76,1134,74],[1047,79,1134,77],[1047,80,1134,78],[1047,84,1134,82],[1047,85,1134,83,"newState"],[1047,93,1134,91],[1047,94,1134,92,"enemies"],[1047,101,1134,99],[1047,102,1134,100,"enemyIndex"],[1047,112,1134,110],[1047,113,1134,111],[1047,114,1134,112,"markedForDeath"],[1047,128,1134,126],[1047,130,1134,128],[1048,20,1135,18,"newState"],[1048,28,1135,26],[1048,29,1135,27,"enemies"],[1048,36,1135,34],[1048,39,1135,37],[1048,40,1135,38],[1048,43,1135,41,"newState"],[1048,51,1135,49],[1048,52,1135,50,"enemies"],[1048,59,1135,57],[1048,60,1135,58],[1049,20,1136,18],[1049,26,1136,24,"enemy"],[1049,31,1136,29],[1049,34,1136,32,"newState"],[1049,42,1136,40],[1049,43,1136,41,"enemies"],[1049,50,1136,48],[1049,51,1136,49,"enemyIndex"],[1049,61,1136,59],[1049,62,1136,60],[1050,20,1137,18],[1050,26,1137,24,"newHealth"],[1050,35,1137,33],[1050,38,1137,36,"Math"],[1050,42,1137,40],[1050,43,1137,41,"max"],[1050,46,1137,44],[1050,47,1137,45],[1050,48,1137,46],[1050,50,1137,48,"enemy"],[1050,55,1137,53],[1050,56,1137,54,"health"],[1050,62,1137,60],[1050,65,1137,63,"projectile"],[1050,75,1137,73],[1050,76,1137,74,"damage"],[1050,82,1137,80],[1050,83,1137,81],[1051,20,1139,18,"newState"],[1051,28,1139,26],[1051,29,1139,27,"enemies"],[1051,36,1139,34],[1051,37,1139,35,"enemyIndex"],[1051,47,1139,45],[1051,48,1139,46],[1051,51,1139,49],[1052,22,1140,20],[1052,25,1140,23,"enemy"],[1052,30,1140,28],[1053,22,1141,20,"health"],[1053,28,1141,26],[1053,30,1141,28,"newHealth"],[1053,39,1141,37],[1054,22,1142,20,"lastDamaged"],[1054,33,1142,31],[1054,35,1142,33,"combatEngine"],[1054,54,1142,45],[1054,55,1142,45,"combatEngine"],[1054,67,1142,45],[1054,68,1142,46,"getCurrentTick"],[1054,82,1142,60],[1054,83,1142,61],[1055,20,1143,18],[1055,21,1143,19],[1056,20,1145,18,"console"],[1056,27,1145,25],[1056,28,1145,26,"log"],[1056,31,1145,29],[1056,32,1145,30],[1056,60,1145,58,"enemy"],[1056,65,1145,63],[1056,66,1145,64,"name"],[1056,70,1145,68],[1056,82,1145,80,"newHealth"],[1056,91,1145,89],[1056,95,1145,93,"enemy"],[1056,100,1145,98],[1056,101,1145,99,"maxHealth"],[1056,110,1145,108],[1056,112,1145,110],[1056,113,1145,111],[1058,20,1147,18],[1059,20,1148,18],[1059,24,1148,22,"newHealth"],[1059,33,1148,31],[1059,37,1148,35],[1059,38,1148,36],[1059,42,1148,40,"enemy"],[1059,47,1148,45],[1059,48,1148,46,"health"],[1059,54,1148,52],[1059,57,1148,55],[1059,58,1148,56],[1059,60,1148,58],[1060,22,1149,20,"console"],[1060,29,1149,27],[1060,30,1149,28,"log"],[1060,33,1149,31],[1060,34,1149,32],[1060,54,1149,52,"enemy"],[1060,59,1149,57],[1060,60,1149,58,"name"],[1060,64,1149,62],[1060,78,1149,76,"projectile"],[1060,88,1149,86],[1060,89,1149,87,"abilityName"],[1060,100,1149,98],[1060,136,1149,134],[1060,137,1149,135],[1062,22,1151,20],[1063,22,1152,20,"newState"],[1063,30,1152,28],[1063,31,1152,29,"enemies"],[1063,38,1152,36],[1063,39,1152,37,"enemyIndex"],[1063,49,1152,47],[1063,50,1152,48],[1063,53,1152,51],[1064,24,1153,22],[1064,27,1153,25,"newState"],[1064,35,1153,33],[1064,36,1153,34,"enemies"],[1064,43,1153,41],[1064,44,1153,42,"enemyIndex"],[1064,54,1153,52],[1064,55,1153,53],[1065,24,1154,22,"health"],[1065,30,1154,28],[1065,32,1154,30],[1065,33,1154,31],[1066,24,1155,22,"isDying"],[1066,31,1155,29],[1066,33,1155,31],[1066,37,1155,35],[1067,24,1156,22,"deathStartTime"],[1067,38,1156,36],[1067,40,1156,38,"Date"],[1067,44,1156,42],[1067,45,1156,43,"now"],[1067,48,1156,46],[1067,49,1156,47],[1068,22,1157,20],[1068,23,1157,21],[1069,20,1158,18],[1069,21,1158,19],[1069,27,1158,25],[1069,31,1158,29,"enemy"],[1069,36,1158,34],[1069,37,1158,35,"health"],[1069,43,1158,41],[1069,46,1158,44],[1069,47,1158,45],[1069,49,1158,47],[1070,22,1159,20,"console"],[1070,29,1159,27],[1070,30,1159,28,"log"],[1070,33,1159,31],[1070,34,1159,32],[1070,48,1159,46,"enemy"],[1070,53,1159,51],[1070,54,1159,52,"name"],[1070,58,1159,56],[1070,70,1159,68,"projectile"],[1070,80,1159,78],[1070,81,1159,79,"damage"],[1070,87,1159,85],[1070,99,1159,97,"enemy"],[1070,104,1159,102],[1070,105,1159,103,"health"],[1070,111,1159,109],[1070,117,1159,115,"newHealth"],[1070,126,1159,124],[1070,129,1159,127],[1070,130,1159,128],[1071,20,1160,18],[1072,18,1161,16],[1073,16,1162,14],[1074,16,1164,14],[1074,23,1164,21,"newState"],[1074,31,1164,29],[1075,14,1165,12],[1075,15,1165,13],[1075,16,1165,14],[1077,14,1167,12],[1078,14,1168,12],[1079,12,1169,10],[1081,12,1171,10],[1082,12,1172,10],[1083,12,1173,10],[1083,18,1173,16,"timeBasedCleanup"],[1083,34,1173,32],[1083,37,1173,35,"elapsedTime"],[1083,48,1173,46],[1083,51,1173,49],[1083,55,1173,53],[1083,56,1173,54],[1083,57,1173,55],[1084,12,1174,10],[1084,16,1174,14,"progress"],[1084,24,1174,22],[1084,28,1174,26],[1084,31,1174,29],[1084,35,1174,33,"timeBasedCleanup"],[1084,51,1174,49],[1084,53,1174,51],[1085,14,1175,12],[1085,18,1175,16,"timeBasedCleanup"],[1085,34,1175,32],[1085,36,1175,34],[1086,16,1176,14,"console"],[1086,23,1176,21],[1086,24,1176,22,"log"],[1086,27,1176,25],[1086,28,1176,26],[1086,63,1176,61,"projectile"],[1086,73,1176,71],[1086,74,1176,72,"id"],[1086,76,1176,74],[1086,105,1176,103],[1086,106,1176,104],[1087,14,1177,12],[1088,14,1178,12],[1088,21,1178,19],[1088,25,1178,23],[1089,12,1179,10],[1090,12,1181,10],[1090,19,1181,17,"projectile"],[1090,29,1181,27],[1091,10,1182,8],[1091,11,1182,9],[1091,12,1182,10],[1091,13,1182,11,"filter"],[1091,19,1182,17],[1091,20,1182,18,"Boolean"],[1091,27,1182,25],[1091,28,1182,26],[1092,8,1183,6],[1092,9,1183,7],[1092,10,1183,8],[1093,6,1184,4],[1093,7,1184,5],[1095,6,1186,4],[1096,6,1187,4],[1096,12,1187,10,"impactInterval"],[1096,26,1187,24],[1096,29,1187,27,"setInterval"],[1096,40,1187,38],[1096,41,1187,39,"processProjectileImpacts"],[1096,65,1187,63],[1096,67,1187,65],[1096,69,1187,67],[1096,70,1187,68],[1097,6,1188,4],[1097,13,1188,11],[1097,19,1188,17,"clearInterval"],[1097,32,1188,30],[1097,33,1188,31,"impactInterval"],[1097,47,1188,45],[1097,48,1188,46],[1098,4,1189,2],[1098,5,1189,3],[1098,7,1189,5],[1098,9,1189,7],[1098,10,1189,8],[1098,11,1189,9],[1098,12,1189,10],[1100,4,1191,2],[1101,4,1192,2],[1101,10,1192,8,"saveAbilityData"],[1101,25,1192,23],[1101,28,1192,26],[1101,32,1192,26,"useCallback"],[1101,38,1192,37],[1101,39,1192,37,"useCallback"],[1101,50,1192,37],[1101,52,1192,38],[1101,58,1192,44],[1102,6,1193,4],[1102,10,1193,8,"combatState"],[1102,21,1193,19],[1102,22,1193,20,"abilityManager"],[1102,36,1193,34],[1102,38,1193,36],[1103,8,1194,6],[1103,14,1194,12,"abilityData"],[1103,25,1194,23],[1103,28,1194,26,"combatState"],[1103,39,1194,37],[1103,40,1194,38,"abilityManager"],[1103,54,1194,52],[1103,55,1194,53,"getSaveData"],[1103,66,1194,64],[1103,67,1194,65],[1103,68,1194,66],[1104,8,1195,6,"console"],[1104,15,1195,13],[1104,16,1195,14,"log"],[1104,19,1195,17],[1104,20,1195,18],[1104,70,1195,68],[1104,72,1195,70,"abilityData"],[1104,83,1195,81],[1104,84,1195,82],[1105,8,1196,6,"game"],[1105,12,1196,10],[1105,13,1196,11,"updateAbilityData"],[1105,30,1196,28],[1105,31,1196,29,"abilityData"],[1105,42,1196,40],[1105,43,1196,41],[1106,6,1197,4],[1107,4,1198,2],[1107,5,1198,3],[1107,7,1198,5],[1107,8,1198,6,"combatState"],[1107,19,1198,17],[1107,20,1198,18,"abilityManager"],[1107,34,1198,32],[1107,36,1198,34,"game"],[1107,40,1198,38],[1107,41,1198,39,"updateAbilityData"],[1107,58,1198,56],[1107,59,1198,57],[1107,60,1198,58],[1108,4,1200,2],[1108,10,1200,8,"contextValue"],[1108,22,1200,39],[1108,25,1200,42,"React"],[1108,30,1200,47],[1108,31,1200,47,"default"],[1108,38,1200,47],[1108,39,1200,48,"useMemo"],[1108,46,1200,55],[1108,47,1200,56],[1108,54,1200,63],[1109,6,1201,4,"combatState"],[1109,17,1201,15],[1110,6,1202,4,"projectiles"],[1110,17,1202,15],[1111,6,1203,4,"startCombat"],[1111,17,1203,15],[1112,6,1204,4,"stopCombat"],[1112,16,1204,14],[1113,6,1205,4,"equipAbility"],[1113,18,1205,16],[1114,6,1206,4,"handleEnemyKill"],[1114,21,1206,19],[1115,6,1207,4,"getDeck"],[1115,13,1207,11],[1116,6,1208,4,"getAvailableAbilities"],[1116,27,1208,25],[1117,6,1209,4,"upgradeAbility"],[1117,20,1209,18],[1118,6,1210,4,"spawnEnemy"],[1118,16,1210,14],[1119,6,1211,4,"spawnBoss"],[1119,15,1211,13],[1120,6,1212,4,"clearAllEnemies"],[1120,21,1212,19],[1121,6,1213,4,"clearSpecificEnemy"],[1121,24,1213,22],[1122,6,1214,4],[1123,6,1215,4,"findClosestEnemy"],[1123,22,1215,20],[1124,6,1216,4,"updateNinjaPosition"],[1124,25,1216,23],[1125,6,1217,4,"setManualControlActive"],[1125,28,1217,26],[1126,6,1218,4,"lastExplosionTime"],[1126,23,1218,21],[1127,6,1219,4,"useAbilityManually"],[1127,24,1219,22],[1128,6,1219,24],[1129,6,1220,4,"saveAbilityData"],[1129,21,1220,19],[1130,6,1220,21],[1131,6,1221,4,"shadowClone"],[1131,17,1221,15],[1131,19,1221,17,"combatState"],[1131,30,1221,28],[1131,31,1221,29,"shadowClone"],[1131,42,1221,40],[1131,43,1221,42],[1132,4,1222,2],[1132,5,1222,3],[1132,6,1222,4],[1132,8,1222,6],[1133,4,1223,4],[1134,4,1224,4],[1135,4,1225,4,"combatState"],[1135,15,1225,15],[1135,17,1226,4,"projectiles"],[1135,28,1226,15],[1135,30,1227,4,"lastExplosionTime"],[1135,47,1227,21],[1136,4,1228,4],[1137,4,1229,4,"combatState"],[1137,15,1229,15],[1137,16,1229,16,"abilityManager"],[1137,30,1229,30],[1137,32,1230,4,"combatState"],[1137,43,1230,15],[1137,44,1230,16,"enemies"],[1137,51,1230,23],[1137,53,1231,4,"combatState"],[1137,64,1231,15],[1137,65,1231,16,"shadowClone"],[1137,76,1231,27],[1138,4,1231,29],[1139,4,1232,4,"useAbilityManually"],[1139,22,1232,22],[1140,4,1232,24],[1141,4,1233,4,"saveAbilityData"],[1141,19,1233,19],[1141,20,1233,21],[1142,4,1233,21],[1142,5,1234,3],[1142,6,1234,4],[1143,4,1236,2],[1143,24,1237,4],[1143,28,1237,4,"_reactJsxDevRuntime"],[1143,47,1237,4],[1143,48,1237,4,"jsxDEV"],[1143,54,1237,4],[1143,56,1237,5,"CombatContext"],[1143,69,1237,18],[1143,70,1237,19,"Provider"],[1143,78,1237,27],[1144,6,1237,28,"value"],[1144,11,1237,33],[1144,13,1237,35,"contextValue"],[1144,25,1237,48],[1145,6,1237,48,"children"],[1145,14,1237,48],[1145,16,1238,7,"children"],[1146,4,1238,15],[1147,6,1238,15,"fileName"],[1147,14,1238,15],[1147,16,1238,15,"_jsxFileName"],[1147,28,1238,15],[1148,6,1238,15,"lineNumber"],[1148,16,1238,15],[1149,6,1238,15,"columnNumber"],[1149,18,1238,15],[1150,4,1238,15],[1150,11,1239,28],[1150,12,1239,29],[1151,2,1241,0],[1151,3,1241,1],[1152,0,1241,2],[1152,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","deadEnemiesToProcess.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMO;mBJI;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;8FSU,uDT;mCUY;SViB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}