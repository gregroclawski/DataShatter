{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      const xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      const goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    // CRITICAL FIX: Use React ref to capture dead enemies for XP processing to avoid closure issues\n    const deadEnemiesRef = (0, _react.useRef)([]);\n    const handleCombatTick = React.default.useCallback(() => {\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      setCombatState(prev => {\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        const allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Use React ref to store dead enemies to avoid closure scoping issues\n        deadEnemiesRef.current = [...allDeadEnemies]; // Store in ref for XP processing\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        const currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            const animationDuration = 750; // 750ms death fade\n            const isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      });\n\n      // BULK XP PROCESSING - Use ref to get dead enemies (FIXED: Closure scoping issue)\n      const deadEnemiesToProcess = deadEnemiesRef.current; // Get from ref instead of closure variable\n      if (deadEnemiesToProcess.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        const unprocessedEnemies = deadEnemiesToProcess; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG deadEnemiesToProcess xpAwarded status:`, deadEnemiesToProcess.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${deadEnemiesToProcess.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          let totalXP = 0;\n          let totalGold = 0;\n          const zoneKills = [];\n          const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          const goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            // BALANCE CHANGE: XP rate ÷ 2, Gold rate × 100\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier / 2; // Divide XP by 2\n            totalGold += 10 * goldMultiplier * 100; // Multiply gold by 100\n\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              const wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 195,\n      y: 400\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        const ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        const ninjaY = currentNinjaPosition.y + 20;\n        const aoeRadius = ability.stats.aoeRadius;\n        const enemiesInRange = state.enemies.filter(enemy => {\n          const enemyX = enemy.position.x + 17.5; // Center of enemy\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = (0, _react.useCallback)(slotIndex => {\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, [combatState.abilityManager, combatState.enemies]);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      const tickInterval = Platform.default.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${Platform.default.OS}`);\n      const combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      const newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            const timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1238,\n      columnNumber: 5\n    }, this);\n  };\n});","lineCount":1154,"map":[[13,2,96,0,"Object"],[13,8,96,0],[13,9,96,0,"defineProperty"],[13,23,96,0],[13,24,96,0,"exports"],[13,31,96,0],[14,4,96,0,"enumerable"],[14,14,96,0],[15,4,96,0,"get"],[15,7,96,0],[15,18,96,0,"get"],[15,19,96,0],[16,6,96,0],[16,13,96,0,"useCombat"],[16,22,96,0],[17,4,96,0],[18,2,96,0],[19,2,106,0,"Object"],[19,8,106,0],[19,9,106,0,"defineProperty"],[19,23,106,0],[19,24,106,0,"exports"],[19,31,106,0],[20,4,106,0,"enumerable"],[20,14,106,0],[21,4,106,0,"get"],[21,7,106,0],[21,18,106,0,"get"],[21,19,106,0],[22,6,106,0],[22,13,106,0,"CombatProvider"],[22,27,106,0],[23,4,106,0],[24,2,106,0],[25,2,1,0],[25,6,1,0,"_react"],[25,12,1,0],[25,15,1,0,"require"],[25,22,1,0],[25,23,1,0,"_dependencyMap"],[25,37,1,0],[26,2,1,0],[26,6,1,0,"React"],[26,11,1,0],[26,14,1,0,"_interopDefault"],[26,29,1,0],[26,30,1,0,"_react"],[26,36,1,0],[27,2,1,110],[27,6,1,110,"_reactNativeWebDistExportsPlatform"],[27,40,1,110],[27,43,1,110,"require"],[27,50,1,110],[27,51,1,110,"_dependencyMap"],[27,65,1,110],[28,2,1,110],[28,6,1,110,"Platform"],[28,14,1,110],[28,17,1,110,"_interopDefault"],[28,32,1,110],[28,33,1,110,"_reactNativeWebDistExportsPlatform"],[28,67,1,110],[29,2,3,0],[29,6,3,0,"_engineCombatEngine"],[29,25,3,0],[29,28,3,0,"require"],[29,35,3,0],[29,36,3,0,"_dependencyMap"],[29,50,3,0],[30,2,4,0],[30,6,4,0,"_typesAbilityTypes"],[30,24,4,0],[30,27,4,0,"require"],[30,34,4,0],[30,35,4,0,"_dependencyMap"],[30,49,4,0],[31,2,5,0],[31,6,5,0,"_GameContext"],[31,18,5,0],[31,21,5,0,"require"],[31,28,5,0],[31,29,5,0,"_dependencyMap"],[31,43,5,0],[32,2,6,0],[32,6,6,0,"_ZoneContext"],[32,18,6,0],[32,21,6,0,"require"],[32,28,6,0],[32,29,6,0,"_dependencyMap"],[32,43,6,0],[33,2,6,40],[33,6,6,40,"_reactJsxDevRuntime"],[33,25,6,40],[33,28,6,40,"require"],[33,35,6,40],[33,36,6,40,"_dependencyMap"],[33,50,6,40],[34,2,94,0],[34,8,94,6,"CombatContext"],[34,21,94,19],[34,37,94,22],[34,41,94,22,"createContext"],[34,47,94,35],[34,48,94,35,"createContext"],[34,61,94,35],[34,63,94,67,"undefined"],[34,72,94,76],[34,73,94,77],[35,2,96,7],[35,8,96,13,"useCombat"],[35,17,96,22],[35,20,96,25,"useCombat"],[35,21,96,25],[35,26,96,50],[36,4,97,2],[36,10,97,8,"context"],[36,17,97,15],[36,20,97,18],[36,24,97,18,"useContext"],[36,30,97,28],[36,31,97,28,"useContext"],[36,41,97,28],[36,43,97,29,"CombatContext"],[36,56,97,42],[36,57,97,43],[37,4,98,2],[37,8,98,6],[37,9,98,7,"context"],[37,16,98,14],[37,18,98,16],[38,6,99,4],[38,12,99,10],[38,16,99,14,"Error"],[38,21,99,19],[38,22,99,20],[38,70,99,68],[38,71,99,69],[39,4,100,2],[40,4,101,2],[40,11,101,9,"context"],[40,18,101,16],[41,2,102,0],[41,3,102,1],[42,2,104,0],[42,6,104,4,"enemyCounter"],[42,18,104,16],[42,21,104,19],[42,22,104,20],[42,23,104,21],[42,24,104,22],[44,2,106,7],[44,8,106,13,"CombatProvider"],[44,22,106,27],[44,25,106,30,"CombatProvider"],[44,26,106,31],[45,4,106,33,"children"],[46,2,106,67],[46,3,106,68],[46,8,106,73],[47,4,107,2],[47,10,107,8,"game"],[47,14,107,12],[47,17,107,15],[47,21,107,15,"useGame"],[47,33,107,22],[47,34,107,22,"useGame"],[47,41,107,22],[47,43,107,23],[47,44,107,24],[48,4,108,2],[48,10,108,8],[49,6,108,10,"currentZone"],[49,17,108,21],[50,6,108,23,"currentZoneLevel"],[50,22,108,39],[51,6,108,41,"recordEnemyKill"],[51,21,108,56],[52,6,108,58,"spawnZoneEnemy"],[53,4,108,73],[53,5,108,74],[53,8,108,77],[53,12,108,77,"useZone"],[53,24,108,84],[53,25,108,84,"useZone"],[53,32,108,84],[53,34,108,85],[53,35,108,86],[55,4,110,2],[56,4,111,2],[56,10,111,8,"initialCombatState"],[56,28,111,39],[56,31,111,42],[57,6,112,4,"isInCombat"],[57,16,112,14],[57,18,112,16],[57,23,112,21],[58,6,113,4,"currentTick"],[58,17,113,15],[58,19,113,17],[58,20,113,18],[59,6,114,4,"enemies"],[59,13,114,11],[59,15,114,13],[59,17,114,15],[60,6,115,4,"abilityManager"],[60,20,115,18],[60,22,115,20],[60,26,115,24,"AbilityManager"],[60,44,115,38],[60,45,115,38,"AbilityManager"],[60,59,115,38],[60,60,115,39],[60,61,115,40],[61,6,116,4,"statusEffects"],[61,19,116,17],[61,21,116,19],[61,25,116,23,"StatusEffectManager"],[61,44,116,42],[61,45,116,42,"StatusEffectManager"],[61,64,116,42],[61,65,116,43],[61,66,116,44],[62,6,117,4,"playerStats"],[62,17,117,15],[62,19,117,17],[63,8,118,6,"attack"],[63,14,118,12],[63,16,118,14],[63,18,118,16],[64,8,118,18],[65,8,119,6,"defense"],[65,15,119,13],[65,17,119,15],[65,18,119,16],[66,8,120,6,"health"],[66,14,120,12],[66,16,120,14],[66,19,120,17],[67,8,121,6,"maxHealth"],[67,17,121,15],[67,19,121,17],[67,22,121,20],[68,8,122,6,"critChance"],[68,18,122,16],[68,20,122,18],[68,21,122,19],[69,8,123,6,"critDamage"],[69,18,123,16],[69,20,123,18],[69,23,123,21],[70,8,124,6,"cooldownReduction"],[70,25,124,23],[70,27,124,25],[71,6,125,4],[72,4,126,2],[72,5,126,3],[73,4,128,2],[73,10,128,8],[73,11,128,9,"combatState"],[73,22,128,20],[73,24,128,22,"setCombatState"],[73,38,128,36],[73,39,128,37],[73,42,128,40],[73,46,128,40,"useState"],[73,52,128,48],[73,53,128,48,"useState"],[73,61,128,48],[73,63,128,62,"initialCombatState"],[73,81,128,80],[73,82,128,81],[75,4,130,2],[76,4,131,2],[76,8,131,2,"useEffect"],[76,14,131,11],[76,15,131,11,"useEffect"],[76,24,131,11],[76,26,131,12],[76,32,131,18],[77,6,132,4],[77,10,132,8,"game"],[77,14,132,12],[77,15,132,13,"gameState"],[77,24,132,22],[77,25,132,23,"abilityData"],[77,36,132,34],[77,40,132,38,"combatState"],[77,51,132,49],[77,52,132,50,"abilityManager"],[77,66,132,64],[77,68,132,66],[78,8,133,6,"console"],[78,15,133,13],[78,16,133,14,"log"],[78,19,133,17],[78,20,133,18],[78,68,133,66],[78,70,133,68,"game"],[78,74,133,72],[78,75,133,73,"gameState"],[78,84,133,82],[78,85,133,83,"abilityData"],[78,96,133,94],[78,97,133,95],[79,8,134,6,"combatState"],[79,19,134,17],[79,20,134,18,"abilityManager"],[79,34,134,32],[79,35,134,33,"restoreFromSaveData"],[79,54,134,52],[79,55,134,53,"game"],[79,59,134,57],[79,60,134,58,"gameState"],[79,69,134,67],[79,70,134,68,"abilityData"],[79,81,134,79],[79,82,134,80],[81,8,136,6],[82,8,137,6,"setCombatState"],[82,22,137,20],[82,23,137,21,"prev"],[82,27,137,25],[82,32,137,30],[83,10,137,32],[83,13,137,35,"prev"],[84,8,137,40],[84,9,137,41],[84,10,137,42],[84,11,137,43],[85,6,138,4],[86,4,139,2],[86,5,139,3],[86,7,139,5],[86,8,139,6,"game"],[86,12,139,10],[86,13,139,11,"gameState"],[86,22,139,20],[86,23,139,21,"abilityData"],[86,34,139,32],[86,36,139,34,"combatState"],[86,47,139,45],[86,48,139,46,"abilityManager"],[86,62,139,60],[86,63,139,61],[86,64,139,62],[88,4,141,2],[89,4,142,2],[89,8,142,2,"useEffect"],[89,14,142,11],[89,15,142,11,"useEffect"],[89,24,142,11],[89,26,142,12],[89,32,142,18],[90,6,143,4],[90,10,143,8,"game"],[90,14,143,12],[90,15,143,13,"gameState"],[90,24,143,22],[90,25,143,23,"ninja"],[90,30,143,28],[90,32,143,30],[91,8,144,6],[91,14,144,12,"effectiveStats"],[91,28,144,26],[91,31,144,29,"game"],[91,35,144,33],[91,36,144,34,"getEffectiveStats"],[91,53,144,51],[91,54,144,52],[91,55,144,53],[92,8,146,6,"setCombatState"],[92,22,146,20],[92,23,146,21,"prev"],[92,27,146,25],[92,31,146,29],[93,10,147,8],[94,10,148,8],[94,14,148,12,"prev"],[94,18,148,16],[94,19,148,17,"playerStats"],[94,30,148,28],[94,31,148,29,"maxHealth"],[94,40,148,38],[94,45,148,43],[94,48,148,46],[94,52,148,50,"prev"],[94,56,148,54],[94,57,148,55,"playerStats"],[94,68,148,66],[94,69,148,67,"attack"],[94,75,148,73],[94,80,148,78],[94,82,148,80],[94,84,148,82],[95,12,149,10,"console"],[95,19,149,17],[95,20,149,18,"log"],[95,23,149,21],[95,24,149,22],[95,60,149,58,"effectiveStats"],[95,74,149,72],[95,75,149,73,"health"],[95,81,149,79],[95,93,149,91,"effectiveStats"],[95,107,149,105],[95,108,149,106,"attack"],[95,114,149,112],[95,127,149,125,"effectiveStats"],[95,141,149,139],[95,142,149,140,"defense"],[95,149,149,147],[95,151,149,149],[95,152,149,150],[96,12,151,10],[96,19,151,17],[97,14,152,12],[97,17,152,15,"prev"],[97,21,152,19],[98,14,153,12,"playerStats"],[98,25,153,23],[98,27,153,25],[99,16,154,14,"attack"],[99,22,154,20],[99,24,154,22,"effectiveStats"],[99,38,154,36],[99,39,154,37,"attack"],[99,45,154,43],[100,16,155,14,"defense"],[100,23,155,21],[100,25,155,23,"effectiveStats"],[100,39,155,37],[100,40,155,38,"defense"],[100,47,155,45],[101,16,156,14,"health"],[101,22,156,20],[101,24,156,22,"effectiveStats"],[101,38,156,36],[101,39,156,37,"health"],[101,45,156,43],[102,16,156,45],[103,16,157,14,"maxHealth"],[103,25,157,23],[103,27,157,25,"effectiveStats"],[103,41,157,39],[103,42,157,40,"health"],[103,48,157,46],[104,16,158,14,"critChance"],[104,26,158,24],[104,28,158,26,"effectiveStats"],[104,42,158,40],[104,43,158,41,"critChance"],[104,53,158,51],[104,57,158,55],[104,58,158,56],[105,16,159,14,"critDamage"],[105,26,159,24],[105,28,159,26,"effectiveStats"],[105,42,159,40],[105,43,159,41,"critDamage"],[105,53,159,51],[105,57,159,55],[105,60,159,58],[106,16,160,14,"cooldownReduction"],[106,33,160,31],[106,35,160,33,"effectiveStats"],[106,49,160,47],[106,50,160,48,"cooldownReduction"],[106,67,160,65],[106,71,160,69],[107,14,161,12],[108,12,162,10],[108,13,162,11],[109,10,163,8],[110,10,164,8],[110,17,164,15,"prev"],[110,21,164,19],[111,8,165,6],[111,9,165,7],[111,10,165,8],[112,6,166,4],[113,4,167,2],[113,5,167,3],[113,7,167,5],[113,8,167,6,"game"],[113,12,167,10],[113,13,167,11,"gameState"],[113,22,167,20],[113,23,167,21,"ninja"],[113,28,167,26],[113,29,167,27],[113,30,167,28],[114,4,169,2],[114,10,169,8],[114,11,169,9,"projectiles"],[114,22,169,20],[114,24,169,22,"setProjectiles"],[114,38,169,36],[114,39,169,37],[114,42,169,40],[114,46,169,40,"useState"],[114,52,169,48],[114,53,169,48,"useState"],[114,61,169,48],[114,63,169,69],[114,65,169,71],[114,66,169,72],[115,4,170,2],[115,10,170,8],[115,11,170,9,"lastExplosionTime"],[115,28,170,26],[115,30,170,28,"setLastExplosionTime"],[115,50,170,48],[115,51,170,49],[115,54,170,52],[115,58,170,52,"useState"],[115,64,170,60],[115,65,170,60,"useState"],[115,73,170,60],[115,75,170,69],[115,76,170,70],[115,77,170,71],[116,4,171,2],[117,4,172,2],[119,4,174,2],[120,4,175,2],[120,10,175,8,"handleEnemyKill"],[120,25,175,23],[120,28,175,26],[120,32,175,26,"useCallback"],[120,38,175,37],[120,39,175,37,"useCallback"],[120,50,175,37],[120,52,175,39,"enemy"],[120,57,175,57],[120,61,175,62],[121,6,176,4],[122,6,177,4],[122,12,177,10,"xpReward"],[122,20,177,18],[122,23,177,21],[122,24,177,22,"enemy"],[122,29,177,27],[122,30,177,28,"zoneXP"],[122,36,177,34],[122,40,177,38],[122,41,177,39],[122,46,177,44,"game"],[122,50,177,48],[122,51,177,49,"gameState"],[122,60,177,58],[122,61,177,59,"subscriptionBenefits"],[122,81,177,79],[122,83,177,81,"xp_multiplier"],[122,96,177,94],[122,100,177,98],[122,103,177,101],[122,104,177,102],[123,6,178,4],[123,12,178,10,"goldReward"],[123,22,178,20],[123,25,178,23],[123,27,178,25],[123,31,178,29,"game"],[123,35,178,33],[123,36,178,34,"gameState"],[123,45,178,43],[123,46,178,44,"subscriptionBenefits"],[123,66,178,64],[123,68,178,66,"drop_multiplier"],[123,83,178,81],[123,87,178,85],[123,90,178,88],[123,91,178,89],[124,6,180,4,"console"],[124,13,180,11],[124,14,180,12,"log"],[124,17,180,15],[124,18,180,16],[124,46,180,44,"xpReward"],[124,54,180,52],[124,65,180,63,"goldReward"],[124,75,180,73],[124,88,180,86,"enemy"],[124,93,180,91],[124,94,180,92,"name"],[124,98,180,96],[124,100,180,98],[124,101,180,99],[126,6,182,4],[127,6,183,4,"game"],[127,10,183,8],[127,11,183,9,"updateNinja"],[127,22,183,20],[127,23,183,21,"prev"],[127,27,183,25],[127,32,183,30],[128,8,184,6,"experience"],[128,18,184,16],[128,20,184,18,"prev"],[128,24,184,22],[128,25,184,23,"experience"],[128,35,184,33],[128,38,184,36,"xpReward"],[128,46,184,44],[129,8,185,6,"gold"],[129,12,185,10],[129,14,185,12,"prev"],[129,18,185,16],[129,19,185,17,"gold"],[129,23,185,21],[129,26,185,24,"goldReward"],[130,6,186,4],[130,7,186,5],[130,8,186,6],[130,9,186,7],[132,6,188,4],[133,6,189,4,"setCombatState"],[133,20,189,18],[133,21,189,19,"prevState"],[133,30,189,28],[133,35,189,33],[134,8,190,6],[134,11,190,9,"prevState"],[134,20,190,18],[135,8,191,6,"enemies"],[135,15,191,13],[135,17,191,15,"prevState"],[135,26,191,24],[135,27,191,25,"enemies"],[135,34,191,32],[135,35,191,33,"map"],[135,38,191,36],[135,39,191,37,"e"],[135,40,191,38],[135,44,192,8,"e"],[135,45,192,9],[135,46,192,10,"id"],[135,48,192,12],[135,53,192,17,"enemy"],[135,58,192,22],[135,59,192,23,"id"],[135,61,192,25],[135,64,192,28],[136,10,192,30],[136,13,192,33,"e"],[136,14,192,34],[137,10,192,36,"xpAwarded"],[137,19,192,45],[137,21,192,47],[138,8,192,52],[138,9,192,53],[138,12,192,56,"e"],[138,13,193,6],[139,6,194,4],[139,7,194,5],[139,8,194,6],[139,9,194,7],[141,6,196,4],[142,6,197,4],[142,10,197,8,"enemy"],[142,15,197,13],[142,16,197,14,"zoneTypeId"],[142,26,197,24],[142,28,197,26],[143,8,198,6,"recordEnemyKill"],[143,23,198,21],[143,24,198,22],[144,10,199,8,"id"],[144,12,199,10],[144,14,199,12,"enemy"],[144,19,199,17],[144,20,199,18,"id"],[144,22,199,20],[145,10,200,8,"typeId"],[145,16,200,14],[145,18,200,16,"enemy"],[145,23,200,21],[145,24,200,22,"zoneTypeId"],[145,34,200,32],[146,10,201,8,"name"],[146,14,201,12],[146,16,201,14,"enemy"],[146,21,201,19],[146,22,201,20,"name"],[146,26,201,24],[147,10,202,8,"icon"],[147,14,202,12],[147,16,202,14],[147,20,202,18],[148,10,203,8,"hp"],[148,12,203,10],[148,14,203,12],[148,15,203,13],[149,10,204,8,"maxHP"],[149,15,204,13],[149,17,204,15,"enemy"],[149,22,204,20],[149,23,204,21,"maxHealth"],[149,32,204,30],[150,10,205,8,"attack"],[150,16,205,14],[150,18,205,16,"enemy"],[150,23,205,21],[150,24,205,22,"stats"],[150,29,205,27],[150,30,205,28,"attack"],[150,36,205,34],[151,10,206,8,"xp"],[151,12,206,10],[151,14,206,12,"enemy"],[151,19,206,17],[151,20,206,18,"zoneXP"],[151,26,206,24],[151,30,206,28],[151,31,206,29],[152,10,207,8,"position"],[152,18,207,16],[152,20,207,18,"enemy"],[152,25,207,23],[152,26,207,24,"position"],[153,8,208,6],[153,9,208,7],[153,10,208,8],[154,6,209,4],[155,4,210,2],[155,5,210,3],[155,7,210,5],[155,8,210,6,"game"],[155,12,210,10],[155,13,210,11,"updateNinja"],[155,24,210,22],[155,26,210,24,"game"],[155,30,210,28],[155,31,210,29,"gameState"],[155,40,210,38],[155,41,210,39,"subscriptionBenefits"],[155,61,210,59],[155,63,210,61,"recordEnemyKill"],[155,78,210,76],[155,79,210,77],[155,80,210,78],[157,4,212,2],[158,4,213,2],[159,4,214,2],[160,4,215,2],[160,10,215,8,"deadEnemiesRef"],[160,24,215,22],[160,27,215,25],[160,31,215,25,"useRef"],[160,37,215,31],[160,38,215,31,"useRef"],[160,44,215,31],[160,46,215,47],[160,48,215,49],[160,49,215,50],[161,4,217,2],[161,10,217,8,"handleCombatTick"],[161,26,217,24],[161,29,217,27,"React"],[161,34,217,32],[161,35,217,32,"default"],[161,42,217,32],[161,43,217,33,"useCallback"],[161,54,217,44],[161,55,217,45],[161,61,217,51],[162,6,218,4,"console"],[162,13,218,11],[162,14,218,12,"log"],[162,17,218,15],[162,18,218,16],[162,87,218,85],[162,88,218,86],[163,6,219,4,"console"],[163,13,219,11],[163,14,219,12,"log"],[163,17,219,15],[163,18,219,16],[163,65,219,63,"isManualControlActive"],[163,86,219,84],[163,99,219,97,"game"],[163,103,219,101],[163,104,219,102,"gameState"],[163,113,219,111],[163,114,219,112,"isAlive"],[163,121,219,119],[163,123,219,121],[163,124,219,122],[164,6,221,4,"setCombatState"],[164,20,221,18],[164,21,221,19,"prev"],[164,25,221,23],[164,29,221,27],[165,8,222,6],[165,14,222,12,"newTick"],[165,21,222,19],[165,24,222,22,"combatEngine"],[165,43,222,34],[165,44,222,34,"combatEngine"],[165,56,222,34],[165,57,222,35,"getCurrentTick"],[165,71,222,49],[165,72,222,50],[165,73,222,51],[166,8,223,6],[166,14,223,12,"newState"],[166,22,223,20],[166,25,223,23],[167,10,223,25],[167,13,223,28,"prev"],[167,17,223,32],[168,10,223,34,"currentTick"],[168,21,223,45],[168,23,223,47,"newTick"],[169,8,223,55],[169,9,223,56],[170,8,225,6],[170,12,225,10],[170,13,225,11,"newState"],[170,21,225,19],[170,22,225,20,"isInCombat"],[170,32,225,30],[170,34,225,32],[170,41,225,39,"newState"],[170,49,225,47],[172,8,227,6],[173,8,228,6,"newState"],[173,16,228,14],[173,17,228,15,"abilityManager"],[173,31,228,29],[173,32,228,30,"updateCooldowns"],[173,47,228,45],[173,48,228,46,"newTick"],[173,55,228,53],[173,56,228,54],[175,8,230,6],[176,8,231,6],[176,14,231,12,"effectResults"],[176,27,231,25],[176,30,231,28,"newState"],[176,38,231,36],[176,39,231,37,"statusEffects"],[176,52,231,50],[176,53,231,51,"processTick"],[176,64,231,62],[176,65,231,63,"newTick"],[176,72,231,70],[176,73,231,71],[178,8,233,6],[179,8,234,6,"effectResults"],[179,21,234,19],[179,22,234,20,"forEach"],[179,29,234,27],[179,30,234,28],[179,31,234,29,"results"],[179,38,234,36],[179,40,234,38,"entityId"],[179,48,234,46],[179,53,234,51],[180,10,235,8],[180,16,235,14,"enemyIndex"],[180,26,235,24],[180,29,235,27,"newState"],[180,37,235,35],[180,38,235,36,"enemies"],[180,45,235,43],[180,46,235,44,"findIndex"],[180,55,235,53],[180,56,235,54,"e"],[180,57,235,55],[180,61,235,59,"e"],[180,62,235,60],[180,63,235,61,"id"],[180,65,235,63],[180,70,235,68,"entityId"],[180,78,235,76],[180,79,235,77],[181,10,236,8],[181,14,236,12,"enemyIndex"],[181,24,236,22],[181,28,236,26],[181,29,236,27],[181,31,236,29],[182,12,237,10,"results"],[182,19,237,17],[182,20,237,18,"forEach"],[182,27,237,25],[182,28,237,26,"result"],[182,34,237,32],[182,38,237,36],[183,14,238,12,"newState"],[183,22,238,20],[183,23,238,21,"enemies"],[183,30,238,28],[183,31,238,29,"enemyIndex"],[183,41,238,39],[183,42,238,40],[183,43,238,41,"health"],[183,49,238,47],[183,53,238,51,"result"],[183,59,238,57],[183,60,238,58,"damage"],[183,66,238,64],[184,14,239,12,"newState"],[184,22,239,20],[184,23,239,21,"enemies"],[184,30,239,28],[184,31,239,29,"enemyIndex"],[184,41,239,39],[184,42,239,40],[184,43,239,41,"lastDamaged"],[184,54,239,52],[184,57,239,55,"newTick"],[184,64,239,62],[185,12,240,10],[185,13,240,11],[185,14,240,12],[186,10,241,8],[187,8,242,6],[187,9,242,7],[187,10,242,8],[189,8,244,6],[190,8,245,6],[191,8,246,6],[191,12,246,10,"newState"],[191,20,246,18],[191,21,246,19,"playerStats"],[191,32,246,30],[191,36,246,34,"game"],[191,40,246,38],[191,41,246,39,"gameState"],[191,50,246,48],[191,51,246,49,"ninja"],[191,56,246,54],[191,58,246,56],[192,10,247,8],[192,16,247,14,"effectiveStats"],[192,30,247,28],[192,33,247,31,"game"],[192,37,247,35],[192,38,247,36,"getEffectiveStats"],[192,55,247,53],[192,56,247,54],[192,57,247,55],[194,10,249,8],[195,10,250,8],[195,14,250,12,"newState"],[195,22,250,20],[195,23,250,21,"playerStats"],[195,34,250,32],[195,35,250,33,"attack"],[195,41,250,39],[195,46,250,44,"effectiveStats"],[195,60,250,58],[195,61,250,59,"attack"],[195,67,250,65],[195,71,251,12,"newState"],[195,79,251,20],[195,80,251,21,"playerStats"],[195,91,251,32],[195,92,251,33,"defense"],[195,99,251,40],[195,104,251,45,"effectiveStats"],[195,118,251,59],[195,119,251,60,"defense"],[195,126,251,67],[195,130,252,12,"newState"],[195,138,252,20],[195,139,252,21,"playerStats"],[195,150,252,32],[195,151,252,33,"maxHealth"],[195,160,252,42],[195,165,252,47,"effectiveStats"],[195,179,252,61],[195,180,252,62,"maxHealth"],[195,189,252,71],[195,191,252,73],[196,12,254,10,"console"],[196,19,254,17],[196,20,254,18,"log"],[196,23,254,21],[196,24,254,22],[196,58,254,56,"newState"],[196,66,254,64],[196,67,254,65,"playerStats"],[196,78,254,76],[196,79,254,77,"attack"],[196,85,254,83],[196,91,254,89,"effectiveStats"],[196,105,254,103],[196,106,254,104,"attack"],[196,112,254,110],[196,125,254,123,"newState"],[196,133,254,131],[196,134,254,132,"playerStats"],[196,145,254,143],[196,146,254,144,"defense"],[196,153,254,151],[196,159,254,157,"effectiveStats"],[196,173,254,171],[196,174,254,172,"defense"],[196,181,254,179],[196,192,254,190,"newState"],[196,200,254,198],[196,201,254,199,"playerStats"],[196,212,254,210],[196,213,254,211,"maxHealth"],[196,222,254,220],[196,228,254,226,"effectiveStats"],[196,242,254,240],[196,243,254,241,"maxHealth"],[196,252,254,250],[196,254,254,252],[196,255,254,253],[198,12,256,10],[199,12,257,10],[199,16,257,14,"newHealth"],[199,25,257,23],[199,28,257,26,"newState"],[199,36,257,34],[199,37,257,35,"playerStats"],[199,48,257,46],[199,49,257,47,"health"],[199,55,257,53],[200,12,258,10],[200,16,258,14,"newState"],[200,24,258,22],[200,25,258,23,"playerStats"],[200,36,258,34],[200,37,258,35,"maxHealth"],[200,46,258,44],[200,51,258,49,"effectiveStats"],[200,65,258,63],[200,66,258,64,"maxHealth"],[200,75,258,73],[200,77,258,75],[201,14,259,12],[202,14,260,12],[202,18,260,16,"effectiveStats"],[202,32,260,30],[202,33,260,31,"maxHealth"],[202,42,260,40],[202,45,260,43,"newState"],[202,53,260,51],[202,54,260,52,"playerStats"],[202,65,260,63],[202,66,260,64,"maxHealth"],[202,75,260,73],[202,78,260,76],[202,81,260,79],[202,83,260,81],[203,16,261,14],[204,16,262,14],[204,22,262,20,"healthRatio"],[204,33,262,31],[204,36,262,34,"newState"],[204,44,262,42],[204,45,262,43,"playerStats"],[204,56,262,54],[204,57,262,55,"maxHealth"],[204,66,262,64],[204,69,262,67],[204,70,262,68],[204,73,263,16,"newState"],[204,81,263,24],[204,82,263,25,"playerStats"],[204,93,263,36],[204,94,263,37,"health"],[204,100,263,43],[204,103,263,46,"newState"],[204,111,263,54],[204,112,263,55,"playerStats"],[204,123,263,66],[204,124,263,67,"maxHealth"],[204,133,263,76],[204,136,263,79],[204,137,263,80],[205,16,264,14,"newHealth"],[205,25,264,23],[205,28,264,26,"Math"],[205,32,264,30],[205,33,264,31,"floor"],[205,38,264,36],[205,39,264,37,"effectiveStats"],[205,53,264,51],[205,54,264,52,"maxHealth"],[205,63,264,61],[205,66,264,64,"healthRatio"],[205,77,264,75],[205,78,264,76],[206,14,265,12],[206,15,265,13],[206,21,265,19],[206,25,265,23,"newState"],[206,33,265,31],[206,34,265,32,"playerStats"],[206,45,265,43],[206,46,265,44,"health"],[206,52,265,50],[206,55,265,53,"effectiveStats"],[206,69,265,67],[206,70,265,68,"maxHealth"],[206,79,265,77],[206,81,265,79],[207,16,266,14],[208,16,267,14,"newHealth"],[208,25,267,23],[208,28,267,26,"effectiveStats"],[208,42,267,40],[208,43,267,41,"maxHealth"],[208,52,267,50],[209,14,268,12],[210,14,269,12],[211,12,270,10],[212,12,272,10,"newState"],[212,20,272,18],[212,21,272,19,"playerStats"],[212,32,272,30],[212,35,272,33],[213,14,273,12],[213,17,273,15,"newState"],[213,25,273,23],[213,26,273,24,"playerStats"],[213,37,273,35],[214,14,274,12,"attack"],[214,20,274,18],[214,22,274,20,"effectiveStats"],[214,36,274,34],[214,37,274,35,"attack"],[214,43,274,41],[215,14,275,12,"defense"],[215,21,275,19],[215,23,275,21,"effectiveStats"],[215,37,275,35],[215,38,275,36,"defense"],[215,45,275,43],[216,14,276,12,"maxHealth"],[216,23,276,21],[216,25,276,23,"effectiveStats"],[216,39,276,37],[216,40,276,38,"maxHealth"],[216,49,276,47],[217,14,276,49],[218,14,277,12,"health"],[218,20,277,18],[218,22,277,20,"newHealth"],[218,31,277,29],[219,14,277,31],[220,14,278,12,"critChance"],[220,24,278,22],[220,26,278,24,"effectiveStats"],[220,40,278,38],[220,41,278,39,"critChance"],[220,51,278,49],[220,55,278,53,"newState"],[220,63,278,61],[220,64,278,62,"playerStats"],[220,75,278,73],[220,76,278,74,"critChance"],[220,86,278,84],[221,14,279,12,"critDamage"],[221,24,279,22],[221,26,279,24,"effectiveStats"],[221,40,279,38],[221,41,279,39,"critDamage"],[221,51,279,49],[221,55,279,53,"newState"],[221,63,279,61],[221,64,279,62,"playerStats"],[221,75,279,73],[221,76,279,74,"critDamage"],[221,86,279,84],[222,14,280,12,"cooldownReduction"],[222,31,280,29],[222,33,280,31,"effectiveStats"],[222,47,280,45],[222,48,280,46,"cooldownReduction"],[222,65,280,63],[222,69,280,67,"newState"],[222,77,280,75],[222,78,280,76,"playerStats"],[222,89,280,87],[222,90,280,88,"cooldownReduction"],[223,12,281,10],[223,13,281,11],[224,10,282,8],[226,10,284,8],[227,10,285,8],[227,14,285,12,"game"],[227,18,285,16],[227,19,285,17,"gameState"],[227,28,285,26],[227,29,285,27,"isAlive"],[227,36,285,34],[227,40,286,12,"game"],[227,44,286,16],[227,45,286,17,"gameState"],[227,54,286,26],[227,55,286,27,"ninja"],[227,60,286,32],[227,61,286,33,"health"],[227,67,286,39],[227,72,286,44,"effectiveStats"],[227,86,286,58],[227,87,286,59,"maxHealth"],[227,96,286,68],[227,100,287,12,"newState"],[227,108,287,20],[227,109,287,21,"playerStats"],[227,120,287,32],[227,121,287,33,"health"],[227,127,287,39],[227,130,287,42,"effectiveStats"],[227,144,287,56],[227,145,287,57,"maxHealth"],[227,154,287,66],[227,157,287,69],[227,160,287,72],[227,162,287,74],[228,12,288,10,"console"],[228,19,288,17],[228,20,288,18,"log"],[228,23,288,21],[228,24,288,22],[228,58,288,56,"newState"],[228,66,288,64],[228,67,288,65,"playerStats"],[228,78,288,76],[228,79,288,77,"health"],[228,85,288,83],[228,91,288,89,"game"],[228,95,288,93],[228,96,288,94,"gameState"],[228,105,288,103],[228,106,288,104,"ninja"],[228,111,288,109],[228,112,288,110,"health"],[228,118,288,116],[228,139,288,137],[228,140,288,138],[229,12,289,10,"newState"],[229,20,289,18],[229,21,289,19,"playerStats"],[229,32,289,30],[229,33,289,31,"health"],[229,39,289,37],[229,42,289,40,"game"],[229,46,289,44],[229,47,289,45,"gameState"],[229,56,289,54],[229,57,289,55,"ninja"],[229,62,289,60],[229,63,289,61,"health"],[229,69,289,67],[230,10,290,8],[231,8,291,6],[233,8,293,6],[234,8,294,6,"newState"],[234,16,294,14],[234,17,294,15,"enemies"],[234,24,294,22],[234,25,294,23,"forEach"],[234,32,294,30],[234,33,294,31,"enemy"],[234,38,294,36],[234,42,294,40],[235,10,295,8],[235,14,295,12],[235,15,295,13,"enemy"],[235,20,295,18],[235,21,295,19,"isBoss"],[235,27,295,25],[235,29,295,27],[236,12,295,29],[237,12,296,10],[238,12,297,10],[238,18,297,16,"MOVEMENT_SPEED"],[238,32,297,30],[238,35,297,33],[238,39,297,37],[238,40,297,38],[238,41,297,39],[239,12,298,10],[239,18,298,16,"SCREEN_WIDTH"],[239,30,298,28],[239,33,298,31],[239,36,298,34],[240,12,299,10],[240,18,299,16,"GAME_AREA_HEIGHT"],[240,34,299,32],[240,37,299,35],[240,40,299,38],[240,41,299,39],[240,42,299,40],[241,12,300,10],[241,18,300,16,"ENEMY_SIZE"],[241,28,300,26],[241,31,300,29],[241,33,300,31],[243,12,302,10],[244,12,303,10],[244,18,303,16,"playerX"],[244,25,303,23],[244,28,303,26,"currentNinjaPosition"],[244,48,303,46],[244,49,303,47,"x"],[244,50,303,48],[245,12,304,10],[245,18,304,16,"playerY"],[245,25,304,23],[245,28,304,26,"currentNinjaPosition"],[245,48,304,46],[245,49,304,47,"y"],[245,50,304,48],[247,12,306,10],[248,12,307,10],[248,18,307,16,"deltaX"],[248,24,307,22],[248,27,307,25,"playerX"],[248,34,307,32],[248,37,307,35,"enemy"],[248,42,307,40],[248,43,307,41,"position"],[248,51,307,49],[248,52,307,50,"x"],[248,53,307,51],[249,12,308,10],[249,18,308,16,"deltaY"],[249,24,308,22],[249,27,308,25,"playerY"],[249,34,308,32],[249,37,308,35,"enemy"],[249,42,308,40],[249,43,308,41,"position"],[249,51,308,49],[249,52,308,50,"y"],[249,53,308,51],[250,12,309,10],[250,18,309,16,"distance"],[250,26,309,24],[250,29,309,27,"Math"],[250,33,309,31],[250,34,309,32,"sqrt"],[250,38,309,36],[250,39,309,37,"deltaX"],[250,45,309,43],[250,48,309,46,"deltaX"],[250,54,309,52],[250,57,309,55,"deltaY"],[250,63,309,61],[250,66,309,64,"deltaY"],[250,72,309,70],[250,73,309,71],[252,12,311,10],[253,12,312,10],[253,18,312,16,"ATTACK_RANGE"],[253,30,312,28],[253,33,312,31],[253,35,312,33],[253,36,312,34],[253,37,312,35],[254,12,313,10],[254,18,313,16,"ATTACK_COOLDOWN"],[254,33,313,31],[254,36,313,34],[254,38,313,36],[254,39,313,37],[254,40,313,38],[256,12,315,10],[256,16,315,14,"distance"],[256,24,315,22],[256,28,315,26,"ATTACK_RANGE"],[256,40,315,38],[256,42,315,40],[257,14,316,12],[258,14,317,12],[258,18,317,16],[258,19,317,17,"enemy"],[258,24,317,22],[258,25,317,23,"lastAttackTick"],[258,39,317,37],[258,41,317,39,"enemy"],[258,46,317,44],[258,47,317,45,"lastAttackTick"],[258,61,317,59],[258,64,317,62],[258,65,317,63],[259,14,319,12],[259,18,319,16,"newState"],[259,26,319,24],[259,27,319,25,"currentTick"],[259,38,319,36],[259,41,319,39,"enemy"],[259,46,319,44],[259,47,319,45,"lastAttackTick"],[259,61,319,59],[259,65,319,63,"ATTACK_COOLDOWN"],[259,80,319,78],[259,82,319,80],[260,16,320,14],[261,16,321,14],[261,20,321,18],[261,21,321,19,"game"],[261,25,321,23],[261,26,321,24,"gameState"],[261,35,321,33],[261,36,321,34,"isAlive"],[261,43,321,41],[261,45,321,43],[262,18,322,16,"console"],[262,25,322,23],[262,26,322,24,"log"],[262,29,322,27],[262,30,322,28],[262,49,322,47,"enemy"],[262,54,322,52],[262,55,322,53,"name"],[262,59,322,57],[262,93,322,91],[262,94,322,92],[263,18,323,16],[264,18,324,16,"enemy"],[264,23,324,21],[264,24,324,22,"lastAttackTick"],[264,38,324,36],[264,41,324,39,"newState"],[264,49,324,47],[264,50,324,48,"currentTick"],[264,61,324,59],[265,16,325,14],[265,17,325,15],[265,23,325,21],[266,18,326,16],[267,18,327,16],[267,24,327,22,"isPlayerInvincible"],[267,42,327,40],[267,45,327,43,"game"],[267,49,327,47],[267,50,327,48,"gameState"],[267,59,327,57],[267,60,327,58,"isInvincible"],[267,72,327,70],[267,76,328,41,"game"],[267,80,328,45],[267,81,328,46,"gameState"],[267,90,328,55],[267,91,328,56,"invincibilityEndTime"],[267,111,328,76],[267,115,329,41,"Date"],[267,119,329,45],[267,120,329,46,"now"],[267,123,329,49],[267,124,329,50],[267,125,329,51],[267,128,329,54,"game"],[267,132,329,58],[267,133,329,59,"gameState"],[267,142,329,68],[267,143,329,69,"invincibilityEndTime"],[267,163,329,89],[268,18,331,16],[268,22,331,20,"isPlayerInvincible"],[268,40,331,38],[268,42,331,40],[269,20,332,18,"console"],[269,27,332,25],[269,28,332,26,"log"],[269,31,332,29],[269,32,332,30],[269,51,332,49,"enemy"],[269,56,332,54],[269,57,332,55,"name"],[269,61,332,59],[269,101,332,99],[269,102,332,100],[270,20,333,18],[271,20,334,18,"enemy"],[271,25,334,23],[271,26,334,24,"lastAttackTick"],[271,40,334,38],[271,43,334,41,"newState"],[271,51,334,49],[271,52,334,50,"currentTick"],[271,63,334,61],[272,18,335,16],[272,19,335,17],[272,25,335,23],[273,20,336,16],[274,20,337,16],[274,26,337,22,"baseAttack"],[274,36,337,32],[274,39,337,35,"enemy"],[274,44,337,40],[274,45,337,41,"stats"],[274,50,337,46],[274,51,337,47,"attack"],[274,57,337,53],[274,60,337,56],[274,63,337,59],[274,64,337,60],[274,65,337,61],[275,20,338,16],[275,26,338,22,"attackDamage"],[275,38,338,34],[275,41,338,37,"Math"],[275,45,338,41],[275,46,338,42,"floor"],[275,51,338,47],[275,52,338,48,"baseAttack"],[275,62,338,58],[275,66,338,62],[275,69,338,65],[275,72,338,68,"Math"],[275,76,338,72],[275,77,338,73,"random"],[275,83,338,79],[275,84,338,80],[275,85,338,81],[275,88,338,84],[275,91,338,87],[275,92,338,88],[275,93,338,89],[275,94,338,90],[275,95,338,91],[276,20,339,16],[276,26,339,22,"playerDefense"],[276,39,339,35],[276,42,339,38,"newState"],[276,50,339,46],[276,51,339,47,"playerStats"],[276,62,339,58],[276,63,339,59,"defense"],[276,70,339,66],[277,20,340,16],[277,26,340,22,"finalDamage"],[277,37,340,33],[277,40,340,36,"Math"],[277,44,340,40],[277,45,340,41,"max"],[277,48,340,44],[277,49,340,45],[277,50,340,46],[277,52,340,48,"attackDamage"],[277,64,340,60],[277,67,340,63,"Math"],[277,71,340,67],[277,72,340,68,"floor"],[277,77,340,73],[277,78,340,74,"playerDefense"],[277,91,340,87],[277,94,340,90],[277,97,340,93],[277,98,340,94],[277,99,340,95],[277,100,340,96],[277,101,340,97],[279,20,342,16,"console"],[279,27,342,23],[279,28,342,24,"log"],[279,31,342,27],[279,32,342,28],[279,53,342,49,"enemy"],[279,58,342,54],[279,59,342,55,"name"],[279,63,342,59],[279,86,342,82,"finalDamage"],[279,97,342,93],[279,109,342,105,"attackDamage"],[279,121,342,117],[279,132,342,128,"Math"],[279,136,342,132],[279,137,342,133,"floor"],[279,142,342,138],[279,143,342,139,"playerDefense"],[279,156,342,152],[279,159,342,155],[279,162,342,158],[279,163,342,159],[279,184,342,180],[279,185,342,181],[281,20,344,16],[282,20,345,16],[282,26,345,22,"newPlayerHealth"],[282,41,345,37],[282,44,345,40,"Math"],[282,48,345,44],[282,49,345,45,"max"],[282,52,345,48],[282,53,345,49],[282,54,345,50],[282,56,345,52,"newState"],[282,64,345,60],[282,65,345,61,"playerStats"],[282,76,345,72],[282,77,345,73,"health"],[282,83,345,79],[282,86,345,82,"finalDamage"],[282,97,345,93],[282,98,345,94],[283,20,346,16,"newState"],[283,28,346,24],[283,29,346,25,"playerStats"],[283,40,346,36],[283,41,346,37,"health"],[283,47,346,43],[283,50,346,46,"newPlayerHealth"],[283,65,346,61],[284,20,348,16,"console"],[284,27,348,23],[284,28,348,24,"log"],[284,31,348,27],[284,32,348,28],[284,53,348,49,"newState"],[284,61,348,57],[284,62,348,58,"playerStats"],[284,73,348,69],[284,74,348,70,"health"],[284,80,348,76],[284,84,348,80,"newState"],[284,92,348,88],[284,93,348,89,"playerStats"],[284,104,348,100],[284,105,348,101,"maxHealth"],[284,114,348,110],[284,124,348,120,"finalDamage"],[284,135,348,131],[284,145,348,141],[284,146,348,142],[286,20,350,16],[287,20,351,16,"enemy"],[287,25,351,21],[287,26,351,22,"lastAttackTick"],[287,40,351,36],[287,43,351,39,"newState"],[287,51,351,47],[287,52,351,48,"currentTick"],[287,63,351,59],[289,20,353,16],[290,20,354,16],[290,24,354,20,"newPlayerHealth"],[290,39,354,35],[290,43,354,39],[290,44,354,40],[290,46,354,42],[291,22,355,18,"console"],[291,29,355,25],[291,30,355,26,"log"],[291,33,355,29],[291,34,355,30],[291,84,355,80],[291,85,355,81],[292,22,356,18],[293,22,357,18,"game"],[293,26,357,22],[293,27,357,23,"updateGameState"],[293,42,357,38],[293,43,357,39],[294,24,357,41,"isAlive"],[294,31,357,48],[294,33,357,50],[295,22,357,56],[295,23,357,57],[295,24,357,58],[296,20,358,16],[297,18,359,16],[298,16,360,14],[299,14,361,12],[300,12,362,10],[300,13,362,11],[300,19,362,17],[301,14,363,12],[302,14,364,12],[303,14,365,12],[303,18,365,16,"distance"],[303,26,365,24],[303,29,365,27],[303,31,365,29],[303,33,365,31],[304,16,366,14],[305,16,367,14],[305,22,367,20,"normalizedX"],[305,33,367,31],[305,36,367,34,"deltaX"],[305,42,367,40],[305,45,367,43,"distance"],[305,53,367,51],[306,16,368,14],[306,22,368,20,"normalizedY"],[306,33,368,31],[306,36,368,34,"deltaY"],[306,42,368,40],[306,45,368,43,"distance"],[306,53,368,51],[308,16,370,14],[309,16,371,14],[309,22,371,20,"randomFactor"],[309,34,371,32],[309,37,371,35],[309,40,371,38],[309,41,371,39],[309,42,371,40],[310,16,372,14],[310,22,372,20,"finalX"],[310,28,372,26],[310,31,372,29,"normalizedX"],[310,42,372,40],[310,45,372,43],[310,46,372,44,"Math"],[310,50,372,48],[310,51,372,49,"random"],[310,57,372,55],[310,58,372,56],[310,59,372,57],[310,62,372,60],[310,65,372,63],[310,69,372,67,"randomFactor"],[310,81,372,79],[311,16,373,14],[311,22,373,20,"finalY"],[311,28,373,26],[311,31,373,29,"normalizedY"],[311,42,373,40],[311,45,373,43],[311,46,373,44,"Math"],[311,50,373,48],[311,51,373,49,"random"],[311,57,373,55],[311,58,373,56],[311,59,373,57],[311,62,373,60],[311,65,373,63],[311,69,373,67,"randomFactor"],[311,81,373,79],[313,16,375,14],[314,16,376,14],[314,20,376,18,"newX"],[314,24,376,22],[314,27,376,25,"enemy"],[314,32,376,30],[314,33,376,31,"position"],[314,41,376,39],[314,42,376,40,"x"],[314,43,376,41],[314,46,376,45,"finalX"],[314,52,376,51],[314,55,376,54,"MOVEMENT_SPEED"],[314,69,376,69],[315,16,377,14],[315,20,377,18,"newY"],[315,24,377,22],[315,27,377,25,"enemy"],[315,32,377,30],[315,33,377,31,"position"],[315,41,377,39],[315,42,377,40,"y"],[315,43,377,41],[315,46,377,45,"finalY"],[315,52,377,51],[315,55,377,54,"MOVEMENT_SPEED"],[315,69,377,69],[317,16,379,14],[318,16,380,14,"newX"],[318,20,380,18],[318,23,380,21,"Math"],[318,27,380,25],[318,28,380,26,"max"],[318,31,380,29],[318,32,380,30],[318,33,380,31],[318,35,380,33,"Math"],[318,39,380,37],[318,40,380,38,"min"],[318,43,380,41],[318,44,380,42,"SCREEN_WIDTH"],[318,56,380,54],[318,59,380,57,"ENEMY_SIZE"],[318,69,380,67],[318,71,380,69,"newX"],[318,75,380,73],[318,76,380,74],[318,77,380,75],[319,16,381,14,"newY"],[319,20,381,18],[319,23,381,21,"Math"],[319,27,381,25],[319,28,381,26,"max"],[319,31,381,29],[319,32,381,30],[319,33,381,31],[319,35,381,33,"Math"],[319,39,381,37],[319,40,381,38,"min"],[319,43,381,41],[319,44,381,42,"GAME_AREA_HEIGHT"],[319,60,381,58],[319,63,381,61,"ENEMY_SIZE"],[319,73,381,71],[319,75,381,73,"newY"],[319,79,381,77],[319,80,381,78],[319,81,381,79],[321,16,383,14],[322,16,384,14,"enemy"],[322,21,384,19],[322,22,384,20,"position"],[322,30,384,28],[322,31,384,29,"x"],[322,32,384,30],[322,35,384,33,"newX"],[322,39,384,37],[323,16,385,14,"enemy"],[323,21,385,19],[323,22,385,20,"position"],[323,30,385,28],[323,31,385,29,"y"],[323,32,385,30],[323,35,385,33,"newY"],[323,39,385,37],[324,14,386,12],[325,14,387,12],[326,12,388,10],[327,10,389,8],[328,8,390,6],[328,9,390,7],[328,10,390,8],[330,8,392,6],[331,8,393,6],[331,12,393,10,"newState"],[331,20,393,18],[331,21,393,19,"shadowClone"],[331,32,393,30],[331,34,393,32],[332,10,394,8],[333,10,395,8,"newState"],[333,18,395,16],[333,19,395,17,"shadowClone"],[333,30,395,28],[333,31,395,29,"remainingTicks"],[333,45,395,43],[333,47,395,45],[335,10,397,8],[336,10,398,8],[336,16,398,14,"cloneOffset"],[336,27,398,25],[336,30,398,28],[336,32,398,30],[336,33,398,31],[336,34,398,32],[337,10,399,8,"newState"],[337,18,399,16],[337,19,399,17,"shadowClone"],[337,30,399,28],[337,31,399,29,"position"],[337,39,399,37],[337,40,399,38,"x"],[337,41,399,39],[337,44,399,42,"currentNinjaPosition"],[337,64,399,62],[337,65,399,63,"x"],[337,66,399,64],[337,69,399,67,"cloneOffset"],[337,80,399,78],[338,10,400,8,"newState"],[338,18,400,16],[338,19,400,17,"shadowClone"],[338,30,400,28],[338,31,400,29,"position"],[338,39,400,37],[338,40,400,38,"y"],[338,41,400,39],[338,44,400,42,"currentNinjaPosition"],[338,64,400,62],[338,65,400,63,"y"],[338,66,400,64],[338,69,400,67],[338,71,400,69],[340,10,402,8],[341,10,403,8],[341,14,403,12,"newState"],[341,22,403,20],[341,23,403,21,"shadowClone"],[341,34,403,32],[341,35,403,33,"remainingTicks"],[341,49,403,47],[341,53,403,51],[341,54,403,52],[341,56,403,54],[342,12,404,10,"console"],[342,19,404,17],[342,20,404,18,"log"],[342,23,404,21],[342,24,404,22],[342,75,404,73],[342,76,404,74],[343,12,405,10,"newState"],[343,20,405,18],[343,21,405,19,"shadowClone"],[343,32,405,30],[343,35,405,33,"undefined"],[343,44,405,42],[344,10,406,8],[344,11,406,9],[344,17,406,15],[345,12,407,10],[346,12,408,10],[347,12,409,10],[347,18,409,16,"CLONE_ATTACK_INTERVAL"],[347,39,409,37],[347,42,409,40],[347,44,409,42],[348,12,410,10],[348,16,410,14,"newState"],[348,24,410,22],[348,25,410,23,"currentTick"],[348,36,410,34],[348,39,410,37,"CLONE_ATTACK_INTERVAL"],[348,60,410,58],[348,65,410,63],[348,66,410,64],[348,70,410,68,"newState"],[348,78,410,76],[348,79,410,77,"enemies"],[348,86,410,84],[348,87,410,85,"length"],[348,93,410,91],[348,96,410,94],[348,97,410,95],[348,99,410,97],[349,14,411,12,"console"],[349,21,411,19],[349,22,411,20,"log"],[349,25,411,23],[349,26,411,24],[349,83,411,81],[349,84,411,82],[351,14,413,12],[352,14,414,12],[352,20,414,18,"target"],[352,26,414,24],[352,29,414,27,"findClosestEnemyInternal"],[352,53,414,51],[352,54,414,52,"newState"],[352,62,414,60],[352,63,414,61,"enemies"],[352,70,414,68],[352,71,414,69],[353,14,415,12],[353,18,415,16,"target"],[353,24,415,22],[353,26,415,24],[354,16,416,14],[355,16,417,14],[355,22,417,20,"cloneDamage"],[355,33,417,31],[355,36,417,34,"Math"],[355,40,417,38],[355,41,417,39,"floor"],[355,46,417,44],[355,47,417,45,"newState"],[355,55,417,53],[355,56,417,54,"playerStats"],[355,67,417,65],[355,68,417,66,"attack"],[355,74,417,72],[355,77,417,75],[355,80,417,78],[355,81,417,79],[357,16,419,14],[358,16,420,14,"createProjectile"],[358,32,420,30],[358,33,420,31,"target"],[358,39,420,37],[358,41,420,39,"cloneDamage"],[358,52,420,50],[358,54,420,52,"newState"],[358,62,420,60],[358,63,420,61,"shadowClone"],[358,74,420,72],[358,75,420,73,"position"],[358,83,420,81],[358,85,420,83],[359,18,421,16,"id"],[359,20,421,18],[359,22,421,20],[359,43,421,41],[360,18,422,16,"name"],[360,22,422,20],[360,24,422,22],[360,45,422,43],[361,18,423,16,"icon"],[361,22,423,20],[361,24,423,22],[362,16,424,14],[362,17,424,15],[362,18,424,16],[363,14,425,12],[364,12,426,10],[365,10,427,8],[366,8,428,6],[368,8,430,6],[369,8,431,6],[370,8,432,6,"console"],[370,15,432,13],[370,16,432,14,"log"],[370,19,432,17],[370,20,432,18],[370,63,432,61,"isManualControlActive"],[370,84,432,82],[370,97,432,95,"game"],[370,101,432,99],[370,102,432,100,"gameState"],[370,111,432,109],[370,112,432,110,"isAlive"],[370,119,432,117],[370,121,432,119],[370,122,432,120],[371,8,433,6],[371,12,433,10],[371,13,433,11,"isManualControlActive"],[371,34,433,32],[371,38,433,36,"game"],[371,42,433,40],[371,43,433,41,"gameState"],[371,52,433,50],[371,53,433,51,"isAlive"],[371,60,433,58],[371,62,433,60],[372,10,434,8],[372,15,434,13],[372,19,434,17,"i"],[372,20,434,18],[372,23,434,21],[372,24,434,22],[372,26,434,24,"i"],[372,27,434,25],[372,30,434,28],[372,31,434,29],[372,33,434,31,"i"],[372,34,434,32],[372,36,434,34],[372,38,434,36],[373,12,435,10],[373,16,435,14,"newState"],[373,24,435,22],[373,25,435,23,"abilityManager"],[373,39,435,37],[373,40,435,38,"isAbilityReady"],[373,54,435,52],[373,55,435,53,"i"],[373,56,435,54],[373,57,435,55],[373,61,435,59,"newState"],[373,69,435,67],[373,70,435,68,"enemies"],[373,77,435,75],[373,78,435,76,"length"],[373,84,435,82],[373,87,435,85],[373,88,435,86],[373,90,435,88],[374,14,436,12],[374,18,436,16,"newState"],[374,26,436,24],[374,27,436,25,"abilityManager"],[374,41,436,39],[374,42,436,40,"useAbility"],[374,52,436,50],[374,53,436,51,"i"],[374,54,436,52],[374,56,436,54,"newTick"],[374,63,436,61],[374,64,436,62],[374,66,436,64],[375,16,437,14,"console"],[375,23,437,21],[375,24,437,22,"log"],[375,27,437,25],[375,28,437,26],[375,73,437,71,"i"],[375,74,437,72],[375,76,437,74],[375,77,437,75],[376,16,438,14,"castAbility"],[376,27,438,25],[376,28,438,26,"newState"],[376,36,438,34],[376,38,438,36,"i"],[376,39,438,37],[376,40,438,38],[377,14,439,12],[378,12,440,10],[379,10,441,8],[380,8,442,6],[382,8,444,6],[383,8,445,6],[384,8,446,6],[384,14,446,12,"allDeadEnemies"],[384,28,446,26],[384,31,446,29,"newState"],[384,39,446,37],[384,40,446,38,"enemies"],[384,47,446,45],[384,48,446,46,"filter"],[384,54,446,52],[384,55,446,53,"enemy"],[384,60,446,58],[384,64,446,62,"enemy"],[384,69,446,67],[384,70,446,68,"health"],[384,76,446,74],[384,80,446,78],[384,81,446,79],[384,82,446,80],[386,8,448,6],[387,8,449,6,"deadEnemiesRef"],[387,22,449,20],[387,23,449,21,"current"],[387,30,449,28],[387,33,449,31],[387,34,449,32],[387,37,449,35,"allDeadEnemies"],[387,51,449,49],[387,52,449,50],[387,53,449,51],[387,54,449,52],[389,8,451,6],[390,8,452,6],[390,12,452,10,"allDeadEnemies"],[390,26,452,24],[390,27,452,25,"length"],[390,33,452,31],[390,36,452,34],[390,37,452,35],[390,39,452,37],[391,10,453,8,"console"],[391,17,453,15],[391,18,453,16,"log"],[391,21,453,19],[391,22,453,20],[391,34,453,32,"allDeadEnemies"],[391,48,453,46],[391,49,453,47,"length"],[391,55,453,53],[391,83,453,81],[391,85,453,83,"allDeadEnemies"],[391,99,453,97],[391,100,453,98,"map"],[391,103,453,101],[391,104,453,102,"e"],[391,105,453,103],[391,109,453,107],[391,112,453,110,"e"],[391,113,453,111],[391,114,453,112,"name"],[391,118,453,116],[391,122,453,120,"e"],[391,123,453,121],[391,124,453,122,"health"],[391,130,453,128],[391,145,453,143,"e"],[391,146,453,144],[391,147,453,145,"isDying"],[391,154,453,152],[391,157,453,155],[391,158,453,156],[391,159,453,157],[392,8,454,6],[394,8,456,6],[395,8,457,6],[395,14,457,12,"currentTime"],[395,25,457,23],[395,28,457,26,"Date"],[395,32,457,30],[395,33,457,31,"now"],[395,36,457,34],[395,37,457,35],[395,38,457,36],[396,8,458,6,"newState"],[396,16,458,14],[396,17,458,15,"enemies"],[396,24,458,22],[396,27,458,25,"newState"],[396,35,458,33],[396,36,458,34,"enemies"],[396,43,458,41],[396,44,458,42,"filter"],[396,50,458,48],[396,51,458,49,"enemy"],[396,56,458,54],[396,60,458,58],[397,10,459,8],[397,14,459,12,"enemy"],[397,19,459,17],[397,20,459,18,"isDying"],[397,27,459,25],[397,31,459,29,"enemy"],[397,36,459,34],[397,37,459,35,"deathStartTime"],[397,51,459,49],[397,53,459,51],[398,12,460,10],[398,18,460,16,"animationDuration"],[398,35,460,33],[398,38,460,36],[398,41,460,39],[398,42,460,40],[398,43,460,41],[399,12,461,10],[399,18,461,16,"isAnimationComplete"],[399,37,461,35],[399,40,461,38,"currentTime"],[399,51,461,49],[399,54,461,52,"enemy"],[399,59,461,57],[399,60,461,58,"deathStartTime"],[399,74,461,72],[399,78,461,76,"animationDuration"],[399,95,461,93],[400,12,462,10],[400,16,462,14,"isAnimationComplete"],[400,35,462,33],[400,37,462,35],[401,14,463,12,"console"],[401,21,463,19],[401,22,463,20,"log"],[401,25,463,23],[401,26,463,24],[401,58,463,56,"enemy"],[401,63,463,61],[401,64,463,62,"name"],[401,68,463,66],[401,86,463,84,"currentTime"],[401,97,463,95],[401,100,463,98,"enemy"],[401,105,463,103],[401,106,463,104,"deathStartTime"],[401,120,463,118],[401,129,463,127],[401,130,463,128],[402,14,464,12],[402,21,464,19],[402,26,464,24],[402,27,464,25],[402,28,464,26],[403,12,465,10],[404,10,466,8],[405,10,467,8],[405,17,467,15],[405,21,467,19],[405,22,467,20],[405,23,467,21],[406,8,468,6],[406,9,468,7],[406,10,468,8],[408,8,470,6],[409,8,471,6],[409,12,471,10,"allDeadEnemies"],[409,26,471,24],[409,27,471,25,"length"],[409,33,471,31],[409,36,471,34],[409,37,471,35],[409,39,471,37],[410,10,472,8,"console"],[410,17,472,15],[410,18,472,16,"log"],[410,21,472,19],[410,22,472,20],[410,49,472,47,"allDeadEnemies"],[410,63,472,61],[410,64,472,62,"length"],[410,70,472,68],[410,86,472,84],[410,88,472,86,"allDeadEnemies"],[410,102,472,100],[410,103,472,101,"map"],[410,106,472,104],[410,107,472,105,"e"],[410,108,472,106],[410,112,472,110],[410,115,472,113,"e"],[410,116,472,114],[410,117,472,115,"id"],[410,119,472,117],[410,123,472,121,"e"],[410,124,472,122],[410,125,472,123,"health"],[410,131,472,129],[410,136,472,134],[410,137,472,135],[410,138,472,136],[411,8,473,6],[413,8,475,6],[414,8,476,6],[414,14,476,12,"lowHealthEnemies"],[414,30,476,28],[414,33,476,31,"newState"],[414,41,476,39],[414,42,476,40,"enemies"],[414,49,476,47],[414,50,476,48,"filter"],[414,56,476,54],[414,57,476,55,"enemy"],[414,62,476,60],[414,66,476,64,"enemy"],[414,71,476,69],[414,72,476,70,"health"],[414,78,476,76],[414,82,476,80],[414,84,476,82],[414,88,476,86,"enemy"],[414,93,476,91],[414,94,476,92,"health"],[414,100,476,98],[414,103,476,101],[414,104,476,102],[414,105,476,103],[415,8,477,6],[415,12,477,10,"lowHealthEnemies"],[415,28,477,26],[415,29,477,27,"length"],[415,35,477,33],[415,38,477,36],[415,39,477,37],[415,41,477,39],[416,10,478,8,"console"],[416,17,478,15],[416,18,478,16,"log"],[416,21,478,19],[416,22,478,20],[416,61,478,59],[416,63,478,61,"lowHealthEnemies"],[416,79,478,77],[416,80,478,78,"map"],[416,83,478,81],[416,84,478,82,"e"],[416,85,478,83],[416,89,478,87],[416,92,478,90,"e"],[416,93,478,91],[416,94,478,92,"id"],[416,96,478,94],[416,100,478,98,"e"],[416,101,478,99],[416,102,478,100,"health"],[416,108,478,106],[416,112,478,110,"e"],[416,113,478,111],[416,114,478,112,"maxHealth"],[416,123,478,121],[416,128,478,126],[416,129,478,127],[416,130,478,128],[417,8,479,6],[419,8,481,6],[420,8,482,6],[420,14,482,12,"beforeCount"],[420,25,482,23],[420,28,482,26,"newState"],[420,36,482,34],[420,37,482,35,"enemies"],[420,44,482,42],[420,45,482,43,"length"],[420,51,482,49],[421,8,483,6,"newState"],[421,16,483,14],[421,17,483,15,"enemies"],[421,24,483,22],[421,27,483,25,"newState"],[421,35,483,33],[421,36,483,34,"enemies"],[421,43,483,41],[421,44,483,42,"filter"],[421,50,483,48],[421,51,483,49,"enemy"],[421,56,483,54],[421,60,483,58,"enemy"],[421,65,483,63],[421,66,483,64,"health"],[421,72,483,70],[421,75,483,73],[421,76,483,74],[421,77,483,75],[422,8,484,6],[422,14,484,12,"afterCount"],[422,24,484,22],[422,27,484,25,"newState"],[422,35,484,33],[422,36,484,34,"enemies"],[422,43,484,41],[422,44,484,42,"length"],[422,50,484,48],[423,8,486,6],[423,12,486,10,"beforeCount"],[423,23,486,21],[423,28,486,26,"afterCount"],[423,38,486,36],[423,40,486,38],[424,10,487,8,"console"],[424,17,487,15],[424,18,487,16,"log"],[424,21,487,19],[424,22,487,20],[424,52,487,50,"beforeCount"],[424,63,487,61],[424,66,487,64,"afterCount"],[424,76,487,74],[424,102,487,100],[424,103,487,101],[425,8,488,6],[427,8,490,6],[428,8,491,6],[429,8,492,6],[429,14,492,12,"MAX_ENEMIES"],[429,25,492,23],[429,28,492,26],[429,30,492,28],[429,31,492,29],[429,32,492,30],[430,8,493,6],[430,14,493,12,"MIN_SPAWN_DELAY"],[430,29,493,27],[430,32,493,30],[430,35,493,33],[430,36,493,34],[430,37,493,35],[431,8,494,6],[431,14,494,12,"now"],[431,17,494,15],[431,20,494,18,"Date"],[431,24,494,22],[431,25,494,23,"now"],[431,28,494,26],[431,29,494,27],[431,30,494,28],[432,8,495,6],[432,14,495,12,"hasBoss"],[432,21,495,19],[432,24,495,22,"newState"],[432,32,495,30],[432,33,495,31,"enemies"],[432,40,495,38],[432,41,495,39,"some"],[432,45,495,43],[432,46,495,44,"enemy"],[432,51,495,49],[432,55,495,53,"enemy"],[432,60,495,58],[432,61,495,59,"isBoss"],[432,67,495,65],[432,68,495,66],[434,8,497,6],[435,8,498,6],[435,12,498,10],[435,13,498,11,"newState"],[435,21,498,19],[435,22,498,20,"lastSpawnTime"],[435,35,498,33],[435,37,498,35],[436,10,499,8,"newState"],[436,18,499,16],[436,19,499,17,"lastSpawnTime"],[436,32,499,30],[436,35,499,33,"now"],[436,38,499,36],[437,8,500,6],[438,8,502,6,"console"],[438,15,502,13],[438,16,502,14,"log"],[438,19,502,17],[438,20,502,18],[438,53,502,51,"newState"],[438,61,502,59],[438,62,502,60,"enemies"],[438,69,502,67],[438,70,502,68,"length"],[438,76,502,74],[438,85,502,83,"MAX_ENEMIES"],[438,96,502,94],[438,109,502,107,"hasBoss"],[438,116,502,114],[438,118,502,116],[438,119,502,117],[440,8,504,6],[441,8,505,6],[441,12,505,10],[441,13,505,11,"hasBoss"],[441,20,505,18],[441,24,505,22,"newState"],[441,32,505,30],[441,33,505,31,"enemies"],[441,40,505,38],[441,41,505,39,"length"],[441,47,505,45],[441,50,505,48,"MAX_ENEMIES"],[441,61,505,59],[441,65,505,64,"now"],[441,68,505,67],[441,71,505,70,"newState"],[441,79,505,78],[441,80,505,79,"lastSpawnTime"],[441,93,505,92],[441,97,505,97,"MIN_SPAWN_DELAY"],[441,112,505,112],[441,114,505,114],[442,10,506,8,"console"],[442,17,506,15],[442,18,506,16,"log"],[442,21,506,19],[442,22,506,20],[442,43,506,41,"newState"],[442,51,506,49],[442,52,506,50,"enemies"],[442,59,506,57],[442,60,506,58,"length"],[442,66,506,64],[442,69,506,67],[442,70,506,68],[442,74,506,72,"MAX_ENEMIES"],[442,85,506,83],[442,87,506,85],[442,88,506,86],[443,10,507,8,"spawnTestEnemy"],[443,24,507,22],[443,25,507,23,"newState"],[443,33,507,31],[443,34,507,32],[444,10,508,8,"newState"],[444,18,508,16],[444,19,508,17,"lastSpawnTime"],[444,32,508,30],[444,35,508,33,"now"],[444,38,508,36],[445,8,509,6],[446,8,511,6],[446,15,511,13,"newState"],[446,23,511,21],[447,6,512,4],[447,7,512,5],[447,8,512,6],[449,6,514,4],[450,6,515,4],[450,12,515,10,"deadEnemiesToProcess"],[450,32,515,30],[450,35,515,33,"deadEnemiesRef"],[450,49,515,47],[450,50,515,48,"current"],[450,57,515,55],[450,58,515,56],[450,59,515,57],[451,6,516,4],[451,10,516,8,"deadEnemiesToProcess"],[451,30,516,28],[451,31,516,29,"length"],[451,37,516,35],[451,40,516,38],[451,41,516,39],[451,43,516,41],[452,8,517,6],[453,8,518,6],[454,8,519,6],[454,14,519,12,"unprocessedEnemies"],[454,32,519,30],[454,35,519,33,"deadEnemiesToProcess"],[454,55,519,53],[454,56,519,54],[454,57,519,55],[456,8,521,6],[457,8,522,6,"console"],[457,15,522,13],[457,16,522,14,"log"],[457,19,522,17],[457,20,522,18],[457,69,522,67],[457,71,522,69,"deadEnemiesToProcess"],[457,91,522,89],[457,92,522,90,"map"],[457,95,522,93],[457,96,522,94,"e"],[457,97,522,95],[457,102,522,100],[458,10,522,101,"id"],[458,12,522,103],[458,14,522,105,"e"],[458,15,522,106],[458,16,522,107,"id"],[458,18,522,109],[459,10,522,111,"name"],[459,14,522,115],[459,16,522,117,"e"],[459,17,522,118],[459,18,522,119,"name"],[459,22,522,123],[460,10,522,125,"xpAwarded"],[460,19,522,134],[460,21,522,136,"e"],[460,22,522,137],[460,23,522,138,"xpAwarded"],[461,8,522,147],[461,9,522,148],[461,10,522,149],[461,11,522,150],[461,12,522,151],[462,8,523,6,"console"],[462,15,523,13],[462,16,523,14,"log"],[462,19,523,17],[462,20,523,18],[462,43,523,41,"deadEnemiesToProcess"],[462,63,523,61],[462,64,523,62,"length"],[462,70,523,68],[462,87,523,85,"unprocessedEnemies"],[462,105,523,103],[462,106,523,104,"length"],[462,112,523,110],[462,126,523,124],[462,127,523,125],[463,8,525,6],[463,12,525,10,"unprocessedEnemies"],[463,30,525,28],[463,31,525,29,"length"],[463,37,525,35],[463,40,525,38],[463,41,525,39],[463,43,525,41],[464,10,526,8],[465,10,527,8],[465,14,527,12,"totalXP"],[465,21,527,19],[465,24,527,22],[465,25,527,23],[466,10,528,8],[466,14,528,12,"totalGold"],[466,23,528,21],[466,26,528,24],[466,27,528,25],[467,10,529,8],[467,16,529,14,"zoneKills"],[467,25,529,30],[467,28,529,33],[467,30,529,35],[468,10,531,8],[468,16,531,14,"xpMultiplier"],[468,28,531,26],[468,31,531,29,"game"],[468,35,531,33],[468,36,531,34,"gameState"],[468,45,531,43],[468,46,531,44,"subscriptionBenefits"],[468,66,531,64],[468,68,531,66,"xp_multiplier"],[468,81,531,79],[468,85,531,83],[468,88,531,86],[469,10,532,8],[469,16,532,14,"goldMultiplier"],[469,30,532,28],[469,33,532,31,"game"],[469,37,532,35],[469,38,532,36,"gameState"],[469,47,532,45],[469,48,532,46,"subscriptionBenefits"],[469,68,532,66],[469,70,532,68,"drop_multiplier"],[469,85,532,83],[469,89,532,87],[469,92,532,90],[470,10,534,8,"unprocessedEnemies"],[470,28,534,26],[470,29,534,27,"forEach"],[470,36,534,34],[470,37,534,35,"enemy"],[470,42,534,40],[470,46,534,44],[471,12,535,10],[472,12,536,10,"totalXP"],[472,19,536,17],[472,23,536,22],[472,24,536,23,"enemy"],[472,29,536,28],[472,30,536,29,"zoneXP"],[472,36,536,35],[472,40,536,39],[472,41,536,40],[472,45,536,44,"xpMultiplier"],[472,57,536,56],[472,60,536,60],[472,61,536,61],[472,62,536,62],[472,63,536,63],[473,12,537,10,"totalGold"],[473,21,537,19],[473,25,537,24],[473,27,537,26],[473,30,537,29,"goldMultiplier"],[473,44,537,43],[473,47,537,47],[473,50,537,50],[473,51,537,51],[473,52,537,52],[475,12,539,10],[475,16,539,14,"enemy"],[475,21,539,19],[475,22,539,20,"zoneTypeId"],[475,32,539,30],[475,34,539,32],[476,14,540,12,"zoneKills"],[476,23,540,21],[476,24,540,22,"push"],[476,28,540,26],[476,29,540,27],[477,16,541,14,"id"],[477,18,541,16],[477,20,541,18,"enemy"],[477,25,541,23],[477,26,541,24,"id"],[477,28,541,26],[478,16,542,14,"typeId"],[478,22,542,20],[478,24,542,22,"enemy"],[478,29,542,27],[478,30,542,28,"zoneTypeId"],[478,40,542,38],[479,16,543,14,"name"],[479,20,543,18],[479,22,543,20,"enemy"],[479,27,543,25],[479,28,543,26,"name"],[479,32,543,30],[480,16,544,14,"icon"],[480,20,544,18],[480,22,544,20],[480,26,544,24],[481,16,545,14,"hp"],[481,18,545,16],[481,20,545,18],[481,21,545,19],[482,16,546,14,"maxHP"],[482,21,546,19],[482,23,546,21,"enemy"],[482,28,546,26],[482,29,546,27,"maxHealth"],[482,38,546,36],[483,16,547,14,"attack"],[483,22,547,20],[483,24,547,22,"enemy"],[483,29,547,27],[483,30,547,28,"stats"],[483,35,547,33],[483,36,547,34,"attack"],[483,42,547,40],[484,16,548,14,"xp"],[484,18,548,16],[484,20,548,18,"enemy"],[484,25,548,23],[484,26,548,24,"zoneXP"],[484,32,548,30],[484,36,548,34],[484,37,548,35],[485,16,549,14,"position"],[485,24,549,22],[485,26,549,24,"enemy"],[485,31,549,29],[485,32,549,30,"position"],[486,14,550,12],[486,15,550,13],[486,16,550,14],[487,12,551,10],[488,10,552,8],[488,11,552,9],[488,12,552,10],[490,10,554,8],[491,10,555,8,"game"],[491,14,555,12],[491,15,555,13,"updateNinja"],[491,26,555,24],[491,27,555,25,"prev"],[491,31,555,29],[491,36,555,34],[492,12,556,10,"experience"],[492,22,556,20],[492,24,556,22,"prev"],[492,28,556,26],[492,29,556,27,"experience"],[492,39,556,37],[492,42,556,40,"totalXP"],[492,49,556,47],[493,12,557,10,"gold"],[493,16,557,14],[493,18,557,16,"prev"],[493,22,557,20],[493,23,557,21,"gold"],[493,27,557,25],[493,30,557,28,"totalGold"],[494,10,558,8],[494,11,558,9],[494,12,558,10],[494,13,558,11],[496,10,560,8],[497,10,561,8,"zoneKills"],[497,19,561,17],[497,20,561,18,"forEach"],[497,27,561,25],[497,28,561,26,"zoneEnemy"],[497,37,561,35],[497,41,561,39,"recordEnemyKill"],[497,56,561,54],[497,57,561,55,"zoneEnemy"],[497,66,561,64],[497,67,561,65],[497,68,561,66],[499,10,563,8],[500,10,564,8,"setCombatState"],[500,24,564,22],[500,25,564,23,"prev"],[500,29,564,27],[500,34,564,32],[501,12,565,10],[501,15,565,13,"prev"],[501,19,565,17],[502,12,566,10,"enemies"],[502,19,566,17],[502,21,566,19,"prev"],[502,25,566,23],[502,26,566,24,"enemies"],[502,33,566,31],[502,34,566,32,"map"],[502,37,566,35],[502,38,566,36,"enemy"],[502,43,566,41],[502,47,566,45],[503,14,567,12],[503,20,567,18,"wasProcessed"],[503,32,567,30],[503,35,567,33,"unprocessedEnemies"],[503,53,567,51],[503,54,567,52,"find"],[503,58,567,56],[503,59,567,57,"processed"],[503,68,567,66],[503,72,567,70,"processed"],[503,81,567,79],[503,82,567,80,"id"],[503,84,567,82],[503,89,567,87,"enemy"],[503,94,567,92],[503,95,567,93,"id"],[503,97,567,95],[503,98,567,96],[504,14,568,12],[504,21,568,19,"wasProcessed"],[504,33,568,31],[504,36,568,34],[505,16,568,36],[505,19,568,39,"enemy"],[505,24,568,44],[506,16,568,46,"xpAwarded"],[506,25,568,55],[506,27,568,57],[507,14,568,62],[507,15,568,63],[507,18,568,66,"enemy"],[507,23,568,71],[508,12,569,10],[508,13,569,11],[509,10,570,8],[509,11,570,9],[509,12,570,10],[509,13,570,11],[510,8,571,6],[511,6,572,4],[512,4,573,2],[512,5,573,3],[512,7,573,5],[512,8,573,6,"game"],[512,12,573,10],[512,13,573,11,"updateNinja"],[512,24,573,22],[512,26,573,24,"game"],[512,30,573,28],[512,31,573,29,"gameState"],[512,40,573,38],[512,41,573,39,"subscriptionBenefits"],[512,61,573,59],[512,63,573,61,"recordEnemyKill"],[512,78,573,76],[512,80,573,78,"spawnTestEnemy"],[512,94,573,92],[512,96,573,94,"spawnZoneEnemy"],[512,110,573,108],[512,111,573,109],[512,112,573,110],[512,113,573,111],[512,114,573,112],[514,4,575,2],[515,4,576,2],[515,10,576,8,"findClosestEnemyInternal"],[515,34,576,32],[515,37,576,36,"enemies"],[515,44,576,58],[515,48,576,83],[516,6,577,4],[516,10,577,8,"enemies"],[516,17,577,15],[516,18,577,16,"length"],[516,24,577,22],[516,29,577,27],[516,30,577,28],[516,32,577,30],[516,39,577,37],[516,43,577,41],[518,6,579,4],[519,6,580,4],[519,12,580,10,"SCREEN_WIDTH"],[519,24,580,22],[519,27,580,25],[519,30,580,28],[520,6,581,4],[520,12,581,10,"GAME_AREA_HEIGHT"],[520,28,581,26],[520,31,581,29],[520,34,581,32],[520,37,581,35],[520,40,581,38],[520,41,581,39],[520,42,581,40],[521,6,582,4],[521,12,582,10,"ninjaX"],[521,18,582,16],[521,21,582,19,"SCREEN_WIDTH"],[521,33,582,31],[521,36,582,34],[521,37,582,35],[522,6,583,4],[522,12,583,10,"ninjaY"],[522,18,583,16],[522,21,583,19,"GAME_AREA_HEIGHT"],[522,37,583,35],[522,40,583,38],[522,41,583,39],[523,6,585,4],[523,10,585,8,"closestEnemy"],[523,22,585,20],[523,25,585,23,"enemies"],[523,32,585,30],[523,33,585,31],[523,34,585,32],[523,35,585,33],[524,6,586,4],[524,10,586,8,"closestDistance"],[524,25,586,23],[524,28,586,26,"Infinity"],[524,36,586,34],[525,6,588,4,"enemies"],[525,13,588,11],[525,14,588,12,"forEach"],[525,21,588,19],[525,22,588,20,"enemy"],[525,27,588,25],[525,31,588,29],[526,8,589,6],[526,14,589,12,"distance"],[526,22,589,20],[526,25,589,23,"Math"],[526,29,589,27],[526,30,589,28,"sqrt"],[526,34,589,32],[526,35,590,8,"Math"],[526,39,590,12],[526,40,590,13,"pow"],[526,43,590,16],[526,44,590,17,"enemy"],[526,49,590,22],[526,50,590,23,"position"],[526,58,590,31],[526,59,590,32,"x"],[526,60,590,33],[526,63,590,36,"ninjaX"],[526,69,590,42],[526,71,590,44],[526,72,590,45],[526,73,590,46],[526,76,591,8,"Math"],[526,80,591,12],[526,81,591,13,"pow"],[526,84,591,16],[526,85,591,17,"enemy"],[526,90,591,22],[526,91,591,23,"position"],[526,99,591,31],[526,100,591,32,"y"],[526,101,591,33],[526,104,591,36,"ninjaY"],[526,110,591,42],[526,112,591,44],[526,113,591,45],[526,114,592,6],[526,115,592,7],[527,8,594,6],[527,12,594,10,"distance"],[527,20,594,18],[527,23,594,21,"closestDistance"],[527,38,594,36],[527,40,594,38],[528,10,595,8,"closestDistance"],[528,25,595,23],[528,28,595,26,"distance"],[528,36,595,34],[529,10,596,8,"closestEnemy"],[529,22,596,20],[529,25,596,23,"enemy"],[529,30,596,28],[530,8,597,6],[531,6,598,4],[531,7,598,5],[531,8,598,6],[532,6,600,4,"console"],[532,13,600,11],[532,14,600,12,"log"],[532,17,600,15],[532,18,600,16],[532,60,600,58,"closestDistance"],[532,75,600,73],[532,76,600,74,"toFixed"],[532,83,600,81],[532,84,600,82],[532,85,600,83],[532,86,600,84],[532,88,600,86],[532,89,600,87],[533,6,601,4],[533,13,601,11,"closestEnemy"],[533,25,601,23],[534,4,602,2],[534,5,602,3],[536,4,604,2],[537,4,605,2],[537,10,605,8,"findClosestEnemy"],[537,26,605,24],[537,29,605,27,"findClosestEnemy"],[537,30,605,27],[537,35,605,53],[538,6,606,4],[538,13,606,11,"findClosestEnemyInternal"],[538,37,606,35],[538,38,606,36,"combatState"],[538,49,606,47],[538,50,606,48,"enemies"],[538,57,606,55],[538,58,606,56],[539,4,607,2],[539,5,607,3],[541,4,609,2],[542,4,610,2],[543,4,611,2],[543,10,611,8],[543,11,611,9,"currentNinjaPosition"],[543,31,611,29],[543,33,611,31,"setCurrentNinjaPosition"],[543,56,611,54],[543,57,611,55],[543,60,611,58],[543,64,611,58,"useState"],[543,70,611,66],[543,71,611,66,"useState"],[543,79,611,66],[543,81,611,91],[544,6,611,93,"x"],[544,7,611,94],[544,9,611,96],[544,12,611,99],[545,6,611,101,"y"],[545,7,611,102],[545,9,611,104],[546,4,611,108],[546,5,611,109],[546,6,611,110],[547,4,612,2],[547,10,612,8],[547,11,612,9,"isManualControlActive"],[547,32,612,30],[547,34,612,32,"setIsManualControlActive"],[547,58,612,56],[547,59,612,57],[547,62,612,60],[547,66,612,60,"useState"],[547,72,612,68],[547,73,612,68,"useState"],[547,81,612,68],[547,83,612,69],[547,88,612,74],[547,89,612,75],[549,4,614,2],[550,4,615,2],[550,10,615,8,"updateNinjaPosition"],[550,29,615,27],[550,32,615,30],[550,36,615,30,"useCallback"],[550,42,615,41],[550,43,615,41,"useCallback"],[550,54,615,41],[550,56,615,43,"newPosition"],[550,67,615,78],[550,71,615,83],[551,6,616,4,"setCurrentNinjaPosition"],[551,29,616,27],[551,30,616,28,"newPosition"],[551,41,616,39],[551,42,616,40],[552,4,617,2],[552,5,617,3],[552,7,617,5],[552,9,617,7],[552,10,617,8],[554,4,619,2],[555,4,620,2],[555,10,620,8,"setManualControlActive"],[555,32,620,30],[555,35,620,33],[555,39,620,33,"useCallback"],[555,45,620,44],[555,46,620,44,"useCallback"],[555,57,620,44],[555,59,620,46,"active"],[555,65,620,61],[555,69,620,66],[556,6,621,4,"setIsManualControlActive"],[556,30,621,28],[556,31,621,29,"active"],[556,37,621,35],[556,38,621,36],[557,6,622,4,"console"],[557,13,622,11],[557,14,622,12,"log"],[557,17,622,15],[557,18,622,16],[557,39,622,37,"active"],[557,45,622,43],[557,48,622,46],[557,59,622,57],[557,62,622,60],[557,75,622,73],[557,88,622,86,"active"],[557,94,622,92],[557,97,622,95],[557,105,622,103],[557,108,622,106],[557,117,622,115],[557,119,622,117],[557,120,622,118],[558,4,623,2],[558,5,623,3],[558,7,623,5],[558,9,623,7],[558,10,623,8],[560,4,625,2],[561,4,626,2],[562,4,627,2],[564,4,629,2],[565,4,630,2],[565,10,630,8,"castAbility"],[565,21,630,19],[565,24,630,22,"castAbility"],[565,25,630,23,"state"],[565,30,630,41],[565,32,630,43,"slotIndex"],[565,41,630,60],[565,46,630,65],[566,6,631,4],[566,12,631,10,"deck"],[566,16,631,14],[566,19,631,17,"state"],[566,24,631,22],[566,25,631,23,"abilityManager"],[566,39,631,37],[566,40,631,38,"getDeck"],[566,47,631,45],[566,48,631,46],[566,49,631,47],[567,6,632,4],[567,12,632,10,"ability"],[567,19,632,17],[567,22,632,20,"deck"],[567,26,632,24],[567,27,632,25,"slots"],[567,32,632,30],[567,33,632,31,"slotIndex"],[567,42,632,40],[567,43,632,41],[568,6,633,4],[568,10,633,8],[568,11,633,9,"ability"],[568,18,633,16],[568,20,633,18],[569,6,635,4,"console"],[569,13,635,11],[569,14,635,12,"log"],[569,17,635,15],[569,18,635,16],[569,43,635,41,"ability"],[569,50,635,48],[569,51,635,49,"id"],[569,53,635,51],[569,67,635,65,"slotIndex"],[569,76,635,74],[569,78,635,76],[569,79,635,77],[571,6,637,4],[572,6,638,4],[572,10,638,8,"damage"],[572,16,638,14],[572,19,638,17,"ability"],[572,26,638,24],[572,27,638,25,"stats"],[572,32,638,30],[572,33,638,31,"baseDamage"],[572,43,638,41],[574,6,640,4],[575,6,641,4,"deck"],[575,10,641,8],[575,11,641,9,"activeSynergies"],[575,26,641,24],[575,27,641,25,"forEach"],[575,34,641,32],[575,35,641,33,"synergy"],[575,42,641,40],[575,46,641,44],[576,8,642,6],[576,12,642,10,"synergy"],[576,19,642,17],[576,20,642,18,"bonus"],[576,25,642,23],[576,26,642,24,"damageBonus"],[576,37,642,35],[576,41,643,10,"synergy"],[576,48,643,17],[576,49,643,18,"requiredTags"],[576,61,643,30],[576,62,643,31,"some"],[576,66,643,35],[576,67,643,36,"tag"],[576,70,643,39],[576,74,643,43,"ability"],[576,81,643,50],[576,82,643,51,"tags"],[576,86,643,55],[576,87,643,56,"includes"],[576,95,643,64],[576,96,643,65,"tag"],[576,99,643,68],[576,100,643,69],[576,101,643,70],[576,103,643,72],[577,10,644,8,"damage"],[577,16,644,14],[577,20,644,19],[577,21,644,20],[577,24,644,23,"synergy"],[577,31,644,30],[577,32,644,31,"bonus"],[577,37,644,36],[577,38,644,37,"damageBonus"],[577,49,644,48],[577,52,644,51],[577,55,644,55],[578,8,645,6],[579,6,646,4],[579,7,646,5],[579,8,646,6],[581,6,648,4],[582,6,649,4],[582,12,649,10,"isAOE"],[582,17,649,15],[582,20,649,18,"ability"],[582,27,649,25],[582,28,649,26,"effects"],[582,35,649,33],[582,36,649,34,"includes"],[582,44,649,42],[582,45,649,43],[582,50,649,48],[582,51,649,49],[582,55,649,53,"ability"],[582,62,649,60],[582,63,649,61,"stats"],[582,68,649,66],[582,69,649,67,"aoeRadius"],[582,78,649,76],[583,6,650,4,"console"],[583,13,650,11],[583,14,650,12,"log"],[583,17,650,15],[583,18,650,16],[583,39,650,37,"ability"],[583,46,650,44],[583,47,650,45,"name"],[583,51,650,49],[583,66,650,64,"JSON"],[583,70,650,68],[583,71,650,69,"stringify"],[583,80,650,78],[583,81,650,79,"ability"],[583,88,650,86],[583,89,650,87,"effects"],[583,96,650,94],[583,97,650,95],[583,113,650,111,"ability"],[583,120,650,118],[583,121,650,119,"stats"],[583,126,650,124],[583,127,650,125,"aoeRadius"],[583,136,650,134],[583,148,650,146,"isAOE"],[583,153,650,151],[583,155,650,153],[583,156,650,154],[584,6,652,4],[584,10,652,8,"isAOE"],[584,15,652,13],[584,17,652,15],[585,8,653,6,"console"],[585,15,653,13],[585,16,653,14,"log"],[585,19,653,17],[585,20,653,18],[585,39,653,37,"ability"],[585,46,653,44],[585,47,653,45,"name"],[585,51,653,49],[585,67,653,65,"ability"],[585,74,653,72],[585,75,653,73,"stats"],[585,80,653,78],[585,81,653,79,"aoeRadius"],[585,90,653,88],[585,92,653,90],[585,93,653,91],[587,8,655,6],[588,8,656,6],[589,8,657,6],[589,14,657,12,"ninjaX"],[589,20,657,18],[589,23,657,21,"currentNinjaPosition"],[589,43,657,41],[589,44,657,42,"x"],[589,45,657,43],[589,48,657,46],[589,50,657,48],[589,51,657,49],[589,52,657,50],[590,8,658,6],[590,14,658,12,"ninjaY"],[590,20,658,18],[590,23,658,21,"currentNinjaPosition"],[590,43,658,41],[590,44,658,42,"y"],[590,45,658,43],[590,48,658,46],[590,50,658,48],[591,8,659,6],[591,14,659,12,"aoeRadius"],[591,23,659,21],[591,26,659,24,"ability"],[591,33,659,31],[591,34,659,32,"stats"],[591,39,659,37],[591,40,659,38,"aoeRadius"],[591,49,659,47],[592,8,661,6],[592,14,661,12,"enemiesInRange"],[592,28,661,26],[592,31,661,29,"state"],[592,36,661,34],[592,37,661,35,"enemies"],[592,44,661,42],[592,45,661,43,"filter"],[592,51,661,49],[592,52,661,50,"enemy"],[592,57,661,55],[592,61,661,59],[593,10,662,8],[593,16,662,14,"enemyX"],[593,22,662,20],[593,25,662,23,"enemy"],[593,30,662,28],[593,31,662,29,"position"],[593,39,662,37],[593,40,662,38,"x"],[593,41,662,39],[593,44,662,42],[593,48,662,46],[593,49,662,47],[593,50,662,48],[594,10,663,8],[594,16,663,14,"enemyY"],[594,22,663,20],[594,25,663,23,"enemy"],[594,30,663,28],[594,31,663,29,"position"],[594,39,663,37],[594,40,663,38,"y"],[594,41,663,39],[594,44,663,42],[594,48,663,46],[595,10,664,8],[595,16,664,14,"distance"],[595,24,664,22],[595,27,664,25,"Math"],[595,31,664,29],[595,32,664,30,"sqrt"],[595,36,664,34],[595,37,664,35,"Math"],[595,41,664,39],[595,42,664,40,"pow"],[595,45,664,43],[595,46,664,44,"enemyX"],[595,52,664,50],[595,55,664,53,"ninjaX"],[595,61,664,59],[595,63,664,61],[595,64,664,62],[595,65,664,63],[595,68,664,66,"Math"],[595,72,664,70],[595,73,664,71,"pow"],[595,76,664,74],[595,77,664,75,"enemyY"],[595,83,664,81],[595,86,664,84,"ninjaY"],[595,92,664,90],[595,94,664,92],[595,95,664,93],[595,96,664,94],[595,97,664,95],[596,10,665,8],[596,17,665,15,"distance"],[596,25,665,23],[596,29,665,27,"aoeRadius"],[596,38,665,36],[597,8,666,6],[597,9,666,7],[597,10,666,8],[598,8,668,6,"console"],[598,15,668,13],[598,16,668,14,"log"],[598,19,668,17],[598,20,668,18],[598,45,668,43,"enemiesInRange"],[598,59,668,57],[598,60,668,58,"length"],[598,66,668,64],[598,88,668,86,"aoeRadius"],[598,97,668,95],[598,107,668,105],[598,108,668,106],[600,8,670,6],[601,8,671,6,"enemiesInRange"],[601,22,671,20],[601,23,671,21,"forEach"],[601,30,671,28],[601,31,671,29,"enemy"],[601,36,671,34],[601,40,671,38],[602,10,672,8],[602,16,672,14,"damageResult"],[602,28,672,26],[602,31,672,29,"DamageCalculator"],[602,50,672,45],[602,51,672,45,"DamageCalculator"],[602,67,672,45],[602,68,672,46,"calculateDamage"],[602,83,672,61],[602,84,672,62,"damage"],[602,90,672,68],[602,92,672,70,"state"],[602,97,672,75],[602,98,672,76,"playerStats"],[602,109,672,87],[602,111,672,89,"enemy"],[602,116,672,94],[602,117,672,95,"stats"],[602,122,672,100],[602,123,672,101],[603,10,673,8,"createProjectile"],[603,26,673,24],[603,27,673,25,"enemy"],[603,32,673,30],[603,34,673,32,"damageResult"],[603,46,673,44],[603,47,673,45,"damage"],[603,53,673,51],[603,55,673,53,"currentNinjaPosition"],[603,75,673,73],[603,77,673,75],[604,12,674,10,"id"],[604,14,674,12],[604,16,674,14,"ability"],[604,23,674,21],[604,24,674,22,"id"],[604,26,674,24],[605,12,675,10,"name"],[605,16,675,14],[605,18,675,16,"ability"],[605,25,675,23],[605,26,675,24,"name"],[605,30,675,28],[606,12,676,10,"icon"],[606,16,676,14],[606,18,676,16,"ability"],[606,25,676,23],[606,26,676,24,"icon"],[607,10,677,8],[607,11,677,9],[607,12,677,10],[608,10,678,8,"console"],[608,17,678,15],[608,18,678,16,"log"],[608,21,678,19],[608,22,678,20],[608,37,678,35,"enemy"],[608,42,678,40],[608,43,678,41,"name"],[608,47,678,45],[608,55,678,53,"damageResult"],[608,67,678,65],[608,68,678,66,"damage"],[608,74,678,72],[608,83,678,81],[608,84,678,82],[610,10,680,8],[611,10,681,8],[611,14,681,12,"damageResult"],[611,26,681,24],[611,27,681,25,"damage"],[611,33,681,31],[611,37,681,35,"enemy"],[611,42,681,40],[611,43,681,41,"health"],[611,49,681,47],[611,51,681,49],[612,12,682,10,"console"],[612,19,682,17],[612,20,682,18,"log"],[612,23,682,21],[612,24,682,22],[612,67,682,65,"enemy"],[612,72,682,70],[612,73,682,71,"name"],[612,77,682,75],[612,90,682,88,"damageResult"],[612,102,682,100],[612,103,682,101,"damage"],[612,109,682,107],[612,124,682,122,"enemy"],[612,129,682,127],[612,130,682,128,"health"],[612,136,682,134],[612,139,682,137],[612,140,682,138],[613,10,683,8],[614,8,684,6],[614,9,684,7],[614,10,684,8],[615,8,686,6,"console"],[615,15,686,13],[615,16,686,14,"log"],[615,19,686,17],[615,20,686,18],[615,26,686,24,"ability"],[615,33,686,31],[615,34,686,32,"name"],[615,38,686,36],[615,56,686,54,"enemiesInRange"],[615,70,686,68],[615,71,686,69,"length"],[615,77,686,75],[615,93,686,91,"damage"],[615,99,686,97],[615,118,686,116],[615,119,686,117],[616,6,688,4],[616,7,688,5],[616,13,688,11],[617,8,689,6],[618,8,690,6],[618,14,690,12,"target"],[618,20,690,18],[618,23,690,21,"findClosestEnemyInternal"],[618,47,690,45],[618,48,690,46,"state"],[618,53,690,51],[618,54,690,52,"enemies"],[618,61,690,59],[618,62,690,60],[619,8,691,6],[619,12,691,10],[619,13,691,11,"target"],[619,19,691,17],[619,21,691,19],[620,8,693,6],[620,14,693,12,"damageResult"],[620,26,693,24],[620,29,693,27,"DamageCalculator"],[620,48,693,43],[620,49,693,43,"DamageCalculator"],[620,65,693,43],[620,66,693,44,"calculateDamage"],[620,81,693,59],[620,82,693,60,"damage"],[620,88,693,66],[620,90,693,68,"state"],[620,95,693,73],[620,96,693,74,"playerStats"],[620,107,693,85],[620,109,693,87,"target"],[620,115,693,93],[620,116,693,94,"stats"],[620,121,693,99],[620,122,693,100],[622,8,695,6],[623,8,696,6,"console"],[623,15,696,13],[623,16,696,14,"log"],[623,19,696,17],[623,20,696,18],[623,71,696,69,"target"],[623,77,696,75],[623,78,696,76,"name"],[623,82,696,80],[623,91,696,89,"damageResult"],[623,103,696,101],[623,104,696,102,"damage"],[623,110,696,108],[623,119,696,117],[623,120,696,118],[624,8,697,6,"createProjectile"],[624,24,697,22],[624,25,697,23,"target"],[624,31,697,29],[624,33,697,31,"damageResult"],[624,45,697,43],[624,46,697,44,"damage"],[624,52,697,50],[624,54,697,52,"currentNinjaPosition"],[624,74,697,72],[624,76,697,74],[625,10,698,8,"id"],[625,12,698,10],[625,14,698,12,"ability"],[625,21,698,19],[625,22,698,20,"id"],[625,24,698,22],[626,10,699,8,"name"],[626,14,699,12],[626,16,699,14,"ability"],[626,23,699,21],[626,24,699,22,"name"],[626,28,699,26],[627,10,700,8,"icon"],[627,14,700,12],[627,16,700,14,"ability"],[627,23,700,21],[627,24,700,22,"icon"],[628,8,701,6],[628,9,701,7],[628,10,701,8],[629,8,703,6,"console"],[629,15,703,13],[629,16,703,14,"log"],[629,19,703,17],[629,20,703,18],[629,26,703,24,"ability"],[629,33,703,31],[629,34,703,32,"name"],[629,38,703,36],[629,66,703,64,"damageResult"],[629,78,703,76],[629,79,703,77,"damage"],[629,85,703,83],[629,95,703,93,"damageResult"],[629,107,703,105],[629,108,703,106,"isCritical"],[629,118,703,116],[629,121,703,119],[629,131,703,129],[629,134,703,132],[629,136,703,134],[629,138,703,136],[629,139,703,137],[631,8,705,6],[632,8,706,6],[632,12,706,10,"damageResult"],[632,24,706,22],[632,25,706,23,"damage"],[632,31,706,29],[632,35,706,33,"target"],[632,41,706,39],[632,42,706,40,"health"],[632,48,706,46],[632,50,706,48],[633,10,707,8,"console"],[633,17,707,15],[633,18,707,16,"log"],[633,21,707,19],[633,22,707,20],[633,75,707,73,"target"],[633,81,707,79],[633,82,707,80,"name"],[633,86,707,84],[633,99,707,97,"damageResult"],[633,111,707,109],[633,112,707,110,"damage"],[633,118,707,116],[633,133,707,131,"target"],[633,139,707,137],[633,140,707,138,"health"],[633,146,707,144],[633,149,707,147],[633,150,707,148],[634,8,708,6],[635,6,709,4],[637,6,711,4],[638,6,712,4],[638,10,712,8,"ability"],[638,17,712,15],[638,18,712,16,"effects"],[638,25,712,23],[638,26,712,24,"includes"],[638,34,712,32],[638,35,712,33],[638,40,712,38],[638,41,712,39],[638,45,712,43,"ability"],[638,52,712,50],[638,53,712,51,"stats"],[638,58,712,56],[638,59,712,57,"duration"],[638,67,712,65],[638,69,712,67],[639,8,713,6],[639,14,713,12,"targets"],[639,21,713,19],[639,24,713,22,"isAOE"],[639,29,713,27],[639,32,714,8,"state"],[639,37,714,13],[639,38,714,14,"enemies"],[639,45,714,21],[639,46,714,22,"filter"],[639,52,714,28],[639,53,714,29,"enemy"],[639,58,714,34],[639,62,714,38],[640,10,715,10],[640,16,715,16,"ninjaX"],[640,22,715,22],[640,25,715,25,"currentNinjaPosition"],[640,45,715,45],[640,46,715,46,"x"],[640,47,715,47],[640,50,715,50],[640,52,715,52],[641,10,716,10],[641,16,716,16,"ninjaY"],[641,22,716,22],[641,25,716,25,"currentNinjaPosition"],[641,45,716,45],[641,46,716,46,"y"],[641,47,716,47],[641,50,716,50],[641,52,716,52],[642,10,717,10],[642,16,717,16,"enemyX"],[642,22,717,22],[642,25,717,25,"enemy"],[642,30,717,30],[642,31,717,31,"position"],[642,39,717,39],[642,40,717,40,"x"],[642,41,717,41],[642,44,717,44],[642,48,717,48],[643,10,718,10],[643,16,718,16,"enemyY"],[643,22,718,22],[643,25,718,25,"enemy"],[643,30,718,30],[643,31,718,31,"position"],[643,39,718,39],[643,40,718,40,"y"],[643,41,718,41],[643,44,718,44],[643,48,718,48],[644,10,719,10],[644,16,719,16,"distance"],[644,24,719,24],[644,27,719,27,"Math"],[644,31,719,31],[644,32,719,32,"sqrt"],[644,36,719,36],[644,37,719,37,"Math"],[644,41,719,41],[644,42,719,42,"pow"],[644,45,719,45],[644,46,719,46,"enemyX"],[644,52,719,52],[644,55,719,55,"ninjaX"],[644,61,719,61],[644,63,719,63],[644,64,719,64],[644,65,719,65],[644,68,719,68,"Math"],[644,72,719,72],[644,73,719,73,"pow"],[644,76,719,76],[644,77,719,77,"enemyY"],[644,83,719,83],[644,86,719,86,"ninjaY"],[644,92,719,92],[644,94,719,94],[644,95,719,95],[644,96,719,96],[644,97,719,97],[645,10,720,10],[645,17,720,17,"distance"],[645,25,720,25],[645,29,720,29,"ability"],[645,36,720,36],[645,37,720,37,"stats"],[645,42,720,42],[645,43,720,43,"aoeRadius"],[645,52,720,52],[646,8,721,8],[646,9,721,9],[646,10,721,10],[646,13,722,8],[646,14,722,9,"findClosestEnemyInternal"],[646,38,722,33],[646,39,722,34,"state"],[646,44,722,39],[646,45,722,40,"enemies"],[646,52,722,47],[646,53,722,48],[646,54,722,49],[646,55,722,50,"filter"],[646,61,722,56],[646,62,722,57,"Boolean"],[646,69,722,64],[646,70,722,65],[647,8,724,6,"targets"],[647,15,724,13],[647,16,724,14,"forEach"],[647,23,724,21],[647,24,724,22,"target"],[647,30,724,28],[647,34,724,32],[648,10,725,8,"state"],[648,15,725,13],[648,16,725,14,"statusEffects"],[648,29,725,27],[648,30,725,28,"addEffect"],[648,39,725,37],[648,40,725,38,"target"],[648,46,725,44],[648,47,725,45,"id"],[648,49,725,47],[648,51,725,49],[649,12,726,10,"id"],[649,14,726,12],[649,16,726,14],[649,19,726,17,"ability"],[649,26,726,24],[649,27,726,25,"id"],[649,29,726,27],[649,35,726,33],[650,12,727,10,"type"],[650,16,727,14],[650,18,727,16],[650,23,727,21],[651,12,728,10,"remainingTicks"],[651,26,728,24],[651,28,728,26,"Math"],[651,32,728,30],[651,33,728,31,"floor"],[651,38,728,36],[651,39,728,37,"ability"],[651,46,728,44],[651,47,728,45,"stats"],[651,52,728,50],[651,53,728,51,"duration"],[651,61,728,59],[651,64,728,62],[651,66,728,64],[651,67,728,65],[652,12,729,10,"tickInterval"],[652,24,729,22],[652,26,729,24],[652,28,729,26],[653,12,730,10,"lastTick"],[653,20,730,18],[653,22,730,20,"state"],[653,27,730,25],[653,28,730,26,"currentTick"],[653,39,730,37],[654,12,731,10,"value"],[654,17,731,15],[654,19,731,17,"Math"],[654,23,731,21],[654,24,731,22,"floor"],[654,29,731,27],[654,30,731,28,"damage"],[654,36,731,34],[654,39,731,37],[654,42,731,40],[654,43,731,41],[655,12,732,10,"stackable"],[655,21,732,19],[655,23,732,21],[656,10,733,8],[656,11,733,9],[656,12,733,10],[657,8,734,6],[657,9,734,7],[657,10,734,8],[658,6,735,4],[660,6,737,4],[661,6,738,4],[661,10,738,8,"ability"],[661,17,738,15],[661,18,738,16,"effects"],[661,25,738,23],[661,26,738,24,"includes"],[661,34,738,32],[661,35,738,33],[661,41,738,39],[661,42,738,40],[661,46,738,44,"ability"],[661,53,738,51],[661,54,738,52,"id"],[661,56,738,54],[661,61,738,59],[661,75,738,73],[661,77,738,75],[662,8,739,6,"console"],[662,15,739,13],[662,16,739,14,"log"],[662,19,739,17],[662,20,739,18],[662,66,739,64,"ability"],[662,73,739,71],[662,74,739,72,"stats"],[662,79,739,77],[662,80,739,78,"duration"],[662,88,739,86],[662,98,739,96],[662,99,739,97],[664,8,741,6],[665,8,742,6],[665,14,742,12,"cloneX"],[665,20,742,18],[665,23,742,21,"currentNinjaPosition"],[665,43,742,41],[665,44,742,42,"x"],[665,45,742,43],[665,48,742,46],[665,50,742,48],[665,51,742,49],[665,52,742,50],[666,8,743,6],[666,14,743,12,"cloneY"],[666,20,743,18],[666,23,743,21,"currentNinjaPosition"],[666,43,743,41],[666,44,743,42,"y"],[666,45,743,43],[666,48,743,46],[666,50,743,48],[666,51,743,49],[666,52,743,50],[668,8,745,6,"state"],[668,13,745,11],[668,14,745,12,"shadowClone"],[668,25,745,23],[668,28,745,26],[669,10,746,8,"id"],[669,12,746,10],[669,14,746,12],[669,30,746,28,"Date"],[669,34,746,32],[669,35,746,33,"now"],[669,38,746,36],[669,39,746,37],[669,40,746,38],[669,42,746,40],[670,10,747,8,"remainingTicks"],[670,24,747,22],[670,26,747,24,"Math"],[670,30,747,28],[670,31,747,29,"floor"],[670,36,747,34],[670,37,747,35,"ability"],[670,44,747,42],[670,45,747,43,"stats"],[670,50,747,48],[670,51,747,49,"duration"],[670,59,747,57],[670,62,747,60],[670,64,747,62],[670,65,747,63],[671,10,747,65],[672,10,748,8,"position"],[672,18,748,16],[672,20,748,18],[673,12,748,20,"x"],[673,13,748,21],[673,15,748,23,"cloneX"],[673,21,748,29],[674,12,748,31,"y"],[674,13,748,32],[674,15,748,34,"cloneY"],[675,10,748,41],[675,11,748,42],[676,10,749,8,"damageMultiplier"],[676,26,749,24],[676,28,749,26],[676,31,749,29],[676,32,749,31],[677,8,750,6],[677,9,750,7],[678,8,752,6,"console"],[678,15,752,13],[678,16,752,14,"log"],[678,19,752,17],[678,20,752,18],[678,63,752,61,"ability"],[678,70,752,68],[678,71,752,69,"stats"],[678,76,752,74],[678,77,752,75,"duration"],[678,85,752,83],[678,108,752,106],[678,109,752,107],[679,6,753,4],[680,4,754,2],[680,5,754,3],[682,4,756,2],[683,4,757,2],[683,10,757,8,"createProjectile"],[683,26,757,24],[683,29,757,27,"createProjectile"],[683,30,757,28,"targetEnemy"],[683,41,757,52],[683,43,757,54,"damage"],[683,49,757,68],[683,51,757,70,"ninjaPos"],[683,59,757,103],[683,61,757,105,"abilityInfo"],[683,72,757,159],[683,74,757,161,"isAOE"],[683,79,757,176],[683,81,757,178,"aoeRadius"],[683,90,757,196],[683,95,757,201],[684,6,758,4],[684,10,758,8],[684,11,758,9,"targetEnemy"],[684,22,758,20],[684,24,758,22],[685,8,759,6,"console"],[685,15,759,13],[685,16,759,14,"log"],[685,19,759,17],[685,20,759,18],[685,65,759,63],[685,66,759,64],[686,8,760,6],[686,15,760,13],[686,19,760,17],[687,6,761,4],[689,6,763,4],[690,6,764,4,"console"],[690,13,764,11],[690,14,764,12,"log"],[690,17,764,15],[690,18,764,16],[690,52,764,50,"damage"],[690,58,764,56],[690,70,764,68,"targetEnemy"],[690,81,764,79],[690,82,764,80,"name"],[690,86,764,84],[690,91,764,89,"targetEnemy"],[690,102,764,100],[690,103,764,101,"health"],[690,109,764,107],[690,113,764,111,"targetEnemy"],[690,124,764,122],[690,125,764,123,"maxHealth"],[690,134,764,132],[690,140,764,138],[690,141,764,139],[691,6,766,4],[691,12,766,10,"SCREEN_WIDTH"],[691,24,766,22],[691,27,766,25],[691,30,766,28],[692,6,767,4],[692,12,767,10,"GAME_AREA_HEIGHT"],[692,28,767,26],[692,31,767,29],[692,34,767,32],[692,37,767,35],[692,40,767,38],[692,41,767,39],[692,42,767,40],[693,6,768,4],[693,12,768,10,"NINJA_SIZE"],[693,22,768,20],[693,25,768,23],[693,27,768,25],[695,6,770,4],[696,6,771,4],[696,12,771,10,"ninjaX"],[696,18,771,16],[696,21,771,19,"ninjaPos"],[696,29,771,27],[696,32,771,30,"ninjaPos"],[696,40,771,38],[696,41,771,39,"x"],[696,42,771,40],[696,45,771,43,"NINJA_SIZE"],[696,55,771,53],[696,58,771,56],[696,59,771,57],[696,62,771,60,"SCREEN_WIDTH"],[696,74,771,72],[696,77,771,75],[696,78,771,76],[697,6,772,4],[697,12,772,10,"ninjaY"],[697,18,772,16],[697,21,772,19,"ninjaPos"],[697,29,772,27],[697,32,772,30,"ninjaPos"],[697,40,772,38],[697,41,772,39,"y"],[697,42,772,40],[697,45,772,43,"NINJA_SIZE"],[697,55,772,53],[697,58,772,56],[697,59,772,57],[697,62,772,60,"GAME_AREA_HEIGHT"],[697,78,772,76],[697,81,772,79],[697,82,772,80],[698,6,773,4],[698,12,773,10,"ENEMY_SIZE"],[698,22,773,20],[698,25,773,23],[698,27,773,25],[699,6,775,4],[699,12,775,10,"projectileId"],[699,24,775,22],[699,27,775,25],[699,35,775,33,"Date"],[699,39,775,37],[699,40,775,38,"now"],[699,43,775,41],[699,44,775,42],[699,45,775,43],[699,49,775,47,"Math"],[699,53,775,51],[699,54,775,52,"random"],[699,60,775,58],[699,61,775,59],[699,62,775,60],[699,64,775,62],[700,6,777,4],[700,12,777,10,"projectile"],[700,22,777,38],[700,25,777,41],[701,8,778,6,"id"],[701,10,778,8],[701,12,778,10,"projectileId"],[701,24,778,22],[702,8,779,6,"x"],[702,9,779,7],[702,11,779,9,"ninjaX"],[702,17,779,15],[703,8,780,6,"y"],[703,9,780,7],[703,11,780,9,"ninjaY"],[703,17,780,15],[704,8,781,6,"targetX"],[704,15,781,13],[704,17,781,15,"targetEnemy"],[704,28,781,26],[704,29,781,27,"position"],[704,37,781,35],[704,38,781,36,"x"],[704,39,781,37],[704,42,781,40,"ENEMY_SIZE"],[704,52,781,50],[704,55,781,53],[704,56,781,54],[705,8,782,6,"targetY"],[705,15,782,13],[705,17,782,15,"targetEnemy"],[705,28,782,26],[705,29,782,27,"position"],[705,37,782,35],[705,38,782,36,"y"],[705,39,782,37],[705,42,782,40,"ENEMY_SIZE"],[705,52,782,50],[705,55,782,53],[705,56,782,54],[706,8,783,6,"targetEnemyId"],[706,21,783,19],[706,23,783,21,"targetEnemy"],[706,34,783,32],[706,35,783,33,"id"],[706,37,783,35],[707,8,784,6,"damage"],[707,14,784,12],[707,16,784,14,"damage"],[707,22,784,20],[708,8,785,6,"startTime"],[708,17,785,15],[708,19,785,17,"Date"],[708,23,785,21],[708,24,785,22,"now"],[708,27,785,25],[708,28,785,26],[708,29,785,27],[709,8,786,6,"duration"],[709,16,786,14],[709,18,786,16],[709,21,786,19],[710,8,786,21],[711,8,787,6],[712,8,788,6,"abilityId"],[712,17,788,15],[712,19,788,17,"abilityInfo"],[712,30,788,28],[712,32,788,30,"id"],[712,34,788,32],[712,38,788,36],[712,54,788,52],[713,8,789,6,"abilityName"],[713,19,789,17],[713,21,789,19,"abilityInfo"],[713,32,789,30],[713,34,789,32,"name"],[713,38,789,36],[713,42,789,40],[713,58,789,56],[714,8,790,6,"abilityIcon"],[714,19,790,17],[714,21,790,19,"abilityInfo"],[714,32,790,30],[714,34,790,32,"icon"],[714,38,790,36],[714,42,790,40],[714,46,790,44],[715,8,790,46],[716,8,791,6],[717,8,792,6,"isAOE"],[717,13,792,11],[717,15,792,13,"isAOE"],[717,20,792,18],[717,24,792,22],[717,29,792,27],[718,8,793,6,"aoeRadius"],[718,17,793,15],[718,19,793,17,"aoeRadius"],[718,28,793,26],[718,32,793,30],[719,6,794,4],[719,7,794,5],[720,6,796,4,"console"],[720,13,796,11],[720,14,796,12,"log"],[720,17,796,15],[720,18,796,16],[720,44,796,42,"abilityInfo"],[720,55,796,53],[720,57,796,55,"name"],[720,61,796,59],[720,65,796,63],[720,81,796,79],[720,101,796,99,"projectileId"],[720,113,796,111],[720,128,796,126,"targetEnemy"],[720,139,796,137],[720,140,796,138,"name"],[720,144,796,142],[720,152,796,150,"damage"],[720,158,796,156],[720,167,796,165],[720,168,796,166],[721,6,797,4,"console"],[721,13,797,11],[721,14,797,12,"log"],[721,17,797,15],[721,18,797,16],[721,48,797,46,"isAOE"],[721,53,797,51],[721,68,797,66,"aoeRadius"],[721,77,797,75],[721,89,797,87,"damage"],[721,95,797,93],[721,97,797,95],[721,98,797,96],[722,6,799,4,"console"],[722,13,799,11],[722,14,799,12,"log"],[722,17,799,15],[722,18,799,16],[722,53,799,51,"targetEnemy"],[722,64,799,62],[722,65,799,63,"id"],[722,67,799,65],[722,75,799,73,"damage"],[722,81,799,79],[722,90,799,88],[722,91,799,89],[723,6,800,4,"console"],[723,13,800,11],[723,14,800,12,"log"],[723,17,800,15],[723,18,800,16],[723,53,800,51,"ninjaX"],[723,59,800,57],[723,64,800,62,"ninjaY"],[723,70,800,68],[723,87,800,85,"projectile"],[723,97,800,95],[723,98,800,96,"targetX"],[723,105,800,103],[723,110,800,108,"projectile"],[723,120,800,118],[723,121,800,119,"targetY"],[723,128,800,126],[723,131,800,129],[723,132,800,130],[724,6,802,4,"setProjectiles"],[724,20,802,18],[724,21,802,19,"prev"],[724,25,802,23],[724,29,802,27],[724,30,802,28],[724,33,802,31,"prev"],[724,37,802,35],[724,39,802,37,"projectile"],[724,49,802,47],[724,50,802,48],[724,51,802,49],[726,6,804,4],[727,6,805,4],[729,6,807,4],[729,13,807,11,"projectile"],[729,23,807,21],[730,4,808,2],[730,5,808,3],[732,4,810,2],[733,4,811,2],[733,10,811,8,"spawnTestEnemy"],[733,24,811,22],[733,27,811,26,"state"],[733,32,811,44],[733,36,811,49],[734,6,812,4,"console"],[734,13,812,11],[734,14,812,12,"log"],[734,17,812,15],[734,18,812,16],[734,83,812,81],[734,84,812,82],[736,6,814,4],[737,6,815,4],[737,12,815,10,"zoneEnemy"],[737,21,815,19],[737,24,815,22,"spawnZoneEnemy"],[737,38,815,36],[737,39,815,37],[737,40,815,38],[738,6,816,4],[738,10,816,8],[738,11,816,9,"zoneEnemy"],[738,20,816,18],[738,22,816,20],[739,8,817,6,"console"],[739,15,817,13],[739,16,817,14,"log"],[739,19,817,17],[739,20,817,18],[739,76,817,74],[739,77,817,75],[740,8,818,6],[741,8,819,6,"spawnBasicTestEnemy"],[741,27,819,25],[741,28,819,26,"state"],[741,33,819,31],[741,34,819,32],[742,8,820,6],[743,6,821,4],[744,6,823,4,"console"],[744,13,823,11],[744,14,823,12,"log"],[744,17,823,15],[744,18,823,16],[744,44,823,42,"zoneEnemy"],[744,53,823,51],[744,54,823,52,"name"],[744,58,823,56],[744,63,823,61,"zoneEnemy"],[744,72,823,70],[744,73,823,71,"typeId"],[744,79,823,77],[744,94,823,92,"currentZone"],[744,105,823,103],[744,107,823,105,"id"],[744,109,823,107],[744,119,823,117,"currentZoneLevel"],[744,135,823,133],[744,137,823,135,"level"],[744,142,823,140],[744,144,823,142],[744,145,823,143],[746,6,825,4],[747,6,826,4],[747,12,826,10,"combatEnemy"],[747,23,826,34],[747,26,826,37],[748,8,827,6,"id"],[748,10,827,8],[748,12,827,10,"zoneEnemy"],[748,21,827,19],[748,22,827,20,"id"],[748,24,827,22],[749,8,828,6,"name"],[749,12,828,10],[749,14,828,12,"zoneEnemy"],[749,23,828,21],[749,24,828,22,"name"],[749,28,828,26],[750,8,829,6,"health"],[750,14,829,12],[750,16,829,14,"zoneEnemy"],[750,25,829,23],[750,26,829,24,"hp"],[750,28,829,26],[751,8,830,6,"maxHealth"],[751,17,830,15],[751,19,830,17,"zoneEnemy"],[751,28,830,26],[751,29,830,27,"maxHP"],[751,34,830,32],[752,8,831,6,"stats"],[752,13,831,11],[752,15,831,13],[753,10,832,8,"attack"],[753,16,832,14],[753,18,832,16,"zoneEnemy"],[753,27,832,25],[753,28,832,26,"attack"],[753,34,832,32],[754,10,833,8,"defense"],[754,17,833,15],[754,19,833,17],[754,21,833,19],[755,10,833,21],[756,10,834,8,"health"],[756,16,834,14],[756,18,834,16,"zoneEnemy"],[756,27,834,25],[756,28,834,26,"hp"],[756,30,834,28],[757,10,835,8,"maxHealth"],[757,19,835,17],[757,21,835,19,"zoneEnemy"],[757,30,835,28],[757,31,835,29,"maxHP"],[757,36,835,34],[758,10,836,8,"critChance"],[758,20,836,18],[758,22,836,20],[758,23,836,21],[759,10,837,8,"critDamage"],[759,20,837,18],[759,22,837,20],[759,25,837,23],[760,10,838,8,"cooldownReduction"],[760,27,838,25],[760,29,838,27],[761,8,839,6],[761,9,839,7],[762,8,840,6,"position"],[762,16,840,14],[762,18,840,16,"zoneEnemy"],[762,27,840,25],[762,28,840,26,"position"],[762,36,840,34],[763,8,841,6,"lastDamaged"],[763,19,841,17],[763,21,841,19],[763,22,841,20],[764,8,842,6],[765,8,843,6,"zoneTypeId"],[765,18,843,16],[765,20,843,18,"zoneEnemy"],[765,29,843,27],[765,30,843,28,"typeId"],[765,36,843,34],[766,8,844,6,"zoneXP"],[766,14,844,12],[766,16,844,14,"zoneEnemy"],[766,25,844,23],[766,26,844,24,"xp"],[767,6,845,4],[767,7,845,5],[768,6,847,4,"console"],[768,13,847,11],[768,14,847,12,"log"],[768,17,847,15],[768,18,847,16],[768,42,847,40,"combatEnemy"],[768,53,847,51],[768,54,847,52,"name"],[768,58,847,56],[768,67,847,65,"combatEnemy"],[768,78,847,76],[768,79,847,77,"health"],[768,85,847,83],[768,100,847,98,"currentZone"],[768,111,847,109],[768,113,847,111,"id"],[768,115,847,113],[768,125,847,123,"currentZoneLevel"],[768,141,847,139],[768,143,847,141,"level"],[768,148,847,146],[768,150,847,148],[768,151,847,149],[769,6,848,4,"state"],[769,11,848,9],[769,12,848,10,"enemies"],[769,19,848,17],[769,20,848,18,"push"],[769,24,848,22],[769,25,848,23,"combatEnemy"],[769,36,848,34],[769,37,848,35],[770,4,849,2],[770,5,849,3],[772,4,851,2],[773,4,852,2],[773,10,852,8,"spawnBasicTestEnemy"],[773,29,852,27],[773,32,852,31,"state"],[773,37,852,49],[773,41,852,54],[774,6,853,4],[774,12,853,10,"SCREEN_WIDTH"],[774,24,853,22],[774,27,853,25],[774,30,853,28],[775,6,854,4],[775,12,854,10,"GAME_AREA_HEIGHT"],[775,28,854,26],[775,31,854,29],[775,34,854,32],[775,37,854,35],[775,40,854,38],[776,6,855,4],[776,12,855,10,"ENEMY_SIZE"],[776,22,855,20],[776,25,855,23],[776,27,855,25],[777,6,857,4],[777,12,857,10,"x"],[777,13,857,11],[777,16,857,14,"Math"],[777,20,857,18],[777,21,857,19,"random"],[777,27,857,25],[777,28,857,26],[777,29,857,27],[777,33,857,31,"SCREEN_WIDTH"],[777,45,857,43],[777,48,857,46,"ENEMY_SIZE"],[777,58,857,56],[777,61,857,59],[777,62,857,60],[777,63,857,61],[777,66,857,64,"ENEMY_SIZE"],[777,76,857,74],[778,6,858,4],[778,12,858,10,"y"],[778,13,858,11],[778,16,858,14,"Math"],[778,20,858,18],[778,21,858,19,"random"],[778,27,858,25],[778,28,858,26],[778,29,858,27],[778,33,858,31,"GAME_AREA_HEIGHT"],[778,49,858,47],[778,52,858,50,"ENEMY_SIZE"],[778,62,858,60],[778,65,858,63],[778,66,858,64],[778,67,858,65],[778,70,858,68,"ENEMY_SIZE"],[778,80,858,78],[779,6,860,4],[779,12,860,10,"enemy"],[779,17,860,28],[779,20,860,31],[780,8,861,6,"id"],[780,10,861,8],[780,12,861,10],[780,30,861,28,"Date"],[780,34,861,32],[780,35,861,33,"now"],[780,38,861,36],[780,39,861,37],[780,40,861,38],[780,44,861,42,"Math"],[780,48,861,46],[780,49,861,47,"random"],[780,55,861,53],[780,56,861,54],[780,57,861,55],[780,59,861,57],[781,8,862,6,"name"],[781,12,862,10],[781,14,862,12],[781,26,862,24,"Math"],[781,30,862,28],[781,31,862,29,"floor"],[781,36,862,34],[781,37,862,35,"Math"],[781,41,862,39],[781,42,862,40,"random"],[781,48,862,46],[781,49,862,47],[781,50,862,48],[781,53,862,51],[781,56,862,54],[781,57,862,55],[781,59,862,57],[782,8,863,6,"health"],[782,14,863,12],[782,16,863,14],[782,18,863,16],[783,8,864,6,"maxHealth"],[783,17,864,15],[783,19,864,17],[783,21,864,19],[784,8,865,6,"stats"],[784,13,865,11],[784,15,865,13],[785,10,866,8,"attack"],[785,16,866,14],[785,18,866,16],[785,20,866,18],[786,10,867,8,"defense"],[786,17,867,15],[786,19,867,17],[786,21,867,19],[787,10,868,8,"health"],[787,16,868,14],[787,18,868,16],[787,20,868,18],[788,10,869,8,"maxHealth"],[788,19,869,17],[788,21,869,19],[788,23,869,21],[789,10,870,8,"critChance"],[789,20,870,18],[789,22,870,20],[789,23,870,21],[790,10,871,8,"critDamage"],[790,20,871,18],[790,22,871,20],[790,25,871,23],[791,10,872,8,"cooldownReduction"],[791,27,872,25],[791,29,872,27],[792,8,873,6],[792,9,873,7],[793,8,874,6,"position"],[793,16,874,14],[793,18,874,16],[794,10,874,18,"x"],[794,11,874,19],[795,10,874,21,"y"],[796,8,874,23],[796,9,874,24],[797,8,875,6,"lastDamaged"],[797,19,875,17],[797,21,875,19],[798,6,876,4],[798,7,876,5],[799,6,878,4,"console"],[799,13,878,11],[799,14,878,12,"log"],[799,17,878,15],[799,18,878,16],[799,42,878,40,"enemy"],[799,47,878,45],[799,48,878,46,"name"],[799,52,878,50],[799,60,878,58,"Math"],[799,64,878,62],[799,65,878,63,"round"],[799,70,878,68],[799,71,878,69,"x"],[799,72,878,70],[799,73,878,71],[799,78,878,76,"Math"],[799,82,878,80],[799,83,878,81,"round"],[799,88,878,86],[799,89,878,87,"y"],[799,90,878,88],[799,91,878,89],[799,94,878,92],[799,95,878,93],[800,6,879,4,"state"],[800,11,879,9],[800,12,879,10,"enemies"],[800,19,879,17],[800,20,879,18,"push"],[800,24,879,22],[800,25,879,23,"enemy"],[800,30,879,28],[800,31,879,29],[801,4,880,2],[801,5,880,3],[803,4,882,2],[804,4,883,2],[805,4,884,2],[805,10,884,8,"startCombat"],[805,21,884,19],[805,24,884,22,"React"],[805,29,884,27],[805,30,884,27,"default"],[805,37,884,27],[805,38,884,28,"useCallback"],[805,49,884,39],[805,50,884,40],[805,56,884,46],[806,6,885,4,"console"],[806,13,885,11],[806,14,885,12,"log"],[806,17,885,15],[806,18,885,16],[806,63,885,61],[806,64,885,62],[807,6,886,4,"console"],[807,13,886,11],[807,14,886,12,"log"],[807,17,886,15],[807,18,886,16],[807,37,886,35],[807,39,886,37,"combatEngine"],[807,58,886,49],[807,59,886,49,"combatEngine"],[807,71,886,49],[807,72,886,50],[808,6,887,4,"console"],[808,13,887,11],[808,14,887,12,"log"],[808,17,887,15],[808,18,887,16],[808,51,887,49],[808,53,887,51,"handleCombatTick"],[808,69,887,67],[808,70,887,68],[809,6,888,4,"setCombatState"],[809,20,888,18],[809,21,888,19,"prev"],[809,25,888,23],[809,30,888,28],[810,8,888,30],[810,11,888,33,"prev"],[810,15,888,37],[811,8,888,39,"isInCombat"],[811,18,888,49],[811,20,888,51],[812,6,888,56],[812,7,888,57],[812,8,888,58],[812,9,888,59],[814,6,890,4],[815,6,891,4,"combatEngine"],[815,25,891,16],[815,26,891,16,"combatEngine"],[815,38,891,16],[815,39,891,17,"addTickCallback"],[815,54,891,32],[815,55,891,33,"handleCombatTick"],[815,71,891,49],[815,72,891,50],[816,6,892,4,"console"],[816,13,892,11],[816,14,892,12,"log"],[816,17,892,15],[816,18,892,16],[816,62,892,60],[816,63,892,61],[818,6,894,4],[819,6,895,4,"combatEngine"],[819,25,895,16],[819,26,895,16,"combatEngine"],[819,38,895,16],[819,39,895,17,"start"],[819,44,895,22],[819,45,895,23],[819,46,895,24],[820,6,896,4,"console"],[820,13,896,11],[820,14,896,12,"log"],[820,17,896,15],[820,18,896,16],[820,51,896,49],[820,52,896,50],[821,4,897,2],[821,5,897,3],[821,7,897,5],[821,8,897,6,"combatEngine"],[821,27,897,18],[821,28,897,18,"combatEngine"],[821,40,897,18],[821,42,897,20,"handleCombatTick"],[821,58,897,36],[821,59,897,37],[821,60,897,38],[823,4,899,2],[824,4,900,2],[824,10,900,8,"stopCombat"],[824,20,900,18],[824,23,900,21,"React"],[824,28,900,26],[824,29,900,26,"default"],[824,36,900,26],[824,37,900,27,"useCallback"],[824,48,900,38],[824,49,900,39],[824,55,900,45],[825,6,901,4,"setCombatState"],[825,20,901,18],[825,21,901,19,"prev"],[825,25,901,23],[825,30,901,28],[826,8,901,30],[826,11,901,33,"prev"],[826,15,901,37],[827,8,901,39,"isInCombat"],[827,18,901,49],[827,20,901,51],[828,6,901,57],[828,7,901,58],[828,8,901,59],[828,9,901,60],[829,6,902,4,"combatEngine"],[829,25,902,16],[829,26,902,16,"combatEngine"],[829,38,902,16],[829,39,902,17,"removeTickCallback"],[829,57,902,35],[829,58,902,36,"handleCombatTick"],[829,74,902,52],[829,75,902,53],[830,4,903,2],[830,5,903,3],[830,7,903,5],[830,8,903,6,"combatEngine"],[830,27,903,18],[830,28,903,18,"combatEngine"],[830,40,903,18],[830,42,903,20,"handleCombatTick"],[830,58,903,36],[830,59,903,37],[830,60,903,38],[832,4,905,2],[833,4,906,2],[833,10,906,8,"equipAbility"],[833,22,906,20],[833,25,906,23,"equipAbility"],[833,26,906,24,"abilityId"],[833,35,906,41],[833,37,906,43,"slotIndex"],[833,46,906,60],[833,51,906,74],[834,6,907,4],[834,13,907,11,"combatState"],[834,24,907,22],[834,25,907,23,"abilityManager"],[834,39,907,37],[834,40,907,38,"equipAbility"],[834,52,907,50],[834,53,907,51,"abilityId"],[834,62,907,60],[834,64,907,62,"slotIndex"],[834,73,907,71],[834,74,907,72],[835,4,908,2],[835,5,908,3],[836,4,910,2],[836,10,910,8,"getDeck"],[836,17,910,15],[836,20,910,18,"getDeck"],[836,21,910,18],[836,26,910,24],[837,6,911,4],[837,13,911,11,"combatState"],[837,24,911,22],[837,25,911,23,"abilityManager"],[837,39,911,37],[837,40,911,38,"getDeck"],[837,47,911,45],[837,48,911,46],[837,49,911,47],[838,4,912,2],[838,5,912,3],[839,4,914,2],[839,10,914,8,"getAvailableAbilities"],[839,31,914,29],[839,34,914,32,"getAvailableAbilities"],[839,35,914,32],[839,40,914,38],[840,6,915,4],[840,13,915,11,"combatState"],[840,24,915,22],[840,25,915,23,"abilityManager"],[840,39,915,37],[840,40,915,38,"getAvailableAbilities"],[840,61,915,59],[840,62,915,60],[840,63,915,61],[841,4,916,2],[841,5,916,3],[842,4,918,2],[842,10,918,8,"upgradeAbility"],[842,24,918,22],[842,27,918,26,"abilityId"],[842,36,918,43],[842,40,918,57],[843,6,919,4],[843,13,919,11,"combatState"],[843,24,919,22],[843,25,919,23,"abilityManager"],[843,39,919,37],[843,40,919,38,"upgradeAbility"],[843,54,919,52],[843,55,919,53,"abilityId"],[843,64,919,62],[843,65,919,63],[844,4,920,2],[844,5,920,3],[846,4,922,2],[847,4,923,2],[847,10,923,8,"clearAllEnemies"],[847,25,923,23],[847,28,923,26,"clearAllEnemies"],[847,29,923,26],[847,34,923,32],[848,6,924,4,"console"],[848,13,924,11],[848,14,924,12,"log"],[848,17,924,15],[848,18,924,16],[848,67,924,65],[848,68,924,66],[849,6,925,4,"setCombatState"],[849,20,925,18],[849,21,925,19,"prev"],[849,25,925,23],[849,30,925,28],[850,8,926,6],[850,11,926,9,"prev"],[850,15,926,13],[851,8,927,6,"enemies"],[851,15,927,13],[851,17,927,15],[852,6,928,4],[852,7,928,5],[852,8,928,6],[852,9,928,7],[853,4,929,2],[853,5,929,3],[855,4,931,2],[856,4,932,2],[858,4,934,2],[859,4,935,2],[859,10,935,8,"spawnEnemy"],[859,20,935,18],[859,23,935,22,"position"],[859,31,935,57],[859,35,935,75],[860,6,936,4],[860,12,936,10,"SCREEN_WIDTH"],[860,24,936,22],[860,27,936,25],[860,30,936,28],[861,6,937,4],[861,12,937,10,"GAME_AREA_HEIGHT"],[861,28,937,26],[861,31,937,29],[861,34,937,32],[861,37,937,35],[861,40,937,38],[861,41,937,39],[861,42,937,40],[862,6,938,4],[862,12,938,10,"ENEMY_SIZE"],[862,22,938,20],[862,25,938,23],[862,27,938,25],[864,6,940,4],[865,6,941,4],[865,12,941,10,"x"],[865,13,941,11],[865,16,941,14,"position"],[865,24,941,22],[865,26,941,24,"x"],[865,27,941,25],[865,31,941,29,"Math"],[865,35,941,33],[865,36,941,34,"random"],[865,42,941,40],[865,43,941,41],[865,44,941,42],[865,48,941,46,"SCREEN_WIDTH"],[865,60,941,58],[865,63,941,61,"ENEMY_SIZE"],[865,73,941,71],[865,76,941,74],[865,77,941,75],[865,78,941,76],[865,81,941,79,"ENEMY_SIZE"],[865,91,941,89],[866,6,942,4],[866,12,942,10,"y"],[866,13,942,11],[866,16,942,14,"position"],[866,24,942,22],[866,26,942,24,"y"],[866,27,942,25],[866,31,942,29,"Math"],[866,35,942,33],[866,36,942,34,"random"],[866,42,942,40],[866,43,942,41],[866,44,942,42],[866,48,942,46,"GAME_AREA_HEIGHT"],[866,64,942,62],[866,67,942,65,"ENEMY_SIZE"],[866,77,942,75],[866,80,942,78],[866,81,942,79],[866,82,942,80],[866,85,942,83,"ENEMY_SIZE"],[866,95,942,93],[867,6,944,4],[867,12,944,10,"enemy"],[867,17,944,28],[867,20,944,31],[868,8,945,6,"id"],[868,10,945,8],[868,12,945,10],[868,21,945,19],[868,23,945,21,"enemyCounter"],[868,35,945,33],[868,37,945,35],[869,8,946,6,"name"],[869,12,946,10],[869,14,946,12],[869,24,946,22],[870,8,947,6,"health"],[870,14,947,12],[870,16,947,14],[870,19,947,17],[871,8,948,6,"maxHealth"],[871,17,948,15],[871,19,948,17],[871,22,948,20],[872,8,949,6,"stats"],[872,13,949,11],[872,15,949,13],[873,10,950,8,"attack"],[873,16,950,14],[873,18,950,16],[873,20,950,18],[874,10,951,8,"defense"],[874,17,951,15],[874,19,951,17],[874,21,951,19],[875,10,952,8,"health"],[875,16,952,14],[875,18,952,16],[875,21,952,19],[876,10,953,8,"maxHealth"],[876,19,953,17],[876,21,953,19],[876,24,953,22],[877,10,954,8,"critChance"],[877,20,954,18],[877,22,954,20],[877,23,954,21],[878,10,955,8,"critDamage"],[878,20,955,18],[878,22,955,20],[878,25,955,23],[879,10,956,8,"cooldownReduction"],[879,27,956,25],[879,29,956,27],[880,8,957,6],[880,9,957,7],[881,8,958,6,"position"],[881,16,958,14],[881,18,958,16],[882,10,958,18,"x"],[882,11,958,19],[883,10,958,21,"y"],[884,8,958,23],[884,9,958,24],[885,8,959,6,"lastDamaged"],[885,19,959,17],[885,21,959,19],[886,6,960,4],[886,7,960,5],[887,6,962,4,"setCombatState"],[887,20,962,18],[887,21,962,19,"prev"],[887,25,962,23],[887,30,962,28],[888,8,963,6],[888,11,963,9,"prev"],[888,15,963,13],[889,8,964,6,"enemies"],[889,15,964,13],[889,17,964,15],[889,18,964,16],[889,21,964,19,"prev"],[889,25,964,23],[889,26,964,24,"enemies"],[889,33,964,31],[889,35,964,33,"enemy"],[889,40,964,38],[890,6,965,4],[890,7,965,5],[890,8,965,6],[890,9,965,7],[891,6,967,4],[891,13,967,11,"enemy"],[891,18,967,16],[892,4,968,2],[892,5,968,3],[894,4,970,2],[895,4,971,2],[895,10,971,8,"spawnBoss"],[895,19,971,17],[895,22,971,21,"bossEnemy"],[895,31,971,43],[895,35,971,48],[896,6,972,4,"console"],[896,13,972,11],[896,14,972,12,"log"],[896,17,972,15],[896,18,972,16],[896,39,972,37,"bossEnemy"],[896,48,972,46],[896,49,972,47,"name"],[896,53,972,51],[896,90,972,88],[896,91,972,89],[897,6,973,4,"setCombatState"],[897,20,973,18],[897,21,973,19,"prev"],[897,25,973,23],[897,30,973,28],[898,8,974,6],[898,11,974,9,"prev"],[898,15,974,13],[899,8,975,6,"enemies"],[899,15,975,13],[899,17,975,15],[899,18,975,16,"bossEnemy"],[899,27,975,25],[899,28,975,26],[899,29,975,27],[900,6,976,4],[900,7,976,5],[900,8,976,6],[900,9,976,7],[901,4,977,2],[901,5,977,3],[903,4,979,2],[904,4,980,2],[904,10,980,8,"clearSpecificEnemy"],[904,28,980,26],[904,31,980,30,"enemyId"],[904,38,980,45],[904,42,980,50],[905,6,981,4,"setCombatState"],[905,20,981,18],[905,21,981,19,"prev"],[905,25,981,23],[905,30,981,28],[906,8,982,6],[906,11,982,9,"prev"],[906,15,982,13],[907,8,983,6,"enemies"],[907,15,983,13],[907,17,983,15,"prev"],[907,21,983,19],[907,22,983,20,"enemies"],[907,29,983,27],[907,30,983,28,"filter"],[907,36,983,34],[907,37,983,35,"enemy"],[907,42,983,40],[907,46,983,44,"enemy"],[907,51,983,49],[907,52,983,50,"id"],[907,54,983,52],[907,59,983,57,"enemyId"],[907,66,983,64],[908,6,984,4],[908,7,984,5],[908,8,984,6],[908,9,984,7],[909,4,985,2],[909,5,985,3],[911,4,987,2],[912,4,988,2],[912,10,988,8,"useAbilityManually"],[912,28,988,26],[912,31,988,29],[912,35,988,29,"useCallback"],[912,41,988,40],[912,42,988,40,"useCallback"],[912,53,988,40],[912,55,988,42,"slotIndex"],[912,64,988,59],[912,68,988,73],[913,6,989,4,"console"],[913,13,989,11],[913,14,989,12,"log"],[913,17,989,15],[913,18,989,16],[913,64,989,62,"slotIndex"],[913,73,989,71],[913,82,989,80],[913,83,989,81],[914,6,990,4,"console"],[914,13,990,11],[914,14,990,12,"log"],[914,17,990,15],[914,18,990,16],[914,65,990,63,"slotIndex"],[914,74,990,72],[914,76,990,74],[914,77,990,75],[915,6,991,4,"console"],[915,13,991,11],[915,14,991,12,"log"],[915,17,991,15],[915,18,991,16],[915,53,991,51,"slotIndex"],[915,62,991,60],[915,64,991,62],[915,65,991,63],[917,6,993,4],[918,6,994,4],[918,10,994,8],[918,11,994,9,"game"],[918,15,994,13],[918,16,994,14,"gameState"],[918,25,994,23],[918,26,994,24,"isAlive"],[918,33,994,31],[918,35,994,33],[919,8,995,6,"console"],[919,15,995,13],[919,16,995,14,"log"],[919,19,995,17],[919,20,995,18],[919,70,995,68],[919,71,995,69],[920,8,996,6],[920,15,996,13],[920,20,996,18],[921,6,997,4],[923,6,999,4],[924,6,1000,4],[924,12,1000,10,"isReady"],[924,19,1000,17],[924,22,1000,20,"combatState"],[924,33,1000,31],[924,34,1000,32,"abilityManager"],[924,48,1000,46],[924,49,1000,47,"isAbilityReady"],[924,63,1000,61],[924,64,1000,62,"slotIndex"],[924,73,1000,71],[924,74,1000,72],[925,6,1001,4],[925,10,1001,8],[925,11,1001,9,"isReady"],[925,18,1001,16],[925,20,1001,18],[926,8,1002,6,"console"],[926,15,1002,13],[926,16,1002,14,"log"],[926,19,1002,17],[926,20,1002,18],[926,41,1002,39,"slotIndex"],[926,50,1002,48],[926,85,1002,83],[926,86,1002,84],[927,8,1003,6],[927,15,1003,13],[927,20,1003,18],[928,6,1004,4],[930,6,1006,4],[931,6,1007,4],[931,10,1007,8,"combatState"],[931,21,1007,19],[931,22,1007,20,"enemies"],[931,29,1007,27],[931,30,1007,28,"length"],[931,36,1007,34],[931,41,1007,39],[931,42,1007,40],[931,44,1007,42],[932,8,1008,6,"console"],[932,15,1008,13],[932,16,1008,14,"log"],[932,19,1008,17],[932,20,1008,18],[932,69,1008,67],[932,70,1008,68],[933,8,1009,6],[933,15,1009,13],[933,20,1009,18],[934,6,1010,4],[936,6,1012,4],[937,6,1013,4],[937,12,1013,10,"currentTick"],[937,23,1013,21],[937,26,1013,24,"combatEngine"],[937,45,1013,36],[937,46,1013,36,"combatEngine"],[937,58,1013,36],[937,59,1013,37,"getCurrentTick"],[937,73,1013,51],[937,74,1013,52],[937,75,1013,53],[938,6,1014,4],[938,12,1014,10,"success"],[938,19,1014,17],[938,22,1014,20,"combatState"],[938,33,1014,31],[938,34,1014,32,"abilityManager"],[938,48,1014,46],[938,49,1014,47,"useAbility"],[938,59,1014,57],[938,60,1014,58,"slotIndex"],[938,69,1014,67],[938,71,1014,69,"currentTick"],[938,82,1014,80],[938,83,1014,81],[939,6,1016,4],[939,10,1016,8,"success"],[939,17,1016,15],[939,19,1016,17],[940,8,1017,6],[941,8,1018,6,"setCombatState"],[941,22,1018,20],[941,23,1018,21,"prev"],[941,27,1018,25],[941,31,1018,29],[942,10,1019,8],[942,16,1019,14,"newState"],[942,24,1019,22],[942,27,1019,25],[943,12,1019,27],[943,15,1019,30,"prev"],[944,10,1019,35],[944,11,1019,36],[945,10,1020,8,"castAbility"],[945,21,1020,19],[945,22,1020,20,"newState"],[945,30,1020,28],[945,32,1020,30,"slotIndex"],[945,41,1020,39],[945,42,1020,40],[946,10,1021,8],[946,17,1021,15,"newState"],[946,25,1021,23],[947,8,1022,6],[947,9,1022,7],[947,10,1022,8],[948,8,1024,6,"console"],[948,15,1024,13],[948,16,1024,14,"log"],[948,19,1024,17],[948,20,1024,18],[948,65,1024,63,"slotIndex"],[948,74,1024,72],[948,76,1024,74],[948,77,1024,75],[949,8,1025,6],[949,15,1025,13],[949,19,1025,17],[950,6,1026,4],[950,7,1026,5],[950,13,1026,11],[951,8,1027,6,"console"],[951,15,1027,13],[951,16,1027,14,"log"],[951,19,1027,17],[951,20,1027,18],[951,61,1027,59,"slotIndex"],[951,70,1027,68],[951,72,1027,70],[951,73,1027,71],[952,8,1028,6],[952,15,1028,13],[952,20,1028,18],[953,6,1029,4],[954,4,1030,2],[954,5,1030,3],[954,7,1030,5],[954,8,1030,6,"combatState"],[954,19,1030,17],[954,20,1030,18,"abilityManager"],[954,34,1030,32],[954,36,1030,34,"combatState"],[954,47,1030,45],[954,48,1030,46,"enemies"],[954,55,1030,53],[954,56,1030,54],[954,57,1030,55],[955,4,1031,2],[955,8,1031,2,"useEffect"],[955,14,1031,11],[955,15,1031,11,"useEffect"],[955,24,1031,11],[955,26,1031,12],[955,32,1031,18],[956,6,1032,4,"combatEngine"],[956,25,1032,16],[956,26,1032,16,"combatEngine"],[956,38,1032,16],[956,39,1032,17,"start"],[956,44,1032,22],[956,45,1032,23],[956,46,1032,24],[958,6,1034,4],[959,6,1035,4],[960,6,1036,4,"console"],[960,13,1036,11],[960,14,1036,12,"log"],[960,17,1036,15],[960,18,1036,16],[960,97,1036,95],[960,98,1036,96],[961,6,1038,4],[961,13,1038,11],[961,19,1038,17],[962,8,1039,6,"combatEngine"],[962,27,1039,18],[962,28,1039,18,"combatEngine"],[962,40,1039,18],[962,41,1039,19,"stop"],[962,45,1039,23],[962,46,1039,24],[962,47,1039,25],[963,6,1040,4],[963,7,1040,5],[964,4,1041,2],[964,5,1041,3],[964,7,1041,5],[964,9,1041,7],[964,10,1041,8],[966,4,1043,2],[967,4,1044,2],[967,8,1044,2,"useEffect"],[967,14,1044,11],[967,15,1044,11,"useEffect"],[967,24,1044,11],[967,26,1044,12],[967,32,1044,18],[968,6,1045,4],[969,6,1046,4],[969,12,1046,10,"tickInterval"],[969,24,1046,22],[969,27,1046,25,"Platform"],[969,35,1046,33],[969,36,1046,33,"default"],[969,43,1046,33],[969,44,1046,34,"OS"],[969,46,1046,36],[969,51,1046,41],[969,56,1046,46],[969,59,1046,49],[969,62,1046,52],[969,65,1046,55],[969,68,1046,58],[969,69,1046,59],[969,70,1046,60],[970,6,1047,4,"console"],[970,13,1047,11],[970,14,1047,12,"log"],[970,17,1047,15],[970,18,1047,16],[970,91,1047,89,"tickInterval"],[970,103,1047,101],[970,112,1047,110,"Platform"],[970,120,1047,118],[970,121,1047,118,"default"],[970,128,1047,118],[970,129,1047,119,"OS"],[970,131,1047,121],[970,133,1047,123],[970,134,1047,124],[971,6,1048,4],[971,12,1048,10,"combatTickInterval"],[971,30,1048,28],[971,33,1048,31,"setInterval"],[971,44,1048,42],[971,45,1048,43,"handleCombatTick"],[971,61,1048,59],[971,63,1048,61,"tickInterval"],[971,75,1048,73],[971,76,1048,74],[972,6,1050,4],[972,13,1050,11],[972,19,1050,17],[973,8,1051,6,"console"],[973,15,1051,13],[973,16,1051,14,"log"],[973,19,1051,17],[973,20,1051,18],[973,51,1051,49],[973,52,1051,50],[974,8,1052,6,"clearInterval"],[974,21,1052,19],[974,22,1052,20,"combatTickInterval"],[974,40,1052,38],[974,41,1052,39],[975,6,1053,4],[975,7,1053,5],[976,4,1054,2],[976,5,1054,3],[976,7,1054,5],[976,8,1054,6,"handleCombatTick"],[976,24,1054,22],[976,25,1054,23],[976,26,1054,24],[978,4,1056,2],[979,4,1057,2],[979,8,1057,2,"useEffect"],[979,14,1057,11],[979,15,1057,11,"useEffect"],[979,24,1057,11],[979,26,1057,12],[979,32,1057,18],[980,6,1058,4],[980,12,1058,10,"processProjectileImpacts"],[980,36,1058,34],[980,39,1058,37,"processProjectileImpacts"],[980,40,1058,37],[980,45,1058,43],[981,8,1059,6,"setProjectiles"],[981,22,1059,20],[981,23,1059,21,"currentProjectiles"],[981,41,1059,39],[981,45,1059,43],[982,10,1060,8],[982,17,1060,15,"currentProjectiles"],[982,35,1060,33],[982,36,1060,34,"map"],[982,39,1060,37],[982,40,1060,38,"projectile"],[982,50,1060,48],[982,54,1060,52],[983,12,1061,10],[983,16,1061,14],[983,17,1061,15,"projectile"],[983,27,1061,25],[983,29,1061,27],[983,36,1061,34],[983,40,1061,38],[985,12,1063,10],[986,12,1064,10],[986,18,1064,16,"currentTime"],[986,29,1064,27],[986,32,1064,30,"Date"],[986,36,1064,34],[986,37,1064,35,"now"],[986,40,1064,38],[986,41,1064,39],[986,42,1064,40],[987,12,1065,10],[987,18,1065,16,"startTime"],[987,27,1065,25],[987,30,1065,28,"projectile"],[987,40,1065,38],[987,41,1065,39,"startTime"],[987,50,1065,48],[987,54,1065,52,"currentTime"],[987,65,1065,63],[988,12,1066,10],[988,18,1066,16,"elapsedTime"],[988,29,1066,27],[988,32,1066,30,"currentTime"],[988,43,1066,41],[988,46,1066,44,"startTime"],[988,55,1066,53],[989,12,1067,10],[989,18,1067,16,"progress"],[989,26,1067,24],[989,29,1067,27,"Math"],[989,33,1067,31],[989,34,1067,32,"min"],[989,37,1067,35],[989,38,1067,36,"elapsedTime"],[989,49,1067,47],[989,53,1067,51,"projectile"],[989,63,1067,61],[989,64,1067,62,"duration"],[989,72,1067,70],[989,76,1067,74],[989,79,1067,77],[989,80,1067,78],[989,82,1067,80],[989,83,1067,81],[989,84,1067,82],[991,12,1069,10],[992,12,1070,10],[992,16,1070,14,"progress"],[992,24,1070,22],[992,28,1070,26],[992,29,1070,27],[992,33,1070,31],[992,34,1070,32,"projectile"],[992,44,1070,42],[992,45,1070,43,"hasHit"],[992,51,1070,49],[992,53,1070,51],[993,14,1071,12],[994,14,1072,12,"console"],[994,21,1072,19],[994,22,1072,20,"log"],[994,25,1072,23],[994,26,1072,24],[994,51,1072,49,"projectile"],[994,61,1072,59],[994,62,1072,60,"abilityName"],[994,73,1072,71],[994,97,1072,95],[994,98,1072,96],[995,14,1074,12,"setCombatState"],[995,28,1074,26],[995,29,1074,27,"prev"],[995,33,1074,31],[995,37,1074,35],[996,16,1075,14],[996,22,1075,20,"newState"],[996,30,1075,28],[996,33,1075,31],[997,18,1075,33],[997,21,1075,36,"prev"],[998,16,1075,41],[998,17,1075,42],[999,16,1077,14],[999,20,1077,18,"projectile"],[999,30,1077,28],[999,31,1077,29,"isAOE"],[999,36,1077,34],[999,40,1077,38,"projectile"],[999,50,1077,48],[999,51,1077,49,"aoeRadius"],[999,60,1077,58],[999,64,1077,62,"projectile"],[999,74,1077,72],[999,75,1077,73,"aoeRadius"],[999,84,1077,82],[999,87,1077,85],[999,88,1077,86],[999,90,1077,88],[1000,18,1078,16],[1001,18,1079,16,"console"],[1001,25,1079,23],[1001,26,1079,24,"log"],[1001,29,1079,27],[1001,30,1079,28],[1001,59,1079,57,"projectile"],[1001,69,1079,67],[1001,70,1079,68,"abilityName"],[1001,81,1079,79],[1001,97,1079,95,"projectile"],[1001,107,1079,105],[1001,108,1079,106,"aoeRadius"],[1001,117,1079,115],[1001,119,1079,117],[1001,120,1079,118],[1002,18,1081,16],[1002,24,1081,22,"impactX"],[1002,31,1081,29],[1002,34,1081,32,"projectile"],[1002,44,1081,42],[1002,45,1081,43,"targetX"],[1002,52,1081,50],[1003,18,1082,16],[1003,24,1082,22,"impactY"],[1003,31,1082,29],[1003,34,1082,32,"projectile"],[1003,44,1082,42],[1003,45,1082,43,"targetY"],[1003,52,1082,50],[1004,18,1083,16],[1004,24,1083,22,"enemiesKilled"],[1004,37,1083,50],[1004,40,1083,53],[1004,42,1083,55],[1006,18,1085,16],[1007,18,1086,16,"newState"],[1007,26,1086,24],[1007,27,1086,25,"enemies"],[1007,34,1086,32],[1007,37,1086,35,"newState"],[1007,45,1086,43],[1007,46,1086,44,"enemies"],[1007,53,1086,51],[1007,54,1086,52,"map"],[1007,57,1086,55],[1007,58,1086,56,"enemy"],[1007,63,1086,61],[1007,67,1086,65],[1008,20,1087,18],[1008,24,1087,22,"enemy"],[1008,29,1087,27],[1008,30,1087,28,"health"],[1008,36,1087,34],[1008,40,1087,38],[1008,41,1087,39],[1008,45,1087,43,"enemy"],[1008,50,1087,48],[1008,51,1087,49,"markedForDeath"],[1008,65,1087,63],[1008,67,1087,65],[1008,74,1087,72,"enemy"],[1008,79,1087,77],[1009,20,1089,18],[1009,26,1089,24,"enemyX"],[1009,32,1089,30],[1009,35,1089,33,"enemy"],[1009,40,1089,38],[1009,41,1089,39,"position"],[1009,49,1089,47],[1009,50,1089,48,"x"],[1009,51,1089,49],[1009,54,1089,52],[1009,58,1089,56],[1009,59,1089,57],[1009,60,1089,58],[1010,20,1090,18],[1010,26,1090,24,"enemyY"],[1010,32,1090,30],[1010,35,1090,33,"enemy"],[1010,40,1090,38],[1010,41,1090,39,"position"],[1010,49,1090,47],[1010,50,1090,48,"y"],[1010,51,1090,49],[1010,54,1090,52],[1010,58,1090,56],[1011,20,1091,18],[1011,26,1091,24,"distance"],[1011,34,1091,32],[1011,37,1091,35,"Math"],[1011,41,1091,39],[1011,42,1091,40,"sqrt"],[1011,46,1091,44],[1011,47,1091,45,"Math"],[1011,51,1091,49],[1011,52,1091,50,"pow"],[1011,55,1091,53],[1011,56,1091,54,"enemyX"],[1011,62,1091,60],[1011,65,1091,63,"impactX"],[1011,72,1091,70],[1011,74,1091,72],[1011,75,1091,73],[1011,76,1091,74],[1011,79,1091,77,"Math"],[1011,83,1091,81],[1011,84,1091,82,"pow"],[1011,87,1091,85],[1011,88,1091,86,"enemyY"],[1011,94,1091,92],[1011,97,1091,95,"impactY"],[1011,104,1091,102],[1011,106,1091,104],[1011,107,1091,105],[1011,108,1091,106],[1011,109,1091,107],[1012,20,1093,18,"console"],[1012,27,1093,25],[1012,28,1093,26,"log"],[1012,31,1093,29],[1012,32,1093,30],[1012,58,1093,56,"enemy"],[1012,63,1093,61],[1012,64,1093,62,"name"],[1012,68,1093,66],[1012,76,1093,74,"enemyX"],[1012,82,1093,80],[1012,87,1093,85,"enemyY"],[1012,93,1093,91],[1012,109,1093,107,"impactX"],[1012,116,1093,114],[1012,121,1093,119,"impactY"],[1012,128,1093,126],[1012,135,1093,133,"distance"],[1012,143,1093,141],[1012,144,1093,142,"toFixed"],[1012,151,1093,149],[1012,152,1093,150],[1012,153,1093,151],[1012,154,1093,152],[1012,169,1093,167,"projectile"],[1012,179,1093,177],[1012,180,1093,178,"aoeRadius"],[1012,189,1093,187],[1012,194,1093,192],[1012,195,1093,193],[1013,20,1095,18],[1013,24,1095,22,"distance"],[1013,32,1095,30],[1013,36,1095,34,"projectile"],[1013,46,1095,44],[1013,47,1095,45,"aoeRadius"],[1013,56,1095,54],[1013,58,1095,56],[1014,22,1096,20],[1015,22,1097,20],[1015,28,1097,26,"newHealth"],[1015,37,1097,35],[1015,40,1097,38,"Math"],[1015,44,1097,42],[1015,45,1097,43,"max"],[1015,48,1097,46],[1015,49,1097,47],[1015,50,1097,48],[1015,52,1097,50,"enemy"],[1015,57,1097,55],[1015,58,1097,56,"health"],[1015,64,1097,62],[1015,67,1097,65,"projectile"],[1015,77,1097,75],[1015,78,1097,76,"damage"],[1015,84,1097,82],[1015,85,1097,83],[1016,22,1099,20,"console"],[1016,29,1099,27],[1016,30,1099,28,"log"],[1016,33,1099,31],[1016,34,1099,32],[1016,52,1099,50,"enemy"],[1016,57,1099,55],[1016,58,1099,56,"name"],[1016,62,1099,60],[1016,74,1099,72,"projectile"],[1016,84,1099,82],[1016,85,1099,83,"damage"],[1016,91,1099,89],[1016,103,1099,101,"enemy"],[1016,108,1099,106],[1016,109,1099,107,"health"],[1016,115,1099,113],[1016,122,1099,120,"newHealth"],[1016,131,1099,129],[1016,134,1099,132],[1016,135,1099,133],[1018,22,1101,20],[1019,22,1102,20],[1019,26,1102,24,"newHealth"],[1019,35,1102,33],[1019,39,1102,37],[1019,40,1102,38],[1019,44,1102,42,"enemy"],[1019,49,1102,47],[1019,50,1102,48,"health"],[1019,56,1102,54],[1019,59,1102,57],[1019,60,1102,58],[1019,62,1102,60],[1020,24,1103,22,"console"],[1020,31,1103,29],[1020,32,1103,30,"log"],[1020,35,1103,33],[1020,36,1103,34],[1020,52,1103,50,"enemy"],[1020,57,1103,55],[1020,58,1103,56,"name"],[1020,62,1103,60],[1020,76,1103,74,"projectile"],[1020,86,1103,84],[1020,87,1103,85,"abilityName"],[1020,98,1103,96],[1020,101,1103,99],[1020,102,1103,100],[1021,24,1104,22,"enemiesKilled"],[1021,37,1104,35],[1021,38,1104,36,"push"],[1021,42,1104,40],[1021,43,1104,41,"enemy"],[1021,48,1104,46],[1021,49,1104,47],[1021,50,1104,48],[1021,51,1104,49],[1023,24,1106,22],[1023,31,1106,29],[1024,26,1107,24],[1024,29,1107,27,"enemy"],[1024,34,1107,32],[1025,26,1108,24,"health"],[1025,32,1108,30],[1025,34,1108,32],[1025,35,1108,33],[1026,26,1109,24,"markedForDeath"],[1026,40,1109,38],[1026,42,1109,40],[1026,46,1109,44],[1027,26,1110,24,"lastDamaged"],[1027,37,1110,35],[1027,39,1110,37,"combatEngine"],[1027,58,1110,49],[1027,59,1110,49,"combatEngine"],[1027,71,1110,49],[1027,72,1110,50,"getCurrentTick"],[1027,86,1110,64],[1027,87,1110,65],[1028,24,1111,22],[1028,25,1111,23],[1029,22,1112,20],[1029,23,1112,21],[1029,29,1112,27],[1030,24,1113,22],[1030,31,1113,29],[1031,26,1114,24],[1031,29,1114,27,"enemy"],[1031,34,1114,32],[1032,26,1115,24,"health"],[1032,32,1115,30],[1032,34,1115,32,"newHealth"],[1032,43,1115,41],[1033,26,1116,24,"lastDamaged"],[1033,37,1116,35],[1033,39,1116,37,"combatEngine"],[1033,58,1116,49],[1033,59,1116,49,"combatEngine"],[1033,71,1116,49],[1033,72,1116,50,"getCurrentTick"],[1033,86,1116,64],[1033,87,1116,65],[1034,24,1117,22],[1034,25,1117,23],[1035,22,1118,20],[1036,20,1119,18],[1037,20,1121,18],[1037,27,1121,25,"enemy"],[1037,32,1121,30],[1037,33,1121,31],[1037,34,1121,32],[1038,18,1122,16],[1038,19,1122,17],[1038,20,1122,18],[1040,18,1124,16],[1041,18,1125,16],[1041,22,1125,20,"enemiesKilled"],[1041,35,1125,33],[1041,36,1125,34,"length"],[1041,42,1125,40],[1041,45,1125,43],[1041,46,1125,44],[1041,48,1125,46],[1042,20,1126,18,"console"],[1042,27,1126,25],[1042,28,1126,26,"log"],[1042,31,1126,29],[1042,32,1126,30],[1042,52,1126,50,"enemiesKilled"],[1042,65,1126,63],[1042,66,1126,64,"length"],[1042,72,1126,70],[1042,94,1126,92,"projectile"],[1042,104,1126,102],[1042,105,1126,103,"abilityName"],[1042,116,1126,114],[1042,118,1126,116],[1042,119,1126,117],[1043,20,1127,18],[1044,20,1128,18,"enemiesKilled"],[1044,33,1128,31],[1044,34,1128,32,"forEach"],[1044,41,1128,39],[1044,42,1128,40,"enemy"],[1044,47,1128,45],[1044,51,1128,49,"handleEnemyKill"],[1044,66,1128,64],[1044,67,1128,65,"enemy"],[1044,72,1128,70],[1044,73,1128,71],[1044,74,1128,72],[1045,18,1129,16],[1046,16,1131,14],[1046,17,1131,15],[1046,23,1131,21],[1047,18,1132,16],[1048,18,1133,16],[1048,24,1133,22,"enemyIndex"],[1048,34,1133,32],[1048,37,1133,35,"newState"],[1048,45,1133,43],[1048,46,1133,44,"enemies"],[1048,53,1133,51],[1048,54,1133,52,"findIndex"],[1048,63,1133,61],[1048,64,1133,62,"e"],[1048,65,1133,63],[1048,69,1133,67,"e"],[1048,70,1133,68],[1048,71,1133,69,"id"],[1048,73,1133,71],[1048,78,1133,76,"projectile"],[1048,88,1133,86],[1048,89,1133,87,"targetEnemyId"],[1048,102,1133,100],[1048,103,1133,101],[1049,18,1135,16],[1049,22,1135,20,"enemyIndex"],[1049,32,1135,30],[1049,36,1135,34],[1049,37,1135,35],[1049,41,1135,39,"newState"],[1049,49,1135,47],[1049,50,1135,48,"enemies"],[1049,57,1135,55],[1049,58,1135,56,"enemyIndex"],[1049,68,1135,66],[1049,69,1135,67],[1049,70,1135,68,"health"],[1049,76,1135,74],[1049,79,1135,77],[1049,80,1135,78],[1049,84,1135,82],[1049,85,1135,83,"newState"],[1049,93,1135,91],[1049,94,1135,92,"enemies"],[1049,101,1135,99],[1049,102,1135,100,"enemyIndex"],[1049,112,1135,110],[1049,113,1135,111],[1049,114,1135,112,"markedForDeath"],[1049,128,1135,126],[1049,130,1135,128],[1050,20,1136,18,"newState"],[1050,28,1136,26],[1050,29,1136,27,"enemies"],[1050,36,1136,34],[1050,39,1136,37],[1050,40,1136,38],[1050,43,1136,41,"newState"],[1050,51,1136,49],[1050,52,1136,50,"enemies"],[1050,59,1136,57],[1050,60,1136,58],[1051,20,1137,18],[1051,26,1137,24,"enemy"],[1051,31,1137,29],[1051,34,1137,32,"newState"],[1051,42,1137,40],[1051,43,1137,41,"enemies"],[1051,50,1137,48],[1051,51,1137,49,"enemyIndex"],[1051,61,1137,59],[1051,62,1137,60],[1052,20,1138,18],[1052,26,1138,24,"newHealth"],[1052,35,1138,33],[1052,38,1138,36,"Math"],[1052,42,1138,40],[1052,43,1138,41,"max"],[1052,46,1138,44],[1052,47,1138,45],[1052,48,1138,46],[1052,50,1138,48,"enemy"],[1052,55,1138,53],[1052,56,1138,54,"health"],[1052,62,1138,60],[1052,65,1138,63,"projectile"],[1052,75,1138,73],[1052,76,1138,74,"damage"],[1052,82,1138,80],[1052,83,1138,81],[1053,20,1140,18,"newState"],[1053,28,1140,26],[1053,29,1140,27,"enemies"],[1053,36,1140,34],[1053,37,1140,35,"enemyIndex"],[1053,47,1140,45],[1053,48,1140,46],[1053,51,1140,49],[1054,22,1141,20],[1054,25,1141,23,"enemy"],[1054,30,1141,28],[1055,22,1142,20,"health"],[1055,28,1142,26],[1055,30,1142,28,"newHealth"],[1055,39,1142,37],[1056,22,1143,20,"lastDamaged"],[1056,33,1143,31],[1056,35,1143,33,"combatEngine"],[1056,54,1143,45],[1056,55,1143,45,"combatEngine"],[1056,67,1143,45],[1056,68,1143,46,"getCurrentTick"],[1056,82,1143,60],[1056,83,1143,61],[1057,20,1144,18],[1057,21,1144,19],[1058,20,1146,18,"console"],[1058,27,1146,25],[1058,28,1146,26,"log"],[1058,31,1146,29],[1058,32,1146,30],[1058,60,1146,58,"enemy"],[1058,65,1146,63],[1058,66,1146,64,"name"],[1058,70,1146,68],[1058,82,1146,80,"newHealth"],[1058,91,1146,89],[1058,95,1146,93,"enemy"],[1058,100,1146,98],[1058,101,1146,99,"maxHealth"],[1058,110,1146,108],[1058,112,1146,110],[1058,113,1146,111],[1060,20,1148,18],[1061,20,1149,18],[1061,24,1149,22,"newHealth"],[1061,33,1149,31],[1061,37,1149,35],[1061,38,1149,36],[1061,42,1149,40,"enemy"],[1061,47,1149,45],[1061,48,1149,46,"health"],[1061,54,1149,52],[1061,57,1149,55],[1061,58,1149,56],[1061,60,1149,58],[1062,22,1150,20,"console"],[1062,29,1150,27],[1062,30,1150,28,"log"],[1062,33,1150,31],[1062,34,1150,32],[1062,54,1150,52,"enemy"],[1062,59,1150,57],[1062,60,1150,58,"name"],[1062,64,1150,62],[1062,78,1150,76,"projectile"],[1062,88,1150,86],[1062,89,1150,87,"abilityName"],[1062,100,1150,98],[1062,136,1150,134],[1062,137,1150,135],[1064,22,1152,20],[1065,22,1153,20,"newState"],[1065,30,1153,28],[1065,31,1153,29,"enemies"],[1065,38,1153,36],[1065,39,1153,37,"enemyIndex"],[1065,49,1153,47],[1065,50,1153,48],[1065,53,1153,51],[1066,24,1154,22],[1066,27,1154,25,"newState"],[1066,35,1154,33],[1066,36,1154,34,"enemies"],[1066,43,1154,41],[1066,44,1154,42,"enemyIndex"],[1066,54,1154,52],[1066,55,1154,53],[1067,24,1155,22,"health"],[1067,30,1155,28],[1067,32,1155,30],[1067,33,1155,31],[1068,24,1156,22,"isDying"],[1068,31,1156,29],[1068,33,1156,31],[1068,37,1156,35],[1069,24,1157,22,"deathStartTime"],[1069,38,1157,36],[1069,40,1157,38,"Date"],[1069,44,1157,42],[1069,45,1157,43,"now"],[1069,48,1157,46],[1069,49,1157,47],[1070,22,1158,20],[1070,23,1158,21],[1071,20,1159,18],[1071,21,1159,19],[1071,27,1159,25],[1071,31,1159,29,"enemy"],[1071,36,1159,34],[1071,37,1159,35,"health"],[1071,43,1159,41],[1071,46,1159,44],[1071,47,1159,45],[1071,49,1159,47],[1072,22,1160,20,"console"],[1072,29,1160,27],[1072,30,1160,28,"log"],[1072,33,1160,31],[1072,34,1160,32],[1072,48,1160,46,"enemy"],[1072,53,1160,51],[1072,54,1160,52,"name"],[1072,58,1160,56],[1072,70,1160,68,"projectile"],[1072,80,1160,78],[1072,81,1160,79,"damage"],[1072,87,1160,85],[1072,99,1160,97,"enemy"],[1072,104,1160,102],[1072,105,1160,103,"health"],[1072,111,1160,109],[1072,117,1160,115,"newHealth"],[1072,126,1160,124],[1072,129,1160,127],[1072,130,1160,128],[1073,20,1161,18],[1074,18,1162,16],[1075,16,1163,14],[1076,16,1165,14],[1076,23,1165,21,"newState"],[1076,31,1165,29],[1077,14,1166,12],[1077,15,1166,13],[1077,16,1166,14],[1079,14,1168,12],[1080,14,1169,12],[1081,12,1170,10],[1083,12,1172,10],[1084,12,1173,10],[1085,12,1174,10],[1085,18,1174,16,"timeBasedCleanup"],[1085,34,1174,32],[1085,37,1174,35,"elapsedTime"],[1085,48,1174,46],[1085,51,1174,49],[1085,55,1174,53],[1085,56,1174,54],[1085,57,1174,55],[1086,12,1175,10],[1086,16,1175,14,"progress"],[1086,24,1175,22],[1086,28,1175,26],[1086,31,1175,29],[1086,35,1175,33,"timeBasedCleanup"],[1086,51,1175,49],[1086,53,1175,51],[1087,14,1176,12],[1087,18,1176,16,"timeBasedCleanup"],[1087,34,1176,32],[1087,36,1176,34],[1088,16,1177,14,"console"],[1088,23,1177,21],[1088,24,1177,22,"log"],[1088,27,1177,25],[1088,28,1177,26],[1088,63,1177,61,"projectile"],[1088,73,1177,71],[1088,74,1177,72,"id"],[1088,76,1177,74],[1088,105,1177,103],[1088,106,1177,104],[1089,14,1178,12],[1090,14,1179,12],[1090,21,1179,19],[1090,25,1179,23],[1091,12,1180,10],[1092,12,1182,10],[1092,19,1182,17,"projectile"],[1092,29,1182,27],[1093,10,1183,8],[1093,11,1183,9],[1093,12,1183,10],[1093,13,1183,11,"filter"],[1093,19,1183,17],[1093,20,1183,18,"Boolean"],[1093,27,1183,25],[1093,28,1183,26],[1094,8,1184,6],[1094,9,1184,7],[1094,10,1184,8],[1095,6,1185,4],[1095,7,1185,5],[1097,6,1187,4],[1098,6,1188,4],[1098,12,1188,10,"impactInterval"],[1098,26,1188,24],[1098,29,1188,27,"setInterval"],[1098,40,1188,38],[1098,41,1188,39,"processProjectileImpacts"],[1098,65,1188,63],[1098,67,1188,65],[1098,69,1188,67],[1098,70,1188,68],[1099,6,1189,4],[1099,13,1189,11],[1099,19,1189,17,"clearInterval"],[1099,32,1189,30],[1099,33,1189,31,"impactInterval"],[1099,47,1189,45],[1099,48,1189,46],[1100,4,1190,2],[1100,5,1190,3],[1100,7,1190,5],[1100,9,1190,7],[1100,10,1190,8],[1100,11,1190,9],[1100,12,1190,10],[1102,4,1192,2],[1103,4,1193,2],[1103,10,1193,8,"saveAbilityData"],[1103,25,1193,23],[1103,28,1193,26],[1103,32,1193,26,"useCallback"],[1103,38,1193,37],[1103,39,1193,37,"useCallback"],[1103,50,1193,37],[1103,52,1193,38],[1103,58,1193,44],[1104,6,1194,4],[1104,10,1194,8,"combatState"],[1104,21,1194,19],[1104,22,1194,20,"abilityManager"],[1104,36,1194,34],[1104,38,1194,36],[1105,8,1195,6],[1105,14,1195,12,"abilityData"],[1105,25,1195,23],[1105,28,1195,26,"combatState"],[1105,39,1195,37],[1105,40,1195,38,"abilityManager"],[1105,54,1195,52],[1105,55,1195,53,"getSaveData"],[1105,66,1195,64],[1105,67,1195,65],[1105,68,1195,66],[1106,8,1196,6,"console"],[1106,15,1196,13],[1106,16,1196,14,"log"],[1106,19,1196,17],[1106,20,1196,18],[1106,70,1196,68],[1106,72,1196,70,"abilityData"],[1106,83,1196,81],[1106,84,1196,82],[1107,8,1197,6,"game"],[1107,12,1197,10],[1107,13,1197,11,"updateAbilityData"],[1107,30,1197,28],[1107,31,1197,29,"abilityData"],[1107,42,1197,40],[1107,43,1197,41],[1108,6,1198,4],[1109,4,1199,2],[1109,5,1199,3],[1109,7,1199,5],[1109,8,1199,6,"combatState"],[1109,19,1199,17],[1109,20,1199,18,"abilityManager"],[1109,34,1199,32],[1109,36,1199,34,"game"],[1109,40,1199,38],[1109,41,1199,39,"updateAbilityData"],[1109,58,1199,56],[1109,59,1199,57],[1109,60,1199,58],[1110,4,1201,2],[1110,10,1201,8,"contextValue"],[1110,22,1201,39],[1110,25,1201,42,"React"],[1110,30,1201,47],[1110,31,1201,47,"default"],[1110,38,1201,47],[1110,39,1201,48,"useMemo"],[1110,46,1201,55],[1110,47,1201,56],[1110,54,1201,63],[1111,6,1202,4,"combatState"],[1111,17,1202,15],[1112,6,1203,4,"projectiles"],[1112,17,1203,15],[1113,6,1204,4,"startCombat"],[1113,17,1204,15],[1114,6,1205,4,"stopCombat"],[1114,16,1205,14],[1115,6,1206,4,"equipAbility"],[1115,18,1206,16],[1116,6,1207,4,"handleEnemyKill"],[1116,21,1207,19],[1117,6,1208,4,"getDeck"],[1117,13,1208,11],[1118,6,1209,4,"getAvailableAbilities"],[1118,27,1209,25],[1119,6,1210,4,"upgradeAbility"],[1119,20,1210,18],[1120,6,1211,4,"spawnEnemy"],[1120,16,1211,14],[1121,6,1212,4,"spawnBoss"],[1121,15,1212,13],[1122,6,1213,4,"clearAllEnemies"],[1122,21,1213,19],[1123,6,1214,4,"clearSpecificEnemy"],[1123,24,1214,22],[1124,6,1215,4],[1125,6,1216,4,"findClosestEnemy"],[1125,22,1216,20],[1126,6,1217,4,"updateNinjaPosition"],[1126,25,1217,23],[1127,6,1218,4,"setManualControlActive"],[1127,28,1218,26],[1128,6,1219,4,"lastExplosionTime"],[1128,23,1219,21],[1129,6,1220,4,"useAbilityManually"],[1129,24,1220,22],[1130,6,1220,24],[1131,6,1221,4,"saveAbilityData"],[1131,21,1221,19],[1132,6,1221,21],[1133,6,1222,4,"shadowClone"],[1133,17,1222,15],[1133,19,1222,17,"combatState"],[1133,30,1222,28],[1133,31,1222,29,"shadowClone"],[1133,42,1222,40],[1133,43,1222,42],[1134,4,1223,2],[1134,5,1223,3],[1134,6,1223,4],[1134,8,1223,6],[1135,4,1224,4],[1136,4,1225,4],[1137,4,1226,4,"combatState"],[1137,15,1226,15],[1137,17,1227,4,"projectiles"],[1137,28,1227,15],[1137,30,1228,4,"lastExplosionTime"],[1137,47,1228,21],[1138,4,1229,4],[1139,4,1230,4,"combatState"],[1139,15,1230,15],[1139,16,1230,16,"abilityManager"],[1139,30,1230,30],[1139,32,1231,4,"combatState"],[1139,43,1231,15],[1139,44,1231,16,"enemies"],[1139,51,1231,23],[1139,53,1232,4,"combatState"],[1139,64,1232,15],[1139,65,1232,16,"shadowClone"],[1139,76,1232,27],[1140,4,1232,29],[1141,4,1233,4,"useAbilityManually"],[1141,22,1233,22],[1142,4,1233,24],[1143,4,1234,4,"saveAbilityData"],[1143,19,1234,19],[1143,20,1234,21],[1144,4,1234,21],[1144,5,1235,3],[1144,6,1235,4],[1145,4,1237,2],[1145,24,1238,4],[1145,28,1238,4,"_reactJsxDevRuntime"],[1145,47,1238,4],[1145,48,1238,4,"jsxDEV"],[1145,54,1238,4],[1145,56,1238,5,"CombatContext"],[1145,69,1238,18],[1145,70,1238,19,"Provider"],[1145,78,1238,27],[1146,6,1238,28,"value"],[1146,11,1238,33],[1146,13,1238,35,"contextValue"],[1146,25,1238,48],[1147,6,1238,48,"children"],[1147,14,1238,48],[1147,16,1239,7,"children"],[1148,4,1239,15],[1149,6,1239,15,"fileName"],[1149,14,1239,15],[1149,16,1239,15,"_jsxFileName"],[1149,28,1239,15],[1150,6,1239,15,"lineNumber"],[1150,16,1239,15],[1151,6,1239,15,"columnNumber"],[1151,18,1239,15],[1152,4,1239,15],[1152,11,1240,28],[1152,12,1240,29],[1153,2,1242,0],[1153,3,1242,1],[1154,0,1242,2],[1154,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","deadEnemiesToProcess.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMO;mBJI;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;8FSU,uDT;mCUY;SVkB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}