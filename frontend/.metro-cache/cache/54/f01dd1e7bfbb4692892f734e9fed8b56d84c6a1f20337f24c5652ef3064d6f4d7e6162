{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":111},"end":{"line":2,"column":62,"index":173}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _react = require(_dependencyMap[1], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNative = require(_dependencyMap[2], \"react-native\");\n  var _engineCombatEngine = require(_dependencyMap[3], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[4], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[5], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[6], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[7], \"react/jsx-dev-runtime\");\n  var CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  var useCombat = () => {\n    _s();\n    var context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  var enemyCounter = 0; // Global counter for unique enemy IDs\n\n  var CombatProvider = _ref => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    var children = _ref.children;\n    var game = (0, _GameContext.useGame)();\n    var _useZone = (0, _ZoneContext.useZone)(),\n      currentZone = _useZone.currentZone,\n      currentZoneLevel = _useZone.currentZoneLevel,\n      recordEnemyKill = _useZone.recordEnemyKill,\n      spawnZoneEnemy = _useZone.spawnZoneEnemy;\n\n    // Define initialCombatState before using it\n    var initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    var _useState = (0, _react.useState)(initialCombatState),\n      _useState2 = (0, _slicedToArray.default)(_useState, 2),\n      combatState = _useState2[0],\n      setCombatState = _useState2[1];\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        var effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    var _useState3 = (0, _react.useState)([]),\n      _useState4 = (0, _slicedToArray.default)(_useState3, 2),\n      projectiles = _useState4[0],\n      setProjectiles = _useState4[1];\n    var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray.default)(_useState5, 2),\n      lastExplosionTime = _useState6[0],\n      setLastExplosionTime = _useState6[1];\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    var handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      var xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      var goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    // CRITICAL FIX: Use React ref to capture dead enemies for XP processing to avoid closure issues\n    var deadEnemiesRef = (0, _react.useRef)([]);\n    var handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        var newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        var newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        var effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          var enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          var effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            var newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                var healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            var MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            var SCREEN_WIDTH = 390;\n            var GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            var ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            var playerX = currentNinjaPosition.x;\n            var playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            var deltaX = playerX - enemy.position.x;\n            var deltaY = playerY - enemy.position.y;\n            var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            var ATTACK_RANGE = 50; // Enemy attack range\n            var ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  var isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    var baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    var attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    var playerDefense = newState.playerStats.defense;\n                    var finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    var newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                var normalizedX = deltaX / distance;\n                var normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                var randomFactor = 0.2; // 20% randomness\n                var finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                var finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                var newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                var newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          var cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            var CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              var target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                var cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (var i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        var allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Use React ref to store dead enemies to avoid closure scoping issues\n        deadEnemiesRef.current = [...allDeadEnemies]; // Store in ref for XP processing\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        var currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            var animationDuration = 750; // 750ms death fade\n            var isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        var lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        var beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        var afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        var MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        var MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        var now = Date.now();\n        var hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // BULK XP PROCESSING - Use ref to get dead enemies (FIXED: Closure scoping issue)\n      var deadEnemiesToProcess = deadEnemiesRef.current; // Get from ref instead of closure variable\n      if (deadEnemiesToProcess.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        var unprocessedEnemies = deadEnemiesToProcess; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG deadEnemiesToProcess xpAwarded status:`, deadEnemiesToProcess.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${deadEnemiesToProcess.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          var totalXP = 0;\n          var totalGold = 0;\n          var zoneKills = [];\n          var xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          var goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier;\n            totalGold += 10 * goldMultiplier;\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              var wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    var findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ninjaX = SCREEN_WIDTH / 2;\n      var ninjaY = GAME_AREA_HEIGHT / 2;\n      var closestEnemy = enemies[0];\n      var closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        var distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    var findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    var _useState7 = (0, _react.useState)({\n        x: 195,\n        y: 400\n      }),\n      _useState8 = (0, _slicedToArray.default)(_useState7, 2),\n      currentNinjaPosition = _useState8[0],\n      setCurrentNinjaPosition = _useState8[1];\n    var _useState9 = (0, _react.useState)(false),\n      _useState0 = (0, _slicedToArray.default)(_useState9, 2),\n      isManualControlActive = _useState0[0],\n      setIsManualControlActive = _useState0[1];\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    var updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    var setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    var castAbility = (state, slotIndex) => {\n      var deck = state.abilityManager.getDeck();\n      var ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      var damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      var isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        var ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        var ninjaY = currentNinjaPosition.y + 20;\n        var aoeRadius = ability.stats.aoeRadius;\n        var enemiesInRange = state.enemies.filter(enemy => {\n          var enemyX = enemy.position.x + 17.5; // Center of enemy\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        var target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        var targets = isAOE ? state.enemies.filter(enemy => {\n          var ninjaX = currentNinjaPosition.x + 20;\n          var ninjaY = currentNinjaPosition.y + 20;\n          var enemyX = enemy.position.x + 17.5;\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        var cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        var cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    var createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      var ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      var ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      var ENEMY_SIZE = 35;\n      var projectileId = `proj_${Date.now()}_${Math.random()}`;\n      var projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    var spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      var zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      var combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    var spawnBasicTestEnemy = state => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140;\n      var ENEMY_SIZE = 35;\n      var x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    var startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    var stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    var equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    var getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    var getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    var upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    var clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    var spawnEnemy = position => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      var x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    var spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    var clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    var useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      var isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      var currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      var success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          var newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      var tickInterval = _reactNative.Platform.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${_reactNative.Platform.OS}`);\n      var combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      var processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            var currentTime = Date.now();\n            var startTime = projectile.startTime || currentTime;\n            var elapsedTime = currentTime - startTime;\n            var progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                var newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  var impactX = projectile.targetX;\n                  var impactY = projectile.targetY;\n                  var enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    var enemyX = enemy.position.x + 17.5; // Center of enemy\n                    var enemyY = enemy.position.y + 17.5;\n                    var distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      var newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  var enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    var enemy = newState.enemies[enemyIndex];\n                    var newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            var timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      var impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    var saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        var abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    var contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"MDeq8hWzWP3Z+s+8FtZeHd86Tq0=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1181,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1241,2],[27,6,1241,2,"_babelRuntimeHelpersSlicedToArray"],[27,39,1241,2],[27,42,1241,2,"require"],[27,49,1241,2],[27,50,1241,2,"_dependencyMap"],[27,64,1241,2],[28,2,1241,2],[28,6,1241,2,"_slicedToArray"],[28,20,1241,2],[28,23,1241,2,"_interopDefault"],[28,38,1241,2],[28,39,1241,2,"_babelRuntimeHelpersSlicedToArray"],[28,72,1241,2],[29,2,1,0],[29,6,1,0,"_react"],[29,12,1,0],[29,15,1,0,"require"],[29,22,1,0],[29,23,1,0,"_dependencyMap"],[29,37,1,0],[30,2,1,0],[30,6,1,0,"React"],[30,11,1,0],[30,14,1,0,"_interopDefault"],[30,29,1,0],[30,30,1,0,"_react"],[30,36,1,0],[31,2,2,0],[31,6,2,0,"_reactNative"],[31,18,2,0],[31,21,2,0,"require"],[31,28,2,0],[31,29,2,0,"_dependencyMap"],[31,43,2,0],[32,2,3,0],[32,6,3,0,"_engineCombatEngine"],[32,25,3,0],[32,28,3,0,"require"],[32,35,3,0],[32,36,3,0,"_dependencyMap"],[32,50,3,0],[33,2,4,0],[33,6,4,0,"_typesAbilityTypes"],[33,24,4,0],[33,27,4,0,"require"],[33,34,4,0],[33,35,4,0,"_dependencyMap"],[33,49,4,0],[34,2,5,0],[34,6,5,0,"_GameContext"],[34,18,5,0],[34,21,5,0,"require"],[34,28,5,0],[34,29,5,0,"_dependencyMap"],[34,43,5,0],[35,2,6,0],[35,6,6,0,"_ZoneContext"],[35,18,6,0],[35,21,6,0,"require"],[35,28,6,0],[35,29,6,0,"_dependencyMap"],[35,43,6,0],[36,2,6,40],[36,6,6,40,"_reactJsxDevRuntime"],[36,25,6,40],[36,28,6,40,"require"],[36,35,6,40],[36,36,6,40,"_dependencyMap"],[36,50,6,40],[37,2,94,0],[37,6,94,6,"CombatContext"],[37,19,94,19],[37,35,94,22],[37,39,94,22,"createContext"],[37,45,94,35],[37,46,94,35,"createContext"],[37,59,94,35],[37,61,94,67,"undefined"],[37,70,94,76],[37,71,94,77],[38,2,96,7],[38,6,96,13,"useCombat"],[38,15,96,22],[38,18,96,25,"useCombat"],[38,19,96,25],[38,24,96,50],[39,4,96,50,"_s"],[39,6,96,50],[40,4,97,2],[40,8,97,8,"context"],[40,15,97,15],[40,18,97,18],[40,22,97,18,"useContext"],[40,28,97,28],[40,29,97,28,"useContext"],[40,39,97,28],[40,41,97,29,"CombatContext"],[40,54,97,42],[40,55,97,43],[41,4,98,2],[41,8,98,6],[41,9,98,7,"context"],[41,16,98,14],[41,18,98,16],[42,6,99,4],[42,12,99,10],[42,16,99,14,"Error"],[42,21,99,19],[42,22,99,20],[42,70,99,68],[42,71,99,69],[43,4,100,2],[44,4,101,2],[44,11,101,9,"context"],[44,18,101,16],[45,2,102,0],[45,3,102,1],[46,2,102,2,"_s"],[46,4,102,2],[46,5,96,13,"useCombat"],[46,14,96,22],[47,2,104,0],[47,6,104,4,"enemyCounter"],[47,18,104,16],[47,21,104,19],[47,22,104,20],[47,23,104,21],[47,24,104,22],[49,2,106,7],[49,6,106,13,"CombatProvider"],[49,20,106,27],[49,23,106,30,"_ref"],[49,27,106,30],[49,31,106,73],[50,4,106,73,"_s4"],[50,7,106,73],[51,4,106,73],[51,8,106,73,"_s3"],[51,11,106,73],[51,14,106,73,"$RefreshSig$"],[51,26,106,73],[52,4,106,73],[52,8,106,33,"children"],[52,16,106,41],[52,19,106,41,"_ref"],[52,23,106,41],[52,24,106,33,"children"],[52,32,106,41],[53,4,107,2],[53,8,107,8,"game"],[53,12,107,12],[53,15,107,15],[53,19,107,15,"useGame"],[53,31,107,22],[53,32,107,22,"useGame"],[53,39,107,22],[53,41,107,23],[53,42,107,24],[54,4,108,2],[54,8,108,2,"_useZone"],[54,16,108,2],[54,19,108,77],[54,23,108,77,"useZone"],[54,35,108,84],[54,36,108,84,"useZone"],[54,43,108,84],[54,45,108,85],[54,46,108,86],[55,6,108,10,"currentZone"],[55,17,108,21],[55,20,108,21,"_useZone"],[55,28,108,21],[55,29,108,10,"currentZone"],[55,40,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[56,25,108,39,"_useZone"],[56,33,108,39],[56,34,108,23,"currentZoneLevel"],[56,50,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[57,24,108,56,"_useZone"],[57,32,108,56],[57,33,108,41,"recordEnemyKill"],[57,48,108,56],[58,6,108,58,"spawnZoneEnemy"],[58,20,108,72],[58,23,108,72,"_useZone"],[58,31,108,72],[58,32,108,58,"spawnZoneEnemy"],[58,46,108,72],[60,4,110,2],[61,4,111,2],[61,8,111,8,"initialCombatState"],[61,26,111,39],[61,29,111,42],[62,6,112,4,"isInCombat"],[62,16,112,14],[62,18,112,16],[62,23,112,21],[63,6,113,4,"currentTick"],[63,17,113,15],[63,19,113,17],[63,20,113,18],[64,6,114,4,"enemies"],[64,13,114,11],[64,15,114,13],[64,17,114,15],[65,6,115,4,"abilityManager"],[65,20,115,18],[65,22,115,20],[65,26,115,24,"AbilityManager"],[65,44,115,38],[65,45,115,38,"AbilityManager"],[65,59,115,38],[65,60,115,39],[65,61,115,40],[66,6,116,4,"statusEffects"],[66,19,116,17],[66,21,116,19],[66,25,116,23,"StatusEffectManager"],[66,44,116,42],[66,45,116,42,"StatusEffectManager"],[66,64,116,42],[66,65,116,43],[66,66,116,44],[67,6,117,4,"playerStats"],[67,17,117,15],[67,19,117,17],[68,8,118,6,"attack"],[68,14,118,12],[68,16,118,14],[68,18,118,16],[69,8,118,18],[70,8,119,6,"defense"],[70,15,119,13],[70,17,119,15],[70,18,119,16],[71,8,120,6,"health"],[71,14,120,12],[71,16,120,14],[71,19,120,17],[72,8,121,6,"maxHealth"],[72,17,121,15],[72,19,121,17],[72,22,121,20],[73,8,122,6,"critChance"],[73,18,122,16],[73,20,122,18],[73,21,122,19],[74,8,123,6,"critDamage"],[74,18,123,16],[74,20,123,18],[74,23,123,21],[75,8,124,6,"cooldownReduction"],[75,25,124,23],[75,27,124,25],[76,6,125,4],[77,4,126,2],[77,5,126,3],[78,4,128,2],[78,8,128,2,"_useState"],[78,17,128,2],[78,20,128,40],[78,24,128,40,"useState"],[78,30,128,48],[78,31,128,48,"useState"],[78,39,128,48],[78,41,128,62,"initialCombatState"],[78,59,128,80],[78,60,128,81],[79,6,128,81,"_useState2"],[79,16,128,81],[79,23,128,81,"_slicedToArray"],[79,37,128,81],[79,38,128,81,"default"],[79,45,128,81],[79,47,128,81,"_useState"],[79,56,128,81],[80,6,128,9,"combatState"],[80,17,128,20],[80,20,128,20,"_useState2"],[80,30,128,20],[81,6,128,22,"setCombatState"],[81,20,128,36],[81,23,128,36,"_useState2"],[81,33,128,36],[83,4,130,2],[84,4,131,2],[84,8,131,2,"useEffect"],[84,14,131,11],[84,15,131,11,"useEffect"],[84,24,131,11],[84,26,131,12],[84,32,131,18],[85,6,132,4],[85,10,132,8,"game"],[85,14,132,12],[85,15,132,13,"gameState"],[85,24,132,22],[85,25,132,23,"abilityData"],[85,36,132,34],[85,40,132,38,"combatState"],[85,51,132,49],[85,52,132,50,"abilityManager"],[85,66,132,64],[85,68,132,66],[86,8,133,6,"console"],[86,15,133,13],[86,16,133,14,"log"],[86,19,133,17],[86,20,133,18],[86,68,133,66],[86,70,133,68,"game"],[86,74,133,72],[86,75,133,73,"gameState"],[86,84,133,82],[86,85,133,83,"abilityData"],[86,96,133,94],[86,97,133,95],[87,8,134,6,"combatState"],[87,19,134,17],[87,20,134,18,"abilityManager"],[87,34,134,32],[87,35,134,33,"restoreFromSaveData"],[87,54,134,52],[87,55,134,53,"game"],[87,59,134,57],[87,60,134,58,"gameState"],[87,69,134,67],[87,70,134,68,"abilityData"],[87,81,134,79],[87,82,134,80],[89,8,136,6],[90,8,137,6,"setCombatState"],[90,22,137,20],[90,23,137,21,"prev"],[90,27,137,25],[90,32,137,30],[91,10,137,32],[91,13,137,35,"prev"],[92,8,137,40],[92,9,137,41],[92,10,137,42],[92,11,137,43],[93,6,138,4],[94,4,139,2],[94,5,139,3],[94,7,139,5],[94,8,139,6,"game"],[94,12,139,10],[94,13,139,11,"gameState"],[94,22,139,20],[94,23,139,21,"abilityData"],[94,34,139,32],[94,36,139,34,"combatState"],[94,47,139,45],[94,48,139,46,"abilityManager"],[94,62,139,60],[94,63,139,61],[94,64,139,62],[96,4,141,2],[97,4,142,2],[97,8,142,2,"useEffect"],[97,14,142,11],[97,15,142,11,"useEffect"],[97,24,142,11],[97,26,142,12],[97,32,142,18],[98,6,143,4],[98,10,143,8,"game"],[98,14,143,12],[98,15,143,13,"gameState"],[98,24,143,22],[98,25,143,23,"ninja"],[98,30,143,28],[98,32,143,30],[99,8,144,6],[99,12,144,12,"effectiveStats"],[99,26,144,26],[99,29,144,29,"game"],[99,33,144,33],[99,34,144,34,"getEffectiveStats"],[99,51,144,51],[99,52,144,52],[99,53,144,53],[100,8,146,6,"setCombatState"],[100,22,146,20],[100,23,146,21,"prev"],[100,27,146,25],[100,31,146,29],[101,10,147,8],[102,10,148,8],[102,14,148,12,"prev"],[102,18,148,16],[102,19,148,17,"playerStats"],[102,30,148,28],[102,31,148,29,"maxHealth"],[102,40,148,38],[102,45,148,43],[102,48,148,46],[102,52,148,50,"prev"],[102,56,148,54],[102,57,148,55,"playerStats"],[102,68,148,66],[102,69,148,67,"attack"],[102,75,148,73],[102,80,148,78],[102,82,148,80],[102,84,148,82],[103,12,149,10,"console"],[103,19,149,17],[103,20,149,18,"log"],[103,23,149,21],[103,24,149,22],[103,60,149,58,"effectiveStats"],[103,74,149,72],[103,75,149,73,"health"],[103,81,149,79],[103,93,149,91,"effectiveStats"],[103,107,149,105],[103,108,149,106,"attack"],[103,114,149,112],[103,127,149,125,"effectiveStats"],[103,141,149,139],[103,142,149,140,"defense"],[103,149,149,147],[103,151,149,149],[103,152,149,150],[104,12,151,10],[104,19,151,17],[105,14,152,12],[105,17,152,15,"prev"],[105,21,152,19],[106,14,153,12,"playerStats"],[106,25,153,23],[106,27,153,25],[107,16,154,14,"attack"],[107,22,154,20],[107,24,154,22,"effectiveStats"],[107,38,154,36],[107,39,154,37,"attack"],[107,45,154,43],[108,16,155,14,"defense"],[108,23,155,21],[108,25,155,23,"effectiveStats"],[108,39,155,37],[108,40,155,38,"defense"],[108,47,155,45],[109,16,156,14,"health"],[109,22,156,20],[109,24,156,22,"effectiveStats"],[109,38,156,36],[109,39,156,37,"health"],[109,45,156,43],[110,16,156,45],[111,16,157,14,"maxHealth"],[111,25,157,23],[111,27,157,25,"effectiveStats"],[111,41,157,39],[111,42,157,40,"health"],[111,48,157,46],[112,16,158,14,"critChance"],[112,26,158,24],[112,28,158,26,"effectiveStats"],[112,42,158,40],[112,43,158,41,"critChance"],[112,53,158,51],[112,57,158,55],[112,58,158,56],[113,16,159,14,"critDamage"],[113,26,159,24],[113,28,159,26,"effectiveStats"],[113,42,159,40],[113,43,159,41,"critDamage"],[113,53,159,51],[113,57,159,55],[113,60,159,58],[114,16,160,14,"cooldownReduction"],[114,33,160,31],[114,35,160,33,"effectiveStats"],[114,49,160,47],[114,50,160,48,"cooldownReduction"],[114,67,160,65],[114,71,160,69],[115,14,161,12],[116,12,162,10],[116,13,162,11],[117,10,163,8],[118,10,164,8],[118,17,164,15,"prev"],[118,21,164,19],[119,8,165,6],[119,9,165,7],[119,10,165,8],[120,6,166,4],[121,4,167,2],[121,5,167,3],[121,7,167,5],[121,8,167,6,"game"],[121,12,167,10],[121,13,167,11,"gameState"],[121,22,167,20],[121,23,167,21,"ninja"],[121,28,167,26],[121,29,167,27],[121,30,167,28],[122,4,169,2],[122,8,169,2,"_useState3"],[122,18,169,2],[122,21,169,40],[122,25,169,40,"useState"],[122,31,169,48],[122,32,169,48,"useState"],[122,40,169,48],[122,42,169,69],[122,44,169,71],[122,45,169,72],[123,6,169,72,"_useState4"],[123,16,169,72],[123,23,169,72,"_slicedToArray"],[123,37,169,72],[123,38,169,72,"default"],[123,45,169,72],[123,47,169,72,"_useState3"],[123,57,169,72],[124,6,169,9,"projectiles"],[124,17,169,20],[124,20,169,20,"_useState4"],[124,30,169,20],[125,6,169,22,"setProjectiles"],[125,20,169,36],[125,23,169,36,"_useState4"],[125,33,169,36],[126,4,170,2],[126,8,170,2,"_useState5"],[126,18,170,2],[126,21,170,52],[126,25,170,52,"useState"],[126,31,170,60],[126,32,170,60,"useState"],[126,40,170,60],[126,42,170,69],[126,43,170,70],[126,44,170,71],[127,6,170,71,"_useState6"],[127,16,170,71],[127,23,170,71,"_slicedToArray"],[127,37,170,71],[127,38,170,71,"default"],[127,45,170,71],[127,47,170,71,"_useState5"],[127,57,170,71],[128,6,170,9,"lastExplosionTime"],[128,23,170,26],[128,26,170,26,"_useState6"],[128,36,170,26],[129,6,170,28,"setLastExplosionTime"],[129,26,170,48],[129,29,170,48,"_useState6"],[129,39,170,48],[130,4,171,2],[131,4,172,2],[133,4,174,2],[134,4,175,2],[134,8,175,8,"handleEnemyKill"],[134,23,175,23],[134,26,175,26],[134,30,175,26,"useCallback"],[134,36,175,37],[134,37,175,37,"useCallback"],[134,48,175,37],[134,50,175,39,"enemy"],[134,55,175,57],[134,59,175,62],[135,6,176,4],[136,6,177,4],[136,10,177,10,"xpReward"],[136,18,177,18],[136,21,177,21],[136,22,177,22,"enemy"],[136,27,177,27],[136,28,177,28,"zoneXP"],[136,34,177,34],[136,38,177,38],[136,39,177,39],[136,44,177,44,"game"],[136,48,177,48],[136,49,177,49,"gameState"],[136,58,177,58],[136,59,177,59,"subscriptionBenefits"],[136,79,177,79],[136,81,177,81,"xp_multiplier"],[136,94,177,94],[136,98,177,98],[136,101,177,101],[136,102,177,102],[137,6,178,4],[137,10,178,10,"goldReward"],[137,20,178,20],[137,23,178,23],[137,25,178,25],[137,29,178,29,"game"],[137,33,178,33],[137,34,178,34,"gameState"],[137,43,178,43],[137,44,178,44,"subscriptionBenefits"],[137,64,178,64],[137,66,178,66,"drop_multiplier"],[137,81,178,81],[137,85,178,85],[137,88,178,88],[137,89,178,89],[138,6,180,4,"console"],[138,13,180,11],[138,14,180,12,"log"],[138,17,180,15],[138,18,180,16],[138,46,180,44,"xpReward"],[138,54,180,52],[138,65,180,63,"goldReward"],[138,75,180,73],[138,88,180,86,"enemy"],[138,93,180,91],[138,94,180,92,"name"],[138,98,180,96],[138,100,180,98],[138,101,180,99],[140,6,182,4],[141,6,183,4,"game"],[141,10,183,8],[141,11,183,9,"updateNinja"],[141,22,183,20],[141,23,183,21,"prev"],[141,27,183,25],[141,32,183,30],[142,8,184,6,"experience"],[142,18,184,16],[142,20,184,18,"prev"],[142,24,184,22],[142,25,184,23,"experience"],[142,35,184,33],[142,38,184,36,"xpReward"],[142,46,184,44],[143,8,185,6,"gold"],[143,12,185,10],[143,14,185,12,"prev"],[143,18,185,16],[143,19,185,17,"gold"],[143,23,185,21],[143,26,185,24,"goldReward"],[144,6,186,4],[144,7,186,5],[144,8,186,6],[144,9,186,7],[146,6,188,4],[147,6,189,4,"setCombatState"],[147,20,189,18],[147,21,189,19,"prevState"],[147,30,189,28],[147,35,189,33],[148,8,190,6],[148,11,190,9,"prevState"],[148,20,190,18],[149,8,191,6,"enemies"],[149,15,191,13],[149,17,191,15,"prevState"],[149,26,191,24],[149,27,191,25,"enemies"],[149,34,191,32],[149,35,191,33,"map"],[149,38,191,36],[149,39,191,37,"e"],[149,40,191,38],[149,44,192,8,"e"],[149,45,192,9],[149,46,192,10,"id"],[149,48,192,12],[149,53,192,17,"enemy"],[149,58,192,22],[149,59,192,23,"id"],[149,61,192,25],[149,64,192,28],[150,10,192,30],[150,13,192,33,"e"],[150,14,192,34],[151,10,192,36,"xpAwarded"],[151,19,192,45],[151,21,192,47],[152,8,192,52],[152,9,192,53],[152,12,192,56,"e"],[152,13,193,6],[153,6,194,4],[153,7,194,5],[153,8,194,6],[153,9,194,7],[155,6,196,4],[156,6,197,4],[156,10,197,8,"enemy"],[156,15,197,13],[156,16,197,14,"zoneTypeId"],[156,26,197,24],[156,28,197,26],[157,8,198,6,"recordEnemyKill"],[157,23,198,21],[157,24,198,22],[158,10,199,8,"id"],[158,12,199,10],[158,14,199,12,"enemy"],[158,19,199,17],[158,20,199,18,"id"],[158,22,199,20],[159,10,200,8,"typeId"],[159,16,200,14],[159,18,200,16,"enemy"],[159,23,200,21],[159,24,200,22,"zoneTypeId"],[159,34,200,32],[160,10,201,8,"name"],[160,14,201,12],[160,16,201,14,"enemy"],[160,21,201,19],[160,22,201,20,"name"],[160,26,201,24],[161,10,202,8,"icon"],[161,14,202,12],[161,16,202,14],[161,20,202,18],[162,10,203,8,"hp"],[162,12,203,10],[162,14,203,12],[162,15,203,13],[163,10,204,8,"maxHP"],[163,15,204,13],[163,17,204,15,"enemy"],[163,22,204,20],[163,23,204,21,"maxHealth"],[163,32,204,30],[164,10,205,8,"attack"],[164,16,205,14],[164,18,205,16,"enemy"],[164,23,205,21],[164,24,205,22,"stats"],[164,29,205,27],[164,30,205,28,"attack"],[164,36,205,34],[165,10,206,8,"xp"],[165,12,206,10],[165,14,206,12,"enemy"],[165,19,206,17],[165,20,206,18,"zoneXP"],[165,26,206,24],[165,30,206,28],[165,31,206,29],[166,10,207,8,"position"],[166,18,207,16],[166,20,207,18,"enemy"],[166,25,207,23],[166,26,207,24,"position"],[167,8,208,6],[167,9,208,7],[167,10,208,8],[168,6,209,4],[169,4,210,2],[169,5,210,3],[169,7,210,5],[169,8,210,6,"game"],[169,12,210,10],[169,13,210,11,"updateNinja"],[169,24,210,22],[169,26,210,24,"game"],[169,30,210,28],[169,31,210,29,"gameState"],[169,40,210,38],[169,41,210,39,"subscriptionBenefits"],[169,61,210,59],[169,63,210,61,"recordEnemyKill"],[169,78,210,76],[169,79,210,77],[169,80,210,78],[171,4,212,2],[172,4,213,2],[173,4,214,2],[174,4,215,2],[174,8,215,8,"deadEnemiesRef"],[174,22,215,22],[174,25,215,25],[174,29,215,25,"useRef"],[174,35,215,31],[174,36,215,31,"useRef"],[174,42,215,31],[174,44,215,47],[174,46,215,49],[174,47,215,50],[175,4,217,2],[175,8,217,8,"handleCombatTick"],[175,24,217,24],[175,27,217,27,"React"],[175,32,217,32],[175,33,217,32,"default"],[175,40,217,32],[175,41,217,33,"useCallback"],[175,52,217,44],[175,53,217,45],[175,59,217,51],[176,6,217,51],[176,10,217,51,"_s2"],[176,13,217,51],[176,16,217,51,"$RefreshSig$"],[176,28,217,51],[177,6,218,4,"console"],[177,13,218,11],[177,14,218,12,"log"],[177,17,218,15],[177,18,218,16],[177,87,218,85],[177,88,218,86],[178,6,219,4,"console"],[178,13,219,11],[178,14,219,12,"log"],[178,17,219,15],[178,18,219,16],[178,65,219,63,"isManualControlActive"],[178,86,219,84],[178,99,219,97,"game"],[178,103,219,101],[178,104,219,102,"gameState"],[178,113,219,111],[178,114,219,112,"isAlive"],[178,121,219,119],[178,123,219,121],[178,124,219,122],[179,6,221,4,"_s2"],[179,9,221,4],[179,10,221,4,"setCombatState"],[179,24,221,18],[179,25,221,18,"_s2"],[179,28,221,18],[179,29,221,19,"prev"],[179,33,221,23],[179,37,221,27],[180,8,221,27,"_s2"],[180,11,221,27],[181,8,222,6],[181,12,222,12,"newTick"],[181,19,222,19],[181,22,222,22,"combatEngine"],[181,41,222,34],[181,42,222,34,"combatEngine"],[181,54,222,34],[181,55,222,35,"getCurrentTick"],[181,69,222,49],[181,70,222,50],[181,71,222,51],[182,8,223,6],[182,12,223,12,"newState"],[182,20,223,20],[182,23,223,23],[183,10,223,25],[183,13,223,28,"prev"],[183,17,223,32],[184,10,223,34,"currentTick"],[184,21,223,45],[184,23,223,47,"newTick"],[185,8,223,55],[185,9,223,56],[186,8,225,6],[186,12,225,10],[186,13,225,11,"newState"],[186,21,225,19],[186,22,225,20,"isInCombat"],[186,32,225,30],[186,34,225,32],[186,41,225,39,"newState"],[186,49,225,47],[188,8,227,6],[189,8,228,6,"newState"],[189,16,228,14],[189,17,228,15,"abilityManager"],[189,31,228,29],[189,32,228,30,"updateCooldowns"],[189,47,228,45],[189,48,228,46,"newTick"],[189,55,228,53],[189,56,228,54],[191,8,230,6],[192,8,231,6],[192,12,231,12,"effectResults"],[192,25,231,25],[192,28,231,28,"newState"],[192,36,231,36],[192,37,231,37,"statusEffects"],[192,50,231,50],[192,51,231,51,"processTick"],[192,62,231,62],[192,63,231,63,"newTick"],[192,70,231,70],[192,71,231,71],[194,8,233,6],[195,8,234,6,"effectResults"],[195,21,234,19],[195,22,234,20,"forEach"],[195,29,234,27],[195,30,234,28],[195,31,234,29,"results"],[195,38,234,36],[195,40,234,38,"entityId"],[195,48,234,46],[195,53,234,51],[196,10,235,8],[196,14,235,14,"enemyIndex"],[196,24,235,24],[196,27,235,27,"newState"],[196,35,235,35],[196,36,235,36,"enemies"],[196,43,235,43],[196,44,235,44,"findIndex"],[196,53,235,53],[196,54,235,54,"e"],[196,55,235,55],[196,59,235,59,"e"],[196,60,235,60],[196,61,235,61,"id"],[196,63,235,63],[196,68,235,68,"entityId"],[196,76,235,76],[196,77,235,77],[197,10,236,8],[197,14,236,12,"enemyIndex"],[197,24,236,22],[197,28,236,26],[197,29,236,27],[197,31,236,29],[198,12,237,10,"results"],[198,19,237,17],[198,20,237,18,"forEach"],[198,27,237,25],[198,28,237,26,"result"],[198,34,237,32],[198,38,237,36],[199,14,238,12,"newState"],[199,22,238,20],[199,23,238,21,"enemies"],[199,30,238,28],[199,31,238,29,"enemyIndex"],[199,41,238,39],[199,42,238,40],[199,43,238,41,"health"],[199,49,238,47],[199,53,238,51,"result"],[199,59,238,57],[199,60,238,58,"damage"],[199,66,238,64],[200,14,239,12,"newState"],[200,22,239,20],[200,23,239,21,"enemies"],[200,30,239,28],[200,31,239,29,"enemyIndex"],[200,41,239,39],[200,42,239,40],[200,43,239,41,"lastDamaged"],[200,54,239,52],[200,57,239,55,"newTick"],[200,64,239,62],[201,12,240,10],[201,13,240,11],[201,14,240,12],[202,10,241,8],[203,8,242,6],[203,9,242,7],[203,10,242,8],[205,8,244,6],[206,8,245,6],[207,8,246,6],[207,12,246,10,"newState"],[207,20,246,18],[207,21,246,19,"playerStats"],[207,32,246,30],[207,36,246,34,"game"],[207,40,246,38],[207,41,246,39,"gameState"],[207,50,246,48],[207,51,246,49,"ninja"],[207,56,246,54],[207,58,246,56],[208,10,247,8],[208,14,247,14,"effectiveStats"],[208,28,247,28],[208,31,247,31,"game"],[208,35,247,35],[208,36,247,36,"getEffectiveStats"],[208,53,247,53],[208,54,247,54],[208,55,247,55],[210,10,249,8],[211,10,250,8],[211,14,250,12,"newState"],[211,22,250,20],[211,23,250,21,"playerStats"],[211,34,250,32],[211,35,250,33,"attack"],[211,41,250,39],[211,46,250,44,"effectiveStats"],[211,60,250,58],[211,61,250,59,"attack"],[211,67,250,65],[211,71,251,12,"newState"],[211,79,251,20],[211,80,251,21,"playerStats"],[211,91,251,32],[211,92,251,33,"defense"],[211,99,251,40],[211,104,251,45,"effectiveStats"],[211,118,251,59],[211,119,251,60,"defense"],[211,126,251,67],[211,130,252,12,"newState"],[211,138,252,20],[211,139,252,21,"playerStats"],[211,150,252,32],[211,151,252,33,"maxHealth"],[211,160,252,42],[211,165,252,47,"effectiveStats"],[211,179,252,61],[211,180,252,62,"maxHealth"],[211,189,252,71],[211,191,252,73],[212,12,254,10,"console"],[212,19,254,17],[212,20,254,18,"log"],[212,23,254,21],[212,24,254,22],[212,58,254,56,"newState"],[212,66,254,64],[212,67,254,65,"playerStats"],[212,78,254,76],[212,79,254,77,"attack"],[212,85,254,83],[212,91,254,89,"effectiveStats"],[212,105,254,103],[212,106,254,104,"attack"],[212,112,254,110],[212,125,254,123,"newState"],[212,133,254,131],[212,134,254,132,"playerStats"],[212,145,254,143],[212,146,254,144,"defense"],[212,153,254,151],[212,159,254,157,"effectiveStats"],[212,173,254,171],[212,174,254,172,"defense"],[212,181,254,179],[212,192,254,190,"newState"],[212,200,254,198],[212,201,254,199,"playerStats"],[212,212,254,210],[212,213,254,211,"maxHealth"],[212,222,254,220],[212,228,254,226,"effectiveStats"],[212,242,254,240],[212,243,254,241,"maxHealth"],[212,252,254,250],[212,254,254,252],[212,255,254,253],[214,12,256,10],[215,12,257,10],[215,16,257,14,"newHealth"],[215,25,257,23],[215,28,257,26,"newState"],[215,36,257,34],[215,37,257,35,"playerStats"],[215,48,257,46],[215,49,257,47,"health"],[215,55,257,53],[216,12,258,10],[216,16,258,14,"newState"],[216,24,258,22],[216,25,258,23,"playerStats"],[216,36,258,34],[216,37,258,35,"maxHealth"],[216,46,258,44],[216,51,258,49,"effectiveStats"],[216,65,258,63],[216,66,258,64,"maxHealth"],[216,75,258,73],[216,77,258,75],[217,14,259,12],[218,14,260,12],[218,18,260,16,"effectiveStats"],[218,32,260,30],[218,33,260,31,"maxHealth"],[218,42,260,40],[218,45,260,43,"newState"],[218,53,260,51],[218,54,260,52,"playerStats"],[218,65,260,63],[218,66,260,64,"maxHealth"],[218,75,260,73],[218,78,260,76],[218,81,260,79],[218,83,260,81],[219,16,261,14],[220,16,262,14],[220,20,262,20,"healthRatio"],[220,31,262,31],[220,34,262,34,"newState"],[220,42,262,42],[220,43,262,43,"playerStats"],[220,54,262,54],[220,55,262,55,"maxHealth"],[220,64,262,64],[220,67,262,67],[220,68,262,68],[220,71,263,16,"newState"],[220,79,263,24],[220,80,263,25,"playerStats"],[220,91,263,36],[220,92,263,37,"health"],[220,98,263,43],[220,101,263,46,"newState"],[220,109,263,54],[220,110,263,55,"playerStats"],[220,121,263,66],[220,122,263,67,"maxHealth"],[220,131,263,76],[220,134,263,79],[220,135,263,80],[221,16,264,14,"newHealth"],[221,25,264,23],[221,28,264,26,"Math"],[221,32,264,30],[221,33,264,31,"floor"],[221,38,264,36],[221,39,264,37,"effectiveStats"],[221,53,264,51],[221,54,264,52,"maxHealth"],[221,63,264,61],[221,66,264,64,"healthRatio"],[221,77,264,75],[221,78,264,76],[222,14,265,12],[222,15,265,13],[222,21,265,19],[222,25,265,23,"newState"],[222,33,265,31],[222,34,265,32,"playerStats"],[222,45,265,43],[222,46,265,44,"health"],[222,52,265,50],[222,55,265,53,"effectiveStats"],[222,69,265,67],[222,70,265,68,"maxHealth"],[222,79,265,77],[222,81,265,79],[223,16,266,14],[224,16,267,14,"newHealth"],[224,25,267,23],[224,28,267,26,"effectiveStats"],[224,42,267,40],[224,43,267,41,"maxHealth"],[224,52,267,50],[225,14,268,12],[226,14,269,12],[227,12,270,10],[228,12,272,10,"newState"],[228,20,272,18],[228,21,272,19,"playerStats"],[228,32,272,30],[228,35,272,33],[229,14,273,12],[229,17,273,15,"newState"],[229,25,273,23],[229,26,273,24,"playerStats"],[229,37,273,35],[230,14,274,12,"attack"],[230,20,274,18],[230,22,274,20,"effectiveStats"],[230,36,274,34],[230,37,274,35,"attack"],[230,43,274,41],[231,14,275,12,"defense"],[231,21,275,19],[231,23,275,21,"effectiveStats"],[231,37,275,35],[231,38,275,36,"defense"],[231,45,275,43],[232,14,276,12,"maxHealth"],[232,23,276,21],[232,25,276,23,"effectiveStats"],[232,39,276,37],[232,40,276,38,"maxHealth"],[232,49,276,47],[233,14,276,49],[234,14,277,12,"health"],[234,20,277,18],[234,22,277,20,"newHealth"],[234,31,277,29],[235,14,277,31],[236,14,278,12,"critChance"],[236,24,278,22],[236,26,278,24,"effectiveStats"],[236,40,278,38],[236,41,278,39,"critChance"],[236,51,278,49],[236,55,278,53,"newState"],[236,63,278,61],[236,64,278,62,"playerStats"],[236,75,278,73],[236,76,278,74,"critChance"],[236,86,278,84],[237,14,279,12,"critDamage"],[237,24,279,22],[237,26,279,24,"effectiveStats"],[237,40,279,38],[237,41,279,39,"critDamage"],[237,51,279,49],[237,55,279,53,"newState"],[237,63,279,61],[237,64,279,62,"playerStats"],[237,75,279,73],[237,76,279,74,"critDamage"],[237,86,279,84],[238,14,280,12,"cooldownReduction"],[238,31,280,29],[238,33,280,31,"effectiveStats"],[238,47,280,45],[238,48,280,46,"cooldownReduction"],[238,65,280,63],[238,69,280,67,"newState"],[238,77,280,75],[238,78,280,76,"playerStats"],[238,89,280,87],[238,90,280,88,"cooldownReduction"],[239,12,281,10],[239,13,281,11],[240,10,282,8],[242,10,284,8],[243,10,285,8],[243,14,285,12,"game"],[243,18,285,16],[243,19,285,17,"gameState"],[243,28,285,26],[243,29,285,27,"isAlive"],[243,36,285,34],[243,40,286,12,"game"],[243,44,286,16],[243,45,286,17,"gameState"],[243,54,286,26],[243,55,286,27,"ninja"],[243,60,286,32],[243,61,286,33,"health"],[243,67,286,39],[243,72,286,44,"effectiveStats"],[243,86,286,58],[243,87,286,59,"maxHealth"],[243,96,286,68],[243,100,287,12,"newState"],[243,108,287,20],[243,109,287,21,"playerStats"],[243,120,287,32],[243,121,287,33,"health"],[243,127,287,39],[243,130,287,42,"effectiveStats"],[243,144,287,56],[243,145,287,57,"maxHealth"],[243,154,287,66],[243,157,287,69],[243,160,287,72],[243,162,287,74],[244,12,288,10,"console"],[244,19,288,17],[244,20,288,18,"log"],[244,23,288,21],[244,24,288,22],[244,58,288,56,"newState"],[244,66,288,64],[244,67,288,65,"playerStats"],[244,78,288,76],[244,79,288,77,"health"],[244,85,288,83],[244,91,288,89,"game"],[244,95,288,93],[244,96,288,94,"gameState"],[244,105,288,103],[244,106,288,104,"ninja"],[244,111,288,109],[244,112,288,110,"health"],[244,118,288,116],[244,139,288,137],[244,140,288,138],[245,12,289,10,"newState"],[245,20,289,18],[245,21,289,19,"playerStats"],[245,32,289,30],[245,33,289,31,"health"],[245,39,289,37],[245,42,289,40,"game"],[245,46,289,44],[245,47,289,45,"gameState"],[245,56,289,54],[245,57,289,55,"ninja"],[245,62,289,60],[245,63,289,61,"health"],[245,69,289,67],[246,10,290,8],[247,8,291,6],[249,8,293,6],[250,8,294,6,"newState"],[250,16,294,14],[250,17,294,15,"enemies"],[250,24,294,22],[250,25,294,23,"forEach"],[250,32,294,30],[250,33,294,31,"enemy"],[250,38,294,36],[250,42,294,40],[251,10,295,8],[251,14,295,12],[251,15,295,13,"enemy"],[251,20,295,18],[251,21,295,19,"isBoss"],[251,27,295,25],[251,29,295,27],[252,12,295,29],[253,12,296,10],[254,12,297,10],[254,16,297,16,"MOVEMENT_SPEED"],[254,30,297,30],[254,33,297,33],[254,37,297,37],[254,38,297,38],[254,39,297,39],[255,12,298,10],[255,16,298,16,"SCREEN_WIDTH"],[255,28,298,28],[255,31,298,31],[255,34,298,34],[256,12,299,10],[256,16,299,16,"GAME_AREA_HEIGHT"],[256,32,299,32],[256,35,299,35],[256,38,299,38],[256,39,299,39],[256,40,299,40],[257,12,300,10],[257,16,300,16,"ENEMY_SIZE"],[257,26,300,26],[257,29,300,29],[257,31,300,31],[259,12,302,10],[260,12,303,10],[260,16,303,16,"playerX"],[260,23,303,23],[260,26,303,26,"currentNinjaPosition"],[260,46,303,46],[260,47,303,47,"x"],[260,48,303,48],[261,12,304,10],[261,16,304,16,"playerY"],[261,23,304,23],[261,26,304,26,"currentNinjaPosition"],[261,46,304,46],[261,47,304,47,"y"],[261,48,304,48],[263,12,306,10],[264,12,307,10],[264,16,307,16,"deltaX"],[264,22,307,22],[264,25,307,25,"playerX"],[264,32,307,32],[264,35,307,35,"enemy"],[264,40,307,40],[264,41,307,41,"position"],[264,49,307,49],[264,50,307,50,"x"],[264,51,307,51],[265,12,308,10],[265,16,308,16,"deltaY"],[265,22,308,22],[265,25,308,25,"playerY"],[265,32,308,32],[265,35,308,35,"enemy"],[265,40,308,40],[265,41,308,41,"position"],[265,49,308,49],[265,50,308,50,"y"],[265,51,308,51],[266,12,309,10],[266,16,309,16,"distance"],[266,24,309,24],[266,27,309,27,"Math"],[266,31,309,31],[266,32,309,32,"sqrt"],[266,36,309,36],[266,37,309,37,"deltaX"],[266,43,309,43],[266,46,309,46,"deltaX"],[266,52,309,52],[266,55,309,55,"deltaY"],[266,61,309,61],[266,64,309,64,"deltaY"],[266,70,309,70],[266,71,309,71],[268,12,311,10],[269,12,312,10],[269,16,312,16,"ATTACK_RANGE"],[269,28,312,28],[269,31,312,31],[269,33,312,33],[269,34,312,34],[269,35,312,35],[270,12,313,10],[270,16,313,16,"ATTACK_COOLDOWN"],[270,31,313,31],[270,34,313,34],[270,36,313,36],[270,37,313,37],[270,38,313,38],[272,12,315,10],[272,16,315,14,"distance"],[272,24,315,22],[272,28,315,26,"ATTACK_RANGE"],[272,40,315,38],[272,42,315,40],[273,14,316,12],[274,14,317,12],[274,18,317,16],[274,19,317,17,"enemy"],[274,24,317,22],[274,25,317,23,"lastAttackTick"],[274,39,317,37],[274,41,317,39,"enemy"],[274,46,317,44],[274,47,317,45,"lastAttackTick"],[274,61,317,59],[274,64,317,62],[274,65,317,63],[275,14,319,12],[275,18,319,16,"newState"],[275,26,319,24],[275,27,319,25,"currentTick"],[275,38,319,36],[275,41,319,39,"enemy"],[275,46,319,44],[275,47,319,45,"lastAttackTick"],[275,61,319,59],[275,65,319,63,"ATTACK_COOLDOWN"],[275,80,319,78],[275,82,319,80],[276,16,320,14],[277,16,321,14],[277,20,321,18],[277,21,321,19,"game"],[277,25,321,23],[277,26,321,24,"gameState"],[277,35,321,33],[277,36,321,34,"isAlive"],[277,43,321,41],[277,45,321,43],[278,18,322,16,"console"],[278,25,322,23],[278,26,322,24,"log"],[278,29,322,27],[278,30,322,28],[278,49,322,47,"enemy"],[278,54,322,52],[278,55,322,53,"name"],[278,59,322,57],[278,93,322,91],[278,94,322,92],[279,18,323,16],[280,18,324,16,"enemy"],[280,23,324,21],[280,24,324,22,"lastAttackTick"],[280,38,324,36],[280,41,324,39,"newState"],[280,49,324,47],[280,50,324,48,"currentTick"],[280,61,324,59],[281,16,325,14],[281,17,325,15],[281,23,325,21],[282,18,326,16],[283,18,327,16],[283,22,327,22,"isPlayerInvincible"],[283,40,327,40],[283,43,327,43,"game"],[283,47,327,47],[283,48,327,48,"gameState"],[283,57,327,57],[283,58,327,58,"isInvincible"],[283,70,327,70],[283,74,328,41,"game"],[283,78,328,45],[283,79,328,46,"gameState"],[283,88,328,55],[283,89,328,56,"invincibilityEndTime"],[283,109,328,76],[283,113,329,41,"Date"],[283,117,329,45],[283,118,329,46,"now"],[283,121,329,49],[283,122,329,50],[283,123,329,51],[283,126,329,54,"game"],[283,130,329,58],[283,131,329,59,"gameState"],[283,140,329,68],[283,141,329,69,"invincibilityEndTime"],[283,161,329,89],[284,18,331,16],[284,22,331,20,"isPlayerInvincible"],[284,40,331,38],[284,42,331,40],[285,20,332,18,"console"],[285,27,332,25],[285,28,332,26,"log"],[285,31,332,29],[285,32,332,30],[285,51,332,49,"enemy"],[285,56,332,54],[285,57,332,55,"name"],[285,61,332,59],[285,101,332,99],[285,102,332,100],[286,20,333,18],[287,20,334,18,"enemy"],[287,25,334,23],[287,26,334,24,"lastAttackTick"],[287,40,334,38],[287,43,334,41,"newState"],[287,51,334,49],[287,52,334,50,"currentTick"],[287,63,334,61],[288,18,335,16],[288,19,335,17],[288,25,335,23],[289,20,336,16],[290,20,337,16],[290,24,337,22,"baseAttack"],[290,34,337,32],[290,37,337,35,"enemy"],[290,42,337,40],[290,43,337,41,"stats"],[290,48,337,46],[290,49,337,47,"attack"],[290,55,337,53],[290,58,337,56],[290,61,337,59],[290,62,337,60],[290,63,337,61],[291,20,338,16],[291,24,338,22,"attackDamage"],[291,36,338,34],[291,39,338,37,"Math"],[291,43,338,41],[291,44,338,42,"floor"],[291,49,338,47],[291,50,338,48,"baseAttack"],[291,60,338,58],[291,64,338,62],[291,67,338,65],[291,70,338,68,"Math"],[291,74,338,72],[291,75,338,73,"random"],[291,81,338,79],[291,82,338,80],[291,83,338,81],[291,86,338,84],[291,89,338,87],[291,90,338,88],[291,91,338,89],[291,92,338,90],[291,93,338,91],[292,20,339,16],[292,24,339,22,"playerDefense"],[292,37,339,35],[292,40,339,38,"newState"],[292,48,339,46],[292,49,339,47,"playerStats"],[292,60,339,58],[292,61,339,59,"defense"],[292,68,339,66],[293,20,340,16],[293,24,340,22,"finalDamage"],[293,35,340,33],[293,38,340,36,"Math"],[293,42,340,40],[293,43,340,41,"max"],[293,46,340,44],[293,47,340,45],[293,48,340,46],[293,50,340,48,"attackDamage"],[293,62,340,60],[293,65,340,63,"Math"],[293,69,340,67],[293,70,340,68,"floor"],[293,75,340,73],[293,76,340,74,"playerDefense"],[293,89,340,87],[293,92,340,90],[293,95,340,93],[293,96,340,94],[293,97,340,95],[293,98,340,96],[293,99,340,97],[295,20,342,16,"console"],[295,27,342,23],[295,28,342,24,"log"],[295,31,342,27],[295,32,342,28],[295,53,342,49,"enemy"],[295,58,342,54],[295,59,342,55,"name"],[295,63,342,59],[295,86,342,82,"finalDamage"],[295,97,342,93],[295,109,342,105,"attackDamage"],[295,121,342,117],[295,132,342,128,"Math"],[295,136,342,132],[295,137,342,133,"floor"],[295,142,342,138],[295,143,342,139,"playerDefense"],[295,156,342,152],[295,159,342,155],[295,162,342,158],[295,163,342,159],[295,184,342,180],[295,185,342,181],[297,20,344,16],[298,20,345,16],[298,24,345,22,"newPlayerHealth"],[298,39,345,37],[298,42,345,40,"Math"],[298,46,345,44],[298,47,345,45,"max"],[298,50,345,48],[298,51,345,49],[298,52,345,50],[298,54,345,52,"newState"],[298,62,345,60],[298,63,345,61,"playerStats"],[298,74,345,72],[298,75,345,73,"health"],[298,81,345,79],[298,84,345,82,"finalDamage"],[298,95,345,93],[298,96,345,94],[299,20,346,16,"newState"],[299,28,346,24],[299,29,346,25,"playerStats"],[299,40,346,36],[299,41,346,37,"health"],[299,47,346,43],[299,50,346,46,"newPlayerHealth"],[299,65,346,61],[300,20,348,16,"console"],[300,27,348,23],[300,28,348,24,"log"],[300,31,348,27],[300,32,348,28],[300,53,348,49,"newState"],[300,61,348,57],[300,62,348,58,"playerStats"],[300,73,348,69],[300,74,348,70,"health"],[300,80,348,76],[300,84,348,80,"newState"],[300,92,348,88],[300,93,348,89,"playerStats"],[300,104,348,100],[300,105,348,101,"maxHealth"],[300,114,348,110],[300,124,348,120,"finalDamage"],[300,135,348,131],[300,145,348,141],[300,146,348,142],[302,20,350,16],[303,20,351,16,"enemy"],[303,25,351,21],[303,26,351,22,"lastAttackTick"],[303,40,351,36],[303,43,351,39,"newState"],[303,51,351,47],[303,52,351,48,"currentTick"],[303,63,351,59],[305,20,353,16],[306,20,354,16],[306,24,354,20,"newPlayerHealth"],[306,39,354,35],[306,43,354,39],[306,44,354,40],[306,46,354,42],[307,22,355,18,"console"],[307,29,355,25],[307,30,355,26,"log"],[307,33,355,29],[307,34,355,30],[307,84,355,80],[307,85,355,81],[308,22,356,18],[309,22,357,18,"game"],[309,26,357,22],[309,27,357,23,"updateGameState"],[309,42,357,38],[309,43,357,39],[310,24,357,41,"isAlive"],[310,31,357,48],[310,33,357,50],[311,22,357,56],[311,23,357,57],[311,24,357,58],[312,20,358,16],[313,18,359,16],[314,16,360,14],[315,14,361,12],[316,12,362,10],[316,13,362,11],[316,19,362,17],[317,14,363,12],[318,14,364,12],[319,14,365,12],[319,18,365,16,"distance"],[319,26,365,24],[319,29,365,27],[319,31,365,29],[319,33,365,31],[320,16,366,14],[321,16,367,14],[321,20,367,20,"normalizedX"],[321,31,367,31],[321,34,367,34,"deltaX"],[321,40,367,40],[321,43,367,43,"distance"],[321,51,367,51],[322,16,368,14],[322,20,368,20,"normalizedY"],[322,31,368,31],[322,34,368,34,"deltaY"],[322,40,368,40],[322,43,368,43,"distance"],[322,51,368,51],[324,16,370,14],[325,16,371,14],[325,20,371,20,"randomFactor"],[325,32,371,32],[325,35,371,35],[325,38,371,38],[325,39,371,39],[325,40,371,40],[326,16,372,14],[326,20,372,20,"finalX"],[326,26,372,26],[326,29,372,29,"normalizedX"],[326,40,372,40],[326,43,372,43],[326,44,372,44,"Math"],[326,48,372,48],[326,49,372,49,"random"],[326,55,372,55],[326,56,372,56],[326,57,372,57],[326,60,372,60],[326,63,372,63],[326,67,372,67,"randomFactor"],[326,79,372,79],[327,16,373,14],[327,20,373,20,"finalY"],[327,26,373,26],[327,29,373,29,"normalizedY"],[327,40,373,40],[327,43,373,43],[327,44,373,44,"Math"],[327,48,373,48],[327,49,373,49,"random"],[327,55,373,55],[327,56,373,56],[327,57,373,57],[327,60,373,60],[327,63,373,63],[327,67,373,67,"randomFactor"],[327,79,373,79],[329,16,375,14],[330,16,376,14],[330,20,376,18,"newX"],[330,24,376,22],[330,27,376,25,"enemy"],[330,32,376,30],[330,33,376,31,"position"],[330,41,376,39],[330,42,376,40,"x"],[330,43,376,41],[330,46,376,45,"finalX"],[330,52,376,51],[330,55,376,54,"MOVEMENT_SPEED"],[330,69,376,69],[331,16,377,14],[331,20,377,18,"newY"],[331,24,377,22],[331,27,377,25,"enemy"],[331,32,377,30],[331,33,377,31,"position"],[331,41,377,39],[331,42,377,40,"y"],[331,43,377,41],[331,46,377,45,"finalY"],[331,52,377,51],[331,55,377,54,"MOVEMENT_SPEED"],[331,69,377,69],[333,16,379,14],[334,16,380,14,"newX"],[334,20,380,18],[334,23,380,21,"Math"],[334,27,380,25],[334,28,380,26,"max"],[334,31,380,29],[334,32,380,30],[334,33,380,31],[334,35,380,33,"Math"],[334,39,380,37],[334,40,380,38,"min"],[334,43,380,41],[334,44,380,42,"SCREEN_WIDTH"],[334,56,380,54],[334,59,380,57,"ENEMY_SIZE"],[334,69,380,67],[334,71,380,69,"newX"],[334,75,380,73],[334,76,380,74],[334,77,380,75],[335,16,381,14,"newY"],[335,20,381,18],[335,23,381,21,"Math"],[335,27,381,25],[335,28,381,26,"max"],[335,31,381,29],[335,32,381,30],[335,33,381,31],[335,35,381,33,"Math"],[335,39,381,37],[335,40,381,38,"min"],[335,43,381,41],[335,44,381,42,"GAME_AREA_HEIGHT"],[335,60,381,58],[335,63,381,61,"ENEMY_SIZE"],[335,73,381,71],[335,75,381,73,"newY"],[335,79,381,77],[335,80,381,78],[335,81,381,79],[337,16,383,14],[338,16,384,14,"enemy"],[338,21,384,19],[338,22,384,20,"position"],[338,30,384,28],[338,31,384,29,"x"],[338,32,384,30],[338,35,384,33,"newX"],[338,39,384,37],[339,16,385,14,"enemy"],[339,21,385,19],[339,22,385,20,"position"],[339,30,385,28],[339,31,385,29,"y"],[339,32,385,30],[339,35,385,33,"newY"],[339,39,385,37],[340,14,386,12],[341,14,387,12],[342,12,388,10],[343,10,389,8],[344,8,390,6],[344,9,390,7],[344,10,390,8],[346,8,392,6],[347,8,393,6],[347,12,393,10,"newState"],[347,20,393,18],[347,21,393,19,"shadowClone"],[347,32,393,30],[347,34,393,32],[348,10,394,8],[349,10,395,8,"newState"],[349,18,395,16],[349,19,395,17,"shadowClone"],[349,30,395,28],[349,31,395,29,"remainingTicks"],[349,45,395,43],[349,47,395,45],[351,10,397,8],[352,10,398,8],[352,14,398,14,"cloneOffset"],[352,25,398,25],[352,28,398,28],[352,30,398,30],[352,31,398,31],[352,32,398,32],[353,10,399,8,"newState"],[353,18,399,16],[353,19,399,17,"shadowClone"],[353,30,399,28],[353,31,399,29,"position"],[353,39,399,37],[353,40,399,38,"x"],[353,41,399,39],[353,44,399,42,"currentNinjaPosition"],[353,64,399,62],[353,65,399,63,"x"],[353,66,399,64],[353,69,399,67,"cloneOffset"],[353,80,399,78],[354,10,400,8,"newState"],[354,18,400,16],[354,19,400,17,"shadowClone"],[354,30,400,28],[354,31,400,29,"position"],[354,39,400,37],[354,40,400,38,"y"],[354,41,400,39],[354,44,400,42,"currentNinjaPosition"],[354,64,400,62],[354,65,400,63,"y"],[354,66,400,64],[354,69,400,67],[354,71,400,69],[356,10,402,8],[357,10,403,8],[357,14,403,12,"newState"],[357,22,403,20],[357,23,403,21,"shadowClone"],[357,34,403,32],[357,35,403,33,"remainingTicks"],[357,49,403,47],[357,53,403,51],[357,54,403,52],[357,56,403,54],[358,12,404,10,"console"],[358,19,404,17],[358,20,404,18,"log"],[358,23,404,21],[358,24,404,22],[358,75,404,73],[358,76,404,74],[359,12,405,10,"newState"],[359,20,405,18],[359,21,405,19,"shadowClone"],[359,32,405,30],[359,35,405,33,"undefined"],[359,44,405,42],[360,10,406,8],[360,11,406,9],[360,17,406,15],[361,12,407,10],[362,12,408,10],[363,12,409,10],[363,16,409,16,"CLONE_ATTACK_INTERVAL"],[363,37,409,37],[363,40,409,40],[363,42,409,42],[364,12,410,10],[364,16,410,14,"newState"],[364,24,410,22],[364,25,410,23,"currentTick"],[364,36,410,34],[364,39,410,37,"CLONE_ATTACK_INTERVAL"],[364,60,410,58],[364,65,410,63],[364,66,410,64],[364,70,410,68,"newState"],[364,78,410,76],[364,79,410,77,"enemies"],[364,86,410,84],[364,87,410,85,"length"],[364,93,410,91],[364,96,410,94],[364,97,410,95],[364,99,410,97],[365,14,411,12,"console"],[365,21,411,19],[365,22,411,20,"log"],[365,25,411,23],[365,26,411,24],[365,83,411,81],[365,84,411,82],[367,14,413,12],[368,14,414,12],[368,18,414,18,"target"],[368,24,414,24],[368,27,414,27,"findClosestEnemyInternal"],[368,51,414,51],[368,52,414,52,"newState"],[368,60,414,60],[368,61,414,61,"enemies"],[368,68,414,68],[368,69,414,69],[369,14,415,12],[369,18,415,16,"target"],[369,24,415,22],[369,26,415,24],[370,16,416,14],[371,16,417,14],[371,20,417,20,"cloneDamage"],[371,31,417,31],[371,34,417,34,"Math"],[371,38,417,38],[371,39,417,39,"floor"],[371,44,417,44],[371,45,417,45,"newState"],[371,53,417,53],[371,54,417,54,"playerStats"],[371,65,417,65],[371,66,417,66,"attack"],[371,72,417,72],[371,75,417,75],[371,78,417,78],[371,79,417,79],[373,16,419,14],[374,16,420,14,"createProjectile"],[374,32,420,30],[374,33,420,31,"target"],[374,39,420,37],[374,41,420,39,"cloneDamage"],[374,52,420,50],[374,54,420,52,"newState"],[374,62,420,60],[374,63,420,61,"shadowClone"],[374,74,420,72],[374,75,420,73,"position"],[374,83,420,81],[374,85,420,83],[375,18,421,16,"id"],[375,20,421,18],[375,22,421,20],[375,43,421,41],[376,18,422,16,"name"],[376,22,422,20],[376,24,422,22],[376,45,422,43],[377,18,423,16,"icon"],[377,22,423,20],[377,24,423,22],[378,16,424,14],[378,17,424,15],[378,18,424,16],[379,14,425,12],[380,12,426,10],[381,10,427,8],[382,8,428,6],[384,8,430,6],[385,8,431,6],[386,8,432,6,"console"],[386,15,432,13],[386,16,432,14,"log"],[386,19,432,17],[386,20,432,18],[386,63,432,61,"isManualControlActive"],[386,84,432,82],[386,97,432,95,"game"],[386,101,432,99],[386,102,432,100,"gameState"],[386,111,432,109],[386,112,432,110,"isAlive"],[386,119,432,117],[386,121,432,119],[386,122,432,120],[387,8,433,6],[387,12,433,10],[387,13,433,11,"isManualControlActive"],[387,34,433,32],[387,38,433,36,"game"],[387,42,433,40],[387,43,433,41,"gameState"],[387,52,433,50],[387,53,433,51,"isAlive"],[387,60,433,58],[387,62,433,60],[388,10,434,8],[388,15,434,13],[388,19,434,17,"i"],[388,20,434,18],[388,23,434,21],[388,24,434,22],[388,26,434,24,"i"],[388,27,434,25],[388,30,434,28],[388,31,434,29],[388,33,434,31,"i"],[388,34,434,32],[388,36,434,34],[388,38,434,36],[389,12,435,10],[389,16,435,14,"newState"],[389,24,435,22],[389,25,435,23,"abilityManager"],[389,39,435,37],[389,40,435,38,"isAbilityReady"],[389,54,435,52],[389,55,435,53,"i"],[389,56,435,54],[389,57,435,55],[389,61,435,59,"newState"],[389,69,435,67],[389,70,435,68,"enemies"],[389,77,435,75],[389,78,435,76,"length"],[389,84,435,82],[389,87,435,85],[389,88,435,86],[389,90,435,88],[390,14,436,12],[390,18,436,16,"newState"],[390,26,436,24],[390,27,436,25,"abilityManager"],[390,41,436,39],[390,42,436,40,"useAbility"],[390,52,436,50],[390,53,436,51,"i"],[390,54,436,52],[390,56,436,54,"newTick"],[390,63,436,61],[390,64,436,62],[390,66,436,64],[391,16,437,14,"console"],[391,23,437,21],[391,24,437,22,"log"],[391,27,437,25],[391,28,437,26],[391,73,437,71,"i"],[391,74,437,72],[391,76,437,74],[391,77,437,75],[392,16,438,14,"castAbility"],[392,27,438,25],[392,28,438,26,"newState"],[392,36,438,34],[392,38,438,36,"i"],[392,39,438,37],[392,40,438,38],[393,14,439,12],[394,12,440,10],[395,10,441,8],[396,8,442,6],[398,8,444,6],[399,8,445,6],[400,8,446,6],[400,12,446,12,"allDeadEnemies"],[400,26,446,26],[400,29,446,29,"newState"],[400,37,446,37],[400,38,446,38,"enemies"],[400,45,446,45],[400,46,446,46,"filter"],[400,52,446,52],[400,53,446,53,"enemy"],[400,58,446,58],[400,62,446,62,"enemy"],[400,67,446,67],[400,68,446,68,"health"],[400,74,446,74],[400,78,446,78],[400,79,446,79],[400,80,446,80],[402,8,448,6],[403,8,449,6,"deadEnemiesRef"],[403,22,449,20],[403,23,449,21,"current"],[403,30,449,28],[403,33,449,31],[403,34,449,32],[403,37,449,35,"allDeadEnemies"],[403,51,449,49],[403,52,449,50],[403,53,449,51],[403,54,449,52],[405,8,451,6],[406,8,452,6],[406,12,452,10,"allDeadEnemies"],[406,26,452,24],[406,27,452,25,"length"],[406,33,452,31],[406,36,452,34],[406,37,452,35],[406,39,452,37],[407,10,453,8,"console"],[407,17,453,15],[407,18,453,16,"log"],[407,21,453,19],[407,22,453,20],[407,34,453,32,"allDeadEnemies"],[407,48,453,46],[407,49,453,47,"length"],[407,55,453,53],[407,83,453,81],[407,85,453,83,"allDeadEnemies"],[407,99,453,97],[407,100,453,98,"map"],[407,103,453,101],[407,104,453,102,"e"],[407,105,453,103],[407,109,453,107],[407,112,453,110,"e"],[407,113,453,111],[407,114,453,112,"name"],[407,118,453,116],[407,122,453,120,"e"],[407,123,453,121],[407,124,453,122,"health"],[407,130,453,128],[407,145,453,143,"e"],[407,146,453,144],[407,147,453,145,"isDying"],[407,154,453,152],[407,157,453,155],[407,158,453,156],[407,159,453,157],[408,8,454,6],[410,8,456,6],[411,8,457,6],[411,12,457,12,"currentTime"],[411,23,457,23],[411,26,457,26,"Date"],[411,30,457,30],[411,31,457,31,"now"],[411,34,457,34],[411,35,457,35],[411,36,457,36],[412,8,458,6,"newState"],[412,16,458,14],[412,17,458,15,"enemies"],[412,24,458,22],[412,27,458,25,"newState"],[412,35,458,33],[412,36,458,34,"enemies"],[412,43,458,41],[412,44,458,42,"filter"],[412,50,458,48],[412,51,458,49,"enemy"],[412,56,458,54],[412,60,458,58],[413,10,459,8],[413,14,459,12,"enemy"],[413,19,459,17],[413,20,459,18,"isDying"],[413,27,459,25],[413,31,459,29,"enemy"],[413,36,459,34],[413,37,459,35,"deathStartTime"],[413,51,459,49],[413,53,459,51],[414,12,460,10],[414,16,460,16,"animationDuration"],[414,33,460,33],[414,36,460,36],[414,39,460,39],[414,40,460,40],[414,41,460,41],[415,12,461,10],[415,16,461,16,"isAnimationComplete"],[415,35,461,35],[415,38,461,38,"currentTime"],[415,49,461,49],[415,52,461,52,"enemy"],[415,57,461,57],[415,58,461,58,"deathStartTime"],[415,72,461,72],[415,76,461,76,"animationDuration"],[415,93,461,93],[416,12,462,10],[416,16,462,14,"isAnimationComplete"],[416,35,462,33],[416,37,462,35],[417,14,463,12,"console"],[417,21,463,19],[417,22,463,20,"log"],[417,25,463,23],[417,26,463,24],[417,58,463,56,"enemy"],[417,63,463,61],[417,64,463,62,"name"],[417,68,463,66],[417,86,463,84,"currentTime"],[417,97,463,95],[417,100,463,98,"enemy"],[417,105,463,103],[417,106,463,104,"deathStartTime"],[417,120,463,118],[417,129,463,127],[417,130,463,128],[418,14,464,12],[418,21,464,19],[418,26,464,24],[418,27,464,25],[418,28,464,26],[419,12,465,10],[420,10,466,8],[421,10,467,8],[421,17,467,15],[421,21,467,19],[421,22,467,20],[421,23,467,21],[422,8,468,6],[422,9,468,7],[422,10,468,8],[424,8,470,6],[425,8,471,6],[425,12,471,10,"allDeadEnemies"],[425,26,471,24],[425,27,471,25,"length"],[425,33,471,31],[425,36,471,34],[425,37,471,35],[425,39,471,37],[426,10,472,8,"console"],[426,17,472,15],[426,18,472,16,"log"],[426,21,472,19],[426,22,472,20],[426,49,472,47,"allDeadEnemies"],[426,63,472,61],[426,64,472,62,"length"],[426,70,472,68],[426,86,472,84],[426,88,472,86,"allDeadEnemies"],[426,102,472,100],[426,103,472,101,"map"],[426,106,472,104],[426,107,472,105,"e"],[426,108,472,106],[426,112,472,110],[426,115,472,113,"e"],[426,116,472,114],[426,117,472,115,"id"],[426,119,472,117],[426,123,472,121,"e"],[426,124,472,122],[426,125,472,123,"health"],[426,131,472,129],[426,136,472,134],[426,137,472,135],[426,138,472,136],[427,8,473,6],[429,8,475,6],[430,8,476,6],[430,12,476,12,"lowHealthEnemies"],[430,28,476,28],[430,31,476,31,"newState"],[430,39,476,39],[430,40,476,40,"enemies"],[430,47,476,47],[430,48,476,48,"filter"],[430,54,476,54],[430,55,476,55,"enemy"],[430,60,476,60],[430,64,476,64,"enemy"],[430,69,476,69],[430,70,476,70,"health"],[430,76,476,76],[430,80,476,80],[430,82,476,82],[430,86,476,86,"enemy"],[430,91,476,91],[430,92,476,92,"health"],[430,98,476,98],[430,101,476,101],[430,102,476,102],[430,103,476,103],[431,8,477,6],[431,12,477,10,"lowHealthEnemies"],[431,28,477,26],[431,29,477,27,"length"],[431,35,477,33],[431,38,477,36],[431,39,477,37],[431,41,477,39],[432,10,478,8,"console"],[432,17,478,15],[432,18,478,16,"log"],[432,21,478,19],[432,22,478,20],[432,61,478,59],[432,63,478,61,"lowHealthEnemies"],[432,79,478,77],[432,80,478,78,"map"],[432,83,478,81],[432,84,478,82,"e"],[432,85,478,83],[432,89,478,87],[432,92,478,90,"e"],[432,93,478,91],[432,94,478,92,"id"],[432,96,478,94],[432,100,478,98,"e"],[432,101,478,99],[432,102,478,100,"health"],[432,108,478,106],[432,112,478,110,"e"],[432,113,478,111],[432,114,478,112,"maxHealth"],[432,123,478,121],[432,128,478,126],[432,129,478,127],[432,130,478,128],[433,8,479,6],[435,8,481,6],[436,8,482,6],[436,12,482,12,"beforeCount"],[436,23,482,23],[436,26,482,26,"newState"],[436,34,482,34],[436,35,482,35,"enemies"],[436,42,482,42],[436,43,482,43,"length"],[436,49,482,49],[437,8,483,6,"newState"],[437,16,483,14],[437,17,483,15,"enemies"],[437,24,483,22],[437,27,483,25,"newState"],[437,35,483,33],[437,36,483,34,"enemies"],[437,43,483,41],[437,44,483,42,"filter"],[437,50,483,48],[437,51,483,49,"enemy"],[437,56,483,54],[437,60,483,58,"enemy"],[437,65,483,63],[437,66,483,64,"health"],[437,72,483,70],[437,75,483,73],[437,76,483,74],[437,77,483,75],[438,8,484,6],[438,12,484,12,"afterCount"],[438,22,484,22],[438,25,484,25,"newState"],[438,33,484,33],[438,34,484,34,"enemies"],[438,41,484,41],[438,42,484,42,"length"],[438,48,484,48],[439,8,486,6],[439,12,486,10,"beforeCount"],[439,23,486,21],[439,28,486,26,"afterCount"],[439,38,486,36],[439,40,486,38],[440,10,487,8,"console"],[440,17,487,15],[440,18,487,16,"log"],[440,21,487,19],[440,22,487,20],[440,52,487,50,"beforeCount"],[440,63,487,61],[440,66,487,64,"afterCount"],[440,76,487,74],[440,102,487,100],[440,103,487,101],[441,8,488,6],[443,8,490,6],[444,8,491,6],[445,8,492,6],[445,12,492,12,"MAX_ENEMIES"],[445,23,492,23],[445,26,492,26],[445,28,492,28],[445,29,492,29],[445,30,492,30],[446,8,493,6],[446,12,493,12,"MIN_SPAWN_DELAY"],[446,27,493,27],[446,30,493,30],[446,33,493,33],[446,34,493,34],[446,35,493,35],[447,8,494,6],[447,12,494,12,"now"],[447,15,494,15],[447,18,494,18,"Date"],[447,22,494,22],[447,23,494,23,"now"],[447,26,494,26],[447,27,494,27],[447,28,494,28],[448,8,495,6],[448,12,495,12,"hasBoss"],[448,19,495,19],[448,22,495,22,"newState"],[448,30,495,30],[448,31,495,31,"enemies"],[448,38,495,38],[448,39,495,39,"some"],[448,43,495,43],[448,44,495,44,"enemy"],[448,49,495,49],[448,53,495,53,"enemy"],[448,58,495,58],[448,59,495,59,"isBoss"],[448,65,495,65],[448,66,495,66],[450,8,497,6],[451,8,498,6],[451,12,498,10],[451,13,498,11,"newState"],[451,21,498,19],[451,22,498,20,"lastSpawnTime"],[451,35,498,33],[451,37,498,35],[452,10,499,8,"newState"],[452,18,499,16],[452,19,499,17,"lastSpawnTime"],[452,32,499,30],[452,35,499,33,"now"],[452,38,499,36],[453,8,500,6],[454,8,502,6,"console"],[454,15,502,13],[454,16,502,14,"log"],[454,19,502,17],[454,20,502,18],[454,53,502,51,"newState"],[454,61,502,59],[454,62,502,60,"enemies"],[454,69,502,67],[454,70,502,68,"length"],[454,76,502,74],[454,85,502,83,"MAX_ENEMIES"],[454,96,502,94],[454,109,502,107,"hasBoss"],[454,116,502,114],[454,118,502,116],[454,119,502,117],[456,8,504,6],[457,8,505,6],[457,12,505,10],[457,13,505,11,"hasBoss"],[457,20,505,18],[457,24,505,22,"newState"],[457,32,505,30],[457,33,505,31,"enemies"],[457,40,505,38],[457,41,505,39,"length"],[457,47,505,45],[457,50,505,48,"MAX_ENEMIES"],[457,61,505,59],[457,65,505,64,"now"],[457,68,505,67],[457,71,505,70,"newState"],[457,79,505,78],[457,80,505,79,"lastSpawnTime"],[457,93,505,92],[457,97,505,97,"MIN_SPAWN_DELAY"],[457,112,505,112],[457,114,505,114],[458,10,506,8,"console"],[458,17,506,15],[458,18,506,16,"log"],[458,21,506,19],[458,22,506,20],[458,43,506,41,"newState"],[458,51,506,49],[458,52,506,50,"enemies"],[458,59,506,57],[458,60,506,58,"length"],[458,66,506,64],[458,69,506,67],[458,70,506,68],[458,74,506,72,"MAX_ENEMIES"],[458,85,506,83],[458,87,506,85],[458,88,506,86],[459,10,507,8,"spawnTestEnemy"],[459,24,507,22],[459,25,507,23,"newState"],[459,33,507,31],[459,34,507,32],[460,10,508,8,"newState"],[460,18,508,16],[460,19,508,17,"lastSpawnTime"],[460,32,508,30],[460,35,508,33,"now"],[460,38,508,36],[461,8,509,6],[462,8,511,6],[462,15,511,13,"newState"],[462,23,511,21],[463,6,512,4],[463,7,512,5],[463,47,512,6],[465,6,514,4],[466,6,515,4],[466,10,515,10,"deadEnemiesToProcess"],[466,30,515,30],[466,33,515,33,"deadEnemiesRef"],[466,47,515,47],[466,48,515,48,"current"],[466,55,515,55],[466,56,515,56],[466,57,515,57],[467,6,516,4],[467,10,516,8,"deadEnemiesToProcess"],[467,30,516,28],[467,31,516,29,"length"],[467,37,516,35],[467,40,516,38],[467,41,516,39],[467,43,516,41],[468,8,517,6],[469,8,518,6],[470,8,519,6],[470,12,519,12,"unprocessedEnemies"],[470,30,519,30],[470,33,519,33,"deadEnemiesToProcess"],[470,53,519,53],[470,54,519,54],[470,55,519,55],[472,8,521,6],[473,8,522,6,"console"],[473,15,522,13],[473,16,522,14,"log"],[473,19,522,17],[473,20,522,18],[473,69,522,67],[473,71,522,69,"deadEnemiesToProcess"],[473,91,522,89],[473,92,522,90,"map"],[473,95,522,93],[473,96,522,94,"e"],[473,97,522,95],[473,102,522,100],[474,10,522,101,"id"],[474,12,522,103],[474,14,522,105,"e"],[474,15,522,106],[474,16,522,107,"id"],[474,18,522,109],[475,10,522,111,"name"],[475,14,522,115],[475,16,522,117,"e"],[475,17,522,118],[475,18,522,119,"name"],[475,22,522,123],[476,10,522,125,"xpAwarded"],[476,19,522,134],[476,21,522,136,"e"],[476,22,522,137],[476,23,522,138,"xpAwarded"],[477,8,522,147],[477,9,522,148],[477,10,522,149],[477,11,522,150],[477,12,522,151],[478,8,523,6,"console"],[478,15,523,13],[478,16,523,14,"log"],[478,19,523,17],[478,20,523,18],[478,43,523,41,"deadEnemiesToProcess"],[478,63,523,61],[478,64,523,62,"length"],[478,70,523,68],[478,87,523,85,"unprocessedEnemies"],[478,105,523,103],[478,106,523,104,"length"],[478,112,523,110],[478,126,523,124],[478,127,523,125],[479,8,525,6],[479,12,525,10,"unprocessedEnemies"],[479,30,525,28],[479,31,525,29,"length"],[479,37,525,35],[479,40,525,38],[479,41,525,39],[479,43,525,41],[480,10,526,8],[481,10,527,8],[481,14,527,12,"totalXP"],[481,21,527,19],[481,24,527,22],[481,25,527,23],[482,10,528,8],[482,14,528,12,"totalGold"],[482,23,528,21],[482,26,528,24],[482,27,528,25],[483,10,529,8],[483,14,529,14,"zoneKills"],[483,23,529,30],[483,26,529,33],[483,28,529,35],[484,10,531,8],[484,14,531,14,"xpMultiplier"],[484,26,531,26],[484,29,531,29,"game"],[484,33,531,33],[484,34,531,34,"gameState"],[484,43,531,43],[484,44,531,44,"subscriptionBenefits"],[484,64,531,64],[484,66,531,66,"xp_multiplier"],[484,79,531,79],[484,83,531,83],[484,86,531,86],[485,10,532,8],[485,14,532,14,"goldMultiplier"],[485,28,532,28],[485,31,532,31,"game"],[485,35,532,35],[485,36,532,36,"gameState"],[485,45,532,45],[485,46,532,46,"subscriptionBenefits"],[485,66,532,66],[485,68,532,68,"drop_multiplier"],[485,83,532,83],[485,87,532,87],[485,90,532,90],[486,10,534,8,"unprocessedEnemies"],[486,28,534,26],[486,29,534,27,"forEach"],[486,36,534,34],[486,37,534,35,"enemy"],[486,42,534,40],[486,46,534,44],[487,12,535,10,"totalXP"],[487,19,535,17],[487,23,535,21],[487,24,535,22,"enemy"],[487,29,535,27],[487,30,535,28,"zoneXP"],[487,36,535,34],[487,40,535,38],[487,41,535,39],[487,45,535,43,"xpMultiplier"],[487,57,535,55],[488,12,536,10,"totalGold"],[488,21,536,19],[488,25,536,23],[488,27,536,25],[488,30,536,28,"goldMultiplier"],[488,44,536,42],[489,12,538,10],[489,16,538,14,"enemy"],[489,21,538,19],[489,22,538,20,"zoneTypeId"],[489,32,538,30],[489,34,538,32],[490,14,539,12,"zoneKills"],[490,23,539,21],[490,24,539,22,"push"],[490,28,539,26],[490,29,539,27],[491,16,540,14,"id"],[491,18,540,16],[491,20,540,18,"enemy"],[491,25,540,23],[491,26,540,24,"id"],[491,28,540,26],[492,16,541,14,"typeId"],[492,22,541,20],[492,24,541,22,"enemy"],[492,29,541,27],[492,30,541,28,"zoneTypeId"],[492,40,541,38],[493,16,542,14,"name"],[493,20,542,18],[493,22,542,20,"enemy"],[493,27,542,25],[493,28,542,26,"name"],[493,32,542,30],[494,16,543,14,"icon"],[494,20,543,18],[494,22,543,20],[494,26,543,24],[495,16,544,14,"hp"],[495,18,544,16],[495,20,544,18],[495,21,544,19],[496,16,545,14,"maxHP"],[496,21,545,19],[496,23,545,21,"enemy"],[496,28,545,26],[496,29,545,27,"maxHealth"],[496,38,545,36],[497,16,546,14,"attack"],[497,22,546,20],[497,24,546,22,"enemy"],[497,29,546,27],[497,30,546,28,"stats"],[497,35,546,33],[497,36,546,34,"attack"],[497,42,546,40],[498,16,547,14,"xp"],[498,18,547,16],[498,20,547,18,"enemy"],[498,25,547,23],[498,26,547,24,"zoneXP"],[498,32,547,30],[498,36,547,34],[498,37,547,35],[499,16,548,14,"position"],[499,24,548,22],[499,26,548,24,"enemy"],[499,31,548,29],[499,32,548,30,"position"],[500,14,549,12],[500,15,549,13],[500,16,549,14],[501,12,550,10],[502,10,551,8],[502,11,551,9],[502,12,551,10],[504,10,553,8],[505,10,554,8,"game"],[505,14,554,12],[505,15,554,13,"updateNinja"],[505,26,554,24],[505,27,554,25,"prev"],[505,31,554,29],[505,36,554,34],[506,12,555,10,"experience"],[506,22,555,20],[506,24,555,22,"prev"],[506,28,555,26],[506,29,555,27,"experience"],[506,39,555,37],[506,42,555,40,"totalXP"],[506,49,555,47],[507,12,556,10,"gold"],[507,16,556,14],[507,18,556,16,"prev"],[507,22,556,20],[507,23,556,21,"gold"],[507,27,556,25],[507,30,556,28,"totalGold"],[508,10,557,8],[508,11,557,9],[508,12,557,10],[508,13,557,11],[510,10,559,8],[511,10,560,8,"zoneKills"],[511,19,560,17],[511,20,560,18,"forEach"],[511,27,560,25],[511,28,560,26,"zoneEnemy"],[511,37,560,35],[511,41,560,39,"recordEnemyKill"],[511,56,560,54],[511,57,560,55,"zoneEnemy"],[511,66,560,64],[511,67,560,65],[511,68,560,66],[513,10,562,8],[514,10,563,8,"setCombatState"],[514,24,563,22],[514,25,563,23,"prev"],[514,29,563,27],[514,34,563,32],[515,12,564,10],[515,15,564,13,"prev"],[515,19,564,17],[516,12,565,10,"enemies"],[516,19,565,17],[516,21,565,19,"prev"],[516,25,565,23],[516,26,565,24,"enemies"],[516,33,565,31],[516,34,565,32,"map"],[516,37,565,35],[516,38,565,36,"enemy"],[516,43,565,41],[516,47,565,45],[517,14,566,12],[517,18,566,18,"wasProcessed"],[517,30,566,30],[517,33,566,33,"unprocessedEnemies"],[517,51,566,51],[517,52,566,52,"find"],[517,56,566,56],[517,57,566,57,"processed"],[517,66,566,66],[517,70,566,70,"processed"],[517,79,566,79],[517,80,566,80,"id"],[517,82,566,82],[517,87,566,87,"enemy"],[517,92,566,92],[517,93,566,93,"id"],[517,95,566,95],[517,96,566,96],[518,14,567,12],[518,21,567,19,"wasProcessed"],[518,33,567,31],[518,36,567,34],[519,16,567,36],[519,19,567,39,"enemy"],[519,24,567,44],[520,16,567,46,"xpAwarded"],[520,25,567,55],[520,27,567,57],[521,14,567,62],[521,15,567,63],[521,18,567,66,"enemy"],[521,23,567,71],[522,12,568,10],[522,13,568,11],[523,10,569,8],[523,11,569,9],[523,12,569,10],[523,13,569,11],[524,8,570,6],[525,6,571,4],[526,4,572,2],[526,5,572,3],[526,7,572,5],[526,8,572,6,"game"],[526,12,572,10],[526,13,572,11,"updateNinja"],[526,24,572,22],[526,26,572,24,"game"],[526,30,572,28],[526,31,572,29,"gameState"],[526,40,572,38],[526,41,572,39,"subscriptionBenefits"],[526,61,572,59],[526,63,572,61,"recordEnemyKill"],[526,78,572,76],[526,80,572,78,"spawnTestEnemy"],[526,94,572,92],[526,96,572,94,"spawnZoneEnemy"],[526,110,572,108],[526,111,572,109],[526,112,572,110],[526,113,572,111],[526,114,572,112],[528,4,574,2],[529,4,575,2],[529,8,575,8,"findClosestEnemyInternal"],[529,32,575,32],[529,35,575,36,"enemies"],[529,42,575,58],[529,46,575,83],[530,6,576,4],[530,10,576,8,"enemies"],[530,17,576,15],[530,18,576,16,"length"],[530,24,576,22],[530,29,576,27],[530,30,576,28],[530,32,576,30],[530,39,576,37],[530,43,576,41],[532,6,578,4],[533,6,579,4],[533,10,579,10,"SCREEN_WIDTH"],[533,22,579,22],[533,25,579,25],[533,28,579,28],[534,6,580,4],[534,10,580,10,"GAME_AREA_HEIGHT"],[534,26,580,26],[534,29,580,29],[534,32,580,32],[534,35,580,35],[534,38,580,38],[534,39,580,39],[534,40,580,40],[535,6,581,4],[535,10,581,10,"ninjaX"],[535,16,581,16],[535,19,581,19,"SCREEN_WIDTH"],[535,31,581,31],[535,34,581,34],[535,35,581,35],[536,6,582,4],[536,10,582,10,"ninjaY"],[536,16,582,16],[536,19,582,19,"GAME_AREA_HEIGHT"],[536,35,582,35],[536,38,582,38],[536,39,582,39],[537,6,584,4],[537,10,584,8,"closestEnemy"],[537,22,584,20],[537,25,584,23,"enemies"],[537,32,584,30],[537,33,584,31],[537,34,584,32],[537,35,584,33],[538,6,585,4],[538,10,585,8,"closestDistance"],[538,25,585,23],[538,28,585,26,"Infinity"],[538,36,585,34],[539,6,587,4,"enemies"],[539,13,587,11],[539,14,587,12,"forEach"],[539,21,587,19],[539,22,587,20,"enemy"],[539,27,587,25],[539,31,587,29],[540,8,588,6],[540,12,588,12,"distance"],[540,20,588,20],[540,23,588,23,"Math"],[540,27,588,27],[540,28,588,28,"sqrt"],[540,32,588,32],[540,33,589,8,"Math"],[540,37,589,12],[540,38,589,13,"pow"],[540,41,589,16],[540,42,589,17,"enemy"],[540,47,589,22],[540,48,589,23,"position"],[540,56,589,31],[540,57,589,32,"x"],[540,58,589,33],[540,61,589,36,"ninjaX"],[540,67,589,42],[540,69,589,44],[540,70,589,45],[540,71,589,46],[540,74,590,8,"Math"],[540,78,590,12],[540,79,590,13,"pow"],[540,82,590,16],[540,83,590,17,"enemy"],[540,88,590,22],[540,89,590,23,"position"],[540,97,590,31],[540,98,590,32,"y"],[540,99,590,33],[540,102,590,36,"ninjaY"],[540,108,590,42],[540,110,590,44],[540,111,590,45],[540,112,591,6],[540,113,591,7],[541,8,593,6],[541,12,593,10,"distance"],[541,20,593,18],[541,23,593,21,"closestDistance"],[541,38,593,36],[541,40,593,38],[542,10,594,8,"closestDistance"],[542,25,594,23],[542,28,594,26,"distance"],[542,36,594,34],[543,10,595,8,"closestEnemy"],[543,22,595,20],[543,25,595,23,"enemy"],[543,30,595,28],[544,8,596,6],[545,6,597,4],[545,7,597,5],[545,8,597,6],[546,6,599,4,"console"],[546,13,599,11],[546,14,599,12,"log"],[546,17,599,15],[546,18,599,16],[546,60,599,58,"closestDistance"],[546,75,599,73],[546,76,599,74,"toFixed"],[546,83,599,81],[546,84,599,82],[546,85,599,83],[546,86,599,84],[546,88,599,86],[546,89,599,87],[547,6,600,4],[547,13,600,11,"closestEnemy"],[547,25,600,23],[548,4,601,2],[548,5,601,3],[550,4,603,2],[551,4,604,2],[551,8,604,8,"findClosestEnemy"],[551,24,604,24],[551,27,604,27,"findClosestEnemy"],[551,28,604,27],[551,33,604,53],[552,6,605,4],[552,13,605,11,"findClosestEnemyInternal"],[552,37,605,35],[552,38,605,36,"combatState"],[552,49,605,47],[552,50,605,48,"enemies"],[552,57,605,55],[552,58,605,56],[553,4,606,2],[553,5,606,3],[555,4,608,2],[556,4,609,2],[557,4,610,2],[557,8,610,2,"_useState7"],[557,18,610,2],[557,21,610,58],[557,25,610,58,"useState"],[557,31,610,66],[557,32,610,66,"useState"],[557,40,610,66],[557,42,610,91],[558,8,610,93,"x"],[558,9,610,94],[558,11,610,96],[558,14,610,99],[559,8,610,101,"y"],[559,9,610,102],[559,11,610,104],[560,6,610,108],[560,7,610,109],[560,8,610,110],[561,6,610,110,"_useState8"],[561,16,610,110],[561,23,610,110,"_slicedToArray"],[561,37,610,110],[561,38,610,110,"default"],[561,45,610,110],[561,47,610,110,"_useState7"],[561,57,610,110],[562,6,610,9,"currentNinjaPosition"],[562,26,610,29],[562,29,610,29,"_useState8"],[562,39,610,29],[563,6,610,31,"setCurrentNinjaPosition"],[563,29,610,54],[563,32,610,54,"_useState8"],[563,42,610,54],[564,4,611,2],[564,8,611,2,"_useState9"],[564,18,611,2],[564,21,611,60],[564,25,611,60,"useState"],[564,31,611,68],[564,32,611,68,"useState"],[564,40,611,68],[564,42,611,69],[564,47,611,74],[564,48,611,75],[565,6,611,75,"_useState0"],[565,16,611,75],[565,23,611,75,"_slicedToArray"],[565,37,611,75],[565,38,611,75,"default"],[565,45,611,75],[565,47,611,75,"_useState9"],[565,57,611,75],[566,6,611,9,"isManualControlActive"],[566,27,611,30],[566,30,611,30,"_useState0"],[566,40,611,30],[567,6,611,32,"setIsManualControlActive"],[567,30,611,56],[567,33,611,56,"_useState0"],[567,43,611,56],[569,4,613,2],[570,4,614,2],[570,8,614,8,"updateNinjaPosition"],[570,27,614,27],[570,30,614,30],[570,34,614,30,"useCallback"],[570,40,614,41],[570,41,614,41,"useCallback"],[570,52,614,41],[570,54,614,43,"newPosition"],[570,65,614,78],[570,69,614,83],[571,6,615,4,"setCurrentNinjaPosition"],[571,29,615,27],[571,30,615,28,"newPosition"],[571,41,615,39],[571,42,615,40],[572,4,616,2],[572,5,616,3],[572,7,616,5],[572,9,616,7],[572,10,616,8],[574,4,618,2],[575,4,619,2],[575,8,619,8,"setManualControlActive"],[575,30,619,30],[575,33,619,33],[575,37,619,33,"useCallback"],[575,43,619,44],[575,44,619,44,"useCallback"],[575,55,619,44],[575,57,619,46,"active"],[575,63,619,61],[575,67,619,66],[576,6,620,4,"setIsManualControlActive"],[576,30,620,28],[576,31,620,29,"active"],[576,37,620,35],[576,38,620,36],[577,6,621,4,"console"],[577,13,621,11],[577,14,621,12,"log"],[577,17,621,15],[577,18,621,16],[577,39,621,37,"active"],[577,45,621,43],[577,48,621,46],[577,59,621,57],[577,62,621,60],[577,75,621,73],[577,88,621,86,"active"],[577,94,621,92],[577,97,621,95],[577,105,621,103],[577,108,621,106],[577,117,621,115],[577,119,621,117],[577,120,621,118],[578,4,622,2],[578,5,622,3],[578,7,622,5],[578,9,622,7],[578,10,622,8],[580,4,624,2],[581,4,625,2],[582,4,626,2],[584,4,628,2],[585,4,629,2],[585,8,629,8,"castAbility"],[585,19,629,19],[585,22,629,22,"castAbility"],[585,23,629,23,"state"],[585,28,629,41],[585,30,629,43,"slotIndex"],[585,39,629,60],[585,44,629,65],[586,6,630,4],[586,10,630,10,"deck"],[586,14,630,14],[586,17,630,17,"state"],[586,22,630,22],[586,23,630,23,"abilityManager"],[586,37,630,37],[586,38,630,38,"getDeck"],[586,45,630,45],[586,46,630,46],[586,47,630,47],[587,6,631,4],[587,10,631,10,"ability"],[587,17,631,17],[587,20,631,20,"deck"],[587,24,631,24],[587,25,631,25,"slots"],[587,30,631,30],[587,31,631,31,"slotIndex"],[587,40,631,40],[587,41,631,41],[588,6,632,4],[588,10,632,8],[588,11,632,9,"ability"],[588,18,632,16],[588,20,632,18],[589,6,634,4,"console"],[589,13,634,11],[589,14,634,12,"log"],[589,17,634,15],[589,18,634,16],[589,43,634,41,"ability"],[589,50,634,48],[589,51,634,49,"id"],[589,53,634,51],[589,67,634,65,"slotIndex"],[589,76,634,74],[589,78,634,76],[589,79,634,77],[591,6,636,4],[592,6,637,4],[592,10,637,8,"damage"],[592,16,637,14],[592,19,637,17,"ability"],[592,26,637,24],[592,27,637,25,"stats"],[592,32,637,30],[592,33,637,31,"baseDamage"],[592,43,637,41],[594,6,639,4],[595,6,640,4,"deck"],[595,10,640,8],[595,11,640,9,"activeSynergies"],[595,26,640,24],[595,27,640,25,"forEach"],[595,34,640,32],[595,35,640,33,"synergy"],[595,42,640,40],[595,46,640,44],[596,8,641,6],[596,12,641,10,"synergy"],[596,19,641,17],[596,20,641,18,"bonus"],[596,25,641,23],[596,26,641,24,"damageBonus"],[596,37,641,35],[596,41,642,10,"synergy"],[596,48,642,17],[596,49,642,18,"requiredTags"],[596,61,642,30],[596,62,642,31,"some"],[596,66,642,35],[596,67,642,36,"tag"],[596,70,642,39],[596,74,642,43,"ability"],[596,81,642,50],[596,82,642,51,"tags"],[596,86,642,55],[596,87,642,56,"includes"],[596,95,642,64],[596,96,642,65,"tag"],[596,99,642,68],[596,100,642,69],[596,101,642,70],[596,103,642,72],[597,10,643,8,"damage"],[597,16,643,14],[597,20,643,19],[597,21,643,20],[597,24,643,23,"synergy"],[597,31,643,30],[597,32,643,31,"bonus"],[597,37,643,36],[597,38,643,37,"damageBonus"],[597,49,643,48],[597,52,643,51],[597,55,643,55],[598,8,644,6],[599,6,645,4],[599,7,645,5],[599,8,645,6],[601,6,647,4],[602,6,648,4],[602,10,648,10,"isAOE"],[602,15,648,15],[602,18,648,18,"ability"],[602,25,648,25],[602,26,648,26,"effects"],[602,33,648,33],[602,34,648,34,"includes"],[602,42,648,42],[602,43,648,43],[602,48,648,48],[602,49,648,49],[602,53,648,53,"ability"],[602,60,648,60],[602,61,648,61,"stats"],[602,66,648,66],[602,67,648,67,"aoeRadius"],[602,76,648,76],[603,6,649,4,"console"],[603,13,649,11],[603,14,649,12,"log"],[603,17,649,15],[603,18,649,16],[603,39,649,37,"ability"],[603,46,649,44],[603,47,649,45,"name"],[603,51,649,49],[603,66,649,64,"JSON"],[603,70,649,68],[603,71,649,69,"stringify"],[603,80,649,78],[603,81,649,79,"ability"],[603,88,649,86],[603,89,649,87,"effects"],[603,96,649,94],[603,97,649,95],[603,113,649,111,"ability"],[603,120,649,118],[603,121,649,119,"stats"],[603,126,649,124],[603,127,649,125,"aoeRadius"],[603,136,649,134],[603,148,649,146,"isAOE"],[603,153,649,151],[603,155,649,153],[603,156,649,154],[604,6,651,4],[604,10,651,8,"isAOE"],[604,15,651,13],[604,17,651,15],[605,8,652,6,"console"],[605,15,652,13],[605,16,652,14,"log"],[605,19,652,17],[605,20,652,18],[605,39,652,37,"ability"],[605,46,652,44],[605,47,652,45,"name"],[605,51,652,49],[605,67,652,65,"ability"],[605,74,652,72],[605,75,652,73,"stats"],[605,80,652,78],[605,81,652,79,"aoeRadius"],[605,90,652,88],[605,92,652,90],[605,93,652,91],[607,8,654,6],[608,8,655,6],[609,8,656,6],[609,12,656,12,"ninjaX"],[609,18,656,18],[609,21,656,21,"currentNinjaPosition"],[609,41,656,41],[609,42,656,42,"x"],[609,43,656,43],[609,46,656,46],[609,48,656,48],[609,49,656,49],[609,50,656,50],[610,8,657,6],[610,12,657,12,"ninjaY"],[610,18,657,18],[610,21,657,21,"currentNinjaPosition"],[610,41,657,41],[610,42,657,42,"y"],[610,43,657,43],[610,46,657,46],[610,48,657,48],[611,8,658,6],[611,12,658,12,"aoeRadius"],[611,21,658,21],[611,24,658,24,"ability"],[611,31,658,31],[611,32,658,32,"stats"],[611,37,658,37],[611,38,658,38,"aoeRadius"],[611,47,658,47],[612,8,660,6],[612,12,660,12,"enemiesInRange"],[612,26,660,26],[612,29,660,29,"state"],[612,34,660,34],[612,35,660,35,"enemies"],[612,42,660,42],[612,43,660,43,"filter"],[612,49,660,49],[612,50,660,50,"enemy"],[612,55,660,55],[612,59,660,59],[613,10,661,8],[613,14,661,14,"enemyX"],[613,20,661,20],[613,23,661,23,"enemy"],[613,28,661,28],[613,29,661,29,"position"],[613,37,661,37],[613,38,661,38,"x"],[613,39,661,39],[613,42,661,42],[613,46,661,46],[613,47,661,47],[613,48,661,48],[614,10,662,8],[614,14,662,14,"enemyY"],[614,20,662,20],[614,23,662,23,"enemy"],[614,28,662,28],[614,29,662,29,"position"],[614,37,662,37],[614,38,662,38,"y"],[614,39,662,39],[614,42,662,42],[614,46,662,46],[615,10,663,8],[615,14,663,14,"distance"],[615,22,663,22],[615,25,663,25,"Math"],[615,29,663,29],[615,30,663,30,"sqrt"],[615,34,663,34],[615,35,663,35,"Math"],[615,39,663,39],[615,40,663,40,"pow"],[615,43,663,43],[615,44,663,44,"enemyX"],[615,50,663,50],[615,53,663,53,"ninjaX"],[615,59,663,59],[615,61,663,61],[615,62,663,62],[615,63,663,63],[615,66,663,66,"Math"],[615,70,663,70],[615,71,663,71,"pow"],[615,74,663,74],[615,75,663,75,"enemyY"],[615,81,663,81],[615,84,663,84,"ninjaY"],[615,90,663,90],[615,92,663,92],[615,93,663,93],[615,94,663,94],[615,95,663,95],[616,10,664,8],[616,17,664,15,"distance"],[616,25,664,23],[616,29,664,27,"aoeRadius"],[616,38,664,36],[617,8,665,6],[617,9,665,7],[617,10,665,8],[618,8,667,6,"console"],[618,15,667,13],[618,16,667,14,"log"],[618,19,667,17],[618,20,667,18],[618,45,667,43,"enemiesInRange"],[618,59,667,57],[618,60,667,58,"length"],[618,66,667,64],[618,88,667,86,"aoeRadius"],[618,97,667,95],[618,107,667,105],[618,108,667,106],[620,8,669,6],[621,8,670,6,"enemiesInRange"],[621,22,670,20],[621,23,670,21,"forEach"],[621,30,670,28],[621,31,670,29,"enemy"],[621,36,670,34],[621,40,670,38],[622,10,671,8],[622,14,671,14,"damageResult"],[622,26,671,26],[622,29,671,29,"DamageCalculator"],[622,48,671,45],[622,49,671,45,"DamageCalculator"],[622,65,671,45],[622,66,671,46,"calculateDamage"],[622,81,671,61],[622,82,671,62,"damage"],[622,88,671,68],[622,90,671,70,"state"],[622,95,671,75],[622,96,671,76,"playerStats"],[622,107,671,87],[622,109,671,89,"enemy"],[622,114,671,94],[622,115,671,95,"stats"],[622,120,671,100],[622,121,671,101],[623,10,672,8,"createProjectile"],[623,26,672,24],[623,27,672,25,"enemy"],[623,32,672,30],[623,34,672,32,"damageResult"],[623,46,672,44],[623,47,672,45,"damage"],[623,53,672,51],[623,55,672,53,"currentNinjaPosition"],[623,75,672,73],[623,77,672,75],[624,12,673,10,"id"],[624,14,673,12],[624,16,673,14,"ability"],[624,23,673,21],[624,24,673,22,"id"],[624,26,673,24],[625,12,674,10,"name"],[625,16,674,14],[625,18,674,16,"ability"],[625,25,674,23],[625,26,674,24,"name"],[625,30,674,28],[626,12,675,10,"icon"],[626,16,675,14],[626,18,675,16,"ability"],[626,25,675,23],[626,26,675,24,"icon"],[627,10,676,8],[627,11,676,9],[627,12,676,10],[628,10,677,8,"console"],[628,17,677,15],[628,18,677,16,"log"],[628,21,677,19],[628,22,677,20],[628,37,677,35,"enemy"],[628,42,677,40],[628,43,677,41,"name"],[628,47,677,45],[628,55,677,53,"damageResult"],[628,67,677,65],[628,68,677,66,"damage"],[628,74,677,72],[628,83,677,81],[628,84,677,82],[630,10,679,8],[631,10,680,8],[631,14,680,12,"damageResult"],[631,26,680,24],[631,27,680,25,"damage"],[631,33,680,31],[631,37,680,35,"enemy"],[631,42,680,40],[631,43,680,41,"health"],[631,49,680,47],[631,51,680,49],[632,12,681,10,"console"],[632,19,681,17],[632,20,681,18,"log"],[632,23,681,21],[632,24,681,22],[632,67,681,65,"enemy"],[632,72,681,70],[632,73,681,71,"name"],[632,77,681,75],[632,90,681,88,"damageResult"],[632,102,681,100],[632,103,681,101,"damage"],[632,109,681,107],[632,124,681,122,"enemy"],[632,129,681,127],[632,130,681,128,"health"],[632,136,681,134],[632,139,681,137],[632,140,681,138],[633,10,682,8],[634,8,683,6],[634,9,683,7],[634,10,683,8],[635,8,685,6,"console"],[635,15,685,13],[635,16,685,14,"log"],[635,19,685,17],[635,20,685,18],[635,26,685,24,"ability"],[635,33,685,31],[635,34,685,32,"name"],[635,38,685,36],[635,56,685,54,"enemiesInRange"],[635,70,685,68],[635,71,685,69,"length"],[635,77,685,75],[635,93,685,91,"damage"],[635,99,685,97],[635,118,685,116],[635,119,685,117],[636,6,687,4],[636,7,687,5],[636,13,687,11],[637,8,688,6],[638,8,689,6],[638,12,689,12,"target"],[638,18,689,18],[638,21,689,21,"findClosestEnemyInternal"],[638,45,689,45],[638,46,689,46,"state"],[638,51,689,51],[638,52,689,52,"enemies"],[638,59,689,59],[638,60,689,60],[639,8,690,6],[639,12,690,10],[639,13,690,11,"target"],[639,19,690,17],[639,21,690,19],[640,8,692,6],[640,12,692,12,"damageResult"],[640,24,692,24],[640,27,692,27,"DamageCalculator"],[640,46,692,43],[640,47,692,43,"DamageCalculator"],[640,63,692,43],[640,64,692,44,"calculateDamage"],[640,79,692,59],[640,80,692,60,"damage"],[640,86,692,66],[640,88,692,68,"state"],[640,93,692,73],[640,94,692,74,"playerStats"],[640,105,692,85],[640,107,692,87,"target"],[640,113,692,93],[640,114,692,94,"stats"],[640,119,692,99],[640,120,692,100],[642,8,694,6],[643,8,695,6,"console"],[643,15,695,13],[643,16,695,14,"log"],[643,19,695,17],[643,20,695,18],[643,71,695,69,"target"],[643,77,695,75],[643,78,695,76,"name"],[643,82,695,80],[643,91,695,89,"damageResult"],[643,103,695,101],[643,104,695,102,"damage"],[643,110,695,108],[643,119,695,117],[643,120,695,118],[644,8,696,6,"createProjectile"],[644,24,696,22],[644,25,696,23,"target"],[644,31,696,29],[644,33,696,31,"damageResult"],[644,45,696,43],[644,46,696,44,"damage"],[644,52,696,50],[644,54,696,52,"currentNinjaPosition"],[644,74,696,72],[644,76,696,74],[645,10,697,8,"id"],[645,12,697,10],[645,14,697,12,"ability"],[645,21,697,19],[645,22,697,20,"id"],[645,24,697,22],[646,10,698,8,"name"],[646,14,698,12],[646,16,698,14,"ability"],[646,23,698,21],[646,24,698,22,"name"],[646,28,698,26],[647,10,699,8,"icon"],[647,14,699,12],[647,16,699,14,"ability"],[647,23,699,21],[647,24,699,22,"icon"],[648,8,700,6],[648,9,700,7],[648,10,700,8],[649,8,702,6,"console"],[649,15,702,13],[649,16,702,14,"log"],[649,19,702,17],[649,20,702,18],[649,26,702,24,"ability"],[649,33,702,31],[649,34,702,32,"name"],[649,38,702,36],[649,66,702,64,"damageResult"],[649,78,702,76],[649,79,702,77,"damage"],[649,85,702,83],[649,95,702,93,"damageResult"],[649,107,702,105],[649,108,702,106,"isCritical"],[649,118,702,116],[649,121,702,119],[649,131,702,129],[649,134,702,132],[649,136,702,134],[649,138,702,136],[649,139,702,137],[651,8,704,6],[652,8,705,6],[652,12,705,10,"damageResult"],[652,24,705,22],[652,25,705,23,"damage"],[652,31,705,29],[652,35,705,33,"target"],[652,41,705,39],[652,42,705,40,"health"],[652,48,705,46],[652,50,705,48],[653,10,706,8,"console"],[653,17,706,15],[653,18,706,16,"log"],[653,21,706,19],[653,22,706,20],[653,75,706,73,"target"],[653,81,706,79],[653,82,706,80,"name"],[653,86,706,84],[653,99,706,97,"damageResult"],[653,111,706,109],[653,112,706,110,"damage"],[653,118,706,116],[653,133,706,131,"target"],[653,139,706,137],[653,140,706,138,"health"],[653,146,706,144],[653,149,706,147],[653,150,706,148],[654,8,707,6],[655,6,708,4],[657,6,710,4],[658,6,711,4],[658,10,711,8,"ability"],[658,17,711,15],[658,18,711,16,"effects"],[658,25,711,23],[658,26,711,24,"includes"],[658,34,711,32],[658,35,711,33],[658,40,711,38],[658,41,711,39],[658,45,711,43,"ability"],[658,52,711,50],[658,53,711,51,"stats"],[658,58,711,56],[658,59,711,57,"duration"],[658,67,711,65],[658,69,711,67],[659,8,712,6],[659,12,712,12,"targets"],[659,19,712,19],[659,22,712,22,"isAOE"],[659,27,712,27],[659,30,713,8,"state"],[659,35,713,13],[659,36,713,14,"enemies"],[659,43,713,21],[659,44,713,22,"filter"],[659,50,713,28],[659,51,713,29,"enemy"],[659,56,713,34],[659,60,713,38],[660,10,714,10],[660,14,714,16,"ninjaX"],[660,20,714,22],[660,23,714,25,"currentNinjaPosition"],[660,43,714,45],[660,44,714,46,"x"],[660,45,714,47],[660,48,714,50],[660,50,714,52],[661,10,715,10],[661,14,715,16,"ninjaY"],[661,20,715,22],[661,23,715,25,"currentNinjaPosition"],[661,43,715,45],[661,44,715,46,"y"],[661,45,715,47],[661,48,715,50],[661,50,715,52],[662,10,716,10],[662,14,716,16,"enemyX"],[662,20,716,22],[662,23,716,25,"enemy"],[662,28,716,30],[662,29,716,31,"position"],[662,37,716,39],[662,38,716,40,"x"],[662,39,716,41],[662,42,716,44],[662,46,716,48],[663,10,717,10],[663,14,717,16,"enemyY"],[663,20,717,22],[663,23,717,25,"enemy"],[663,28,717,30],[663,29,717,31,"position"],[663,37,717,39],[663,38,717,40,"y"],[663,39,717,41],[663,42,717,44],[663,46,717,48],[664,10,718,10],[664,14,718,16,"distance"],[664,22,718,24],[664,25,718,27,"Math"],[664,29,718,31],[664,30,718,32,"sqrt"],[664,34,718,36],[664,35,718,37,"Math"],[664,39,718,41],[664,40,718,42,"pow"],[664,43,718,45],[664,44,718,46,"enemyX"],[664,50,718,52],[664,53,718,55,"ninjaX"],[664,59,718,61],[664,61,718,63],[664,62,718,64],[664,63,718,65],[664,66,718,68,"Math"],[664,70,718,72],[664,71,718,73,"pow"],[664,74,718,76],[664,75,718,77,"enemyY"],[664,81,718,83],[664,84,718,86,"ninjaY"],[664,90,718,92],[664,92,718,94],[664,93,718,95],[664,94,718,96],[664,95,718,97],[665,10,719,10],[665,17,719,17,"distance"],[665,25,719,25],[665,29,719,29,"ability"],[665,36,719,36],[665,37,719,37,"stats"],[665,42,719,42],[665,43,719,43,"aoeRadius"],[665,52,719,52],[666,8,720,8],[666,9,720,9],[666,10,720,10],[666,13,721,8],[666,14,721,9,"findClosestEnemyInternal"],[666,38,721,33],[666,39,721,34,"state"],[666,44,721,39],[666,45,721,40,"enemies"],[666,52,721,47],[666,53,721,48],[666,54,721,49],[666,55,721,50,"filter"],[666,61,721,56],[666,62,721,57,"Boolean"],[666,69,721,64],[666,70,721,65],[667,8,723,6,"targets"],[667,15,723,13],[667,16,723,14,"forEach"],[667,23,723,21],[667,24,723,22,"target"],[667,30,723,28],[667,34,723,32],[668,10,724,8,"state"],[668,15,724,13],[668,16,724,14,"statusEffects"],[668,29,724,27],[668,30,724,28,"addEffect"],[668,39,724,37],[668,40,724,38,"target"],[668,46,724,44],[668,47,724,45,"id"],[668,49,724,47],[668,51,724,49],[669,12,725,10,"id"],[669,14,725,12],[669,16,725,14],[669,19,725,17,"ability"],[669,26,725,24],[669,27,725,25,"id"],[669,29,725,27],[669,35,725,33],[670,12,726,10,"type"],[670,16,726,14],[670,18,726,16],[670,23,726,21],[671,12,727,10,"remainingTicks"],[671,26,727,24],[671,28,727,26,"Math"],[671,32,727,30],[671,33,727,31,"floor"],[671,38,727,36],[671,39,727,37,"ability"],[671,46,727,44],[671,47,727,45,"stats"],[671,52,727,50],[671,53,727,51,"duration"],[671,61,727,59],[671,64,727,62],[671,66,727,64],[671,67,727,65],[672,12,728,10,"tickInterval"],[672,24,728,22],[672,26,728,24],[672,28,728,26],[673,12,729,10,"lastTick"],[673,20,729,18],[673,22,729,20,"state"],[673,27,729,25],[673,28,729,26,"currentTick"],[673,39,729,37],[674,12,730,10,"value"],[674,17,730,15],[674,19,730,17,"Math"],[674,23,730,21],[674,24,730,22,"floor"],[674,29,730,27],[674,30,730,28,"damage"],[674,36,730,34],[674,39,730,37],[674,42,730,40],[674,43,730,41],[675,12,731,10,"stackable"],[675,21,731,19],[675,23,731,21],[676,10,732,8],[676,11,732,9],[676,12,732,10],[677,8,733,6],[677,9,733,7],[677,10,733,8],[678,6,734,4],[680,6,736,4],[681,6,737,4],[681,10,737,8,"ability"],[681,17,737,15],[681,18,737,16,"effects"],[681,25,737,23],[681,26,737,24,"includes"],[681,34,737,32],[681,35,737,33],[681,41,737,39],[681,42,737,40],[681,46,737,44,"ability"],[681,53,737,51],[681,54,737,52,"id"],[681,56,737,54],[681,61,737,59],[681,75,737,73],[681,77,737,75],[682,8,738,6,"console"],[682,15,738,13],[682,16,738,14,"log"],[682,19,738,17],[682,20,738,18],[682,66,738,64,"ability"],[682,73,738,71],[682,74,738,72,"stats"],[682,79,738,77],[682,80,738,78,"duration"],[682,88,738,86],[682,98,738,96],[682,99,738,97],[684,8,740,6],[685,8,741,6],[685,12,741,12,"cloneX"],[685,18,741,18],[685,21,741,21,"currentNinjaPosition"],[685,41,741,41],[685,42,741,42,"x"],[685,43,741,43],[685,46,741,46],[685,48,741,48],[685,49,741,49],[685,50,741,50],[686,8,742,6],[686,12,742,12,"cloneY"],[686,18,742,18],[686,21,742,21,"currentNinjaPosition"],[686,41,742,41],[686,42,742,42,"y"],[686,43,742,43],[686,46,742,46],[686,48,742,48],[686,49,742,49],[686,50,742,50],[688,8,744,6,"state"],[688,13,744,11],[688,14,744,12,"shadowClone"],[688,25,744,23],[688,28,744,26],[689,10,745,8,"id"],[689,12,745,10],[689,14,745,12],[689,30,745,28,"Date"],[689,34,745,32],[689,35,745,33,"now"],[689,38,745,36],[689,39,745,37],[689,40,745,38],[689,42,745,40],[690,10,746,8,"remainingTicks"],[690,24,746,22],[690,26,746,24,"Math"],[690,30,746,28],[690,31,746,29,"floor"],[690,36,746,34],[690,37,746,35,"ability"],[690,44,746,42],[690,45,746,43,"stats"],[690,50,746,48],[690,51,746,49,"duration"],[690,59,746,57],[690,62,746,60],[690,64,746,62],[690,65,746,63],[691,10,746,65],[692,10,747,8,"position"],[692,18,747,16],[692,20,747,18],[693,12,747,20,"x"],[693,13,747,21],[693,15,747,23,"cloneX"],[693,21,747,29],[694,12,747,31,"y"],[694,13,747,32],[694,15,747,34,"cloneY"],[695,10,747,41],[695,11,747,42],[696,10,748,8,"damageMultiplier"],[696,26,748,24],[696,28,748,26],[696,31,748,29],[696,32,748,31],[697,8,749,6],[697,9,749,7],[698,8,751,6,"console"],[698,15,751,13],[698,16,751,14,"log"],[698,19,751,17],[698,20,751,18],[698,63,751,61,"ability"],[698,70,751,68],[698,71,751,69,"stats"],[698,76,751,74],[698,77,751,75,"duration"],[698,85,751,83],[698,108,751,106],[698,109,751,107],[699,6,752,4],[700,4,753,2],[700,5,753,3],[702,4,755,2],[703,4,756,2],[703,8,756,8,"createProjectile"],[703,24,756,24],[703,27,756,27,"createProjectile"],[703,28,756,28,"targetEnemy"],[703,39,756,52],[703,41,756,54,"damage"],[703,47,756,68],[703,49,756,70,"ninjaPos"],[703,57,756,103],[703,59,756,105,"abilityInfo"],[703,70,756,159],[703,72,756,161,"isAOE"],[703,77,756,176],[703,79,756,178,"aoeRadius"],[703,88,756,196],[703,93,756,201],[704,6,757,4],[704,10,757,8],[704,11,757,9,"targetEnemy"],[704,22,757,20],[704,24,757,22],[705,8,758,6,"console"],[705,15,758,13],[705,16,758,14,"log"],[705,19,758,17],[705,20,758,18],[705,65,758,63],[705,66,758,64],[706,8,759,6],[706,15,759,13],[706,19,759,17],[707,6,760,4],[709,6,762,4],[710,6,763,4,"console"],[710,13,763,11],[710,14,763,12,"log"],[710,17,763,15],[710,18,763,16],[710,52,763,50,"damage"],[710,58,763,56],[710,70,763,68,"targetEnemy"],[710,81,763,79],[710,82,763,80,"name"],[710,86,763,84],[710,91,763,89,"targetEnemy"],[710,102,763,100],[710,103,763,101,"health"],[710,109,763,107],[710,113,763,111,"targetEnemy"],[710,124,763,122],[710,125,763,123,"maxHealth"],[710,134,763,132],[710,140,763,138],[710,141,763,139],[711,6,765,4],[711,10,765,10,"SCREEN_WIDTH"],[711,22,765,22],[711,25,765,25],[711,28,765,28],[712,6,766,4],[712,10,766,10,"GAME_AREA_HEIGHT"],[712,26,766,26],[712,29,766,29],[712,32,766,32],[712,35,766,35],[712,38,766,38],[712,39,766,39],[712,40,766,40],[713,6,767,4],[713,10,767,10,"NINJA_SIZE"],[713,20,767,20],[713,23,767,23],[713,25,767,25],[715,6,769,4],[716,6,770,4],[716,10,770,10,"ninjaX"],[716,16,770,16],[716,19,770,19,"ninjaPos"],[716,27,770,27],[716,30,770,30,"ninjaPos"],[716,38,770,38],[716,39,770,39,"x"],[716,40,770,40],[716,43,770,43,"NINJA_SIZE"],[716,53,770,53],[716,56,770,56],[716,57,770,57],[716,60,770,60,"SCREEN_WIDTH"],[716,72,770,72],[716,75,770,75],[716,76,770,76],[717,6,771,4],[717,10,771,10,"ninjaY"],[717,16,771,16],[717,19,771,19,"ninjaPos"],[717,27,771,27],[717,30,771,30,"ninjaPos"],[717,38,771,38],[717,39,771,39,"y"],[717,40,771,40],[717,43,771,43,"NINJA_SIZE"],[717,53,771,53],[717,56,771,56],[717,57,771,57],[717,60,771,60,"GAME_AREA_HEIGHT"],[717,76,771,76],[717,79,771,79],[717,80,771,80],[718,6,772,4],[718,10,772,10,"ENEMY_SIZE"],[718,20,772,20],[718,23,772,23],[718,25,772,25],[719,6,774,4],[719,10,774,10,"projectileId"],[719,22,774,22],[719,25,774,25],[719,33,774,33,"Date"],[719,37,774,37],[719,38,774,38,"now"],[719,41,774,41],[719,42,774,42],[719,43,774,43],[719,47,774,47,"Math"],[719,51,774,51],[719,52,774,52,"random"],[719,58,774,58],[719,59,774,59],[719,60,774,60],[719,62,774,62],[720,6,776,4],[720,10,776,10,"projectile"],[720,20,776,38],[720,23,776,41],[721,8,777,6,"id"],[721,10,777,8],[721,12,777,10,"projectileId"],[721,24,777,22],[722,8,778,6,"x"],[722,9,778,7],[722,11,778,9,"ninjaX"],[722,17,778,15],[723,8,779,6,"y"],[723,9,779,7],[723,11,779,9,"ninjaY"],[723,17,779,15],[724,8,780,6,"targetX"],[724,15,780,13],[724,17,780,15,"targetEnemy"],[724,28,780,26],[724,29,780,27,"position"],[724,37,780,35],[724,38,780,36,"x"],[724,39,780,37],[724,42,780,40,"ENEMY_SIZE"],[724,52,780,50],[724,55,780,53],[724,56,780,54],[725,8,781,6,"targetY"],[725,15,781,13],[725,17,781,15,"targetEnemy"],[725,28,781,26],[725,29,781,27,"position"],[725,37,781,35],[725,38,781,36,"y"],[725,39,781,37],[725,42,781,40,"ENEMY_SIZE"],[725,52,781,50],[725,55,781,53],[725,56,781,54],[726,8,782,6,"targetEnemyId"],[726,21,782,19],[726,23,782,21,"targetEnemy"],[726,34,782,32],[726,35,782,33,"id"],[726,37,782,35],[727,8,783,6,"damage"],[727,14,783,12],[727,16,783,14,"damage"],[727,22,783,20],[728,8,784,6,"startTime"],[728,17,784,15],[728,19,784,17,"Date"],[728,23,784,21],[728,24,784,22,"now"],[728,27,784,25],[728,28,784,26],[728,29,784,27],[729,8,785,6,"duration"],[729,16,785,14],[729,18,785,16],[729,21,785,19],[730,8,785,21],[731,8,786,6],[732,8,787,6,"abilityId"],[732,17,787,15],[732,19,787,17,"abilityInfo"],[732,30,787,28],[732,32,787,30,"id"],[732,34,787,32],[732,38,787,36],[732,54,787,52],[733,8,788,6,"abilityName"],[733,19,788,17],[733,21,788,19,"abilityInfo"],[733,32,788,30],[733,34,788,32,"name"],[733,38,788,36],[733,42,788,40],[733,58,788,56],[734,8,789,6,"abilityIcon"],[734,19,789,17],[734,21,789,19,"abilityInfo"],[734,32,789,30],[734,34,789,32,"icon"],[734,38,789,36],[734,42,789,40],[734,46,789,44],[735,8,789,46],[736,8,790,6],[737,8,791,6,"isAOE"],[737,13,791,11],[737,15,791,13,"isAOE"],[737,20,791,18],[737,24,791,22],[737,29,791,27],[738,8,792,6,"aoeRadius"],[738,17,792,15],[738,19,792,17,"aoeRadius"],[738,28,792,26],[738,32,792,30],[739,6,793,4],[739,7,793,5],[740,6,795,4,"console"],[740,13,795,11],[740,14,795,12,"log"],[740,17,795,15],[740,18,795,16],[740,44,795,42,"abilityInfo"],[740,55,795,53],[740,57,795,55,"name"],[740,61,795,59],[740,65,795,63],[740,81,795,79],[740,101,795,99,"projectileId"],[740,113,795,111],[740,128,795,126,"targetEnemy"],[740,139,795,137],[740,140,795,138,"name"],[740,144,795,142],[740,152,795,150,"damage"],[740,158,795,156],[740,167,795,165],[740,168,795,166],[741,6,796,4,"console"],[741,13,796,11],[741,14,796,12,"log"],[741,17,796,15],[741,18,796,16],[741,48,796,46,"isAOE"],[741,53,796,51],[741,68,796,66,"aoeRadius"],[741,77,796,75],[741,89,796,87,"damage"],[741,95,796,93],[741,97,796,95],[741,98,796,96],[742,6,798,4,"console"],[742,13,798,11],[742,14,798,12,"log"],[742,17,798,15],[742,18,798,16],[742,53,798,51,"targetEnemy"],[742,64,798,62],[742,65,798,63,"id"],[742,67,798,65],[742,75,798,73,"damage"],[742,81,798,79],[742,90,798,88],[742,91,798,89],[743,6,799,4,"console"],[743,13,799,11],[743,14,799,12,"log"],[743,17,799,15],[743,18,799,16],[743,53,799,51,"ninjaX"],[743,59,799,57],[743,64,799,62,"ninjaY"],[743,70,799,68],[743,87,799,85,"projectile"],[743,97,799,95],[743,98,799,96,"targetX"],[743,105,799,103],[743,110,799,108,"projectile"],[743,120,799,118],[743,121,799,119,"targetY"],[743,128,799,126],[743,131,799,129],[743,132,799,130],[744,6,801,4,"setProjectiles"],[744,20,801,18],[744,21,801,19,"prev"],[744,25,801,23],[744,29,801,27],[744,30,801,28],[744,33,801,31,"prev"],[744,37,801,35],[744,39,801,37,"projectile"],[744,49,801,47],[744,50,801,48],[744,51,801,49],[746,6,803,4],[747,6,804,4],[749,6,806,4],[749,13,806,11,"projectile"],[749,23,806,21],[750,4,807,2],[750,5,807,3],[752,4,809,2],[753,4,810,2],[753,8,810,8,"spawnTestEnemy"],[753,22,810,22],[753,25,810,26,"state"],[753,30,810,44],[753,34,810,49],[754,6,811,4,"console"],[754,13,811,11],[754,14,811,12,"log"],[754,17,811,15],[754,18,811,16],[754,83,811,81],[754,84,811,82],[756,6,813,4],[757,6,814,4],[757,10,814,10,"zoneEnemy"],[757,19,814,19],[757,22,814,22,"spawnZoneEnemy"],[757,36,814,36],[757,37,814,37],[757,38,814,38],[758,6,815,4],[758,10,815,8],[758,11,815,9,"zoneEnemy"],[758,20,815,18],[758,22,815,20],[759,8,816,6,"console"],[759,15,816,13],[759,16,816,14,"log"],[759,19,816,17],[759,20,816,18],[759,76,816,74],[759,77,816,75],[760,8,817,6],[761,8,818,6,"spawnBasicTestEnemy"],[761,27,818,25],[761,28,818,26,"state"],[761,33,818,31],[761,34,818,32],[762,8,819,6],[763,6,820,4],[764,6,822,4,"console"],[764,13,822,11],[764,14,822,12,"log"],[764,17,822,15],[764,18,822,16],[764,44,822,42,"zoneEnemy"],[764,53,822,51],[764,54,822,52,"name"],[764,58,822,56],[764,63,822,61,"zoneEnemy"],[764,72,822,70],[764,73,822,71,"typeId"],[764,79,822,77],[764,94,822,92,"currentZone"],[764,105,822,103],[764,107,822,105,"id"],[764,109,822,107],[764,119,822,117,"currentZoneLevel"],[764,135,822,133],[764,137,822,135,"level"],[764,142,822,140],[764,144,822,142],[764,145,822,143],[766,6,824,4],[767,6,825,4],[767,10,825,10,"combatEnemy"],[767,21,825,34],[767,24,825,37],[768,8,826,6,"id"],[768,10,826,8],[768,12,826,10,"zoneEnemy"],[768,21,826,19],[768,22,826,20,"id"],[768,24,826,22],[769,8,827,6,"name"],[769,12,827,10],[769,14,827,12,"zoneEnemy"],[769,23,827,21],[769,24,827,22,"name"],[769,28,827,26],[770,8,828,6,"health"],[770,14,828,12],[770,16,828,14,"zoneEnemy"],[770,25,828,23],[770,26,828,24,"hp"],[770,28,828,26],[771,8,829,6,"maxHealth"],[771,17,829,15],[771,19,829,17,"zoneEnemy"],[771,28,829,26],[771,29,829,27,"maxHP"],[771,34,829,32],[772,8,830,6,"stats"],[772,13,830,11],[772,15,830,13],[773,10,831,8,"attack"],[773,16,831,14],[773,18,831,16,"zoneEnemy"],[773,27,831,25],[773,28,831,26,"attack"],[773,34,831,32],[774,10,832,8,"defense"],[774,17,832,15],[774,19,832,17],[774,21,832,19],[775,10,832,21],[776,10,833,8,"health"],[776,16,833,14],[776,18,833,16,"zoneEnemy"],[776,27,833,25],[776,28,833,26,"hp"],[776,30,833,28],[777,10,834,8,"maxHealth"],[777,19,834,17],[777,21,834,19,"zoneEnemy"],[777,30,834,28],[777,31,834,29,"maxHP"],[777,36,834,34],[778,10,835,8,"critChance"],[778,20,835,18],[778,22,835,20],[778,23,835,21],[779,10,836,8,"critDamage"],[779,20,836,18],[779,22,836,20],[779,25,836,23],[780,10,837,8,"cooldownReduction"],[780,27,837,25],[780,29,837,27],[781,8,838,6],[781,9,838,7],[782,8,839,6,"position"],[782,16,839,14],[782,18,839,16,"zoneEnemy"],[782,27,839,25],[782,28,839,26,"position"],[782,36,839,34],[783,8,840,6,"lastDamaged"],[783,19,840,17],[783,21,840,19],[783,22,840,20],[784,8,841,6],[785,8,842,6,"zoneTypeId"],[785,18,842,16],[785,20,842,18,"zoneEnemy"],[785,29,842,27],[785,30,842,28,"typeId"],[785,36,842,34],[786,8,843,6,"zoneXP"],[786,14,843,12],[786,16,843,14,"zoneEnemy"],[786,25,843,23],[786,26,843,24,"xp"],[787,6,844,4],[787,7,844,5],[788,6,846,4,"console"],[788,13,846,11],[788,14,846,12,"log"],[788,17,846,15],[788,18,846,16],[788,42,846,40,"combatEnemy"],[788,53,846,51],[788,54,846,52,"name"],[788,58,846,56],[788,67,846,65,"combatEnemy"],[788,78,846,76],[788,79,846,77,"health"],[788,85,846,83],[788,100,846,98,"currentZone"],[788,111,846,109],[788,113,846,111,"id"],[788,115,846,113],[788,125,846,123,"currentZoneLevel"],[788,141,846,139],[788,143,846,141,"level"],[788,148,846,146],[788,150,846,148],[788,151,846,149],[789,6,847,4,"state"],[789,11,847,9],[789,12,847,10,"enemies"],[789,19,847,17],[789,20,847,18,"push"],[789,24,847,22],[789,25,847,23,"combatEnemy"],[789,36,847,34],[789,37,847,35],[790,4,848,2],[790,5,848,3],[792,4,850,2],[793,4,851,2],[793,8,851,8,"spawnBasicTestEnemy"],[793,27,851,27],[793,30,851,31,"state"],[793,35,851,49],[793,39,851,54],[794,6,852,4],[794,10,852,10,"SCREEN_WIDTH"],[794,22,852,22],[794,25,852,25],[794,28,852,28],[795,6,853,4],[795,10,853,10,"GAME_AREA_HEIGHT"],[795,26,853,26],[795,29,853,29],[795,32,853,32],[795,35,853,35],[795,38,853,38],[796,6,854,4],[796,10,854,10,"ENEMY_SIZE"],[796,20,854,20],[796,23,854,23],[796,25,854,25],[797,6,856,4],[797,10,856,10,"x"],[797,11,856,11],[797,14,856,14,"Math"],[797,18,856,18],[797,19,856,19,"random"],[797,25,856,25],[797,26,856,26],[797,27,856,27],[797,31,856,31,"SCREEN_WIDTH"],[797,43,856,43],[797,46,856,46,"ENEMY_SIZE"],[797,56,856,56],[797,59,856,59],[797,60,856,60],[797,61,856,61],[797,64,856,64,"ENEMY_SIZE"],[797,74,856,74],[798,6,857,4],[798,10,857,10,"y"],[798,11,857,11],[798,14,857,14,"Math"],[798,18,857,18],[798,19,857,19,"random"],[798,25,857,25],[798,26,857,26],[798,27,857,27],[798,31,857,31,"GAME_AREA_HEIGHT"],[798,47,857,47],[798,50,857,50,"ENEMY_SIZE"],[798,60,857,60],[798,63,857,63],[798,64,857,64],[798,65,857,65],[798,68,857,68,"ENEMY_SIZE"],[798,78,857,78],[799,6,859,4],[799,10,859,10,"enemy"],[799,15,859,28],[799,18,859,31],[800,8,860,6,"id"],[800,10,860,8],[800,12,860,10],[800,30,860,28,"Date"],[800,34,860,32],[800,35,860,33,"now"],[800,38,860,36],[800,39,860,37],[800,40,860,38],[800,44,860,42,"Math"],[800,48,860,46],[800,49,860,47,"random"],[800,55,860,53],[800,56,860,54],[800,57,860,55],[800,59,860,57],[801,8,861,6,"name"],[801,12,861,10],[801,14,861,12],[801,26,861,24,"Math"],[801,30,861,28],[801,31,861,29,"floor"],[801,36,861,34],[801,37,861,35,"Math"],[801,41,861,39],[801,42,861,40,"random"],[801,48,861,46],[801,49,861,47],[801,50,861,48],[801,53,861,51],[801,56,861,54],[801,57,861,55],[801,59,861,57],[802,8,862,6,"health"],[802,14,862,12],[802,16,862,14],[802,18,862,16],[803,8,863,6,"maxHealth"],[803,17,863,15],[803,19,863,17],[803,21,863,19],[804,8,864,6,"stats"],[804,13,864,11],[804,15,864,13],[805,10,865,8,"attack"],[805,16,865,14],[805,18,865,16],[805,20,865,18],[806,10,866,8,"defense"],[806,17,866,15],[806,19,866,17],[806,21,866,19],[807,10,867,8,"health"],[807,16,867,14],[807,18,867,16],[807,20,867,18],[808,10,868,8,"maxHealth"],[808,19,868,17],[808,21,868,19],[808,23,868,21],[809,10,869,8,"critChance"],[809,20,869,18],[809,22,869,20],[809,23,869,21],[810,10,870,8,"critDamage"],[810,20,870,18],[810,22,870,20],[810,25,870,23],[811,10,871,8,"cooldownReduction"],[811,27,871,25],[811,29,871,27],[812,8,872,6],[812,9,872,7],[813,8,873,6,"position"],[813,16,873,14],[813,18,873,16],[814,10,873,18,"x"],[814,11,873,19],[815,10,873,21,"y"],[816,8,873,23],[816,9,873,24],[817,8,874,6,"lastDamaged"],[817,19,874,17],[817,21,874,19],[818,6,875,4],[818,7,875,5],[819,6,877,4,"console"],[819,13,877,11],[819,14,877,12,"log"],[819,17,877,15],[819,18,877,16],[819,42,877,40,"enemy"],[819,47,877,45],[819,48,877,46,"name"],[819,52,877,50],[819,60,877,58,"Math"],[819,64,877,62],[819,65,877,63,"round"],[819,70,877,68],[819,71,877,69,"x"],[819,72,877,70],[819,73,877,71],[819,78,877,76,"Math"],[819,82,877,80],[819,83,877,81,"round"],[819,88,877,86],[819,89,877,87,"y"],[819,90,877,88],[819,91,877,89],[819,94,877,92],[819,95,877,93],[820,6,878,4,"state"],[820,11,878,9],[820,12,878,10,"enemies"],[820,19,878,17],[820,20,878,18,"push"],[820,24,878,22],[820,25,878,23,"enemy"],[820,30,878,28],[820,31,878,29],[821,4,879,2],[821,5,879,3],[823,4,881,2],[824,4,882,2],[825,4,883,2],[825,8,883,8,"startCombat"],[825,19,883,19],[825,22,883,22,"React"],[825,27,883,27],[825,28,883,27,"default"],[825,35,883,27],[825,36,883,28,"useCallback"],[825,47,883,39],[825,48,883,40],[825,54,883,46],[826,6,884,4,"console"],[826,13,884,11],[826,14,884,12,"log"],[826,17,884,15],[826,18,884,16],[826,63,884,61],[826,64,884,62],[827,6,885,4,"console"],[827,13,885,11],[827,14,885,12,"log"],[827,17,885,15],[827,18,885,16],[827,37,885,35],[827,39,885,37,"combatEngine"],[827,58,885,49],[827,59,885,49,"combatEngine"],[827,71,885,49],[827,72,885,50],[828,6,886,4,"console"],[828,13,886,11],[828,14,886,12,"log"],[828,17,886,15],[828,18,886,16],[828,51,886,49],[828,53,886,51,"handleCombatTick"],[828,69,886,67],[828,70,886,68],[829,6,887,4,"setCombatState"],[829,20,887,18],[829,21,887,19,"prev"],[829,25,887,23],[829,30,887,28],[830,8,887,30],[830,11,887,33,"prev"],[830,15,887,37],[831,8,887,39,"isInCombat"],[831,18,887,49],[831,20,887,51],[832,6,887,56],[832,7,887,57],[832,8,887,58],[832,9,887,59],[834,6,889,4],[835,6,890,4,"combatEngine"],[835,25,890,16],[835,26,890,16,"combatEngine"],[835,38,890,16],[835,39,890,17,"addTickCallback"],[835,54,890,32],[835,55,890,33,"handleCombatTick"],[835,71,890,49],[835,72,890,50],[836,6,891,4,"console"],[836,13,891,11],[836,14,891,12,"log"],[836,17,891,15],[836,18,891,16],[836,62,891,60],[836,63,891,61],[838,6,893,4],[839,6,894,4,"combatEngine"],[839,25,894,16],[839,26,894,16,"combatEngine"],[839,38,894,16],[839,39,894,17,"start"],[839,44,894,22],[839,45,894,23],[839,46,894,24],[840,6,895,4,"console"],[840,13,895,11],[840,14,895,12,"log"],[840,17,895,15],[840,18,895,16],[840,51,895,49],[840,52,895,50],[841,4,896,2],[841,5,896,3],[841,7,896,5],[841,8,896,6,"combatEngine"],[841,27,896,18],[841,28,896,18,"combatEngine"],[841,40,896,18],[841,42,896,20,"handleCombatTick"],[841,58,896,36],[841,59,896,37],[841,60,896,38],[843,4,898,2],[844,4,899,2],[844,8,899,8,"stopCombat"],[844,18,899,18],[844,21,899,21,"React"],[844,26,899,26],[844,27,899,26,"default"],[844,34,899,26],[844,35,899,27,"useCallback"],[844,46,899,38],[844,47,899,39],[844,53,899,45],[845,6,900,4,"setCombatState"],[845,20,900,18],[845,21,900,19,"prev"],[845,25,900,23],[845,30,900,28],[846,8,900,30],[846,11,900,33,"prev"],[846,15,900,37],[847,8,900,39,"isInCombat"],[847,18,900,49],[847,20,900,51],[848,6,900,57],[848,7,900,58],[848,8,900,59],[848,9,900,60],[849,6,901,4,"combatEngine"],[849,25,901,16],[849,26,901,16,"combatEngine"],[849,38,901,16],[849,39,901,17,"removeTickCallback"],[849,57,901,35],[849,58,901,36,"handleCombatTick"],[849,74,901,52],[849,75,901,53],[850,4,902,2],[850,5,902,3],[850,7,902,5],[850,8,902,6,"combatEngine"],[850,27,902,18],[850,28,902,18,"combatEngine"],[850,40,902,18],[850,42,902,20,"handleCombatTick"],[850,58,902,36],[850,59,902,37],[850,60,902,38],[852,4,904,2],[853,4,905,2],[853,8,905,8,"equipAbility"],[853,20,905,20],[853,23,905,23,"equipAbility"],[853,24,905,24,"abilityId"],[853,33,905,41],[853,35,905,43,"slotIndex"],[853,44,905,60],[853,49,905,74],[854,6,906,4],[854,13,906,11,"combatState"],[854,24,906,22],[854,25,906,23,"abilityManager"],[854,39,906,37],[854,40,906,38,"equipAbility"],[854,52,906,50],[854,53,906,51,"abilityId"],[854,62,906,60],[854,64,906,62,"slotIndex"],[854,73,906,71],[854,74,906,72],[855,4,907,2],[855,5,907,3],[856,4,909,2],[856,8,909,8,"getDeck"],[856,15,909,15],[856,18,909,18,"getDeck"],[856,19,909,18],[856,24,909,24],[857,6,910,4],[857,13,910,11,"combatState"],[857,24,910,22],[857,25,910,23,"abilityManager"],[857,39,910,37],[857,40,910,38,"getDeck"],[857,47,910,45],[857,48,910,46],[857,49,910,47],[858,4,911,2],[858,5,911,3],[859,4,913,2],[859,8,913,8,"getAvailableAbilities"],[859,29,913,29],[859,32,913,32,"getAvailableAbilities"],[859,33,913,32],[859,38,913,38],[860,6,914,4],[860,13,914,11,"combatState"],[860,24,914,22],[860,25,914,23,"abilityManager"],[860,39,914,37],[860,40,914,38,"getAvailableAbilities"],[860,61,914,59],[860,62,914,60],[860,63,914,61],[861,4,915,2],[861,5,915,3],[862,4,917,2],[862,8,917,8,"upgradeAbility"],[862,22,917,22],[862,25,917,26,"abilityId"],[862,34,917,43],[862,38,917,57],[863,6,918,4],[863,13,918,11,"combatState"],[863,24,918,22],[863,25,918,23,"abilityManager"],[863,39,918,37],[863,40,918,38,"upgradeAbility"],[863,54,918,52],[863,55,918,53,"abilityId"],[863,64,918,62],[863,65,918,63],[864,4,919,2],[864,5,919,3],[866,4,921,2],[867,4,922,2],[867,8,922,8,"clearAllEnemies"],[867,23,922,23],[867,26,922,26,"clearAllEnemies"],[867,27,922,26],[867,32,922,32],[868,6,923,4,"console"],[868,13,923,11],[868,14,923,12,"log"],[868,17,923,15],[868,18,923,16],[868,67,923,65],[868,68,923,66],[869,6,924,4,"setCombatState"],[869,20,924,18],[869,21,924,19,"prev"],[869,25,924,23],[869,30,924,28],[870,8,925,6],[870,11,925,9,"prev"],[870,15,925,13],[871,8,926,6,"enemies"],[871,15,926,13],[871,17,926,15],[872,6,927,4],[872,7,927,5],[872,8,927,6],[872,9,927,7],[873,4,928,2],[873,5,928,3],[875,4,930,2],[876,4,931,2],[878,4,933,2],[879,4,934,2],[879,8,934,8,"spawnEnemy"],[879,18,934,18],[879,21,934,22,"position"],[879,29,934,57],[879,33,934,75],[880,6,935,4],[880,10,935,10,"SCREEN_WIDTH"],[880,22,935,22],[880,25,935,25],[880,28,935,28],[881,6,936,4],[881,10,936,10,"GAME_AREA_HEIGHT"],[881,26,936,26],[881,29,936,29],[881,32,936,32],[881,35,936,35],[881,38,936,38],[881,39,936,39],[881,40,936,40],[882,6,937,4],[882,10,937,10,"ENEMY_SIZE"],[882,20,937,20],[882,23,937,23],[882,25,937,25],[884,6,939,4],[885,6,940,4],[885,10,940,10,"x"],[885,11,940,11],[885,14,940,14,"position"],[885,22,940,22],[885,24,940,24,"x"],[885,25,940,25],[885,29,940,29,"Math"],[885,33,940,33],[885,34,940,34,"random"],[885,40,940,40],[885,41,940,41],[885,42,940,42],[885,46,940,46,"SCREEN_WIDTH"],[885,58,940,58],[885,61,940,61,"ENEMY_SIZE"],[885,71,940,71],[885,74,940,74],[885,75,940,75],[885,76,940,76],[885,79,940,79,"ENEMY_SIZE"],[885,89,940,89],[886,6,941,4],[886,10,941,10,"y"],[886,11,941,11],[886,14,941,14,"position"],[886,22,941,22],[886,24,941,24,"y"],[886,25,941,25],[886,29,941,29,"Math"],[886,33,941,33],[886,34,941,34,"random"],[886,40,941,40],[886,41,941,41],[886,42,941,42],[886,46,941,46,"GAME_AREA_HEIGHT"],[886,62,941,62],[886,65,941,65,"ENEMY_SIZE"],[886,75,941,75],[886,78,941,78],[886,79,941,79],[886,80,941,80],[886,83,941,83,"ENEMY_SIZE"],[886,93,941,93],[887,6,943,4],[887,10,943,10,"enemy"],[887,15,943,28],[887,18,943,31],[888,8,944,6,"id"],[888,10,944,8],[888,12,944,10],[888,21,944,19],[888,23,944,21,"enemyCounter"],[888,35,944,33],[888,37,944,35],[889,8,945,6,"name"],[889,12,945,10],[889,14,945,12],[889,24,945,22],[890,8,946,6,"health"],[890,14,946,12],[890,16,946,14],[890,19,946,17],[891,8,947,6,"maxHealth"],[891,17,947,15],[891,19,947,17],[891,22,947,20],[892,8,948,6,"stats"],[892,13,948,11],[892,15,948,13],[893,10,949,8,"attack"],[893,16,949,14],[893,18,949,16],[893,20,949,18],[894,10,950,8,"defense"],[894,17,950,15],[894,19,950,17],[894,21,950,19],[895,10,951,8,"health"],[895,16,951,14],[895,18,951,16],[895,21,951,19],[896,10,952,8,"maxHealth"],[896,19,952,17],[896,21,952,19],[896,24,952,22],[897,10,953,8,"critChance"],[897,20,953,18],[897,22,953,20],[897,23,953,21],[898,10,954,8,"critDamage"],[898,20,954,18],[898,22,954,20],[898,25,954,23],[899,10,955,8,"cooldownReduction"],[899,27,955,25],[899,29,955,27],[900,8,956,6],[900,9,956,7],[901,8,957,6,"position"],[901,16,957,14],[901,18,957,16],[902,10,957,18,"x"],[902,11,957,19],[903,10,957,21,"y"],[904,8,957,23],[904,9,957,24],[905,8,958,6,"lastDamaged"],[905,19,958,17],[905,21,958,19],[906,6,959,4],[906,7,959,5],[907,6,961,4,"setCombatState"],[907,20,961,18],[907,21,961,19,"prev"],[907,25,961,23],[907,30,961,28],[908,8,962,6],[908,11,962,9,"prev"],[908,15,962,13],[909,8,963,6,"enemies"],[909,15,963,13],[909,17,963,15],[909,18,963,16],[909,21,963,19,"prev"],[909,25,963,23],[909,26,963,24,"enemies"],[909,33,963,31],[909,35,963,33,"enemy"],[909,40,963,38],[910,6,964,4],[910,7,964,5],[910,8,964,6],[910,9,964,7],[911,6,966,4],[911,13,966,11,"enemy"],[911,18,966,16],[912,4,967,2],[912,5,967,3],[914,4,969,2],[915,4,970,2],[915,8,970,8,"spawnBoss"],[915,17,970,17],[915,20,970,21,"bossEnemy"],[915,29,970,43],[915,33,970,48],[916,6,971,4,"console"],[916,13,971,11],[916,14,971,12,"log"],[916,17,971,15],[916,18,971,16],[916,39,971,37,"bossEnemy"],[916,48,971,46],[916,49,971,47,"name"],[916,53,971,51],[916,90,971,88],[916,91,971,89],[917,6,972,4,"setCombatState"],[917,20,972,18],[917,21,972,19,"prev"],[917,25,972,23],[917,30,972,28],[918,8,973,6],[918,11,973,9,"prev"],[918,15,973,13],[919,8,974,6,"enemies"],[919,15,974,13],[919,17,974,15],[919,18,974,16,"bossEnemy"],[919,27,974,25],[919,28,974,26],[919,29,974,27],[920,6,975,4],[920,7,975,5],[920,8,975,6],[920,9,975,7],[921,4,976,2],[921,5,976,3],[923,4,978,2],[924,4,979,2],[924,8,979,8,"clearSpecificEnemy"],[924,26,979,26],[924,29,979,30,"enemyId"],[924,36,979,45],[924,40,979,50],[925,6,980,4,"setCombatState"],[925,20,980,18],[925,21,980,19,"prev"],[925,25,980,23],[925,30,980,28],[926,8,981,6],[926,11,981,9,"prev"],[926,15,981,13],[927,8,982,6,"enemies"],[927,15,982,13],[927,17,982,15,"prev"],[927,21,982,19],[927,22,982,20,"enemies"],[927,29,982,27],[927,30,982,28,"filter"],[927,36,982,34],[927,37,982,35,"enemy"],[927,42,982,40],[927,46,982,44,"enemy"],[927,51,982,49],[927,52,982,50,"id"],[927,54,982,52],[927,59,982,57,"enemyId"],[927,66,982,64],[928,6,983,4],[928,7,983,5],[928,8,983,6],[928,9,983,7],[929,4,984,2],[929,5,984,3],[931,4,986,2],[932,4,987,2],[932,8,987,8,"useAbilityManually"],[932,26,987,26],[932,29,987,26,"_s3"],[932,32,987,26],[932,33,987,29],[932,37,987,29,"useCallback"],[932,43,987,40],[932,44,987,40,"useCallback"],[932,55,987,40],[932,57,987,40,"_s3"],[932,60,987,40],[932,61,987,42,"slotIndex"],[932,70,987,59],[932,74,987,73],[933,6,987,73,"_s3"],[933,9,987,73],[934,6,988,4,"console"],[934,13,988,11],[934,14,988,12,"log"],[934,17,988,15],[934,18,988,16],[934,64,988,62,"slotIndex"],[934,73,988,71],[934,82,988,80],[934,83,988,81],[935,6,989,4,"console"],[935,13,989,11],[935,14,989,12,"log"],[935,17,989,15],[935,18,989,16],[935,65,989,63,"slotIndex"],[935,74,989,72],[935,76,989,74],[935,77,989,75],[936,6,990,4,"console"],[936,13,990,11],[936,14,990,12,"log"],[936,17,990,15],[936,18,990,16],[936,53,990,51,"slotIndex"],[936,62,990,60],[936,64,990,62],[936,65,990,63],[938,6,992,4],[939,6,993,4],[939,10,993,8],[939,11,993,9,"game"],[939,15,993,13],[939,16,993,14,"gameState"],[939,25,993,23],[939,26,993,24,"isAlive"],[939,33,993,31],[939,35,993,33],[940,8,994,6,"console"],[940,15,994,13],[940,16,994,14,"log"],[940,19,994,17],[940,20,994,18],[940,70,994,68],[940,71,994,69],[941,8,995,6],[941,15,995,13],[941,20,995,18],[942,6,996,4],[944,6,998,4],[945,6,999,4],[945,10,999,10,"isReady"],[945,17,999,17],[945,20,999,20,"combatState"],[945,31,999,31],[945,32,999,32,"abilityManager"],[945,46,999,46],[945,47,999,47,"isAbilityReady"],[945,61,999,61],[945,62,999,62,"slotIndex"],[945,71,999,71],[945,72,999,72],[946,6,1000,4],[946,10,1000,8],[946,11,1000,9,"isReady"],[946,18,1000,16],[946,20,1000,18],[947,8,1001,6,"console"],[947,15,1001,13],[947,16,1001,14,"log"],[947,19,1001,17],[947,20,1001,18],[947,41,1001,39,"slotIndex"],[947,50,1001,48],[947,85,1001,83],[947,86,1001,84],[948,8,1002,6],[948,15,1002,13],[948,20,1002,18],[949,6,1003,4],[951,6,1005,4],[952,6,1006,4],[952,10,1006,8,"combatState"],[952,21,1006,19],[952,22,1006,20,"enemies"],[952,29,1006,27],[952,30,1006,28,"length"],[952,36,1006,34],[952,41,1006,39],[952,42,1006,40],[952,44,1006,42],[953,8,1007,6,"console"],[953,15,1007,13],[953,16,1007,14,"log"],[953,19,1007,17],[953,20,1007,18],[953,69,1007,67],[953,70,1007,68],[954,8,1008,6],[954,15,1008,13],[954,20,1008,18],[955,6,1009,4],[957,6,1011,4],[958,6,1012,4],[958,10,1012,10,"currentTick"],[958,21,1012,21],[958,24,1012,24,"combatEngine"],[958,43,1012,36],[958,44,1012,36,"combatEngine"],[958,56,1012,36],[958,57,1012,37,"getCurrentTick"],[958,71,1012,51],[958,72,1012,52],[958,73,1012,53],[959,6,1013,4],[959,10,1013,10,"success"],[959,17,1013,17],[959,20,1013,20,"combatState"],[959,31,1013,31],[959,32,1013,32,"abilityManager"],[959,46,1013,46],[959,47,1013,47,"useAbility"],[959,57,1013,57],[959,58,1013,58,"slotIndex"],[959,67,1013,67],[959,69,1013,69,"currentTick"],[959,80,1013,80],[959,81,1013,81],[960,6,1015,4],[960,10,1015,8,"success"],[960,17,1015,15],[960,19,1015,17],[961,8,1016,6],[962,8,1017,6,"setCombatState"],[962,22,1017,20],[962,23,1017,21,"prev"],[962,27,1017,25],[962,31,1017,29],[963,10,1018,8],[963,14,1018,14,"newState"],[963,22,1018,22],[963,25,1018,25],[964,12,1018,27],[964,15,1018,30,"prev"],[965,10,1018,35],[965,11,1018,36],[966,10,1019,8,"castAbility"],[966,21,1019,19],[966,22,1019,20,"newState"],[966,30,1019,28],[966,32,1019,30,"slotIndex"],[966,41,1019,39],[966,42,1019,40],[967,10,1020,8],[967,17,1020,15,"newState"],[967,25,1020,23],[968,8,1021,6],[968,9,1021,7],[968,10,1021,8],[969,8,1023,6,"console"],[969,15,1023,13],[969,16,1023,14,"log"],[969,19,1023,17],[969,20,1023,18],[969,65,1023,63,"slotIndex"],[969,74,1023,72],[969,76,1023,74],[969,77,1023,75],[970,8,1024,6],[970,15,1024,13],[970,19,1024,17],[971,6,1025,4],[971,7,1025,5],[971,13,1025,11],[972,8,1026,6,"console"],[972,15,1026,13],[972,16,1026,14,"log"],[972,19,1026,17],[972,20,1026,18],[972,61,1026,59,"slotIndex"],[972,70,1026,68],[972,72,1026,70],[972,73,1026,71],[973,8,1027,6],[973,15,1027,13],[973,20,1027,18],[974,6,1028,4],[975,4,1029,2],[975,5,1029,3],[975,46,1029,5],[975,47,1029,6,"combatState"],[975,58,1029,17],[975,59,1029,18,"abilityManager"],[975,73,1029,32],[975,75,1029,34,"combatState"],[975,86,1029,45],[975,87,1029,46,"enemies"],[975,94,1029,53],[975,95,1029,54],[975,96,1029,55],[976,4,1030,2],[976,8,1030,2,"useEffect"],[976,14,1030,11],[976,15,1030,11,"useEffect"],[976,24,1030,11],[976,26,1030,12],[976,32,1030,18],[977,6,1031,4,"combatEngine"],[977,25,1031,16],[977,26,1031,16,"combatEngine"],[977,38,1031,16],[977,39,1031,17,"start"],[977,44,1031,22],[977,45,1031,23],[977,46,1031,24],[979,6,1033,4],[980,6,1034,4],[981,6,1035,4,"console"],[981,13,1035,11],[981,14,1035,12,"log"],[981,17,1035,15],[981,18,1035,16],[981,97,1035,95],[981,98,1035,96],[982,6,1037,4],[982,13,1037,11],[982,19,1037,17],[983,8,1038,6,"combatEngine"],[983,27,1038,18],[983,28,1038,18,"combatEngine"],[983,40,1038,18],[983,41,1038,19,"stop"],[983,45,1038,23],[983,46,1038,24],[983,47,1038,25],[984,6,1039,4],[984,7,1039,5],[985,4,1040,2],[985,5,1040,3],[985,7,1040,5],[985,9,1040,7],[985,10,1040,8],[987,4,1042,2],[988,4,1043,2],[988,8,1043,2,"useEffect"],[988,14,1043,11],[988,15,1043,11,"useEffect"],[988,24,1043,11],[988,26,1043,12],[988,32,1043,18],[989,6,1044,4],[990,6,1045,4],[990,10,1045,10,"tickInterval"],[990,22,1045,22],[990,25,1045,25,"Platform"],[990,37,1045,33],[990,38,1045,33,"Platform"],[990,46,1045,33],[990,47,1045,34,"OS"],[990,49,1045,36],[990,54,1045,41],[990,59,1045,46],[990,62,1045,49],[990,65,1045,52],[990,68,1045,55],[990,71,1045,58],[990,72,1045,59],[990,73,1045,60],[991,6,1046,4,"console"],[991,13,1046,11],[991,14,1046,12,"log"],[991,17,1046,15],[991,18,1046,16],[991,91,1046,89,"tickInterval"],[991,103,1046,101],[991,112,1046,110,"Platform"],[991,124,1046,118],[991,125,1046,118,"Platform"],[991,133,1046,118],[991,134,1046,119,"OS"],[991,136,1046,121],[991,138,1046,123],[991,139,1046,124],[992,6,1047,4],[992,10,1047,10,"combatTickInterval"],[992,28,1047,28],[992,31,1047,31,"setInterval"],[992,42,1047,42],[992,43,1047,43,"handleCombatTick"],[992,59,1047,59],[992,61,1047,61,"tickInterval"],[992,73,1047,73],[992,74,1047,74],[993,6,1049,4],[993,13,1049,11],[993,19,1049,17],[994,8,1050,6,"console"],[994,15,1050,13],[994,16,1050,14,"log"],[994,19,1050,17],[994,20,1050,18],[994,51,1050,49],[994,52,1050,50],[995,8,1051,6,"clearInterval"],[995,21,1051,19],[995,22,1051,20,"combatTickInterval"],[995,40,1051,38],[995,41,1051,39],[996,6,1052,4],[996,7,1052,5],[997,4,1053,2],[997,5,1053,3],[997,7,1053,5],[997,8,1053,6,"handleCombatTick"],[997,24,1053,22],[997,25,1053,23],[997,26,1053,24],[999,4,1055,2],[1000,4,1056,2],[1000,8,1056,2,"useEffect"],[1000,14,1056,11],[1000,15,1056,11,"useEffect"],[1000,24,1056,11],[1000,26,1056,12],[1000,32,1056,18],[1001,6,1057,4],[1001,10,1057,10,"processProjectileImpacts"],[1001,34,1057,34],[1001,37,1057,37,"processProjectileImpacts"],[1001,38,1057,37],[1001,43,1057,43],[1002,8,1058,6,"setProjectiles"],[1002,22,1058,20],[1002,23,1058,21,"currentProjectiles"],[1002,41,1058,39],[1002,45,1058,43],[1003,10,1059,8],[1003,17,1059,15,"currentProjectiles"],[1003,35,1059,33],[1003,36,1059,34,"map"],[1003,39,1059,37],[1003,40,1059,38,"projectile"],[1003,50,1059,48],[1003,54,1059,52],[1004,12,1060,10],[1004,16,1060,14],[1004,17,1060,15,"projectile"],[1004,27,1060,25],[1004,29,1060,27],[1004,36,1060,34],[1004,40,1060,38],[1006,12,1062,10],[1007,12,1063,10],[1007,16,1063,16,"currentTime"],[1007,27,1063,27],[1007,30,1063,30,"Date"],[1007,34,1063,34],[1007,35,1063,35,"now"],[1007,38,1063,38],[1007,39,1063,39],[1007,40,1063,40],[1008,12,1064,10],[1008,16,1064,16,"startTime"],[1008,25,1064,25],[1008,28,1064,28,"projectile"],[1008,38,1064,38],[1008,39,1064,39,"startTime"],[1008,48,1064,48],[1008,52,1064,52,"currentTime"],[1008,63,1064,63],[1009,12,1065,10],[1009,16,1065,16,"elapsedTime"],[1009,27,1065,27],[1009,30,1065,30,"currentTime"],[1009,41,1065,41],[1009,44,1065,44,"startTime"],[1009,53,1065,53],[1010,12,1066,10],[1010,16,1066,16,"progress"],[1010,24,1066,24],[1010,27,1066,27,"Math"],[1010,31,1066,31],[1010,32,1066,32,"min"],[1010,35,1066,35],[1010,36,1066,36,"elapsedTime"],[1010,47,1066,47],[1010,51,1066,51,"projectile"],[1010,61,1066,61],[1010,62,1066,62,"duration"],[1010,70,1066,70],[1010,74,1066,74],[1010,77,1066,77],[1010,78,1066,78],[1010,80,1066,80],[1010,81,1066,81],[1010,82,1066,82],[1012,12,1068,10],[1013,12,1069,10],[1013,16,1069,14,"progress"],[1013,24,1069,22],[1013,28,1069,26],[1013,29,1069,27],[1013,33,1069,31],[1013,34,1069,32,"projectile"],[1013,44,1069,42],[1013,45,1069,43,"hasHit"],[1013,51,1069,49],[1013,53,1069,51],[1014,14,1070,12],[1015,14,1071,12,"console"],[1015,21,1071,19],[1015,22,1071,20,"log"],[1015,25,1071,23],[1015,26,1071,24],[1015,51,1071,49,"projectile"],[1015,61,1071,59],[1015,62,1071,60,"abilityName"],[1015,73,1071,71],[1015,97,1071,95],[1015,98,1071,96],[1016,14,1073,12,"setCombatState"],[1016,28,1073,26],[1016,29,1073,27,"prev"],[1016,33,1073,31],[1016,37,1073,35],[1017,16,1074,14],[1017,20,1074,20,"newState"],[1017,28,1074,28],[1017,31,1074,31],[1018,18,1074,33],[1018,21,1074,36,"prev"],[1019,16,1074,41],[1019,17,1074,42],[1020,16,1076,14],[1020,20,1076,18,"projectile"],[1020,30,1076,28],[1020,31,1076,29,"isAOE"],[1020,36,1076,34],[1020,40,1076,38,"projectile"],[1020,50,1076,48],[1020,51,1076,49,"aoeRadius"],[1020,60,1076,58],[1020,64,1076,62,"projectile"],[1020,74,1076,72],[1020,75,1076,73,"aoeRadius"],[1020,84,1076,82],[1020,87,1076,85],[1020,88,1076,86],[1020,90,1076,88],[1021,18,1077,16],[1022,18,1078,16,"console"],[1022,25,1078,23],[1022,26,1078,24,"log"],[1022,29,1078,27],[1022,30,1078,28],[1022,59,1078,57,"projectile"],[1022,69,1078,67],[1022,70,1078,68,"abilityName"],[1022,81,1078,79],[1022,97,1078,95,"projectile"],[1022,107,1078,105],[1022,108,1078,106,"aoeRadius"],[1022,117,1078,115],[1022,119,1078,117],[1022,120,1078,118],[1023,18,1080,16],[1023,22,1080,22,"impactX"],[1023,29,1080,29],[1023,32,1080,32,"projectile"],[1023,42,1080,42],[1023,43,1080,43,"targetX"],[1023,50,1080,50],[1024,18,1081,16],[1024,22,1081,22,"impactY"],[1024,29,1081,29],[1024,32,1081,32,"projectile"],[1024,42,1081,42],[1024,43,1081,43,"targetY"],[1024,50,1081,50],[1025,18,1082,16],[1025,22,1082,22,"enemiesKilled"],[1025,35,1082,50],[1025,38,1082,53],[1025,40,1082,55],[1027,18,1084,16],[1028,18,1085,16,"newState"],[1028,26,1085,24],[1028,27,1085,25,"enemies"],[1028,34,1085,32],[1028,37,1085,35,"newState"],[1028,45,1085,43],[1028,46,1085,44,"enemies"],[1028,53,1085,51],[1028,54,1085,52,"map"],[1028,57,1085,55],[1028,58,1085,56,"enemy"],[1028,63,1085,61],[1028,67,1085,65],[1029,20,1086,18],[1029,24,1086,22,"enemy"],[1029,29,1086,27],[1029,30,1086,28,"health"],[1029,36,1086,34],[1029,40,1086,38],[1029,41,1086,39],[1029,45,1086,43,"enemy"],[1029,50,1086,48],[1029,51,1086,49,"markedForDeath"],[1029,65,1086,63],[1029,67,1086,65],[1029,74,1086,72,"enemy"],[1029,79,1086,77],[1030,20,1088,18],[1030,24,1088,24,"enemyX"],[1030,30,1088,30],[1030,33,1088,33,"enemy"],[1030,38,1088,38],[1030,39,1088,39,"position"],[1030,47,1088,47],[1030,48,1088,48,"x"],[1030,49,1088,49],[1030,52,1088,52],[1030,56,1088,56],[1030,57,1088,57],[1030,58,1088,58],[1031,20,1089,18],[1031,24,1089,24,"enemyY"],[1031,30,1089,30],[1031,33,1089,33,"enemy"],[1031,38,1089,38],[1031,39,1089,39,"position"],[1031,47,1089,47],[1031,48,1089,48,"y"],[1031,49,1089,49],[1031,52,1089,52],[1031,56,1089,56],[1032,20,1090,18],[1032,24,1090,24,"distance"],[1032,32,1090,32],[1032,35,1090,35,"Math"],[1032,39,1090,39],[1032,40,1090,40,"sqrt"],[1032,44,1090,44],[1032,45,1090,45,"Math"],[1032,49,1090,49],[1032,50,1090,50,"pow"],[1032,53,1090,53],[1032,54,1090,54,"enemyX"],[1032,60,1090,60],[1032,63,1090,63,"impactX"],[1032,70,1090,70],[1032,72,1090,72],[1032,73,1090,73],[1032,74,1090,74],[1032,77,1090,77,"Math"],[1032,81,1090,81],[1032,82,1090,82,"pow"],[1032,85,1090,85],[1032,86,1090,86,"enemyY"],[1032,92,1090,92],[1032,95,1090,95,"impactY"],[1032,102,1090,102],[1032,104,1090,104],[1032,105,1090,105],[1032,106,1090,106],[1032,107,1090,107],[1033,20,1092,18,"console"],[1033,27,1092,25],[1033,28,1092,26,"log"],[1033,31,1092,29],[1033,32,1092,30],[1033,58,1092,56,"enemy"],[1033,63,1092,61],[1033,64,1092,62,"name"],[1033,68,1092,66],[1033,76,1092,74,"enemyX"],[1033,82,1092,80],[1033,87,1092,85,"enemyY"],[1033,93,1092,91],[1033,109,1092,107,"impactX"],[1033,116,1092,114],[1033,121,1092,119,"impactY"],[1033,128,1092,126],[1033,135,1092,133,"distance"],[1033,143,1092,141],[1033,144,1092,142,"toFixed"],[1033,151,1092,149],[1033,152,1092,150],[1033,153,1092,151],[1033,154,1092,152],[1033,169,1092,167,"projectile"],[1033,179,1092,177],[1033,180,1092,178,"aoeRadius"],[1033,189,1092,187],[1033,194,1092,192],[1033,195,1092,193],[1034,20,1094,18],[1034,24,1094,22,"distance"],[1034,32,1094,30],[1034,36,1094,34,"projectile"],[1034,46,1094,44],[1034,47,1094,45,"aoeRadius"],[1034,56,1094,54],[1034,58,1094,56],[1035,22,1095,20],[1036,22,1096,20],[1036,26,1096,26,"newHealth"],[1036,35,1096,35],[1036,38,1096,38,"Math"],[1036,42,1096,42],[1036,43,1096,43,"max"],[1036,46,1096,46],[1036,47,1096,47],[1036,48,1096,48],[1036,50,1096,50,"enemy"],[1036,55,1096,55],[1036,56,1096,56,"health"],[1036,62,1096,62],[1036,65,1096,65,"projectile"],[1036,75,1096,75],[1036,76,1096,76,"damage"],[1036,82,1096,82],[1036,83,1096,83],[1037,22,1098,20,"console"],[1037,29,1098,27],[1037,30,1098,28,"log"],[1037,33,1098,31],[1037,34,1098,32],[1037,52,1098,50,"enemy"],[1037,57,1098,55],[1037,58,1098,56,"name"],[1037,62,1098,60],[1037,74,1098,72,"projectile"],[1037,84,1098,82],[1037,85,1098,83,"damage"],[1037,91,1098,89],[1037,103,1098,101,"enemy"],[1037,108,1098,106],[1037,109,1098,107,"health"],[1037,115,1098,113],[1037,122,1098,120,"newHealth"],[1037,131,1098,129],[1037,134,1098,132],[1037,135,1098,133],[1039,22,1100,20],[1040,22,1101,20],[1040,26,1101,24,"newHealth"],[1040,35,1101,33],[1040,39,1101,37],[1040,40,1101,38],[1040,44,1101,42,"enemy"],[1040,49,1101,47],[1040,50,1101,48,"health"],[1040,56,1101,54],[1040,59,1101,57],[1040,60,1101,58],[1040,62,1101,60],[1041,24,1102,22,"console"],[1041,31,1102,29],[1041,32,1102,30,"log"],[1041,35,1102,33],[1041,36,1102,34],[1041,52,1102,50,"enemy"],[1041,57,1102,55],[1041,58,1102,56,"name"],[1041,62,1102,60],[1041,76,1102,74,"projectile"],[1041,86,1102,84],[1041,87,1102,85,"abilityName"],[1041,98,1102,96],[1041,101,1102,99],[1041,102,1102,100],[1042,24,1103,22,"enemiesKilled"],[1042,37,1103,35],[1042,38,1103,36,"push"],[1042,42,1103,40],[1042,43,1103,41,"enemy"],[1042,48,1103,46],[1042,49,1103,47],[1042,50,1103,48],[1042,51,1103,49],[1044,24,1105,22],[1044,31,1105,29],[1045,26,1106,24],[1045,29,1106,27,"enemy"],[1045,34,1106,32],[1046,26,1107,24,"health"],[1046,32,1107,30],[1046,34,1107,32],[1046,35,1107,33],[1047,26,1108,24,"markedForDeath"],[1047,40,1108,38],[1047,42,1108,40],[1047,46,1108,44],[1048,26,1109,24,"lastDamaged"],[1048,37,1109,35],[1048,39,1109,37,"combatEngine"],[1048,58,1109,49],[1048,59,1109,49,"combatEngine"],[1048,71,1109,49],[1048,72,1109,50,"getCurrentTick"],[1048,86,1109,64],[1048,87,1109,65],[1049,24,1110,22],[1049,25,1110,23],[1050,22,1111,20],[1050,23,1111,21],[1050,29,1111,27],[1051,24,1112,22],[1051,31,1112,29],[1052,26,1113,24],[1052,29,1113,27,"enemy"],[1052,34,1113,32],[1053,26,1114,24,"health"],[1053,32,1114,30],[1053,34,1114,32,"newHealth"],[1053,43,1114,41],[1054,26,1115,24,"lastDamaged"],[1054,37,1115,35],[1054,39,1115,37,"combatEngine"],[1054,58,1115,49],[1054,59,1115,49,"combatEngine"],[1054,71,1115,49],[1054,72,1115,50,"getCurrentTick"],[1054,86,1115,64],[1054,87,1115,65],[1055,24,1116,22],[1055,25,1116,23],[1056,22,1117,20],[1057,20,1118,18],[1058,20,1120,18],[1058,27,1120,25,"enemy"],[1058,32,1120,30],[1058,33,1120,31],[1058,34,1120,32],[1059,18,1121,16],[1059,19,1121,17],[1059,20,1121,18],[1061,18,1123,16],[1062,18,1124,16],[1062,22,1124,20,"enemiesKilled"],[1062,35,1124,33],[1062,36,1124,34,"length"],[1062,42,1124,40],[1062,45,1124,43],[1062,46,1124,44],[1062,48,1124,46],[1063,20,1125,18,"console"],[1063,27,1125,25],[1063,28,1125,26,"log"],[1063,31,1125,29],[1063,32,1125,30],[1063,52,1125,50,"enemiesKilled"],[1063,65,1125,63],[1063,66,1125,64,"length"],[1063,72,1125,70],[1063,94,1125,92,"projectile"],[1063,104,1125,102],[1063,105,1125,103,"abilityName"],[1063,116,1125,114],[1063,118,1125,116],[1063,119,1125,117],[1064,20,1126,18],[1065,20,1127,18,"enemiesKilled"],[1065,33,1127,31],[1065,34,1127,32,"forEach"],[1065,41,1127,39],[1065,42,1127,40,"enemy"],[1065,47,1127,45],[1065,51,1127,49,"handleEnemyKill"],[1065,66,1127,64],[1065,67,1127,65,"enemy"],[1065,72,1127,70],[1065,73,1127,71],[1065,74,1127,72],[1066,18,1128,16],[1067,16,1130,14],[1067,17,1130,15],[1067,23,1130,21],[1068,18,1131,16],[1069,18,1132,16],[1069,22,1132,22,"enemyIndex"],[1069,32,1132,32],[1069,35,1132,35,"newState"],[1069,43,1132,43],[1069,44,1132,44,"enemies"],[1069,51,1132,51],[1069,52,1132,52,"findIndex"],[1069,61,1132,61],[1069,62,1132,62,"e"],[1069,63,1132,63],[1069,67,1132,67,"e"],[1069,68,1132,68],[1069,69,1132,69,"id"],[1069,71,1132,71],[1069,76,1132,76,"projectile"],[1069,86,1132,86],[1069,87,1132,87,"targetEnemyId"],[1069,100,1132,100],[1069,101,1132,101],[1070,18,1134,16],[1070,22,1134,20,"enemyIndex"],[1070,32,1134,30],[1070,36,1134,34],[1070,37,1134,35],[1070,41,1134,39,"newState"],[1070,49,1134,47],[1070,50,1134,48,"enemies"],[1070,57,1134,55],[1070,58,1134,56,"enemyIndex"],[1070,68,1134,66],[1070,69,1134,67],[1070,70,1134,68,"health"],[1070,76,1134,74],[1070,79,1134,77],[1070,80,1134,78],[1070,84,1134,82],[1070,85,1134,83,"newState"],[1070,93,1134,91],[1070,94,1134,92,"enemies"],[1070,101,1134,99],[1070,102,1134,100,"enemyIndex"],[1070,112,1134,110],[1070,113,1134,111],[1070,114,1134,112,"markedForDeath"],[1070,128,1134,126],[1070,130,1134,128],[1071,20,1135,18,"newState"],[1071,28,1135,26],[1071,29,1135,27,"enemies"],[1071,36,1135,34],[1071,39,1135,37],[1071,40,1135,38],[1071,43,1135,41,"newState"],[1071,51,1135,49],[1071,52,1135,50,"enemies"],[1071,59,1135,57],[1071,60,1135,58],[1072,20,1136,18],[1072,24,1136,24,"enemy"],[1072,29,1136,29],[1072,32,1136,32,"newState"],[1072,40,1136,40],[1072,41,1136,41,"enemies"],[1072,48,1136,48],[1072,49,1136,49,"enemyIndex"],[1072,59,1136,59],[1072,60,1136,60],[1073,20,1137,18],[1073,24,1137,24,"newHealth"],[1073,33,1137,33],[1073,36,1137,36,"Math"],[1073,40,1137,40],[1073,41,1137,41,"max"],[1073,44,1137,44],[1073,45,1137,45],[1073,46,1137,46],[1073,48,1137,48,"enemy"],[1073,53,1137,53],[1073,54,1137,54,"health"],[1073,60,1137,60],[1073,63,1137,63,"projectile"],[1073,73,1137,73],[1073,74,1137,74,"damage"],[1073,80,1137,80],[1073,81,1137,81],[1074,20,1139,18,"newState"],[1074,28,1139,26],[1074,29,1139,27,"enemies"],[1074,36,1139,34],[1074,37,1139,35,"enemyIndex"],[1074,47,1139,45],[1074,48,1139,46],[1074,51,1139,49],[1075,22,1140,20],[1075,25,1140,23,"enemy"],[1075,30,1140,28],[1076,22,1141,20,"health"],[1076,28,1141,26],[1076,30,1141,28,"newHealth"],[1076,39,1141,37],[1077,22,1142,20,"lastDamaged"],[1077,33,1142,31],[1077,35,1142,33,"combatEngine"],[1077,54,1142,45],[1077,55,1142,45,"combatEngine"],[1077,67,1142,45],[1077,68,1142,46,"getCurrentTick"],[1077,82,1142,60],[1077,83,1142,61],[1078,20,1143,18],[1078,21,1143,19],[1079,20,1145,18,"console"],[1079,27,1145,25],[1079,28,1145,26,"log"],[1079,31,1145,29],[1079,32,1145,30],[1079,60,1145,58,"enemy"],[1079,65,1145,63],[1079,66,1145,64,"name"],[1079,70,1145,68],[1079,82,1145,80,"newHealth"],[1079,91,1145,89],[1079,95,1145,93,"enemy"],[1079,100,1145,98],[1079,101,1145,99,"maxHealth"],[1079,110,1145,108],[1079,112,1145,110],[1079,113,1145,111],[1081,20,1147,18],[1082,20,1148,18],[1082,24,1148,22,"newHealth"],[1082,33,1148,31],[1082,37,1148,35],[1082,38,1148,36],[1082,42,1148,40,"enemy"],[1082,47,1148,45],[1082,48,1148,46,"health"],[1082,54,1148,52],[1082,57,1148,55],[1082,58,1148,56],[1082,60,1148,58],[1083,22,1149,20,"console"],[1083,29,1149,27],[1083,30,1149,28,"log"],[1083,33,1149,31],[1083,34,1149,32],[1083,54,1149,52,"enemy"],[1083,59,1149,57],[1083,60,1149,58,"name"],[1083,64,1149,62],[1083,78,1149,76,"projectile"],[1083,88,1149,86],[1083,89,1149,87,"abilityName"],[1083,100,1149,98],[1083,136,1149,134],[1083,137,1149,135],[1085,22,1151,20],[1086,22,1152,20,"newState"],[1086,30,1152,28],[1086,31,1152,29,"enemies"],[1086,38,1152,36],[1086,39,1152,37,"enemyIndex"],[1086,49,1152,47],[1086,50,1152,48],[1086,53,1152,51],[1087,24,1153,22],[1087,27,1153,25,"newState"],[1087,35,1153,33],[1087,36,1153,34,"enemies"],[1087,43,1153,41],[1087,44,1153,42,"enemyIndex"],[1087,54,1153,52],[1087,55,1153,53],[1088,24,1154,22,"health"],[1088,30,1154,28],[1088,32,1154,30],[1088,33,1154,31],[1089,24,1155,22,"isDying"],[1089,31,1155,29],[1089,33,1155,31],[1089,37,1155,35],[1090,24,1156,22,"deathStartTime"],[1090,38,1156,36],[1090,40,1156,38,"Date"],[1090,44,1156,42],[1090,45,1156,43,"now"],[1090,48,1156,46],[1090,49,1156,47],[1091,22,1157,20],[1091,23,1157,21],[1092,20,1158,18],[1092,21,1158,19],[1092,27,1158,25],[1092,31,1158,29,"enemy"],[1092,36,1158,34],[1092,37,1158,35,"health"],[1092,43,1158,41],[1092,46,1158,44],[1092,47,1158,45],[1092,49,1158,47],[1093,22,1159,20,"console"],[1093,29,1159,27],[1093,30,1159,28,"log"],[1093,33,1159,31],[1093,34,1159,32],[1093,48,1159,46,"enemy"],[1093,53,1159,51],[1093,54,1159,52,"name"],[1093,58,1159,56],[1093,70,1159,68,"projectile"],[1093,80,1159,78],[1093,81,1159,79,"damage"],[1093,87,1159,85],[1093,99,1159,97,"enemy"],[1093,104,1159,102],[1093,105,1159,103,"health"],[1093,111,1159,109],[1093,117,1159,115,"newHealth"],[1093,126,1159,124],[1093,129,1159,127],[1093,130,1159,128],[1094,20,1160,18],[1095,18,1161,16],[1096,16,1162,14],[1097,16,1164,14],[1097,23,1164,21,"newState"],[1097,31,1164,29],[1098,14,1165,12],[1098,15,1165,13],[1098,16,1165,14],[1100,14,1167,12],[1101,14,1168,12],[1102,12,1169,10],[1104,12,1171,10],[1105,12,1172,10],[1106,12,1173,10],[1106,16,1173,16,"timeBasedCleanup"],[1106,32,1173,32],[1106,35,1173,35,"elapsedTime"],[1106,46,1173,46],[1106,49,1173,49],[1106,53,1173,53],[1106,54,1173,54],[1106,55,1173,55],[1107,12,1174,10],[1107,16,1174,14,"progress"],[1107,24,1174,22],[1107,28,1174,26],[1107,31,1174,29],[1107,35,1174,33,"timeBasedCleanup"],[1107,51,1174,49],[1107,53,1174,51],[1108,14,1175,12],[1108,18,1175,16,"timeBasedCleanup"],[1108,34,1175,32],[1108,36,1175,34],[1109,16,1176,14,"console"],[1109,23,1176,21],[1109,24,1176,22,"log"],[1109,27,1176,25],[1109,28,1176,26],[1109,63,1176,61,"projectile"],[1109,73,1176,71],[1109,74,1176,72,"id"],[1109,76,1176,74],[1109,105,1176,103],[1109,106,1176,104],[1110,14,1177,12],[1111,14,1178,12],[1111,21,1178,19],[1111,25,1178,23],[1112,12,1179,10],[1113,12,1181,10],[1113,19,1181,17,"projectile"],[1113,29,1181,27],[1114,10,1182,8],[1114,11,1182,9],[1114,12,1182,10],[1114,13,1182,11,"filter"],[1114,19,1182,17],[1114,20,1182,18,"Boolean"],[1114,27,1182,25],[1114,28,1182,26],[1115,8,1183,6],[1115,9,1183,7],[1115,10,1183,8],[1116,6,1184,4],[1116,7,1184,5],[1118,6,1186,4],[1119,6,1187,4],[1119,10,1187,10,"impactInterval"],[1119,24,1187,24],[1119,27,1187,27,"setInterval"],[1119,38,1187,38],[1119,39,1187,39,"processProjectileImpacts"],[1119,63,1187,63],[1119,65,1187,65],[1119,67,1187,67],[1119,68,1187,68],[1120,6,1188,4],[1120,13,1188,11],[1120,19,1188,17,"clearInterval"],[1120,32,1188,30],[1120,33,1188,31,"impactInterval"],[1120,47,1188,45],[1120,48,1188,46],[1121,4,1189,2],[1121,5,1189,3],[1121,7,1189,5],[1121,9,1189,7],[1121,10,1189,8],[1121,11,1189,9],[1121,12,1189,10],[1123,4,1191,2],[1124,4,1192,2],[1124,8,1192,8,"saveAbilityData"],[1124,23,1192,23],[1124,26,1192,26],[1124,30,1192,26,"useCallback"],[1124,36,1192,37],[1124,37,1192,37,"useCallback"],[1124,48,1192,37],[1124,50,1192,38],[1124,56,1192,44],[1125,6,1193,4],[1125,10,1193,8,"combatState"],[1125,21,1193,19],[1125,22,1193,20,"abilityManager"],[1125,36,1193,34],[1125,38,1193,36],[1126,8,1194,6],[1126,12,1194,12,"abilityData"],[1126,23,1194,23],[1126,26,1194,26,"combatState"],[1126,37,1194,37],[1126,38,1194,38,"abilityManager"],[1126,52,1194,52],[1126,53,1194,53,"getSaveData"],[1126,64,1194,64],[1126,65,1194,65],[1126,66,1194,66],[1127,8,1195,6,"console"],[1127,15,1195,13],[1127,16,1195,14,"log"],[1127,19,1195,17],[1127,20,1195,18],[1127,70,1195,68],[1127,72,1195,70,"abilityData"],[1127,83,1195,81],[1127,84,1195,82],[1128,8,1196,6,"game"],[1128,12,1196,10],[1128,13,1196,11,"updateAbilityData"],[1128,30,1196,28],[1128,31,1196,29,"abilityData"],[1128,42,1196,40],[1128,43,1196,41],[1129,6,1197,4],[1130,4,1198,2],[1130,5,1198,3],[1130,7,1198,5],[1130,8,1198,6,"combatState"],[1130,19,1198,17],[1130,20,1198,18,"abilityManager"],[1130,34,1198,32],[1130,36,1198,34,"game"],[1130,40,1198,38],[1130,41,1198,39,"updateAbilityData"],[1130,58,1198,56],[1130,59,1198,57],[1130,60,1198,58],[1131,4,1200,2],[1131,8,1200,8,"contextValue"],[1131,20,1200,39],[1131,23,1200,42,"React"],[1131,28,1200,47],[1131,29,1200,47,"default"],[1131,36,1200,47],[1131,37,1200,48,"useMemo"],[1131,44,1200,55],[1131,45,1200,56],[1131,52,1200,63],[1132,6,1201,4,"combatState"],[1132,17,1201,15],[1133,6,1202,4,"projectiles"],[1133,17,1202,15],[1134,6,1203,4,"startCombat"],[1134,17,1203,15],[1135,6,1204,4,"stopCombat"],[1135,16,1204,14],[1136,6,1205,4,"equipAbility"],[1136,18,1205,16],[1137,6,1206,4,"handleEnemyKill"],[1137,21,1206,19],[1138,6,1207,4,"getDeck"],[1138,13,1207,11],[1139,6,1208,4,"getAvailableAbilities"],[1139,27,1208,25],[1140,6,1209,4,"upgradeAbility"],[1140,20,1209,18],[1141,6,1210,4,"spawnEnemy"],[1141,16,1210,14],[1142,6,1211,4,"spawnBoss"],[1142,15,1211,13],[1143,6,1212,4,"clearAllEnemies"],[1143,21,1212,19],[1144,6,1213,4,"clearSpecificEnemy"],[1144,24,1213,22],[1145,6,1214,4],[1146,6,1215,4,"findClosestEnemy"],[1146,22,1215,20],[1147,6,1216,4,"updateNinjaPosition"],[1147,25,1216,23],[1148,6,1217,4,"setManualControlActive"],[1148,28,1217,26],[1149,6,1218,4,"lastExplosionTime"],[1149,23,1218,21],[1150,6,1219,4,"useAbilityManually"],[1150,24,1219,22],[1151,6,1219,24],[1152,6,1220,4,"saveAbilityData"],[1152,21,1220,19],[1153,6,1220,21],[1154,6,1221,4,"shadowClone"],[1154,17,1221,15],[1154,19,1221,17,"combatState"],[1154,30,1221,28],[1154,31,1221,29,"shadowClone"],[1154,42,1221,40],[1154,43,1221,42],[1155,4,1222,2],[1155,5,1222,3],[1155,6,1222,4],[1155,8,1222,6],[1156,4,1223,4],[1157,4,1224,4],[1158,4,1225,4,"combatState"],[1158,15,1225,15],[1158,17,1226,4,"projectiles"],[1158,28,1226,15],[1158,30,1227,4,"lastExplosionTime"],[1158,47,1227,21],[1159,4,1228,4],[1160,4,1229,4,"combatState"],[1160,15,1229,15],[1160,16,1229,16,"abilityManager"],[1160,30,1229,30],[1160,32,1230,4,"combatState"],[1160,43,1230,15],[1160,44,1230,16,"enemies"],[1160,51,1230,23],[1160,53,1231,4,"combatState"],[1160,64,1231,15],[1160,65,1231,16,"shadowClone"],[1160,76,1231,27],[1161,4,1231,29],[1162,4,1232,4,"useAbilityManually"],[1162,22,1232,22],[1163,4,1232,24],[1164,4,1233,4,"saveAbilityData"],[1164,19,1233,19],[1164,20,1233,21],[1165,4,1233,21],[1165,5,1234,3],[1165,6,1234,4],[1166,4,1236,2],[1166,24,1237,4],[1166,28,1237,4,"_reactJsxDevRuntime"],[1166,47,1237,4],[1166,48,1237,4,"jsxDEV"],[1166,54,1237,4],[1166,56,1237,5,"CombatContext"],[1166,69,1237,18],[1166,70,1237,19,"Provider"],[1166,78,1237,27],[1167,6,1237,28,"value"],[1167,11,1237,33],[1167,13,1237,35,"contextValue"],[1167,25,1237,48],[1168,6,1237,48,"children"],[1168,14,1237,48],[1168,16,1238,7,"children"],[1169,4,1238,15],[1170,6,1238,15,"fileName"],[1170,14,1238,15],[1170,16,1238,15,"_jsxFileName"],[1170,28,1238,15],[1171,6,1238,15,"lineNumber"],[1171,16,1238,15],[1172,6,1238,15,"columnNumber"],[1172,18,1238,15],[1173,4,1238,15],[1173,11,1239,28],[1173,12,1239,29],[1174,2,1241,0],[1174,3,1241,1],[1175,2,1241,2,"_s4"],[1175,5,1241,2],[1175,6,106,13,"CombatProvider"],[1175,20,106,27],[1176,4,106,27],[1176,12,107,15,"useGame"],[1176,24,107,22],[1176,25,107,22,"useGame"],[1176,32,107,22],[1176,34,108,77,"useZone"],[1176,46,108,84],[1176,47,108,84,"useZone"],[1176,54,108,84],[1177,2,108,84],[1178,2,108,84,"_c"],[1178,4,108,84],[1178,7,106,13,"CombatProvider"],[1178,21,106,27],[1179,2,106,27],[1179,6,106,27,"_c"],[1179,8,106,27],[1180,2,106,27,"$RefreshReg$"],[1180,14,106,27],[1180,15,106,27,"_c"],[1180,17,106,27],[1181,0,106,27],[1181,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","deadEnemiesToProcess.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMO;mBJI;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;8FSU,uDT;mCUY;SViB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}