{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":111},"end":{"line":2,"column":62,"index":173}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _react = require(_dependencyMap[1], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNative = require(_dependencyMap[2], \"react-native\");\n  var _engineCombatEngine = require(_dependencyMap[3], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[4], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[5], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[6], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[7], \"react/jsx-dev-runtime\");\n  var CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  var useCombat = () => {\n    _s();\n    var context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  var enemyCounter = 0; // Global counter for unique enemy IDs\n\n  var CombatProvider = _ref => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    var children = _ref.children;\n    var game = (0, _GameContext.useGame)();\n    var _useZone = (0, _ZoneContext.useZone)(),\n      currentZone = _useZone.currentZone,\n      currentZoneLevel = _useZone.currentZoneLevel,\n      recordEnemyKill = _useZone.recordEnemyKill,\n      spawnZoneEnemy = _useZone.spawnZoneEnemy;\n\n    // Define initialCombatState before using it\n    var initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    var _useState = (0, _react.useState)(initialCombatState),\n      _useState2 = (0, _slicedToArray.default)(_useState, 2),\n      combatState = _useState2[0],\n      setCombatState = _useState2[1];\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        var effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    var _useState3 = (0, _react.useState)([]),\n      _useState4 = (0, _slicedToArray.default)(_useState3, 2),\n      projectiles = _useState4[0],\n      setProjectiles = _useState4[1];\n    var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray.default)(_useState5, 2),\n      lastExplosionTime = _useState6[0],\n      setLastExplosionTime = _useState6[1];\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    var handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      var xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      var goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    var handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      var enemiesToKill = []; // Track enemies to kill outside of setState\n\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        var newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        var newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        var effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          var enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          var effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            var newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                var healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            var MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            var SCREEN_WIDTH = 390;\n            var GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            var ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            var playerX = currentNinjaPosition.x;\n            var playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            var deltaX = playerX - enemy.position.x;\n            var deltaY = playerY - enemy.position.y;\n            var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            var ATTACK_RANGE = 50; // Enemy attack range\n            var ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  var isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    var baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    var attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    var playerDefense = newState.playerStats.defense;\n                    var finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    var newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                var normalizedX = deltaX / distance;\n                var normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                var randomFactor = 0.2; // 20% randomness\n                var finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                var finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                var newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                var newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          var cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            var CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              var target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                var cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (var i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        var allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Capture dead enemies OUTSIDE state update for XP processing\n        enemiesToKill = [...allDeadEnemies]; // Clone array to avoid state mutation issues\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        var currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            var animationDuration = 750; // 750ms death fade\n            var isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        var lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        var beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        var afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        var MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        var MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        var now = Date.now();\n        var hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // BULK XP PROCESSING - Single update for all kills (FIXED: Don't filter by xpAwarded)\n      if (enemiesToKill.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        var unprocessedEnemies = enemiesToKill; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG enemiesToKill xpAwarded status:`, enemiesToKill.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${enemiesToKill.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          var totalXP = 0;\n          var totalGold = 0;\n          var zoneKills = [];\n          var xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          var goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier;\n            totalGold += 10 * goldMultiplier;\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              var wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    var findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ninjaX = SCREEN_WIDTH / 2;\n      var ninjaY = GAME_AREA_HEIGHT / 2;\n      var closestEnemy = enemies[0];\n      var closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        var distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    var findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    var _useState7 = (0, _react.useState)({\n        x: 195,\n        y: 400\n      }),\n      _useState8 = (0, _slicedToArray.default)(_useState7, 2),\n      currentNinjaPosition = _useState8[0],\n      setCurrentNinjaPosition = _useState8[1];\n    var _useState9 = (0, _react.useState)(false),\n      _useState0 = (0, _slicedToArray.default)(_useState9, 2),\n      isManualControlActive = _useState0[0],\n      setIsManualControlActive = _useState0[1];\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    var updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    var setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    var castAbility = (state, slotIndex) => {\n      var deck = state.abilityManager.getDeck();\n      var ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      var damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      var isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        var ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        var ninjaY = currentNinjaPosition.y + 20;\n        var aoeRadius = ability.stats.aoeRadius;\n        var enemiesInRange = state.enemies.filter(enemy => {\n          var enemyX = enemy.position.x + 17.5; // Center of enemy\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        var target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        var targets = isAOE ? state.enemies.filter(enemy => {\n          var ninjaX = currentNinjaPosition.x + 20;\n          var ninjaY = currentNinjaPosition.y + 20;\n          var enemyX = enemy.position.x + 17.5;\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        var cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        var cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    var createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      var ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      var ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      var ENEMY_SIZE = 35;\n      var projectileId = `proj_${Date.now()}_${Math.random()}`;\n      var projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    var spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      var zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      var combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    var spawnBasicTestEnemy = state => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140;\n      var ENEMY_SIZE = 35;\n      var x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    var startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    var stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    var equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    var getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    var getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    var upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    var clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    var spawnEnemy = position => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      var x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    var spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    var clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    var useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      var isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      var currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      var success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          var newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      var tickInterval = _reactNative.Platform.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${_reactNative.Platform.OS}`);\n      var combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      var processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            var currentTime = Date.now();\n            var startTime = projectile.startTime || currentTime;\n            var elapsedTime = currentTime - startTime;\n            var progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                var newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  var impactX = projectile.targetX;\n                  var impactY = projectile.targetY;\n                  var enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    var enemyX = enemy.position.x + 17.5; // Center of enemy\n                    var enemyY = enemy.position.y + 17.5;\n                    var distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      var newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  var enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    var enemy = newState.enemies[enemyIndex];\n                    var newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            var timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      var impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    var saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        var abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    var contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"/Al0O4dWjeluJCM+3yYBwpX/SSI=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1180,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1239,2],[27,6,1239,2,"_babelRuntimeHelpersSlicedToArray"],[27,39,1239,2],[27,42,1239,2,"require"],[27,49,1239,2],[27,50,1239,2,"_dependencyMap"],[27,64,1239,2],[28,2,1239,2],[28,6,1239,2,"_slicedToArray"],[28,20,1239,2],[28,23,1239,2,"_interopDefault"],[28,38,1239,2],[28,39,1239,2,"_babelRuntimeHelpersSlicedToArray"],[28,72,1239,2],[29,2,1,0],[29,6,1,0,"_react"],[29,12,1,0],[29,15,1,0,"require"],[29,22,1,0],[29,23,1,0,"_dependencyMap"],[29,37,1,0],[30,2,1,0],[30,6,1,0,"React"],[30,11,1,0],[30,14,1,0,"_interopDefault"],[30,29,1,0],[30,30,1,0,"_react"],[30,36,1,0],[31,2,2,0],[31,6,2,0,"_reactNative"],[31,18,2,0],[31,21,2,0,"require"],[31,28,2,0],[31,29,2,0,"_dependencyMap"],[31,43,2,0],[32,2,3,0],[32,6,3,0,"_engineCombatEngine"],[32,25,3,0],[32,28,3,0,"require"],[32,35,3,0],[32,36,3,0,"_dependencyMap"],[32,50,3,0],[33,2,4,0],[33,6,4,0,"_typesAbilityTypes"],[33,24,4,0],[33,27,4,0,"require"],[33,34,4,0],[33,35,4,0,"_dependencyMap"],[33,49,4,0],[34,2,5,0],[34,6,5,0,"_GameContext"],[34,18,5,0],[34,21,5,0,"require"],[34,28,5,0],[34,29,5,0,"_dependencyMap"],[34,43,5,0],[35,2,6,0],[35,6,6,0,"_ZoneContext"],[35,18,6,0],[35,21,6,0,"require"],[35,28,6,0],[35,29,6,0,"_dependencyMap"],[35,43,6,0],[36,2,6,40],[36,6,6,40,"_reactJsxDevRuntime"],[36,25,6,40],[36,28,6,40,"require"],[36,35,6,40],[36,36,6,40,"_dependencyMap"],[36,50,6,40],[37,2,94,0],[37,6,94,6,"CombatContext"],[37,19,94,19],[37,35,94,22],[37,39,94,22,"createContext"],[37,45,94,35],[37,46,94,35,"createContext"],[37,59,94,35],[37,61,94,67,"undefined"],[37,70,94,76],[37,71,94,77],[38,2,96,7],[38,6,96,13,"useCombat"],[38,15,96,22],[38,18,96,25,"useCombat"],[38,19,96,25],[38,24,96,50],[39,4,96,50,"_s"],[39,6,96,50],[40,4,97,2],[40,8,97,8,"context"],[40,15,97,15],[40,18,97,18],[40,22,97,18,"useContext"],[40,28,97,28],[40,29,97,28,"useContext"],[40,39,97,28],[40,41,97,29,"CombatContext"],[40,54,97,42],[40,55,97,43],[41,4,98,2],[41,8,98,6],[41,9,98,7,"context"],[41,16,98,14],[41,18,98,16],[42,6,99,4],[42,12,99,10],[42,16,99,14,"Error"],[42,21,99,19],[42,22,99,20],[42,70,99,68],[42,71,99,69],[43,4,100,2],[44,4,101,2],[44,11,101,9,"context"],[44,18,101,16],[45,2,102,0],[45,3,102,1],[46,2,102,2,"_s"],[46,4,102,2],[46,5,96,13,"useCombat"],[46,14,96,22],[47,2,104,0],[47,6,104,4,"enemyCounter"],[47,18,104,16],[47,21,104,19],[47,22,104,20],[47,23,104,21],[47,24,104,22],[49,2,106,7],[49,6,106,13,"CombatProvider"],[49,20,106,27],[49,23,106,30,"_ref"],[49,27,106,30],[49,31,106,73],[50,4,106,73,"_s4"],[50,7,106,73],[51,4,106,73],[51,8,106,73,"_s3"],[51,11,106,73],[51,14,106,73,"$RefreshSig$"],[51,26,106,73],[52,4,106,73],[52,8,106,33,"children"],[52,16,106,41],[52,19,106,41,"_ref"],[52,23,106,41],[52,24,106,33,"children"],[52,32,106,41],[53,4,107,2],[53,8,107,8,"game"],[53,12,107,12],[53,15,107,15],[53,19,107,15,"useGame"],[53,31,107,22],[53,32,107,22,"useGame"],[53,39,107,22],[53,41,107,23],[53,42,107,24],[54,4,108,2],[54,8,108,2,"_useZone"],[54,16,108,2],[54,19,108,77],[54,23,108,77,"useZone"],[54,35,108,84],[54,36,108,84,"useZone"],[54,43,108,84],[54,45,108,85],[54,46,108,86],[55,6,108,10,"currentZone"],[55,17,108,21],[55,20,108,21,"_useZone"],[55,28,108,21],[55,29,108,10,"currentZone"],[55,40,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[56,25,108,39,"_useZone"],[56,33,108,39],[56,34,108,23,"currentZoneLevel"],[56,50,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[57,24,108,56,"_useZone"],[57,32,108,56],[57,33,108,41,"recordEnemyKill"],[57,48,108,56],[58,6,108,58,"spawnZoneEnemy"],[58,20,108,72],[58,23,108,72,"_useZone"],[58,31,108,72],[58,32,108,58,"spawnZoneEnemy"],[58,46,108,72],[60,4,110,2],[61,4,111,2],[61,8,111,8,"initialCombatState"],[61,26,111,39],[61,29,111,42],[62,6,112,4,"isInCombat"],[62,16,112,14],[62,18,112,16],[62,23,112,21],[63,6,113,4,"currentTick"],[63,17,113,15],[63,19,113,17],[63,20,113,18],[64,6,114,4,"enemies"],[64,13,114,11],[64,15,114,13],[64,17,114,15],[65,6,115,4,"abilityManager"],[65,20,115,18],[65,22,115,20],[65,26,115,24,"AbilityManager"],[65,44,115,38],[65,45,115,38,"AbilityManager"],[65,59,115,38],[65,60,115,39],[65,61,115,40],[66,6,116,4,"statusEffects"],[66,19,116,17],[66,21,116,19],[66,25,116,23,"StatusEffectManager"],[66,44,116,42],[66,45,116,42,"StatusEffectManager"],[66,64,116,42],[66,65,116,43],[66,66,116,44],[67,6,117,4,"playerStats"],[67,17,117,15],[67,19,117,17],[68,8,118,6,"attack"],[68,14,118,12],[68,16,118,14],[68,18,118,16],[69,8,118,18],[70,8,119,6,"defense"],[70,15,119,13],[70,17,119,15],[70,18,119,16],[71,8,120,6,"health"],[71,14,120,12],[71,16,120,14],[71,19,120,17],[72,8,121,6,"maxHealth"],[72,17,121,15],[72,19,121,17],[72,22,121,20],[73,8,122,6,"critChance"],[73,18,122,16],[73,20,122,18],[73,21,122,19],[74,8,123,6,"critDamage"],[74,18,123,16],[74,20,123,18],[74,23,123,21],[75,8,124,6,"cooldownReduction"],[75,25,124,23],[75,27,124,25],[76,6,125,4],[77,4,126,2],[77,5,126,3],[78,4,128,2],[78,8,128,2,"_useState"],[78,17,128,2],[78,20,128,40],[78,24,128,40,"useState"],[78,30,128,48],[78,31,128,48,"useState"],[78,39,128,48],[78,41,128,62,"initialCombatState"],[78,59,128,80],[78,60,128,81],[79,6,128,81,"_useState2"],[79,16,128,81],[79,23,128,81,"_slicedToArray"],[79,37,128,81],[79,38,128,81,"default"],[79,45,128,81],[79,47,128,81,"_useState"],[79,56,128,81],[80,6,128,9,"combatState"],[80,17,128,20],[80,20,128,20,"_useState2"],[80,30,128,20],[81,6,128,22,"setCombatState"],[81,20,128,36],[81,23,128,36,"_useState2"],[81,33,128,36],[83,4,130,2],[84,4,131,2],[84,8,131,2,"useEffect"],[84,14,131,11],[84,15,131,11,"useEffect"],[84,24,131,11],[84,26,131,12],[84,32,131,18],[85,6,132,4],[85,10,132,8,"game"],[85,14,132,12],[85,15,132,13,"gameState"],[85,24,132,22],[85,25,132,23,"abilityData"],[85,36,132,34],[85,40,132,38,"combatState"],[85,51,132,49],[85,52,132,50,"abilityManager"],[85,66,132,64],[85,68,132,66],[86,8,133,6,"console"],[86,15,133,13],[86,16,133,14,"log"],[86,19,133,17],[86,20,133,18],[86,68,133,66],[86,70,133,68,"game"],[86,74,133,72],[86,75,133,73,"gameState"],[86,84,133,82],[86,85,133,83,"abilityData"],[86,96,133,94],[86,97,133,95],[87,8,134,6,"combatState"],[87,19,134,17],[87,20,134,18,"abilityManager"],[87,34,134,32],[87,35,134,33,"restoreFromSaveData"],[87,54,134,52],[87,55,134,53,"game"],[87,59,134,57],[87,60,134,58,"gameState"],[87,69,134,67],[87,70,134,68,"abilityData"],[87,81,134,79],[87,82,134,80],[89,8,136,6],[90,8,137,6,"setCombatState"],[90,22,137,20],[90,23,137,21,"prev"],[90,27,137,25],[90,32,137,30],[91,10,137,32],[91,13,137,35,"prev"],[92,8,137,40],[92,9,137,41],[92,10,137,42],[92,11,137,43],[93,6,138,4],[94,4,139,2],[94,5,139,3],[94,7,139,5],[94,8,139,6,"game"],[94,12,139,10],[94,13,139,11,"gameState"],[94,22,139,20],[94,23,139,21,"abilityData"],[94,34,139,32],[94,36,139,34,"combatState"],[94,47,139,45],[94,48,139,46,"abilityManager"],[94,62,139,60],[94,63,139,61],[94,64,139,62],[96,4,141,2],[97,4,142,2],[97,8,142,2,"useEffect"],[97,14,142,11],[97,15,142,11,"useEffect"],[97,24,142,11],[97,26,142,12],[97,32,142,18],[98,6,143,4],[98,10,143,8,"game"],[98,14,143,12],[98,15,143,13,"gameState"],[98,24,143,22],[98,25,143,23,"ninja"],[98,30,143,28],[98,32,143,30],[99,8,144,6],[99,12,144,12,"effectiveStats"],[99,26,144,26],[99,29,144,29,"game"],[99,33,144,33],[99,34,144,34,"getEffectiveStats"],[99,51,144,51],[99,52,144,52],[99,53,144,53],[100,8,146,6,"setCombatState"],[100,22,146,20],[100,23,146,21,"prev"],[100,27,146,25],[100,31,146,29],[101,10,147,8],[102,10,148,8],[102,14,148,12,"prev"],[102,18,148,16],[102,19,148,17,"playerStats"],[102,30,148,28],[102,31,148,29,"maxHealth"],[102,40,148,38],[102,45,148,43],[102,48,148,46],[102,52,148,50,"prev"],[102,56,148,54],[102,57,148,55,"playerStats"],[102,68,148,66],[102,69,148,67,"attack"],[102,75,148,73],[102,80,148,78],[102,82,148,80],[102,84,148,82],[103,12,149,10,"console"],[103,19,149,17],[103,20,149,18,"log"],[103,23,149,21],[103,24,149,22],[103,60,149,58,"effectiveStats"],[103,74,149,72],[103,75,149,73,"health"],[103,81,149,79],[103,93,149,91,"effectiveStats"],[103,107,149,105],[103,108,149,106,"attack"],[103,114,149,112],[103,127,149,125,"effectiveStats"],[103,141,149,139],[103,142,149,140,"defense"],[103,149,149,147],[103,151,149,149],[103,152,149,150],[104,12,151,10],[104,19,151,17],[105,14,152,12],[105,17,152,15,"prev"],[105,21,152,19],[106,14,153,12,"playerStats"],[106,25,153,23],[106,27,153,25],[107,16,154,14,"attack"],[107,22,154,20],[107,24,154,22,"effectiveStats"],[107,38,154,36],[107,39,154,37,"attack"],[107,45,154,43],[108,16,155,14,"defense"],[108,23,155,21],[108,25,155,23,"effectiveStats"],[108,39,155,37],[108,40,155,38,"defense"],[108,47,155,45],[109,16,156,14,"health"],[109,22,156,20],[109,24,156,22,"effectiveStats"],[109,38,156,36],[109,39,156,37,"health"],[109,45,156,43],[110,16,156,45],[111,16,157,14,"maxHealth"],[111,25,157,23],[111,27,157,25,"effectiveStats"],[111,41,157,39],[111,42,157,40,"health"],[111,48,157,46],[112,16,158,14,"critChance"],[112,26,158,24],[112,28,158,26,"effectiveStats"],[112,42,158,40],[112,43,158,41,"critChance"],[112,53,158,51],[112,57,158,55],[112,58,158,56],[113,16,159,14,"critDamage"],[113,26,159,24],[113,28,159,26,"effectiveStats"],[113,42,159,40],[113,43,159,41,"critDamage"],[113,53,159,51],[113,57,159,55],[113,60,159,58],[114,16,160,14,"cooldownReduction"],[114,33,160,31],[114,35,160,33,"effectiveStats"],[114,49,160,47],[114,50,160,48,"cooldownReduction"],[114,67,160,65],[114,71,160,69],[115,14,161,12],[116,12,162,10],[116,13,162,11],[117,10,163,8],[118,10,164,8],[118,17,164,15,"prev"],[118,21,164,19],[119,8,165,6],[119,9,165,7],[119,10,165,8],[120,6,166,4],[121,4,167,2],[121,5,167,3],[121,7,167,5],[121,8,167,6,"game"],[121,12,167,10],[121,13,167,11,"gameState"],[121,22,167,20],[121,23,167,21,"ninja"],[121,28,167,26],[121,29,167,27],[121,30,167,28],[122,4,169,2],[122,8,169,2,"_useState3"],[122,18,169,2],[122,21,169,40],[122,25,169,40,"useState"],[122,31,169,48],[122,32,169,48,"useState"],[122,40,169,48],[122,42,169,69],[122,44,169,71],[122,45,169,72],[123,6,169,72,"_useState4"],[123,16,169,72],[123,23,169,72,"_slicedToArray"],[123,37,169,72],[123,38,169,72,"default"],[123,45,169,72],[123,47,169,72,"_useState3"],[123,57,169,72],[124,6,169,9,"projectiles"],[124,17,169,20],[124,20,169,20,"_useState4"],[124,30,169,20],[125,6,169,22,"setProjectiles"],[125,20,169,36],[125,23,169,36,"_useState4"],[125,33,169,36],[126,4,170,2],[126,8,170,2,"_useState5"],[126,18,170,2],[126,21,170,52],[126,25,170,52,"useState"],[126,31,170,60],[126,32,170,60,"useState"],[126,40,170,60],[126,42,170,69],[126,43,170,70],[126,44,170,71],[127,6,170,71,"_useState6"],[127,16,170,71],[127,23,170,71,"_slicedToArray"],[127,37,170,71],[127,38,170,71,"default"],[127,45,170,71],[127,47,170,71,"_useState5"],[127,57,170,71],[128,6,170,9,"lastExplosionTime"],[128,23,170,26],[128,26,170,26,"_useState6"],[128,36,170,26],[129,6,170,28,"setLastExplosionTime"],[129,26,170,48],[129,29,170,48,"_useState6"],[129,39,170,48],[130,4,171,2],[131,4,172,2],[133,4,174,2],[134,4,175,2],[134,8,175,8,"handleEnemyKill"],[134,23,175,23],[134,26,175,26],[134,30,175,26,"useCallback"],[134,36,175,37],[134,37,175,37,"useCallback"],[134,48,175,37],[134,50,175,39,"enemy"],[134,55,175,57],[134,59,175,62],[135,6,176,4],[136,6,177,4],[136,10,177,10,"xpReward"],[136,18,177,18],[136,21,177,21],[136,22,177,22,"enemy"],[136,27,177,27],[136,28,177,28,"zoneXP"],[136,34,177,34],[136,38,177,38],[136,39,177,39],[136,44,177,44,"game"],[136,48,177,48],[136,49,177,49,"gameState"],[136,58,177,58],[136,59,177,59,"subscriptionBenefits"],[136,79,177,79],[136,81,177,81,"xp_multiplier"],[136,94,177,94],[136,98,177,98],[136,101,177,101],[136,102,177,102],[137,6,178,4],[137,10,178,10,"goldReward"],[137,20,178,20],[137,23,178,23],[137,25,178,25],[137,29,178,29,"game"],[137,33,178,33],[137,34,178,34,"gameState"],[137,43,178,43],[137,44,178,44,"subscriptionBenefits"],[137,64,178,64],[137,66,178,66,"drop_multiplier"],[137,81,178,81],[137,85,178,85],[137,88,178,88],[137,89,178,89],[138,6,180,4,"console"],[138,13,180,11],[138,14,180,12,"log"],[138,17,180,15],[138,18,180,16],[138,46,180,44,"xpReward"],[138,54,180,52],[138,65,180,63,"goldReward"],[138,75,180,73],[138,88,180,86,"enemy"],[138,93,180,91],[138,94,180,92,"name"],[138,98,180,96],[138,100,180,98],[138,101,180,99],[140,6,182,4],[141,6,183,4,"game"],[141,10,183,8],[141,11,183,9,"updateNinja"],[141,22,183,20],[141,23,183,21,"prev"],[141,27,183,25],[141,32,183,30],[142,8,184,6,"experience"],[142,18,184,16],[142,20,184,18,"prev"],[142,24,184,22],[142,25,184,23,"experience"],[142,35,184,33],[142,38,184,36,"xpReward"],[142,46,184,44],[143,8,185,6,"gold"],[143,12,185,10],[143,14,185,12,"prev"],[143,18,185,16],[143,19,185,17,"gold"],[143,23,185,21],[143,26,185,24,"goldReward"],[144,6,186,4],[144,7,186,5],[144,8,186,6],[144,9,186,7],[146,6,188,4],[147,6,189,4,"setCombatState"],[147,20,189,18],[147,21,189,19,"prevState"],[147,30,189,28],[147,35,189,33],[148,8,190,6],[148,11,190,9,"prevState"],[148,20,190,18],[149,8,191,6,"enemies"],[149,15,191,13],[149,17,191,15,"prevState"],[149,26,191,24],[149,27,191,25,"enemies"],[149,34,191,32],[149,35,191,33,"map"],[149,38,191,36],[149,39,191,37,"e"],[149,40,191,38],[149,44,192,8,"e"],[149,45,192,9],[149,46,192,10,"id"],[149,48,192,12],[149,53,192,17,"enemy"],[149,58,192,22],[149,59,192,23,"id"],[149,61,192,25],[149,64,192,28],[150,10,192,30],[150,13,192,33,"e"],[150,14,192,34],[151,10,192,36,"xpAwarded"],[151,19,192,45],[151,21,192,47],[152,8,192,52],[152,9,192,53],[152,12,192,56,"e"],[152,13,193,6],[153,6,194,4],[153,7,194,5],[153,8,194,6],[153,9,194,7],[155,6,196,4],[156,6,197,4],[156,10,197,8,"enemy"],[156,15,197,13],[156,16,197,14,"zoneTypeId"],[156,26,197,24],[156,28,197,26],[157,8,198,6,"recordEnemyKill"],[157,23,198,21],[157,24,198,22],[158,10,199,8,"id"],[158,12,199,10],[158,14,199,12,"enemy"],[158,19,199,17],[158,20,199,18,"id"],[158,22,199,20],[159,10,200,8,"typeId"],[159,16,200,14],[159,18,200,16,"enemy"],[159,23,200,21],[159,24,200,22,"zoneTypeId"],[159,34,200,32],[160,10,201,8,"name"],[160,14,201,12],[160,16,201,14,"enemy"],[160,21,201,19],[160,22,201,20,"name"],[160,26,201,24],[161,10,202,8,"icon"],[161,14,202,12],[161,16,202,14],[161,20,202,18],[162,10,203,8,"hp"],[162,12,203,10],[162,14,203,12],[162,15,203,13],[163,10,204,8,"maxHP"],[163,15,204,13],[163,17,204,15,"enemy"],[163,22,204,20],[163,23,204,21,"maxHealth"],[163,32,204,30],[164,10,205,8,"attack"],[164,16,205,14],[164,18,205,16,"enemy"],[164,23,205,21],[164,24,205,22,"stats"],[164,29,205,27],[164,30,205,28,"attack"],[164,36,205,34],[165,10,206,8,"xp"],[165,12,206,10],[165,14,206,12,"enemy"],[165,19,206,17],[165,20,206,18,"zoneXP"],[165,26,206,24],[165,30,206,28],[165,31,206,29],[166,10,207,8,"position"],[166,18,207,16],[166,20,207,18,"enemy"],[166,25,207,23],[166,26,207,24,"position"],[167,8,208,6],[167,9,208,7],[167,10,208,8],[168,6,209,4],[169,4,210,2],[169,5,210,3],[169,7,210,5],[169,8,210,6,"game"],[169,12,210,10],[169,13,210,11,"updateNinja"],[169,24,210,22],[169,26,210,24,"game"],[169,30,210,28],[169,31,210,29,"gameState"],[169,40,210,38],[169,41,210,39,"subscriptionBenefits"],[169,61,210,59],[169,63,210,61,"recordEnemyKill"],[169,78,210,76],[169,79,210,77],[169,80,210,78],[171,4,212,2],[172,4,213,2],[173,4,214,2],[173,8,214,8,"handleCombatTick"],[173,24,214,24],[173,27,214,27,"React"],[173,32,214,32],[173,33,214,32,"default"],[173,40,214,32],[173,41,214,33,"useCallback"],[173,52,214,44],[173,53,214,45],[173,59,214,51],[174,6,214,51],[174,10,214,51,"_s2"],[174,13,214,51],[174,16,214,51,"$RefreshSig$"],[174,28,214,51],[175,6,215,4,"console"],[175,13,215,11],[175,14,215,12,"log"],[175,17,215,15],[175,18,215,16],[175,87,215,85],[175,88,215,86],[176,6,216,4,"console"],[176,13,216,11],[176,14,216,12,"log"],[176,17,216,15],[176,18,216,16],[176,65,216,63,"isManualControlActive"],[176,86,216,84],[176,99,216,97,"game"],[176,103,216,101],[176,104,216,102,"gameState"],[176,113,216,111],[176,114,216,112,"isAlive"],[176,121,216,119],[176,123,216,121],[176,124,216,122],[177,6,218,4],[177,10,218,8,"enemiesToKill"],[177,23,218,36],[177,26,218,39],[177,28,218,41],[177,29,218,42],[177,30,218,43],[179,6,220,4,"_s2"],[179,9,220,4],[179,10,220,4,"setCombatState"],[179,24,220,18],[179,25,220,18,"_s2"],[179,28,220,18],[179,29,220,19,"prev"],[179,33,220,23],[179,37,220,27],[180,8,220,27,"_s2"],[180,11,220,27],[181,8,221,6],[181,12,221,12,"newTick"],[181,19,221,19],[181,22,221,22,"combatEngine"],[181,41,221,34],[181,42,221,34,"combatEngine"],[181,54,221,34],[181,55,221,35,"getCurrentTick"],[181,69,221,49],[181,70,221,50],[181,71,221,51],[182,8,222,6],[182,12,222,12,"newState"],[182,20,222,20],[182,23,222,23],[183,10,222,25],[183,13,222,28,"prev"],[183,17,222,32],[184,10,222,34,"currentTick"],[184,21,222,45],[184,23,222,47,"newTick"],[185,8,222,55],[185,9,222,56],[186,8,224,6],[186,12,224,10],[186,13,224,11,"newState"],[186,21,224,19],[186,22,224,20,"isInCombat"],[186,32,224,30],[186,34,224,32],[186,41,224,39,"newState"],[186,49,224,47],[188,8,226,6],[189,8,227,6,"newState"],[189,16,227,14],[189,17,227,15,"abilityManager"],[189,31,227,29],[189,32,227,30,"updateCooldowns"],[189,47,227,45],[189,48,227,46,"newTick"],[189,55,227,53],[189,56,227,54],[191,8,229,6],[192,8,230,6],[192,12,230,12,"effectResults"],[192,25,230,25],[192,28,230,28,"newState"],[192,36,230,36],[192,37,230,37,"statusEffects"],[192,50,230,50],[192,51,230,51,"processTick"],[192,62,230,62],[192,63,230,63,"newTick"],[192,70,230,70],[192,71,230,71],[194,8,232,6],[195,8,233,6,"effectResults"],[195,21,233,19],[195,22,233,20,"forEach"],[195,29,233,27],[195,30,233,28],[195,31,233,29,"results"],[195,38,233,36],[195,40,233,38,"entityId"],[195,48,233,46],[195,53,233,51],[196,10,234,8],[196,14,234,14,"enemyIndex"],[196,24,234,24],[196,27,234,27,"newState"],[196,35,234,35],[196,36,234,36,"enemies"],[196,43,234,43],[196,44,234,44,"findIndex"],[196,53,234,53],[196,54,234,54,"e"],[196,55,234,55],[196,59,234,59,"e"],[196,60,234,60],[196,61,234,61,"id"],[196,63,234,63],[196,68,234,68,"entityId"],[196,76,234,76],[196,77,234,77],[197,10,235,8],[197,14,235,12,"enemyIndex"],[197,24,235,22],[197,28,235,26],[197,29,235,27],[197,31,235,29],[198,12,236,10,"results"],[198,19,236,17],[198,20,236,18,"forEach"],[198,27,236,25],[198,28,236,26,"result"],[198,34,236,32],[198,38,236,36],[199,14,237,12,"newState"],[199,22,237,20],[199,23,237,21,"enemies"],[199,30,237,28],[199,31,237,29,"enemyIndex"],[199,41,237,39],[199,42,237,40],[199,43,237,41,"health"],[199,49,237,47],[199,53,237,51,"result"],[199,59,237,57],[199,60,237,58,"damage"],[199,66,237,64],[200,14,238,12,"newState"],[200,22,238,20],[200,23,238,21,"enemies"],[200,30,238,28],[200,31,238,29,"enemyIndex"],[200,41,238,39],[200,42,238,40],[200,43,238,41,"lastDamaged"],[200,54,238,52],[200,57,238,55,"newTick"],[200,64,238,62],[201,12,239,10],[201,13,239,11],[201,14,239,12],[202,10,240,8],[203,8,241,6],[203,9,241,7],[203,10,241,8],[205,8,243,6],[206,8,244,6],[207,8,245,6],[207,12,245,10,"newState"],[207,20,245,18],[207,21,245,19,"playerStats"],[207,32,245,30],[207,36,245,34,"game"],[207,40,245,38],[207,41,245,39,"gameState"],[207,50,245,48],[207,51,245,49,"ninja"],[207,56,245,54],[207,58,245,56],[208,10,246,8],[208,14,246,14,"effectiveStats"],[208,28,246,28],[208,31,246,31,"game"],[208,35,246,35],[208,36,246,36,"getEffectiveStats"],[208,53,246,53],[208,54,246,54],[208,55,246,55],[210,10,248,8],[211,10,249,8],[211,14,249,12,"newState"],[211,22,249,20],[211,23,249,21,"playerStats"],[211,34,249,32],[211,35,249,33,"attack"],[211,41,249,39],[211,46,249,44,"effectiveStats"],[211,60,249,58],[211,61,249,59,"attack"],[211,67,249,65],[211,71,250,12,"newState"],[211,79,250,20],[211,80,250,21,"playerStats"],[211,91,250,32],[211,92,250,33,"defense"],[211,99,250,40],[211,104,250,45,"effectiveStats"],[211,118,250,59],[211,119,250,60,"defense"],[211,126,250,67],[211,130,251,12,"newState"],[211,138,251,20],[211,139,251,21,"playerStats"],[211,150,251,32],[211,151,251,33,"maxHealth"],[211,160,251,42],[211,165,251,47,"effectiveStats"],[211,179,251,61],[211,180,251,62,"maxHealth"],[211,189,251,71],[211,191,251,73],[212,12,253,10,"console"],[212,19,253,17],[212,20,253,18,"log"],[212,23,253,21],[212,24,253,22],[212,58,253,56,"newState"],[212,66,253,64],[212,67,253,65,"playerStats"],[212,78,253,76],[212,79,253,77,"attack"],[212,85,253,83],[212,91,253,89,"effectiveStats"],[212,105,253,103],[212,106,253,104,"attack"],[212,112,253,110],[212,125,253,123,"newState"],[212,133,253,131],[212,134,253,132,"playerStats"],[212,145,253,143],[212,146,253,144,"defense"],[212,153,253,151],[212,159,253,157,"effectiveStats"],[212,173,253,171],[212,174,253,172,"defense"],[212,181,253,179],[212,192,253,190,"newState"],[212,200,253,198],[212,201,253,199,"playerStats"],[212,212,253,210],[212,213,253,211,"maxHealth"],[212,222,253,220],[212,228,253,226,"effectiveStats"],[212,242,253,240],[212,243,253,241,"maxHealth"],[212,252,253,250],[212,254,253,252],[212,255,253,253],[214,12,255,10],[215,12,256,10],[215,16,256,14,"newHealth"],[215,25,256,23],[215,28,256,26,"newState"],[215,36,256,34],[215,37,256,35,"playerStats"],[215,48,256,46],[215,49,256,47,"health"],[215,55,256,53],[216,12,257,10],[216,16,257,14,"newState"],[216,24,257,22],[216,25,257,23,"playerStats"],[216,36,257,34],[216,37,257,35,"maxHealth"],[216,46,257,44],[216,51,257,49,"effectiveStats"],[216,65,257,63],[216,66,257,64,"maxHealth"],[216,75,257,73],[216,77,257,75],[217,14,258,12],[218,14,259,12],[218,18,259,16,"effectiveStats"],[218,32,259,30],[218,33,259,31,"maxHealth"],[218,42,259,40],[218,45,259,43,"newState"],[218,53,259,51],[218,54,259,52,"playerStats"],[218,65,259,63],[218,66,259,64,"maxHealth"],[218,75,259,73],[218,78,259,76],[218,81,259,79],[218,83,259,81],[219,16,260,14],[220,16,261,14],[220,20,261,20,"healthRatio"],[220,31,261,31],[220,34,261,34,"newState"],[220,42,261,42],[220,43,261,43,"playerStats"],[220,54,261,54],[220,55,261,55,"maxHealth"],[220,64,261,64],[220,67,261,67],[220,68,261,68],[220,71,262,16,"newState"],[220,79,262,24],[220,80,262,25,"playerStats"],[220,91,262,36],[220,92,262,37,"health"],[220,98,262,43],[220,101,262,46,"newState"],[220,109,262,54],[220,110,262,55,"playerStats"],[220,121,262,66],[220,122,262,67,"maxHealth"],[220,131,262,76],[220,134,262,79],[220,135,262,80],[221,16,263,14,"newHealth"],[221,25,263,23],[221,28,263,26,"Math"],[221,32,263,30],[221,33,263,31,"floor"],[221,38,263,36],[221,39,263,37,"effectiveStats"],[221,53,263,51],[221,54,263,52,"maxHealth"],[221,63,263,61],[221,66,263,64,"healthRatio"],[221,77,263,75],[221,78,263,76],[222,14,264,12],[222,15,264,13],[222,21,264,19],[222,25,264,23,"newState"],[222,33,264,31],[222,34,264,32,"playerStats"],[222,45,264,43],[222,46,264,44,"health"],[222,52,264,50],[222,55,264,53,"effectiveStats"],[222,69,264,67],[222,70,264,68,"maxHealth"],[222,79,264,77],[222,81,264,79],[223,16,265,14],[224,16,266,14,"newHealth"],[224,25,266,23],[224,28,266,26,"effectiveStats"],[224,42,266,40],[224,43,266,41,"maxHealth"],[224,52,266,50],[225,14,267,12],[226,14,268,12],[227,12,269,10],[228,12,271,10,"newState"],[228,20,271,18],[228,21,271,19,"playerStats"],[228,32,271,30],[228,35,271,33],[229,14,272,12],[229,17,272,15,"newState"],[229,25,272,23],[229,26,272,24,"playerStats"],[229,37,272,35],[230,14,273,12,"attack"],[230,20,273,18],[230,22,273,20,"effectiveStats"],[230,36,273,34],[230,37,273,35,"attack"],[230,43,273,41],[231,14,274,12,"defense"],[231,21,274,19],[231,23,274,21,"effectiveStats"],[231,37,274,35],[231,38,274,36,"defense"],[231,45,274,43],[232,14,275,12,"maxHealth"],[232,23,275,21],[232,25,275,23,"effectiveStats"],[232,39,275,37],[232,40,275,38,"maxHealth"],[232,49,275,47],[233,14,275,49],[234,14,276,12,"health"],[234,20,276,18],[234,22,276,20,"newHealth"],[234,31,276,29],[235,14,276,31],[236,14,277,12,"critChance"],[236,24,277,22],[236,26,277,24,"effectiveStats"],[236,40,277,38],[236,41,277,39,"critChance"],[236,51,277,49],[236,55,277,53,"newState"],[236,63,277,61],[236,64,277,62,"playerStats"],[236,75,277,73],[236,76,277,74,"critChance"],[236,86,277,84],[237,14,278,12,"critDamage"],[237,24,278,22],[237,26,278,24,"effectiveStats"],[237,40,278,38],[237,41,278,39,"critDamage"],[237,51,278,49],[237,55,278,53,"newState"],[237,63,278,61],[237,64,278,62,"playerStats"],[237,75,278,73],[237,76,278,74,"critDamage"],[237,86,278,84],[238,14,279,12,"cooldownReduction"],[238,31,279,29],[238,33,279,31,"effectiveStats"],[238,47,279,45],[238,48,279,46,"cooldownReduction"],[238,65,279,63],[238,69,279,67,"newState"],[238,77,279,75],[238,78,279,76,"playerStats"],[238,89,279,87],[238,90,279,88,"cooldownReduction"],[239,12,280,10],[239,13,280,11],[240,10,281,8],[242,10,283,8],[243,10,284,8],[243,14,284,12,"game"],[243,18,284,16],[243,19,284,17,"gameState"],[243,28,284,26],[243,29,284,27,"isAlive"],[243,36,284,34],[243,40,285,12,"game"],[243,44,285,16],[243,45,285,17,"gameState"],[243,54,285,26],[243,55,285,27,"ninja"],[243,60,285,32],[243,61,285,33,"health"],[243,67,285,39],[243,72,285,44,"effectiveStats"],[243,86,285,58],[243,87,285,59,"maxHealth"],[243,96,285,68],[243,100,286,12,"newState"],[243,108,286,20],[243,109,286,21,"playerStats"],[243,120,286,32],[243,121,286,33,"health"],[243,127,286,39],[243,130,286,42,"effectiveStats"],[243,144,286,56],[243,145,286,57,"maxHealth"],[243,154,286,66],[243,157,286,69],[243,160,286,72],[243,162,286,74],[244,12,287,10,"console"],[244,19,287,17],[244,20,287,18,"log"],[244,23,287,21],[244,24,287,22],[244,58,287,56,"newState"],[244,66,287,64],[244,67,287,65,"playerStats"],[244,78,287,76],[244,79,287,77,"health"],[244,85,287,83],[244,91,287,89,"game"],[244,95,287,93],[244,96,287,94,"gameState"],[244,105,287,103],[244,106,287,104,"ninja"],[244,111,287,109],[244,112,287,110,"health"],[244,118,287,116],[244,139,287,137],[244,140,287,138],[245,12,288,10,"newState"],[245,20,288,18],[245,21,288,19,"playerStats"],[245,32,288,30],[245,33,288,31,"health"],[245,39,288,37],[245,42,288,40,"game"],[245,46,288,44],[245,47,288,45,"gameState"],[245,56,288,54],[245,57,288,55,"ninja"],[245,62,288,60],[245,63,288,61,"health"],[245,69,288,67],[246,10,289,8],[247,8,290,6],[249,8,292,6],[250,8,293,6,"newState"],[250,16,293,14],[250,17,293,15,"enemies"],[250,24,293,22],[250,25,293,23,"forEach"],[250,32,293,30],[250,33,293,31,"enemy"],[250,38,293,36],[250,42,293,40],[251,10,294,8],[251,14,294,12],[251,15,294,13,"enemy"],[251,20,294,18],[251,21,294,19,"isBoss"],[251,27,294,25],[251,29,294,27],[252,12,294,29],[253,12,295,10],[254,12,296,10],[254,16,296,16,"MOVEMENT_SPEED"],[254,30,296,30],[254,33,296,33],[254,37,296,37],[254,38,296,38],[254,39,296,39],[255,12,297,10],[255,16,297,16,"SCREEN_WIDTH"],[255,28,297,28],[255,31,297,31],[255,34,297,34],[256,12,298,10],[256,16,298,16,"GAME_AREA_HEIGHT"],[256,32,298,32],[256,35,298,35],[256,38,298,38],[256,39,298,39],[256,40,298,40],[257,12,299,10],[257,16,299,16,"ENEMY_SIZE"],[257,26,299,26],[257,29,299,29],[257,31,299,31],[259,12,301,10],[260,12,302,10],[260,16,302,16,"playerX"],[260,23,302,23],[260,26,302,26,"currentNinjaPosition"],[260,46,302,46],[260,47,302,47,"x"],[260,48,302,48],[261,12,303,10],[261,16,303,16,"playerY"],[261,23,303,23],[261,26,303,26,"currentNinjaPosition"],[261,46,303,46],[261,47,303,47,"y"],[261,48,303,48],[263,12,305,10],[264,12,306,10],[264,16,306,16,"deltaX"],[264,22,306,22],[264,25,306,25,"playerX"],[264,32,306,32],[264,35,306,35,"enemy"],[264,40,306,40],[264,41,306,41,"position"],[264,49,306,49],[264,50,306,50,"x"],[264,51,306,51],[265,12,307,10],[265,16,307,16,"deltaY"],[265,22,307,22],[265,25,307,25,"playerY"],[265,32,307,32],[265,35,307,35,"enemy"],[265,40,307,40],[265,41,307,41,"position"],[265,49,307,49],[265,50,307,50,"y"],[265,51,307,51],[266,12,308,10],[266,16,308,16,"distance"],[266,24,308,24],[266,27,308,27,"Math"],[266,31,308,31],[266,32,308,32,"sqrt"],[266,36,308,36],[266,37,308,37,"deltaX"],[266,43,308,43],[266,46,308,46,"deltaX"],[266,52,308,52],[266,55,308,55,"deltaY"],[266,61,308,61],[266,64,308,64,"deltaY"],[266,70,308,70],[266,71,308,71],[268,12,310,10],[269,12,311,10],[269,16,311,16,"ATTACK_RANGE"],[269,28,311,28],[269,31,311,31],[269,33,311,33],[269,34,311,34],[269,35,311,35],[270,12,312,10],[270,16,312,16,"ATTACK_COOLDOWN"],[270,31,312,31],[270,34,312,34],[270,36,312,36],[270,37,312,37],[270,38,312,38],[272,12,314,10],[272,16,314,14,"distance"],[272,24,314,22],[272,28,314,26,"ATTACK_RANGE"],[272,40,314,38],[272,42,314,40],[273,14,315,12],[274,14,316,12],[274,18,316,16],[274,19,316,17,"enemy"],[274,24,316,22],[274,25,316,23,"lastAttackTick"],[274,39,316,37],[274,41,316,39,"enemy"],[274,46,316,44],[274,47,316,45,"lastAttackTick"],[274,61,316,59],[274,64,316,62],[274,65,316,63],[275,14,318,12],[275,18,318,16,"newState"],[275,26,318,24],[275,27,318,25,"currentTick"],[275,38,318,36],[275,41,318,39,"enemy"],[275,46,318,44],[275,47,318,45,"lastAttackTick"],[275,61,318,59],[275,65,318,63,"ATTACK_COOLDOWN"],[275,80,318,78],[275,82,318,80],[276,16,319,14],[277,16,320,14],[277,20,320,18],[277,21,320,19,"game"],[277,25,320,23],[277,26,320,24,"gameState"],[277,35,320,33],[277,36,320,34,"isAlive"],[277,43,320,41],[277,45,320,43],[278,18,321,16,"console"],[278,25,321,23],[278,26,321,24,"log"],[278,29,321,27],[278,30,321,28],[278,49,321,47,"enemy"],[278,54,321,52],[278,55,321,53,"name"],[278,59,321,57],[278,93,321,91],[278,94,321,92],[279,18,322,16],[280,18,323,16,"enemy"],[280,23,323,21],[280,24,323,22,"lastAttackTick"],[280,38,323,36],[280,41,323,39,"newState"],[280,49,323,47],[280,50,323,48,"currentTick"],[280,61,323,59],[281,16,324,14],[281,17,324,15],[281,23,324,21],[282,18,325,16],[283,18,326,16],[283,22,326,22,"isPlayerInvincible"],[283,40,326,40],[283,43,326,43,"game"],[283,47,326,47],[283,48,326,48,"gameState"],[283,57,326,57],[283,58,326,58,"isInvincible"],[283,70,326,70],[283,74,327,41,"game"],[283,78,327,45],[283,79,327,46,"gameState"],[283,88,327,55],[283,89,327,56,"invincibilityEndTime"],[283,109,327,76],[283,113,328,41,"Date"],[283,117,328,45],[283,118,328,46,"now"],[283,121,328,49],[283,122,328,50],[283,123,328,51],[283,126,328,54,"game"],[283,130,328,58],[283,131,328,59,"gameState"],[283,140,328,68],[283,141,328,69,"invincibilityEndTime"],[283,161,328,89],[284,18,330,16],[284,22,330,20,"isPlayerInvincible"],[284,40,330,38],[284,42,330,40],[285,20,331,18,"console"],[285,27,331,25],[285,28,331,26,"log"],[285,31,331,29],[285,32,331,30],[285,51,331,49,"enemy"],[285,56,331,54],[285,57,331,55,"name"],[285,61,331,59],[285,101,331,99],[285,102,331,100],[286,20,332,18],[287,20,333,18,"enemy"],[287,25,333,23],[287,26,333,24,"lastAttackTick"],[287,40,333,38],[287,43,333,41,"newState"],[287,51,333,49],[287,52,333,50,"currentTick"],[287,63,333,61],[288,18,334,16],[288,19,334,17],[288,25,334,23],[289,20,335,16],[290,20,336,16],[290,24,336,22,"baseAttack"],[290,34,336,32],[290,37,336,35,"enemy"],[290,42,336,40],[290,43,336,41,"stats"],[290,48,336,46],[290,49,336,47,"attack"],[290,55,336,53],[290,58,336,56],[290,61,336,59],[290,62,336,60],[290,63,336,61],[291,20,337,16],[291,24,337,22,"attackDamage"],[291,36,337,34],[291,39,337,37,"Math"],[291,43,337,41],[291,44,337,42,"floor"],[291,49,337,47],[291,50,337,48,"baseAttack"],[291,60,337,58],[291,64,337,62],[291,67,337,65],[291,70,337,68,"Math"],[291,74,337,72],[291,75,337,73,"random"],[291,81,337,79],[291,82,337,80],[291,83,337,81],[291,86,337,84],[291,89,337,87],[291,90,337,88],[291,91,337,89],[291,92,337,90],[291,93,337,91],[292,20,338,16],[292,24,338,22,"playerDefense"],[292,37,338,35],[292,40,338,38,"newState"],[292,48,338,46],[292,49,338,47,"playerStats"],[292,60,338,58],[292,61,338,59,"defense"],[292,68,338,66],[293,20,339,16],[293,24,339,22,"finalDamage"],[293,35,339,33],[293,38,339,36,"Math"],[293,42,339,40],[293,43,339,41,"max"],[293,46,339,44],[293,47,339,45],[293,48,339,46],[293,50,339,48,"attackDamage"],[293,62,339,60],[293,65,339,63,"Math"],[293,69,339,67],[293,70,339,68,"floor"],[293,75,339,73],[293,76,339,74,"playerDefense"],[293,89,339,87],[293,92,339,90],[293,95,339,93],[293,96,339,94],[293,97,339,95],[293,98,339,96],[293,99,339,97],[295,20,341,16,"console"],[295,27,341,23],[295,28,341,24,"log"],[295,31,341,27],[295,32,341,28],[295,53,341,49,"enemy"],[295,58,341,54],[295,59,341,55,"name"],[295,63,341,59],[295,86,341,82,"finalDamage"],[295,97,341,93],[295,109,341,105,"attackDamage"],[295,121,341,117],[295,132,341,128,"Math"],[295,136,341,132],[295,137,341,133,"floor"],[295,142,341,138],[295,143,341,139,"playerDefense"],[295,156,341,152],[295,159,341,155],[295,162,341,158],[295,163,341,159],[295,184,341,180],[295,185,341,181],[297,20,343,16],[298,20,344,16],[298,24,344,22,"newPlayerHealth"],[298,39,344,37],[298,42,344,40,"Math"],[298,46,344,44],[298,47,344,45,"max"],[298,50,344,48],[298,51,344,49],[298,52,344,50],[298,54,344,52,"newState"],[298,62,344,60],[298,63,344,61,"playerStats"],[298,74,344,72],[298,75,344,73,"health"],[298,81,344,79],[298,84,344,82,"finalDamage"],[298,95,344,93],[298,96,344,94],[299,20,345,16,"newState"],[299,28,345,24],[299,29,345,25,"playerStats"],[299,40,345,36],[299,41,345,37,"health"],[299,47,345,43],[299,50,345,46,"newPlayerHealth"],[299,65,345,61],[300,20,347,16,"console"],[300,27,347,23],[300,28,347,24,"log"],[300,31,347,27],[300,32,347,28],[300,53,347,49,"newState"],[300,61,347,57],[300,62,347,58,"playerStats"],[300,73,347,69],[300,74,347,70,"health"],[300,80,347,76],[300,84,347,80,"newState"],[300,92,347,88],[300,93,347,89,"playerStats"],[300,104,347,100],[300,105,347,101,"maxHealth"],[300,114,347,110],[300,124,347,120,"finalDamage"],[300,135,347,131],[300,145,347,141],[300,146,347,142],[302,20,349,16],[303,20,350,16,"enemy"],[303,25,350,21],[303,26,350,22,"lastAttackTick"],[303,40,350,36],[303,43,350,39,"newState"],[303,51,350,47],[303,52,350,48,"currentTick"],[303,63,350,59],[305,20,352,16],[306,20,353,16],[306,24,353,20,"newPlayerHealth"],[306,39,353,35],[306,43,353,39],[306,44,353,40],[306,46,353,42],[307,22,354,18,"console"],[307,29,354,25],[307,30,354,26,"log"],[307,33,354,29],[307,34,354,30],[307,84,354,80],[307,85,354,81],[308,22,355,18],[309,22,356,18,"game"],[309,26,356,22],[309,27,356,23,"updateGameState"],[309,42,356,38],[309,43,356,39],[310,24,356,41,"isAlive"],[310,31,356,48],[310,33,356,50],[311,22,356,56],[311,23,356,57],[311,24,356,58],[312,20,357,16],[313,18,358,16],[314,16,359,14],[315,14,360,12],[316,12,361,10],[316,13,361,11],[316,19,361,17],[317,14,362,12],[318,14,363,12],[319,14,364,12],[319,18,364,16,"distance"],[319,26,364,24],[319,29,364,27],[319,31,364,29],[319,33,364,31],[320,16,365,14],[321,16,366,14],[321,20,366,20,"normalizedX"],[321,31,366,31],[321,34,366,34,"deltaX"],[321,40,366,40],[321,43,366,43,"distance"],[321,51,366,51],[322,16,367,14],[322,20,367,20,"normalizedY"],[322,31,367,31],[322,34,367,34,"deltaY"],[322,40,367,40],[322,43,367,43,"distance"],[322,51,367,51],[324,16,369,14],[325,16,370,14],[325,20,370,20,"randomFactor"],[325,32,370,32],[325,35,370,35],[325,38,370,38],[325,39,370,39],[325,40,370,40],[326,16,371,14],[326,20,371,20,"finalX"],[326,26,371,26],[326,29,371,29,"normalizedX"],[326,40,371,40],[326,43,371,43],[326,44,371,44,"Math"],[326,48,371,48],[326,49,371,49,"random"],[326,55,371,55],[326,56,371,56],[326,57,371,57],[326,60,371,60],[326,63,371,63],[326,67,371,67,"randomFactor"],[326,79,371,79],[327,16,372,14],[327,20,372,20,"finalY"],[327,26,372,26],[327,29,372,29,"normalizedY"],[327,40,372,40],[327,43,372,43],[327,44,372,44,"Math"],[327,48,372,48],[327,49,372,49,"random"],[327,55,372,55],[327,56,372,56],[327,57,372,57],[327,60,372,60],[327,63,372,63],[327,67,372,67,"randomFactor"],[327,79,372,79],[329,16,374,14],[330,16,375,14],[330,20,375,18,"newX"],[330,24,375,22],[330,27,375,25,"enemy"],[330,32,375,30],[330,33,375,31,"position"],[330,41,375,39],[330,42,375,40,"x"],[330,43,375,41],[330,46,375,45,"finalX"],[330,52,375,51],[330,55,375,54,"MOVEMENT_SPEED"],[330,69,375,69],[331,16,376,14],[331,20,376,18,"newY"],[331,24,376,22],[331,27,376,25,"enemy"],[331,32,376,30],[331,33,376,31,"position"],[331,41,376,39],[331,42,376,40,"y"],[331,43,376,41],[331,46,376,45,"finalY"],[331,52,376,51],[331,55,376,54,"MOVEMENT_SPEED"],[331,69,376,69],[333,16,378,14],[334,16,379,14,"newX"],[334,20,379,18],[334,23,379,21,"Math"],[334,27,379,25],[334,28,379,26,"max"],[334,31,379,29],[334,32,379,30],[334,33,379,31],[334,35,379,33,"Math"],[334,39,379,37],[334,40,379,38,"min"],[334,43,379,41],[334,44,379,42,"SCREEN_WIDTH"],[334,56,379,54],[334,59,379,57,"ENEMY_SIZE"],[334,69,379,67],[334,71,379,69,"newX"],[334,75,379,73],[334,76,379,74],[334,77,379,75],[335,16,380,14,"newY"],[335,20,380,18],[335,23,380,21,"Math"],[335,27,380,25],[335,28,380,26,"max"],[335,31,380,29],[335,32,380,30],[335,33,380,31],[335,35,380,33,"Math"],[335,39,380,37],[335,40,380,38,"min"],[335,43,380,41],[335,44,380,42,"GAME_AREA_HEIGHT"],[335,60,380,58],[335,63,380,61,"ENEMY_SIZE"],[335,73,380,71],[335,75,380,73,"newY"],[335,79,380,77],[335,80,380,78],[335,81,380,79],[337,16,382,14],[338,16,383,14,"enemy"],[338,21,383,19],[338,22,383,20,"position"],[338,30,383,28],[338,31,383,29,"x"],[338,32,383,30],[338,35,383,33,"newX"],[338,39,383,37],[339,16,384,14,"enemy"],[339,21,384,19],[339,22,384,20,"position"],[339,30,384,28],[339,31,384,29,"y"],[339,32,384,30],[339,35,384,33,"newY"],[339,39,384,37],[340,14,385,12],[341,14,386,12],[342,12,387,10],[343,10,388,8],[344,8,389,6],[344,9,389,7],[344,10,389,8],[346,8,391,6],[347,8,392,6],[347,12,392,10,"newState"],[347,20,392,18],[347,21,392,19,"shadowClone"],[347,32,392,30],[347,34,392,32],[348,10,393,8],[349,10,394,8,"newState"],[349,18,394,16],[349,19,394,17,"shadowClone"],[349,30,394,28],[349,31,394,29,"remainingTicks"],[349,45,394,43],[349,47,394,45],[351,10,396,8],[352,10,397,8],[352,14,397,14,"cloneOffset"],[352,25,397,25],[352,28,397,28],[352,30,397,30],[352,31,397,31],[352,32,397,32],[353,10,398,8,"newState"],[353,18,398,16],[353,19,398,17,"shadowClone"],[353,30,398,28],[353,31,398,29,"position"],[353,39,398,37],[353,40,398,38,"x"],[353,41,398,39],[353,44,398,42,"currentNinjaPosition"],[353,64,398,62],[353,65,398,63,"x"],[353,66,398,64],[353,69,398,67,"cloneOffset"],[353,80,398,78],[354,10,399,8,"newState"],[354,18,399,16],[354,19,399,17,"shadowClone"],[354,30,399,28],[354,31,399,29,"position"],[354,39,399,37],[354,40,399,38,"y"],[354,41,399,39],[354,44,399,42,"currentNinjaPosition"],[354,64,399,62],[354,65,399,63,"y"],[354,66,399,64],[354,69,399,67],[354,71,399,69],[356,10,401,8],[357,10,402,8],[357,14,402,12,"newState"],[357,22,402,20],[357,23,402,21,"shadowClone"],[357,34,402,32],[357,35,402,33,"remainingTicks"],[357,49,402,47],[357,53,402,51],[357,54,402,52],[357,56,402,54],[358,12,403,10,"console"],[358,19,403,17],[358,20,403,18,"log"],[358,23,403,21],[358,24,403,22],[358,75,403,73],[358,76,403,74],[359,12,404,10,"newState"],[359,20,404,18],[359,21,404,19,"shadowClone"],[359,32,404,30],[359,35,404,33,"undefined"],[359,44,404,42],[360,10,405,8],[360,11,405,9],[360,17,405,15],[361,12,406,10],[362,12,407,10],[363,12,408,10],[363,16,408,16,"CLONE_ATTACK_INTERVAL"],[363,37,408,37],[363,40,408,40],[363,42,408,42],[364,12,409,10],[364,16,409,14,"newState"],[364,24,409,22],[364,25,409,23,"currentTick"],[364,36,409,34],[364,39,409,37,"CLONE_ATTACK_INTERVAL"],[364,60,409,58],[364,65,409,63],[364,66,409,64],[364,70,409,68,"newState"],[364,78,409,76],[364,79,409,77,"enemies"],[364,86,409,84],[364,87,409,85,"length"],[364,93,409,91],[364,96,409,94],[364,97,409,95],[364,99,409,97],[365,14,410,12,"console"],[365,21,410,19],[365,22,410,20,"log"],[365,25,410,23],[365,26,410,24],[365,83,410,81],[365,84,410,82],[367,14,412,12],[368,14,413,12],[368,18,413,18,"target"],[368,24,413,24],[368,27,413,27,"findClosestEnemyInternal"],[368,51,413,51],[368,52,413,52,"newState"],[368,60,413,60],[368,61,413,61,"enemies"],[368,68,413,68],[368,69,413,69],[369,14,414,12],[369,18,414,16,"target"],[369,24,414,22],[369,26,414,24],[370,16,415,14],[371,16,416,14],[371,20,416,20,"cloneDamage"],[371,31,416,31],[371,34,416,34,"Math"],[371,38,416,38],[371,39,416,39,"floor"],[371,44,416,44],[371,45,416,45,"newState"],[371,53,416,53],[371,54,416,54,"playerStats"],[371,65,416,65],[371,66,416,66,"attack"],[371,72,416,72],[371,75,416,75],[371,78,416,78],[371,79,416,79],[373,16,418,14],[374,16,419,14,"createProjectile"],[374,32,419,30],[374,33,419,31,"target"],[374,39,419,37],[374,41,419,39,"cloneDamage"],[374,52,419,50],[374,54,419,52,"newState"],[374,62,419,60],[374,63,419,61,"shadowClone"],[374,74,419,72],[374,75,419,73,"position"],[374,83,419,81],[374,85,419,83],[375,18,420,16,"id"],[375,20,420,18],[375,22,420,20],[375,43,420,41],[376,18,421,16,"name"],[376,22,421,20],[376,24,421,22],[376,45,421,43],[377,18,422,16,"icon"],[377,22,422,20],[377,24,422,22],[378,16,423,14],[378,17,423,15],[378,18,423,16],[379,14,424,12],[380,12,425,10],[381,10,426,8],[382,8,427,6],[384,8,429,6],[385,8,430,6],[386,8,431,6,"console"],[386,15,431,13],[386,16,431,14,"log"],[386,19,431,17],[386,20,431,18],[386,63,431,61,"isManualControlActive"],[386,84,431,82],[386,97,431,95,"game"],[386,101,431,99],[386,102,431,100,"gameState"],[386,111,431,109],[386,112,431,110,"isAlive"],[386,119,431,117],[386,121,431,119],[386,122,431,120],[387,8,432,6],[387,12,432,10],[387,13,432,11,"isManualControlActive"],[387,34,432,32],[387,38,432,36,"game"],[387,42,432,40],[387,43,432,41,"gameState"],[387,52,432,50],[387,53,432,51,"isAlive"],[387,60,432,58],[387,62,432,60],[388,10,433,8],[388,15,433,13],[388,19,433,17,"i"],[388,20,433,18],[388,23,433,21],[388,24,433,22],[388,26,433,24,"i"],[388,27,433,25],[388,30,433,28],[388,31,433,29],[388,33,433,31,"i"],[388,34,433,32],[388,36,433,34],[388,38,433,36],[389,12,434,10],[389,16,434,14,"newState"],[389,24,434,22],[389,25,434,23,"abilityManager"],[389,39,434,37],[389,40,434,38,"isAbilityReady"],[389,54,434,52],[389,55,434,53,"i"],[389,56,434,54],[389,57,434,55],[389,61,434,59,"newState"],[389,69,434,67],[389,70,434,68,"enemies"],[389,77,434,75],[389,78,434,76,"length"],[389,84,434,82],[389,87,434,85],[389,88,434,86],[389,90,434,88],[390,14,435,12],[390,18,435,16,"newState"],[390,26,435,24],[390,27,435,25,"abilityManager"],[390,41,435,39],[390,42,435,40,"useAbility"],[390,52,435,50],[390,53,435,51,"i"],[390,54,435,52],[390,56,435,54,"newTick"],[390,63,435,61],[390,64,435,62],[390,66,435,64],[391,16,436,14,"console"],[391,23,436,21],[391,24,436,22,"log"],[391,27,436,25],[391,28,436,26],[391,73,436,71,"i"],[391,74,436,72],[391,76,436,74],[391,77,436,75],[392,16,437,14,"castAbility"],[392,27,437,25],[392,28,437,26,"newState"],[392,36,437,34],[392,38,437,36,"i"],[392,39,437,37],[392,40,437,38],[393,14,438,12],[394,12,439,10],[395,10,440,8],[396,8,441,6],[398,8,443,6],[399,8,444,6],[400,8,445,6],[400,12,445,12,"allDeadEnemies"],[400,26,445,26],[400,29,445,29,"newState"],[400,37,445,37],[400,38,445,38,"enemies"],[400,45,445,45],[400,46,445,46,"filter"],[400,52,445,52],[400,53,445,53,"enemy"],[400,58,445,58],[400,62,445,62,"enemy"],[400,67,445,67],[400,68,445,68,"health"],[400,74,445,74],[400,78,445,78],[400,79,445,79],[400,80,445,80],[402,8,447,6],[403,8,448,6,"enemiesToKill"],[403,21,448,19],[403,24,448,22],[403,25,448,23],[403,28,448,26,"allDeadEnemies"],[403,42,448,40],[403,43,448,41],[403,44,448,42],[403,45,448,43],[405,8,450,6],[406,8,451,6],[406,12,451,10,"allDeadEnemies"],[406,26,451,24],[406,27,451,25,"length"],[406,33,451,31],[406,36,451,34],[406,37,451,35],[406,39,451,37],[407,10,452,8,"console"],[407,17,452,15],[407,18,452,16,"log"],[407,21,452,19],[407,22,452,20],[407,34,452,32,"allDeadEnemies"],[407,48,452,46],[407,49,452,47,"length"],[407,55,452,53],[407,83,452,81],[407,85,452,83,"allDeadEnemies"],[407,99,452,97],[407,100,452,98,"map"],[407,103,452,101],[407,104,452,102,"e"],[407,105,452,103],[407,109,452,107],[407,112,452,110,"e"],[407,113,452,111],[407,114,452,112,"name"],[407,118,452,116],[407,122,452,120,"e"],[407,123,452,121],[407,124,452,122,"health"],[407,130,452,128],[407,145,452,143,"e"],[407,146,452,144],[407,147,452,145,"isDying"],[407,154,452,152],[407,157,452,155],[407,158,452,156],[407,159,452,157],[408,8,453,6],[410,8,455,6],[411,8,456,6],[411,12,456,12,"currentTime"],[411,23,456,23],[411,26,456,26,"Date"],[411,30,456,30],[411,31,456,31,"now"],[411,34,456,34],[411,35,456,35],[411,36,456,36],[412,8,457,6,"newState"],[412,16,457,14],[412,17,457,15,"enemies"],[412,24,457,22],[412,27,457,25,"newState"],[412,35,457,33],[412,36,457,34,"enemies"],[412,43,457,41],[412,44,457,42,"filter"],[412,50,457,48],[412,51,457,49,"enemy"],[412,56,457,54],[412,60,457,58],[413,10,458,8],[413,14,458,12,"enemy"],[413,19,458,17],[413,20,458,18,"isDying"],[413,27,458,25],[413,31,458,29,"enemy"],[413,36,458,34],[413,37,458,35,"deathStartTime"],[413,51,458,49],[413,53,458,51],[414,12,459,10],[414,16,459,16,"animationDuration"],[414,33,459,33],[414,36,459,36],[414,39,459,39],[414,40,459,40],[414,41,459,41],[415,12,460,10],[415,16,460,16,"isAnimationComplete"],[415,35,460,35],[415,38,460,38,"currentTime"],[415,49,460,49],[415,52,460,52,"enemy"],[415,57,460,57],[415,58,460,58,"deathStartTime"],[415,72,460,72],[415,76,460,76,"animationDuration"],[415,93,460,93],[416,12,461,10],[416,16,461,14,"isAnimationComplete"],[416,35,461,33],[416,37,461,35],[417,14,462,12,"console"],[417,21,462,19],[417,22,462,20,"log"],[417,25,462,23],[417,26,462,24],[417,58,462,56,"enemy"],[417,63,462,61],[417,64,462,62,"name"],[417,68,462,66],[417,86,462,84,"currentTime"],[417,97,462,95],[417,100,462,98,"enemy"],[417,105,462,103],[417,106,462,104,"deathStartTime"],[417,120,462,118],[417,129,462,127],[417,130,462,128],[418,14,463,12],[418,21,463,19],[418,26,463,24],[418,27,463,25],[418,28,463,26],[419,12,464,10],[420,10,465,8],[421,10,466,8],[421,17,466,15],[421,21,466,19],[421,22,466,20],[421,23,466,21],[422,8,467,6],[422,9,467,7],[422,10,467,8],[424,8,469,6],[425,8,470,6],[425,12,470,10,"allDeadEnemies"],[425,26,470,24],[425,27,470,25,"length"],[425,33,470,31],[425,36,470,34],[425,37,470,35],[425,39,470,37],[426,10,471,8,"console"],[426,17,471,15],[426,18,471,16,"log"],[426,21,471,19],[426,22,471,20],[426,49,471,47,"allDeadEnemies"],[426,63,471,61],[426,64,471,62,"length"],[426,70,471,68],[426,86,471,84],[426,88,471,86,"allDeadEnemies"],[426,102,471,100],[426,103,471,101,"map"],[426,106,471,104],[426,107,471,105,"e"],[426,108,471,106],[426,112,471,110],[426,115,471,113,"e"],[426,116,471,114],[426,117,471,115,"id"],[426,119,471,117],[426,123,471,121,"e"],[426,124,471,122],[426,125,471,123,"health"],[426,131,471,129],[426,136,471,134],[426,137,471,135],[426,138,471,136],[427,8,472,6],[429,8,474,6],[430,8,475,6],[430,12,475,12,"lowHealthEnemies"],[430,28,475,28],[430,31,475,31,"newState"],[430,39,475,39],[430,40,475,40,"enemies"],[430,47,475,47],[430,48,475,48,"filter"],[430,54,475,54],[430,55,475,55,"enemy"],[430,60,475,60],[430,64,475,64,"enemy"],[430,69,475,69],[430,70,475,70,"health"],[430,76,475,76],[430,80,475,80],[430,82,475,82],[430,86,475,86,"enemy"],[430,91,475,91],[430,92,475,92,"health"],[430,98,475,98],[430,101,475,101],[430,102,475,102],[430,103,475,103],[431,8,476,6],[431,12,476,10,"lowHealthEnemies"],[431,28,476,26],[431,29,476,27,"length"],[431,35,476,33],[431,38,476,36],[431,39,476,37],[431,41,476,39],[432,10,477,8,"console"],[432,17,477,15],[432,18,477,16,"log"],[432,21,477,19],[432,22,477,20],[432,61,477,59],[432,63,477,61,"lowHealthEnemies"],[432,79,477,77],[432,80,477,78,"map"],[432,83,477,81],[432,84,477,82,"e"],[432,85,477,83],[432,89,477,87],[432,92,477,90,"e"],[432,93,477,91],[432,94,477,92,"id"],[432,96,477,94],[432,100,477,98,"e"],[432,101,477,99],[432,102,477,100,"health"],[432,108,477,106],[432,112,477,110,"e"],[432,113,477,111],[432,114,477,112,"maxHealth"],[432,123,477,121],[432,128,477,126],[432,129,477,127],[432,130,477,128],[433,8,478,6],[435,8,480,6],[436,8,481,6],[436,12,481,12,"beforeCount"],[436,23,481,23],[436,26,481,26,"newState"],[436,34,481,34],[436,35,481,35,"enemies"],[436,42,481,42],[436,43,481,43,"length"],[436,49,481,49],[437,8,482,6,"newState"],[437,16,482,14],[437,17,482,15,"enemies"],[437,24,482,22],[437,27,482,25,"newState"],[437,35,482,33],[437,36,482,34,"enemies"],[437,43,482,41],[437,44,482,42,"filter"],[437,50,482,48],[437,51,482,49,"enemy"],[437,56,482,54],[437,60,482,58,"enemy"],[437,65,482,63],[437,66,482,64,"health"],[437,72,482,70],[437,75,482,73],[437,76,482,74],[437,77,482,75],[438,8,483,6],[438,12,483,12,"afterCount"],[438,22,483,22],[438,25,483,25,"newState"],[438,33,483,33],[438,34,483,34,"enemies"],[438,41,483,41],[438,42,483,42,"length"],[438,48,483,48],[439,8,485,6],[439,12,485,10,"beforeCount"],[439,23,485,21],[439,28,485,26,"afterCount"],[439,38,485,36],[439,40,485,38],[440,10,486,8,"console"],[440,17,486,15],[440,18,486,16,"log"],[440,21,486,19],[440,22,486,20],[440,52,486,50,"beforeCount"],[440,63,486,61],[440,66,486,64,"afterCount"],[440,76,486,74],[440,102,486,100],[440,103,486,101],[441,8,487,6],[443,8,489,6],[444,8,490,6],[445,8,491,6],[445,12,491,12,"MAX_ENEMIES"],[445,23,491,23],[445,26,491,26],[445,28,491,28],[445,29,491,29],[445,30,491,30],[446,8,492,6],[446,12,492,12,"MIN_SPAWN_DELAY"],[446,27,492,27],[446,30,492,30],[446,33,492,33],[446,34,492,34],[446,35,492,35],[447,8,493,6],[447,12,493,12,"now"],[447,15,493,15],[447,18,493,18,"Date"],[447,22,493,22],[447,23,493,23,"now"],[447,26,493,26],[447,27,493,27],[447,28,493,28],[448,8,494,6],[448,12,494,12,"hasBoss"],[448,19,494,19],[448,22,494,22,"newState"],[448,30,494,30],[448,31,494,31,"enemies"],[448,38,494,38],[448,39,494,39,"some"],[448,43,494,43],[448,44,494,44,"enemy"],[448,49,494,49],[448,53,494,53,"enemy"],[448,58,494,58],[448,59,494,59,"isBoss"],[448,65,494,65],[448,66,494,66],[450,8,496,6],[451,8,497,6],[451,12,497,10],[451,13,497,11,"newState"],[451,21,497,19],[451,22,497,20,"lastSpawnTime"],[451,35,497,33],[451,37,497,35],[452,10,498,8,"newState"],[452,18,498,16],[452,19,498,17,"lastSpawnTime"],[452,32,498,30],[452,35,498,33,"now"],[452,38,498,36],[453,8,499,6],[454,8,501,6,"console"],[454,15,501,13],[454,16,501,14,"log"],[454,19,501,17],[454,20,501,18],[454,53,501,51,"newState"],[454,61,501,59],[454,62,501,60,"enemies"],[454,69,501,67],[454,70,501,68,"length"],[454,76,501,74],[454,85,501,83,"MAX_ENEMIES"],[454,96,501,94],[454,109,501,107,"hasBoss"],[454,116,501,114],[454,118,501,116],[454,119,501,117],[456,8,503,6],[457,8,504,6],[457,12,504,10],[457,13,504,11,"hasBoss"],[457,20,504,18],[457,24,504,22,"newState"],[457,32,504,30],[457,33,504,31,"enemies"],[457,40,504,38],[457,41,504,39,"length"],[457,47,504,45],[457,50,504,48,"MAX_ENEMIES"],[457,61,504,59],[457,65,504,64,"now"],[457,68,504,67],[457,71,504,70,"newState"],[457,79,504,78],[457,80,504,79,"lastSpawnTime"],[457,93,504,92],[457,97,504,97,"MIN_SPAWN_DELAY"],[457,112,504,112],[457,114,504,114],[458,10,505,8,"console"],[458,17,505,15],[458,18,505,16,"log"],[458,21,505,19],[458,22,505,20],[458,43,505,41,"newState"],[458,51,505,49],[458,52,505,50,"enemies"],[458,59,505,57],[458,60,505,58,"length"],[458,66,505,64],[458,69,505,67],[458,70,505,68],[458,74,505,72,"MAX_ENEMIES"],[458,85,505,83],[458,87,505,85],[458,88,505,86],[459,10,506,8,"spawnTestEnemy"],[459,24,506,22],[459,25,506,23,"newState"],[459,33,506,31],[459,34,506,32],[460,10,507,8,"newState"],[460,18,507,16],[460,19,507,17,"lastSpawnTime"],[460,32,507,30],[460,35,507,33,"now"],[460,38,507,36],[461,8,508,6],[462,8,510,6],[462,15,510,13,"newState"],[462,23,510,21],[463,6,511,4],[463,7,511,5],[463,47,511,6],[465,6,513,4],[466,6,514,4],[466,10,514,8,"enemiesToKill"],[466,23,514,21],[466,24,514,22,"length"],[466,30,514,28],[466,33,514,31],[466,34,514,32],[466,36,514,34],[467,8,515,6],[468,8,516,6],[469,8,517,6],[469,12,517,12,"unprocessedEnemies"],[469,30,517,30],[469,33,517,33,"enemiesToKill"],[469,46,517,46],[469,47,517,47],[469,48,517,48],[471,8,519,6],[472,8,520,6,"console"],[472,15,520,13],[472,16,520,14,"log"],[472,19,520,17],[472,20,520,18],[472,62,520,60],[472,64,520,62,"enemiesToKill"],[472,77,520,75],[472,78,520,76,"map"],[472,81,520,79],[472,82,520,80,"e"],[472,83,520,81],[472,88,520,86],[473,10,520,87,"id"],[473,12,520,89],[473,14,520,91,"e"],[473,15,520,92],[473,16,520,93,"id"],[473,18,520,95],[474,10,520,97,"name"],[474,14,520,101],[474,16,520,103,"e"],[474,17,520,104],[474,18,520,105,"name"],[474,22,520,109],[475,10,520,111,"xpAwarded"],[475,19,520,120],[475,21,520,122,"e"],[475,22,520,123],[475,23,520,124,"xpAwarded"],[476,8,520,133],[476,9,520,134],[476,10,520,135],[476,11,520,136],[476,12,520,137],[477,8,521,6,"console"],[477,15,521,13],[477,16,521,14,"log"],[477,19,521,17],[477,20,521,18],[477,43,521,41,"enemiesToKill"],[477,56,521,54],[477,57,521,55,"length"],[477,63,521,61],[477,80,521,78,"unprocessedEnemies"],[477,98,521,96],[477,99,521,97,"length"],[477,105,521,103],[477,119,521,117],[477,120,521,118],[478,8,523,6],[478,12,523,10,"unprocessedEnemies"],[478,30,523,28],[478,31,523,29,"length"],[478,37,523,35],[478,40,523,38],[478,41,523,39],[478,43,523,41],[479,10,524,8],[480,10,525,8],[480,14,525,12,"totalXP"],[480,21,525,19],[480,24,525,22],[480,25,525,23],[481,10,526,8],[481,14,526,12,"totalGold"],[481,23,526,21],[481,26,526,24],[481,27,526,25],[482,10,527,8],[482,14,527,14,"zoneKills"],[482,23,527,30],[482,26,527,33],[482,28,527,35],[483,10,529,8],[483,14,529,14,"xpMultiplier"],[483,26,529,26],[483,29,529,29,"game"],[483,33,529,33],[483,34,529,34,"gameState"],[483,43,529,43],[483,44,529,44,"subscriptionBenefits"],[483,64,529,64],[483,66,529,66,"xp_multiplier"],[483,79,529,79],[483,83,529,83],[483,86,529,86],[484,10,530,8],[484,14,530,14,"goldMultiplier"],[484,28,530,28],[484,31,530,31,"game"],[484,35,530,35],[484,36,530,36,"gameState"],[484,45,530,45],[484,46,530,46,"subscriptionBenefits"],[484,66,530,66],[484,68,530,68,"drop_multiplier"],[484,83,530,83],[484,87,530,87],[484,90,530,90],[485,10,532,8,"unprocessedEnemies"],[485,28,532,26],[485,29,532,27,"forEach"],[485,36,532,34],[485,37,532,35,"enemy"],[485,42,532,40],[485,46,532,44],[486,12,533,10,"totalXP"],[486,19,533,17],[486,23,533,21],[486,24,533,22,"enemy"],[486,29,533,27],[486,30,533,28,"zoneXP"],[486,36,533,34],[486,40,533,38],[486,41,533,39],[486,45,533,43,"xpMultiplier"],[486,57,533,55],[487,12,534,10,"totalGold"],[487,21,534,19],[487,25,534,23],[487,27,534,25],[487,30,534,28,"goldMultiplier"],[487,44,534,42],[488,12,536,10],[488,16,536,14,"enemy"],[488,21,536,19],[488,22,536,20,"zoneTypeId"],[488,32,536,30],[488,34,536,32],[489,14,537,12,"zoneKills"],[489,23,537,21],[489,24,537,22,"push"],[489,28,537,26],[489,29,537,27],[490,16,538,14,"id"],[490,18,538,16],[490,20,538,18,"enemy"],[490,25,538,23],[490,26,538,24,"id"],[490,28,538,26],[491,16,539,14,"typeId"],[491,22,539,20],[491,24,539,22,"enemy"],[491,29,539,27],[491,30,539,28,"zoneTypeId"],[491,40,539,38],[492,16,540,14,"name"],[492,20,540,18],[492,22,540,20,"enemy"],[492,27,540,25],[492,28,540,26,"name"],[492,32,540,30],[493,16,541,14,"icon"],[493,20,541,18],[493,22,541,20],[493,26,541,24],[494,16,542,14,"hp"],[494,18,542,16],[494,20,542,18],[494,21,542,19],[495,16,543,14,"maxHP"],[495,21,543,19],[495,23,543,21,"enemy"],[495,28,543,26],[495,29,543,27,"maxHealth"],[495,38,543,36],[496,16,544,14,"attack"],[496,22,544,20],[496,24,544,22,"enemy"],[496,29,544,27],[496,30,544,28,"stats"],[496,35,544,33],[496,36,544,34,"attack"],[496,42,544,40],[497,16,545,14,"xp"],[497,18,545,16],[497,20,545,18,"enemy"],[497,25,545,23],[497,26,545,24,"zoneXP"],[497,32,545,30],[497,36,545,34],[497,37,545,35],[498,16,546,14,"position"],[498,24,546,22],[498,26,546,24,"enemy"],[498,31,546,29],[498,32,546,30,"position"],[499,14,547,12],[499,15,547,13],[499,16,547,14],[500,12,548,10],[501,10,549,8],[501,11,549,9],[501,12,549,10],[503,10,551,8],[504,10,552,8,"game"],[504,14,552,12],[504,15,552,13,"updateNinja"],[504,26,552,24],[504,27,552,25,"prev"],[504,31,552,29],[504,36,552,34],[505,12,553,10,"experience"],[505,22,553,20],[505,24,553,22,"prev"],[505,28,553,26],[505,29,553,27,"experience"],[505,39,553,37],[505,42,553,40,"totalXP"],[505,49,553,47],[506,12,554,10,"gold"],[506,16,554,14],[506,18,554,16,"prev"],[506,22,554,20],[506,23,554,21,"gold"],[506,27,554,25],[506,30,554,28,"totalGold"],[507,10,555,8],[507,11,555,9],[507,12,555,10],[507,13,555,11],[509,10,557,8],[510,10,558,8,"zoneKills"],[510,19,558,17],[510,20,558,18,"forEach"],[510,27,558,25],[510,28,558,26,"zoneEnemy"],[510,37,558,35],[510,41,558,39,"recordEnemyKill"],[510,56,558,54],[510,57,558,55,"zoneEnemy"],[510,66,558,64],[510,67,558,65],[510,68,558,66],[512,10,560,8],[513,10,561,8,"setCombatState"],[513,24,561,22],[513,25,561,23,"prev"],[513,29,561,27],[513,34,561,32],[514,12,562,10],[514,15,562,13,"prev"],[514,19,562,17],[515,12,563,10,"enemies"],[515,19,563,17],[515,21,563,19,"prev"],[515,25,563,23],[515,26,563,24,"enemies"],[515,33,563,31],[515,34,563,32,"map"],[515,37,563,35],[515,38,563,36,"enemy"],[515,43,563,41],[515,47,563,45],[516,14,564,12],[516,18,564,18,"wasProcessed"],[516,30,564,30],[516,33,564,33,"unprocessedEnemies"],[516,51,564,51],[516,52,564,52,"find"],[516,56,564,56],[516,57,564,57,"processed"],[516,66,564,66],[516,70,564,70,"processed"],[516,79,564,79],[516,80,564,80,"id"],[516,82,564,82],[516,87,564,87,"enemy"],[516,92,564,92],[516,93,564,93,"id"],[516,95,564,95],[516,96,564,96],[517,14,565,12],[517,21,565,19,"wasProcessed"],[517,33,565,31],[517,36,565,34],[518,16,565,36],[518,19,565,39,"enemy"],[518,24,565,44],[519,16,565,46,"xpAwarded"],[519,25,565,55],[519,27,565,57],[520,14,565,62],[520,15,565,63],[520,18,565,66,"enemy"],[520,23,565,71],[521,12,566,10],[521,13,566,11],[522,10,567,8],[522,11,567,9],[522,12,567,10],[522,13,567,11],[523,8,568,6],[524,6,569,4],[525,4,570,2],[525,5,570,3],[525,7,570,5],[525,8,570,6,"game"],[525,12,570,10],[525,13,570,11,"updateNinja"],[525,24,570,22],[525,26,570,24,"game"],[525,30,570,28],[525,31,570,29,"gameState"],[525,40,570,38],[525,41,570,39,"subscriptionBenefits"],[525,61,570,59],[525,63,570,61,"recordEnemyKill"],[525,78,570,76],[525,80,570,78,"spawnTestEnemy"],[525,94,570,92],[525,96,570,94,"spawnZoneEnemy"],[525,110,570,108],[525,111,570,109],[525,112,570,110],[525,113,570,111],[525,114,570,112],[527,4,572,2],[528,4,573,2],[528,8,573,8,"findClosestEnemyInternal"],[528,32,573,32],[528,35,573,36,"enemies"],[528,42,573,58],[528,46,573,83],[529,6,574,4],[529,10,574,8,"enemies"],[529,17,574,15],[529,18,574,16,"length"],[529,24,574,22],[529,29,574,27],[529,30,574,28],[529,32,574,30],[529,39,574,37],[529,43,574,41],[531,6,576,4],[532,6,577,4],[532,10,577,10,"SCREEN_WIDTH"],[532,22,577,22],[532,25,577,25],[532,28,577,28],[533,6,578,4],[533,10,578,10,"GAME_AREA_HEIGHT"],[533,26,578,26],[533,29,578,29],[533,32,578,32],[533,35,578,35],[533,38,578,38],[533,39,578,39],[533,40,578,40],[534,6,579,4],[534,10,579,10,"ninjaX"],[534,16,579,16],[534,19,579,19,"SCREEN_WIDTH"],[534,31,579,31],[534,34,579,34],[534,35,579,35],[535,6,580,4],[535,10,580,10,"ninjaY"],[535,16,580,16],[535,19,580,19,"GAME_AREA_HEIGHT"],[535,35,580,35],[535,38,580,38],[535,39,580,39],[536,6,582,4],[536,10,582,8,"closestEnemy"],[536,22,582,20],[536,25,582,23,"enemies"],[536,32,582,30],[536,33,582,31],[536,34,582,32],[536,35,582,33],[537,6,583,4],[537,10,583,8,"closestDistance"],[537,25,583,23],[537,28,583,26,"Infinity"],[537,36,583,34],[538,6,585,4,"enemies"],[538,13,585,11],[538,14,585,12,"forEach"],[538,21,585,19],[538,22,585,20,"enemy"],[538,27,585,25],[538,31,585,29],[539,8,586,6],[539,12,586,12,"distance"],[539,20,586,20],[539,23,586,23,"Math"],[539,27,586,27],[539,28,586,28,"sqrt"],[539,32,586,32],[539,33,587,8,"Math"],[539,37,587,12],[539,38,587,13,"pow"],[539,41,587,16],[539,42,587,17,"enemy"],[539,47,587,22],[539,48,587,23,"position"],[539,56,587,31],[539,57,587,32,"x"],[539,58,587,33],[539,61,587,36,"ninjaX"],[539,67,587,42],[539,69,587,44],[539,70,587,45],[539,71,587,46],[539,74,588,8,"Math"],[539,78,588,12],[539,79,588,13,"pow"],[539,82,588,16],[539,83,588,17,"enemy"],[539,88,588,22],[539,89,588,23,"position"],[539,97,588,31],[539,98,588,32,"y"],[539,99,588,33],[539,102,588,36,"ninjaY"],[539,108,588,42],[539,110,588,44],[539,111,588,45],[539,112,589,6],[539,113,589,7],[540,8,591,6],[540,12,591,10,"distance"],[540,20,591,18],[540,23,591,21,"closestDistance"],[540,38,591,36],[540,40,591,38],[541,10,592,8,"closestDistance"],[541,25,592,23],[541,28,592,26,"distance"],[541,36,592,34],[542,10,593,8,"closestEnemy"],[542,22,593,20],[542,25,593,23,"enemy"],[542,30,593,28],[543,8,594,6],[544,6,595,4],[544,7,595,5],[544,8,595,6],[545,6,597,4,"console"],[545,13,597,11],[545,14,597,12,"log"],[545,17,597,15],[545,18,597,16],[545,60,597,58,"closestDistance"],[545,75,597,73],[545,76,597,74,"toFixed"],[545,83,597,81],[545,84,597,82],[545,85,597,83],[545,86,597,84],[545,88,597,86],[545,89,597,87],[546,6,598,4],[546,13,598,11,"closestEnemy"],[546,25,598,23],[547,4,599,2],[547,5,599,3],[549,4,601,2],[550,4,602,2],[550,8,602,8,"findClosestEnemy"],[550,24,602,24],[550,27,602,27,"findClosestEnemy"],[550,28,602,27],[550,33,602,53],[551,6,603,4],[551,13,603,11,"findClosestEnemyInternal"],[551,37,603,35],[551,38,603,36,"combatState"],[551,49,603,47],[551,50,603,48,"enemies"],[551,57,603,55],[551,58,603,56],[552,4,604,2],[552,5,604,3],[554,4,606,2],[555,4,607,2],[556,4,608,2],[556,8,608,2,"_useState7"],[556,18,608,2],[556,21,608,58],[556,25,608,58,"useState"],[556,31,608,66],[556,32,608,66,"useState"],[556,40,608,66],[556,42,608,91],[557,8,608,93,"x"],[557,9,608,94],[557,11,608,96],[557,14,608,99],[558,8,608,101,"y"],[558,9,608,102],[558,11,608,104],[559,6,608,108],[559,7,608,109],[559,8,608,110],[560,6,608,110,"_useState8"],[560,16,608,110],[560,23,608,110,"_slicedToArray"],[560,37,608,110],[560,38,608,110,"default"],[560,45,608,110],[560,47,608,110,"_useState7"],[560,57,608,110],[561,6,608,9,"currentNinjaPosition"],[561,26,608,29],[561,29,608,29,"_useState8"],[561,39,608,29],[562,6,608,31,"setCurrentNinjaPosition"],[562,29,608,54],[562,32,608,54,"_useState8"],[562,42,608,54],[563,4,609,2],[563,8,609,2,"_useState9"],[563,18,609,2],[563,21,609,60],[563,25,609,60,"useState"],[563,31,609,68],[563,32,609,68,"useState"],[563,40,609,68],[563,42,609,69],[563,47,609,74],[563,48,609,75],[564,6,609,75,"_useState0"],[564,16,609,75],[564,23,609,75,"_slicedToArray"],[564,37,609,75],[564,38,609,75,"default"],[564,45,609,75],[564,47,609,75,"_useState9"],[564,57,609,75],[565,6,609,9,"isManualControlActive"],[565,27,609,30],[565,30,609,30,"_useState0"],[565,40,609,30],[566,6,609,32,"setIsManualControlActive"],[566,30,609,56],[566,33,609,56,"_useState0"],[566,43,609,56],[568,4,611,2],[569,4,612,2],[569,8,612,8,"updateNinjaPosition"],[569,27,612,27],[569,30,612,30],[569,34,612,30,"useCallback"],[569,40,612,41],[569,41,612,41,"useCallback"],[569,52,612,41],[569,54,612,43,"newPosition"],[569,65,612,78],[569,69,612,83],[570,6,613,4,"setCurrentNinjaPosition"],[570,29,613,27],[570,30,613,28,"newPosition"],[570,41,613,39],[570,42,613,40],[571,4,614,2],[571,5,614,3],[571,7,614,5],[571,9,614,7],[571,10,614,8],[573,4,616,2],[574,4,617,2],[574,8,617,8,"setManualControlActive"],[574,30,617,30],[574,33,617,33],[574,37,617,33,"useCallback"],[574,43,617,44],[574,44,617,44,"useCallback"],[574,55,617,44],[574,57,617,46,"active"],[574,63,617,61],[574,67,617,66],[575,6,618,4,"setIsManualControlActive"],[575,30,618,28],[575,31,618,29,"active"],[575,37,618,35],[575,38,618,36],[576,6,619,4,"console"],[576,13,619,11],[576,14,619,12,"log"],[576,17,619,15],[576,18,619,16],[576,39,619,37,"active"],[576,45,619,43],[576,48,619,46],[576,59,619,57],[576,62,619,60],[576,75,619,73],[576,88,619,86,"active"],[576,94,619,92],[576,97,619,95],[576,105,619,103],[576,108,619,106],[576,117,619,115],[576,119,619,117],[576,120,619,118],[577,4,620,2],[577,5,620,3],[577,7,620,5],[577,9,620,7],[577,10,620,8],[579,4,622,2],[580,4,623,2],[581,4,624,2],[583,4,626,2],[584,4,627,2],[584,8,627,8,"castAbility"],[584,19,627,19],[584,22,627,22,"castAbility"],[584,23,627,23,"state"],[584,28,627,41],[584,30,627,43,"slotIndex"],[584,39,627,60],[584,44,627,65],[585,6,628,4],[585,10,628,10,"deck"],[585,14,628,14],[585,17,628,17,"state"],[585,22,628,22],[585,23,628,23,"abilityManager"],[585,37,628,37],[585,38,628,38,"getDeck"],[585,45,628,45],[585,46,628,46],[585,47,628,47],[586,6,629,4],[586,10,629,10,"ability"],[586,17,629,17],[586,20,629,20,"deck"],[586,24,629,24],[586,25,629,25,"slots"],[586,30,629,30],[586,31,629,31,"slotIndex"],[586,40,629,40],[586,41,629,41],[587,6,630,4],[587,10,630,8],[587,11,630,9,"ability"],[587,18,630,16],[587,20,630,18],[588,6,632,4,"console"],[588,13,632,11],[588,14,632,12,"log"],[588,17,632,15],[588,18,632,16],[588,43,632,41,"ability"],[588,50,632,48],[588,51,632,49,"id"],[588,53,632,51],[588,67,632,65,"slotIndex"],[588,76,632,74],[588,78,632,76],[588,79,632,77],[590,6,634,4],[591,6,635,4],[591,10,635,8,"damage"],[591,16,635,14],[591,19,635,17,"ability"],[591,26,635,24],[591,27,635,25,"stats"],[591,32,635,30],[591,33,635,31,"baseDamage"],[591,43,635,41],[593,6,637,4],[594,6,638,4,"deck"],[594,10,638,8],[594,11,638,9,"activeSynergies"],[594,26,638,24],[594,27,638,25,"forEach"],[594,34,638,32],[594,35,638,33,"synergy"],[594,42,638,40],[594,46,638,44],[595,8,639,6],[595,12,639,10,"synergy"],[595,19,639,17],[595,20,639,18,"bonus"],[595,25,639,23],[595,26,639,24,"damageBonus"],[595,37,639,35],[595,41,640,10,"synergy"],[595,48,640,17],[595,49,640,18,"requiredTags"],[595,61,640,30],[595,62,640,31,"some"],[595,66,640,35],[595,67,640,36,"tag"],[595,70,640,39],[595,74,640,43,"ability"],[595,81,640,50],[595,82,640,51,"tags"],[595,86,640,55],[595,87,640,56,"includes"],[595,95,640,64],[595,96,640,65,"tag"],[595,99,640,68],[595,100,640,69],[595,101,640,70],[595,103,640,72],[596,10,641,8,"damage"],[596,16,641,14],[596,20,641,19],[596,21,641,20],[596,24,641,23,"synergy"],[596,31,641,30],[596,32,641,31,"bonus"],[596,37,641,36],[596,38,641,37,"damageBonus"],[596,49,641,48],[596,52,641,51],[596,55,641,55],[597,8,642,6],[598,6,643,4],[598,7,643,5],[598,8,643,6],[600,6,645,4],[601,6,646,4],[601,10,646,10,"isAOE"],[601,15,646,15],[601,18,646,18,"ability"],[601,25,646,25],[601,26,646,26,"effects"],[601,33,646,33],[601,34,646,34,"includes"],[601,42,646,42],[601,43,646,43],[601,48,646,48],[601,49,646,49],[601,53,646,53,"ability"],[601,60,646,60],[601,61,646,61,"stats"],[601,66,646,66],[601,67,646,67,"aoeRadius"],[601,76,646,76],[602,6,647,4,"console"],[602,13,647,11],[602,14,647,12,"log"],[602,17,647,15],[602,18,647,16],[602,39,647,37,"ability"],[602,46,647,44],[602,47,647,45,"name"],[602,51,647,49],[602,66,647,64,"JSON"],[602,70,647,68],[602,71,647,69,"stringify"],[602,80,647,78],[602,81,647,79,"ability"],[602,88,647,86],[602,89,647,87,"effects"],[602,96,647,94],[602,97,647,95],[602,113,647,111,"ability"],[602,120,647,118],[602,121,647,119,"stats"],[602,126,647,124],[602,127,647,125,"aoeRadius"],[602,136,647,134],[602,148,647,146,"isAOE"],[602,153,647,151],[602,155,647,153],[602,156,647,154],[603,6,649,4],[603,10,649,8,"isAOE"],[603,15,649,13],[603,17,649,15],[604,8,650,6,"console"],[604,15,650,13],[604,16,650,14,"log"],[604,19,650,17],[604,20,650,18],[604,39,650,37,"ability"],[604,46,650,44],[604,47,650,45,"name"],[604,51,650,49],[604,67,650,65,"ability"],[604,74,650,72],[604,75,650,73,"stats"],[604,80,650,78],[604,81,650,79,"aoeRadius"],[604,90,650,88],[604,92,650,90],[604,93,650,91],[606,8,652,6],[607,8,653,6],[608,8,654,6],[608,12,654,12,"ninjaX"],[608,18,654,18],[608,21,654,21,"currentNinjaPosition"],[608,41,654,41],[608,42,654,42,"x"],[608,43,654,43],[608,46,654,46],[608,48,654,48],[608,49,654,49],[608,50,654,50],[609,8,655,6],[609,12,655,12,"ninjaY"],[609,18,655,18],[609,21,655,21,"currentNinjaPosition"],[609,41,655,41],[609,42,655,42,"y"],[609,43,655,43],[609,46,655,46],[609,48,655,48],[610,8,656,6],[610,12,656,12,"aoeRadius"],[610,21,656,21],[610,24,656,24,"ability"],[610,31,656,31],[610,32,656,32,"stats"],[610,37,656,37],[610,38,656,38,"aoeRadius"],[610,47,656,47],[611,8,658,6],[611,12,658,12,"enemiesInRange"],[611,26,658,26],[611,29,658,29,"state"],[611,34,658,34],[611,35,658,35,"enemies"],[611,42,658,42],[611,43,658,43,"filter"],[611,49,658,49],[611,50,658,50,"enemy"],[611,55,658,55],[611,59,658,59],[612,10,659,8],[612,14,659,14,"enemyX"],[612,20,659,20],[612,23,659,23,"enemy"],[612,28,659,28],[612,29,659,29,"position"],[612,37,659,37],[612,38,659,38,"x"],[612,39,659,39],[612,42,659,42],[612,46,659,46],[612,47,659,47],[612,48,659,48],[613,10,660,8],[613,14,660,14,"enemyY"],[613,20,660,20],[613,23,660,23,"enemy"],[613,28,660,28],[613,29,660,29,"position"],[613,37,660,37],[613,38,660,38,"y"],[613,39,660,39],[613,42,660,42],[613,46,660,46],[614,10,661,8],[614,14,661,14,"distance"],[614,22,661,22],[614,25,661,25,"Math"],[614,29,661,29],[614,30,661,30,"sqrt"],[614,34,661,34],[614,35,661,35,"Math"],[614,39,661,39],[614,40,661,40,"pow"],[614,43,661,43],[614,44,661,44,"enemyX"],[614,50,661,50],[614,53,661,53,"ninjaX"],[614,59,661,59],[614,61,661,61],[614,62,661,62],[614,63,661,63],[614,66,661,66,"Math"],[614,70,661,70],[614,71,661,71,"pow"],[614,74,661,74],[614,75,661,75,"enemyY"],[614,81,661,81],[614,84,661,84,"ninjaY"],[614,90,661,90],[614,92,661,92],[614,93,661,93],[614,94,661,94],[614,95,661,95],[615,10,662,8],[615,17,662,15,"distance"],[615,25,662,23],[615,29,662,27,"aoeRadius"],[615,38,662,36],[616,8,663,6],[616,9,663,7],[616,10,663,8],[617,8,665,6,"console"],[617,15,665,13],[617,16,665,14,"log"],[617,19,665,17],[617,20,665,18],[617,45,665,43,"enemiesInRange"],[617,59,665,57],[617,60,665,58,"length"],[617,66,665,64],[617,88,665,86,"aoeRadius"],[617,97,665,95],[617,107,665,105],[617,108,665,106],[619,8,667,6],[620,8,668,6,"enemiesInRange"],[620,22,668,20],[620,23,668,21,"forEach"],[620,30,668,28],[620,31,668,29,"enemy"],[620,36,668,34],[620,40,668,38],[621,10,669,8],[621,14,669,14,"damageResult"],[621,26,669,26],[621,29,669,29,"DamageCalculator"],[621,48,669,45],[621,49,669,45,"DamageCalculator"],[621,65,669,45],[621,66,669,46,"calculateDamage"],[621,81,669,61],[621,82,669,62,"damage"],[621,88,669,68],[621,90,669,70,"state"],[621,95,669,75],[621,96,669,76,"playerStats"],[621,107,669,87],[621,109,669,89,"enemy"],[621,114,669,94],[621,115,669,95,"stats"],[621,120,669,100],[621,121,669,101],[622,10,670,8,"createProjectile"],[622,26,670,24],[622,27,670,25,"enemy"],[622,32,670,30],[622,34,670,32,"damageResult"],[622,46,670,44],[622,47,670,45,"damage"],[622,53,670,51],[622,55,670,53,"currentNinjaPosition"],[622,75,670,73],[622,77,670,75],[623,12,671,10,"id"],[623,14,671,12],[623,16,671,14,"ability"],[623,23,671,21],[623,24,671,22,"id"],[623,26,671,24],[624,12,672,10,"name"],[624,16,672,14],[624,18,672,16,"ability"],[624,25,672,23],[624,26,672,24,"name"],[624,30,672,28],[625,12,673,10,"icon"],[625,16,673,14],[625,18,673,16,"ability"],[625,25,673,23],[625,26,673,24,"icon"],[626,10,674,8],[626,11,674,9],[626,12,674,10],[627,10,675,8,"console"],[627,17,675,15],[627,18,675,16,"log"],[627,21,675,19],[627,22,675,20],[627,37,675,35,"enemy"],[627,42,675,40],[627,43,675,41,"name"],[627,47,675,45],[627,55,675,53,"damageResult"],[627,67,675,65],[627,68,675,66,"damage"],[627,74,675,72],[627,83,675,81],[627,84,675,82],[629,10,677,8],[630,10,678,8],[630,14,678,12,"damageResult"],[630,26,678,24],[630,27,678,25,"damage"],[630,33,678,31],[630,37,678,35,"enemy"],[630,42,678,40],[630,43,678,41,"health"],[630,49,678,47],[630,51,678,49],[631,12,679,10,"console"],[631,19,679,17],[631,20,679,18,"log"],[631,23,679,21],[631,24,679,22],[631,67,679,65,"enemy"],[631,72,679,70],[631,73,679,71,"name"],[631,77,679,75],[631,90,679,88,"damageResult"],[631,102,679,100],[631,103,679,101,"damage"],[631,109,679,107],[631,124,679,122,"enemy"],[631,129,679,127],[631,130,679,128,"health"],[631,136,679,134],[631,139,679,137],[631,140,679,138],[632,10,680,8],[633,8,681,6],[633,9,681,7],[633,10,681,8],[634,8,683,6,"console"],[634,15,683,13],[634,16,683,14,"log"],[634,19,683,17],[634,20,683,18],[634,26,683,24,"ability"],[634,33,683,31],[634,34,683,32,"name"],[634,38,683,36],[634,56,683,54,"enemiesInRange"],[634,70,683,68],[634,71,683,69,"length"],[634,77,683,75],[634,93,683,91,"damage"],[634,99,683,97],[634,118,683,116],[634,119,683,117],[635,6,685,4],[635,7,685,5],[635,13,685,11],[636,8,686,6],[637,8,687,6],[637,12,687,12,"target"],[637,18,687,18],[637,21,687,21,"findClosestEnemyInternal"],[637,45,687,45],[637,46,687,46,"state"],[637,51,687,51],[637,52,687,52,"enemies"],[637,59,687,59],[637,60,687,60],[638,8,688,6],[638,12,688,10],[638,13,688,11,"target"],[638,19,688,17],[638,21,688,19],[639,8,690,6],[639,12,690,12,"damageResult"],[639,24,690,24],[639,27,690,27,"DamageCalculator"],[639,46,690,43],[639,47,690,43,"DamageCalculator"],[639,63,690,43],[639,64,690,44,"calculateDamage"],[639,79,690,59],[639,80,690,60,"damage"],[639,86,690,66],[639,88,690,68,"state"],[639,93,690,73],[639,94,690,74,"playerStats"],[639,105,690,85],[639,107,690,87,"target"],[639,113,690,93],[639,114,690,94,"stats"],[639,119,690,99],[639,120,690,100],[641,8,692,6],[642,8,693,6,"console"],[642,15,693,13],[642,16,693,14,"log"],[642,19,693,17],[642,20,693,18],[642,71,693,69,"target"],[642,77,693,75],[642,78,693,76,"name"],[642,82,693,80],[642,91,693,89,"damageResult"],[642,103,693,101],[642,104,693,102,"damage"],[642,110,693,108],[642,119,693,117],[642,120,693,118],[643,8,694,6,"createProjectile"],[643,24,694,22],[643,25,694,23,"target"],[643,31,694,29],[643,33,694,31,"damageResult"],[643,45,694,43],[643,46,694,44,"damage"],[643,52,694,50],[643,54,694,52,"currentNinjaPosition"],[643,74,694,72],[643,76,694,74],[644,10,695,8,"id"],[644,12,695,10],[644,14,695,12,"ability"],[644,21,695,19],[644,22,695,20,"id"],[644,24,695,22],[645,10,696,8,"name"],[645,14,696,12],[645,16,696,14,"ability"],[645,23,696,21],[645,24,696,22,"name"],[645,28,696,26],[646,10,697,8,"icon"],[646,14,697,12],[646,16,697,14,"ability"],[646,23,697,21],[646,24,697,22,"icon"],[647,8,698,6],[647,9,698,7],[647,10,698,8],[648,8,700,6,"console"],[648,15,700,13],[648,16,700,14,"log"],[648,19,700,17],[648,20,700,18],[648,26,700,24,"ability"],[648,33,700,31],[648,34,700,32,"name"],[648,38,700,36],[648,66,700,64,"damageResult"],[648,78,700,76],[648,79,700,77,"damage"],[648,85,700,83],[648,95,700,93,"damageResult"],[648,107,700,105],[648,108,700,106,"isCritical"],[648,118,700,116],[648,121,700,119],[648,131,700,129],[648,134,700,132],[648,136,700,134],[648,138,700,136],[648,139,700,137],[650,8,702,6],[651,8,703,6],[651,12,703,10,"damageResult"],[651,24,703,22],[651,25,703,23,"damage"],[651,31,703,29],[651,35,703,33,"target"],[651,41,703,39],[651,42,703,40,"health"],[651,48,703,46],[651,50,703,48],[652,10,704,8,"console"],[652,17,704,15],[652,18,704,16,"log"],[652,21,704,19],[652,22,704,20],[652,75,704,73,"target"],[652,81,704,79],[652,82,704,80,"name"],[652,86,704,84],[652,99,704,97,"damageResult"],[652,111,704,109],[652,112,704,110,"damage"],[652,118,704,116],[652,133,704,131,"target"],[652,139,704,137],[652,140,704,138,"health"],[652,146,704,144],[652,149,704,147],[652,150,704,148],[653,8,705,6],[654,6,706,4],[656,6,708,4],[657,6,709,4],[657,10,709,8,"ability"],[657,17,709,15],[657,18,709,16,"effects"],[657,25,709,23],[657,26,709,24,"includes"],[657,34,709,32],[657,35,709,33],[657,40,709,38],[657,41,709,39],[657,45,709,43,"ability"],[657,52,709,50],[657,53,709,51,"stats"],[657,58,709,56],[657,59,709,57,"duration"],[657,67,709,65],[657,69,709,67],[658,8,710,6],[658,12,710,12,"targets"],[658,19,710,19],[658,22,710,22,"isAOE"],[658,27,710,27],[658,30,711,8,"state"],[658,35,711,13],[658,36,711,14,"enemies"],[658,43,711,21],[658,44,711,22,"filter"],[658,50,711,28],[658,51,711,29,"enemy"],[658,56,711,34],[658,60,711,38],[659,10,712,10],[659,14,712,16,"ninjaX"],[659,20,712,22],[659,23,712,25,"currentNinjaPosition"],[659,43,712,45],[659,44,712,46,"x"],[659,45,712,47],[659,48,712,50],[659,50,712,52],[660,10,713,10],[660,14,713,16,"ninjaY"],[660,20,713,22],[660,23,713,25,"currentNinjaPosition"],[660,43,713,45],[660,44,713,46,"y"],[660,45,713,47],[660,48,713,50],[660,50,713,52],[661,10,714,10],[661,14,714,16,"enemyX"],[661,20,714,22],[661,23,714,25,"enemy"],[661,28,714,30],[661,29,714,31,"position"],[661,37,714,39],[661,38,714,40,"x"],[661,39,714,41],[661,42,714,44],[661,46,714,48],[662,10,715,10],[662,14,715,16,"enemyY"],[662,20,715,22],[662,23,715,25,"enemy"],[662,28,715,30],[662,29,715,31,"position"],[662,37,715,39],[662,38,715,40,"y"],[662,39,715,41],[662,42,715,44],[662,46,715,48],[663,10,716,10],[663,14,716,16,"distance"],[663,22,716,24],[663,25,716,27,"Math"],[663,29,716,31],[663,30,716,32,"sqrt"],[663,34,716,36],[663,35,716,37,"Math"],[663,39,716,41],[663,40,716,42,"pow"],[663,43,716,45],[663,44,716,46,"enemyX"],[663,50,716,52],[663,53,716,55,"ninjaX"],[663,59,716,61],[663,61,716,63],[663,62,716,64],[663,63,716,65],[663,66,716,68,"Math"],[663,70,716,72],[663,71,716,73,"pow"],[663,74,716,76],[663,75,716,77,"enemyY"],[663,81,716,83],[663,84,716,86,"ninjaY"],[663,90,716,92],[663,92,716,94],[663,93,716,95],[663,94,716,96],[663,95,716,97],[664,10,717,10],[664,17,717,17,"distance"],[664,25,717,25],[664,29,717,29,"ability"],[664,36,717,36],[664,37,717,37,"stats"],[664,42,717,42],[664,43,717,43,"aoeRadius"],[664,52,717,52],[665,8,718,8],[665,9,718,9],[665,10,718,10],[665,13,719,8],[665,14,719,9,"findClosestEnemyInternal"],[665,38,719,33],[665,39,719,34,"state"],[665,44,719,39],[665,45,719,40,"enemies"],[665,52,719,47],[665,53,719,48],[665,54,719,49],[665,55,719,50,"filter"],[665,61,719,56],[665,62,719,57,"Boolean"],[665,69,719,64],[665,70,719,65],[666,8,721,6,"targets"],[666,15,721,13],[666,16,721,14,"forEach"],[666,23,721,21],[666,24,721,22,"target"],[666,30,721,28],[666,34,721,32],[667,10,722,8,"state"],[667,15,722,13],[667,16,722,14,"statusEffects"],[667,29,722,27],[667,30,722,28,"addEffect"],[667,39,722,37],[667,40,722,38,"target"],[667,46,722,44],[667,47,722,45,"id"],[667,49,722,47],[667,51,722,49],[668,12,723,10,"id"],[668,14,723,12],[668,16,723,14],[668,19,723,17,"ability"],[668,26,723,24],[668,27,723,25,"id"],[668,29,723,27],[668,35,723,33],[669,12,724,10,"type"],[669,16,724,14],[669,18,724,16],[669,23,724,21],[670,12,725,10,"remainingTicks"],[670,26,725,24],[670,28,725,26,"Math"],[670,32,725,30],[670,33,725,31,"floor"],[670,38,725,36],[670,39,725,37,"ability"],[670,46,725,44],[670,47,725,45,"stats"],[670,52,725,50],[670,53,725,51,"duration"],[670,61,725,59],[670,64,725,62],[670,66,725,64],[670,67,725,65],[671,12,726,10,"tickInterval"],[671,24,726,22],[671,26,726,24],[671,28,726,26],[672,12,727,10,"lastTick"],[672,20,727,18],[672,22,727,20,"state"],[672,27,727,25],[672,28,727,26,"currentTick"],[672,39,727,37],[673,12,728,10,"value"],[673,17,728,15],[673,19,728,17,"Math"],[673,23,728,21],[673,24,728,22,"floor"],[673,29,728,27],[673,30,728,28,"damage"],[673,36,728,34],[673,39,728,37],[673,42,728,40],[673,43,728,41],[674,12,729,10,"stackable"],[674,21,729,19],[674,23,729,21],[675,10,730,8],[675,11,730,9],[675,12,730,10],[676,8,731,6],[676,9,731,7],[676,10,731,8],[677,6,732,4],[679,6,734,4],[680,6,735,4],[680,10,735,8,"ability"],[680,17,735,15],[680,18,735,16,"effects"],[680,25,735,23],[680,26,735,24,"includes"],[680,34,735,32],[680,35,735,33],[680,41,735,39],[680,42,735,40],[680,46,735,44,"ability"],[680,53,735,51],[680,54,735,52,"id"],[680,56,735,54],[680,61,735,59],[680,75,735,73],[680,77,735,75],[681,8,736,6,"console"],[681,15,736,13],[681,16,736,14,"log"],[681,19,736,17],[681,20,736,18],[681,66,736,64,"ability"],[681,73,736,71],[681,74,736,72,"stats"],[681,79,736,77],[681,80,736,78,"duration"],[681,88,736,86],[681,98,736,96],[681,99,736,97],[683,8,738,6],[684,8,739,6],[684,12,739,12,"cloneX"],[684,18,739,18],[684,21,739,21,"currentNinjaPosition"],[684,41,739,41],[684,42,739,42,"x"],[684,43,739,43],[684,46,739,46],[684,48,739,48],[684,49,739,49],[684,50,739,50],[685,8,740,6],[685,12,740,12,"cloneY"],[685,18,740,18],[685,21,740,21,"currentNinjaPosition"],[685,41,740,41],[685,42,740,42,"y"],[685,43,740,43],[685,46,740,46],[685,48,740,48],[685,49,740,49],[685,50,740,50],[687,8,742,6,"state"],[687,13,742,11],[687,14,742,12,"shadowClone"],[687,25,742,23],[687,28,742,26],[688,10,743,8,"id"],[688,12,743,10],[688,14,743,12],[688,30,743,28,"Date"],[688,34,743,32],[688,35,743,33,"now"],[688,38,743,36],[688,39,743,37],[688,40,743,38],[688,42,743,40],[689,10,744,8,"remainingTicks"],[689,24,744,22],[689,26,744,24,"Math"],[689,30,744,28],[689,31,744,29,"floor"],[689,36,744,34],[689,37,744,35,"ability"],[689,44,744,42],[689,45,744,43,"stats"],[689,50,744,48],[689,51,744,49,"duration"],[689,59,744,57],[689,62,744,60],[689,64,744,62],[689,65,744,63],[690,10,744,65],[691,10,745,8,"position"],[691,18,745,16],[691,20,745,18],[692,12,745,20,"x"],[692,13,745,21],[692,15,745,23,"cloneX"],[692,21,745,29],[693,12,745,31,"y"],[693,13,745,32],[693,15,745,34,"cloneY"],[694,10,745,41],[694,11,745,42],[695,10,746,8,"damageMultiplier"],[695,26,746,24],[695,28,746,26],[695,31,746,29],[695,32,746,31],[696,8,747,6],[696,9,747,7],[697,8,749,6,"console"],[697,15,749,13],[697,16,749,14,"log"],[697,19,749,17],[697,20,749,18],[697,63,749,61,"ability"],[697,70,749,68],[697,71,749,69,"stats"],[697,76,749,74],[697,77,749,75,"duration"],[697,85,749,83],[697,108,749,106],[697,109,749,107],[698,6,750,4],[699,4,751,2],[699,5,751,3],[701,4,753,2],[702,4,754,2],[702,8,754,8,"createProjectile"],[702,24,754,24],[702,27,754,27,"createProjectile"],[702,28,754,28,"targetEnemy"],[702,39,754,52],[702,41,754,54,"damage"],[702,47,754,68],[702,49,754,70,"ninjaPos"],[702,57,754,103],[702,59,754,105,"abilityInfo"],[702,70,754,159],[702,72,754,161,"isAOE"],[702,77,754,176],[702,79,754,178,"aoeRadius"],[702,88,754,196],[702,93,754,201],[703,6,755,4],[703,10,755,8],[703,11,755,9,"targetEnemy"],[703,22,755,20],[703,24,755,22],[704,8,756,6,"console"],[704,15,756,13],[704,16,756,14,"log"],[704,19,756,17],[704,20,756,18],[704,65,756,63],[704,66,756,64],[705,8,757,6],[705,15,757,13],[705,19,757,17],[706,6,758,4],[708,6,760,4],[709,6,761,4,"console"],[709,13,761,11],[709,14,761,12,"log"],[709,17,761,15],[709,18,761,16],[709,52,761,50,"damage"],[709,58,761,56],[709,70,761,68,"targetEnemy"],[709,81,761,79],[709,82,761,80,"name"],[709,86,761,84],[709,91,761,89,"targetEnemy"],[709,102,761,100],[709,103,761,101,"health"],[709,109,761,107],[709,113,761,111,"targetEnemy"],[709,124,761,122],[709,125,761,123,"maxHealth"],[709,134,761,132],[709,140,761,138],[709,141,761,139],[710,6,763,4],[710,10,763,10,"SCREEN_WIDTH"],[710,22,763,22],[710,25,763,25],[710,28,763,28],[711,6,764,4],[711,10,764,10,"GAME_AREA_HEIGHT"],[711,26,764,26],[711,29,764,29],[711,32,764,32],[711,35,764,35],[711,38,764,38],[711,39,764,39],[711,40,764,40],[712,6,765,4],[712,10,765,10,"NINJA_SIZE"],[712,20,765,20],[712,23,765,23],[712,25,765,25],[714,6,767,4],[715,6,768,4],[715,10,768,10,"ninjaX"],[715,16,768,16],[715,19,768,19,"ninjaPos"],[715,27,768,27],[715,30,768,30,"ninjaPos"],[715,38,768,38],[715,39,768,39,"x"],[715,40,768,40],[715,43,768,43,"NINJA_SIZE"],[715,53,768,53],[715,56,768,56],[715,57,768,57],[715,60,768,60,"SCREEN_WIDTH"],[715,72,768,72],[715,75,768,75],[715,76,768,76],[716,6,769,4],[716,10,769,10,"ninjaY"],[716,16,769,16],[716,19,769,19,"ninjaPos"],[716,27,769,27],[716,30,769,30,"ninjaPos"],[716,38,769,38],[716,39,769,39,"y"],[716,40,769,40],[716,43,769,43,"NINJA_SIZE"],[716,53,769,53],[716,56,769,56],[716,57,769,57],[716,60,769,60,"GAME_AREA_HEIGHT"],[716,76,769,76],[716,79,769,79],[716,80,769,80],[717,6,770,4],[717,10,770,10,"ENEMY_SIZE"],[717,20,770,20],[717,23,770,23],[717,25,770,25],[718,6,772,4],[718,10,772,10,"projectileId"],[718,22,772,22],[718,25,772,25],[718,33,772,33,"Date"],[718,37,772,37],[718,38,772,38,"now"],[718,41,772,41],[718,42,772,42],[718,43,772,43],[718,47,772,47,"Math"],[718,51,772,51],[718,52,772,52,"random"],[718,58,772,58],[718,59,772,59],[718,60,772,60],[718,62,772,62],[719,6,774,4],[719,10,774,10,"projectile"],[719,20,774,38],[719,23,774,41],[720,8,775,6,"id"],[720,10,775,8],[720,12,775,10,"projectileId"],[720,24,775,22],[721,8,776,6,"x"],[721,9,776,7],[721,11,776,9,"ninjaX"],[721,17,776,15],[722,8,777,6,"y"],[722,9,777,7],[722,11,777,9,"ninjaY"],[722,17,777,15],[723,8,778,6,"targetX"],[723,15,778,13],[723,17,778,15,"targetEnemy"],[723,28,778,26],[723,29,778,27,"position"],[723,37,778,35],[723,38,778,36,"x"],[723,39,778,37],[723,42,778,40,"ENEMY_SIZE"],[723,52,778,50],[723,55,778,53],[723,56,778,54],[724,8,779,6,"targetY"],[724,15,779,13],[724,17,779,15,"targetEnemy"],[724,28,779,26],[724,29,779,27,"position"],[724,37,779,35],[724,38,779,36,"y"],[724,39,779,37],[724,42,779,40,"ENEMY_SIZE"],[724,52,779,50],[724,55,779,53],[724,56,779,54],[725,8,780,6,"targetEnemyId"],[725,21,780,19],[725,23,780,21,"targetEnemy"],[725,34,780,32],[725,35,780,33,"id"],[725,37,780,35],[726,8,781,6,"damage"],[726,14,781,12],[726,16,781,14,"damage"],[726,22,781,20],[727,8,782,6,"startTime"],[727,17,782,15],[727,19,782,17,"Date"],[727,23,782,21],[727,24,782,22,"now"],[727,27,782,25],[727,28,782,26],[727,29,782,27],[728,8,783,6,"duration"],[728,16,783,14],[728,18,783,16],[728,21,783,19],[729,8,783,21],[730,8,784,6],[731,8,785,6,"abilityId"],[731,17,785,15],[731,19,785,17,"abilityInfo"],[731,30,785,28],[731,32,785,30,"id"],[731,34,785,32],[731,38,785,36],[731,54,785,52],[732,8,786,6,"abilityName"],[732,19,786,17],[732,21,786,19,"abilityInfo"],[732,32,786,30],[732,34,786,32,"name"],[732,38,786,36],[732,42,786,40],[732,58,786,56],[733,8,787,6,"abilityIcon"],[733,19,787,17],[733,21,787,19,"abilityInfo"],[733,32,787,30],[733,34,787,32,"icon"],[733,38,787,36],[733,42,787,40],[733,46,787,44],[734,8,787,46],[735,8,788,6],[736,8,789,6,"isAOE"],[736,13,789,11],[736,15,789,13,"isAOE"],[736,20,789,18],[736,24,789,22],[736,29,789,27],[737,8,790,6,"aoeRadius"],[737,17,790,15],[737,19,790,17,"aoeRadius"],[737,28,790,26],[737,32,790,30],[738,6,791,4],[738,7,791,5],[739,6,793,4,"console"],[739,13,793,11],[739,14,793,12,"log"],[739,17,793,15],[739,18,793,16],[739,44,793,42,"abilityInfo"],[739,55,793,53],[739,57,793,55,"name"],[739,61,793,59],[739,65,793,63],[739,81,793,79],[739,101,793,99,"projectileId"],[739,113,793,111],[739,128,793,126,"targetEnemy"],[739,139,793,137],[739,140,793,138,"name"],[739,144,793,142],[739,152,793,150,"damage"],[739,158,793,156],[739,167,793,165],[739,168,793,166],[740,6,794,4,"console"],[740,13,794,11],[740,14,794,12,"log"],[740,17,794,15],[740,18,794,16],[740,48,794,46,"isAOE"],[740,53,794,51],[740,68,794,66,"aoeRadius"],[740,77,794,75],[740,89,794,87,"damage"],[740,95,794,93],[740,97,794,95],[740,98,794,96],[741,6,796,4,"console"],[741,13,796,11],[741,14,796,12,"log"],[741,17,796,15],[741,18,796,16],[741,53,796,51,"targetEnemy"],[741,64,796,62],[741,65,796,63,"id"],[741,67,796,65],[741,75,796,73,"damage"],[741,81,796,79],[741,90,796,88],[741,91,796,89],[742,6,797,4,"console"],[742,13,797,11],[742,14,797,12,"log"],[742,17,797,15],[742,18,797,16],[742,53,797,51,"ninjaX"],[742,59,797,57],[742,64,797,62,"ninjaY"],[742,70,797,68],[742,87,797,85,"projectile"],[742,97,797,95],[742,98,797,96,"targetX"],[742,105,797,103],[742,110,797,108,"projectile"],[742,120,797,118],[742,121,797,119,"targetY"],[742,128,797,126],[742,131,797,129],[742,132,797,130],[743,6,799,4,"setProjectiles"],[743,20,799,18],[743,21,799,19,"prev"],[743,25,799,23],[743,29,799,27],[743,30,799,28],[743,33,799,31,"prev"],[743,37,799,35],[743,39,799,37,"projectile"],[743,49,799,47],[743,50,799,48],[743,51,799,49],[745,6,801,4],[746,6,802,4],[748,6,804,4],[748,13,804,11,"projectile"],[748,23,804,21],[749,4,805,2],[749,5,805,3],[751,4,807,2],[752,4,808,2],[752,8,808,8,"spawnTestEnemy"],[752,22,808,22],[752,25,808,26,"state"],[752,30,808,44],[752,34,808,49],[753,6,809,4,"console"],[753,13,809,11],[753,14,809,12,"log"],[753,17,809,15],[753,18,809,16],[753,83,809,81],[753,84,809,82],[755,6,811,4],[756,6,812,4],[756,10,812,10,"zoneEnemy"],[756,19,812,19],[756,22,812,22,"spawnZoneEnemy"],[756,36,812,36],[756,37,812,37],[756,38,812,38],[757,6,813,4],[757,10,813,8],[757,11,813,9,"zoneEnemy"],[757,20,813,18],[757,22,813,20],[758,8,814,6,"console"],[758,15,814,13],[758,16,814,14,"log"],[758,19,814,17],[758,20,814,18],[758,76,814,74],[758,77,814,75],[759,8,815,6],[760,8,816,6,"spawnBasicTestEnemy"],[760,27,816,25],[760,28,816,26,"state"],[760,33,816,31],[760,34,816,32],[761,8,817,6],[762,6,818,4],[763,6,820,4,"console"],[763,13,820,11],[763,14,820,12,"log"],[763,17,820,15],[763,18,820,16],[763,44,820,42,"zoneEnemy"],[763,53,820,51],[763,54,820,52,"name"],[763,58,820,56],[763,63,820,61,"zoneEnemy"],[763,72,820,70],[763,73,820,71,"typeId"],[763,79,820,77],[763,94,820,92,"currentZone"],[763,105,820,103],[763,107,820,105,"id"],[763,109,820,107],[763,119,820,117,"currentZoneLevel"],[763,135,820,133],[763,137,820,135,"level"],[763,142,820,140],[763,144,820,142],[763,145,820,143],[765,6,822,4],[766,6,823,4],[766,10,823,10,"combatEnemy"],[766,21,823,34],[766,24,823,37],[767,8,824,6,"id"],[767,10,824,8],[767,12,824,10,"zoneEnemy"],[767,21,824,19],[767,22,824,20,"id"],[767,24,824,22],[768,8,825,6,"name"],[768,12,825,10],[768,14,825,12,"zoneEnemy"],[768,23,825,21],[768,24,825,22,"name"],[768,28,825,26],[769,8,826,6,"health"],[769,14,826,12],[769,16,826,14,"zoneEnemy"],[769,25,826,23],[769,26,826,24,"hp"],[769,28,826,26],[770,8,827,6,"maxHealth"],[770,17,827,15],[770,19,827,17,"zoneEnemy"],[770,28,827,26],[770,29,827,27,"maxHP"],[770,34,827,32],[771,8,828,6,"stats"],[771,13,828,11],[771,15,828,13],[772,10,829,8,"attack"],[772,16,829,14],[772,18,829,16,"zoneEnemy"],[772,27,829,25],[772,28,829,26,"attack"],[772,34,829,32],[773,10,830,8,"defense"],[773,17,830,15],[773,19,830,17],[773,21,830,19],[774,10,830,21],[775,10,831,8,"health"],[775,16,831,14],[775,18,831,16,"zoneEnemy"],[775,27,831,25],[775,28,831,26,"hp"],[775,30,831,28],[776,10,832,8,"maxHealth"],[776,19,832,17],[776,21,832,19,"zoneEnemy"],[776,30,832,28],[776,31,832,29,"maxHP"],[776,36,832,34],[777,10,833,8,"critChance"],[777,20,833,18],[777,22,833,20],[777,23,833,21],[778,10,834,8,"critDamage"],[778,20,834,18],[778,22,834,20],[778,25,834,23],[779,10,835,8,"cooldownReduction"],[779,27,835,25],[779,29,835,27],[780,8,836,6],[780,9,836,7],[781,8,837,6,"position"],[781,16,837,14],[781,18,837,16,"zoneEnemy"],[781,27,837,25],[781,28,837,26,"position"],[781,36,837,34],[782,8,838,6,"lastDamaged"],[782,19,838,17],[782,21,838,19],[782,22,838,20],[783,8,839,6],[784,8,840,6,"zoneTypeId"],[784,18,840,16],[784,20,840,18,"zoneEnemy"],[784,29,840,27],[784,30,840,28,"typeId"],[784,36,840,34],[785,8,841,6,"zoneXP"],[785,14,841,12],[785,16,841,14,"zoneEnemy"],[785,25,841,23],[785,26,841,24,"xp"],[786,6,842,4],[786,7,842,5],[787,6,844,4,"console"],[787,13,844,11],[787,14,844,12,"log"],[787,17,844,15],[787,18,844,16],[787,42,844,40,"combatEnemy"],[787,53,844,51],[787,54,844,52,"name"],[787,58,844,56],[787,67,844,65,"combatEnemy"],[787,78,844,76],[787,79,844,77,"health"],[787,85,844,83],[787,100,844,98,"currentZone"],[787,111,844,109],[787,113,844,111,"id"],[787,115,844,113],[787,125,844,123,"currentZoneLevel"],[787,141,844,139],[787,143,844,141,"level"],[787,148,844,146],[787,150,844,148],[787,151,844,149],[788,6,845,4,"state"],[788,11,845,9],[788,12,845,10,"enemies"],[788,19,845,17],[788,20,845,18,"push"],[788,24,845,22],[788,25,845,23,"combatEnemy"],[788,36,845,34],[788,37,845,35],[789,4,846,2],[789,5,846,3],[791,4,848,2],[792,4,849,2],[792,8,849,8,"spawnBasicTestEnemy"],[792,27,849,27],[792,30,849,31,"state"],[792,35,849,49],[792,39,849,54],[793,6,850,4],[793,10,850,10,"SCREEN_WIDTH"],[793,22,850,22],[793,25,850,25],[793,28,850,28],[794,6,851,4],[794,10,851,10,"GAME_AREA_HEIGHT"],[794,26,851,26],[794,29,851,29],[794,32,851,32],[794,35,851,35],[794,38,851,38],[795,6,852,4],[795,10,852,10,"ENEMY_SIZE"],[795,20,852,20],[795,23,852,23],[795,25,852,25],[796,6,854,4],[796,10,854,10,"x"],[796,11,854,11],[796,14,854,14,"Math"],[796,18,854,18],[796,19,854,19,"random"],[796,25,854,25],[796,26,854,26],[796,27,854,27],[796,31,854,31,"SCREEN_WIDTH"],[796,43,854,43],[796,46,854,46,"ENEMY_SIZE"],[796,56,854,56],[796,59,854,59],[796,60,854,60],[796,61,854,61],[796,64,854,64,"ENEMY_SIZE"],[796,74,854,74],[797,6,855,4],[797,10,855,10,"y"],[797,11,855,11],[797,14,855,14,"Math"],[797,18,855,18],[797,19,855,19,"random"],[797,25,855,25],[797,26,855,26],[797,27,855,27],[797,31,855,31,"GAME_AREA_HEIGHT"],[797,47,855,47],[797,50,855,50,"ENEMY_SIZE"],[797,60,855,60],[797,63,855,63],[797,64,855,64],[797,65,855,65],[797,68,855,68,"ENEMY_SIZE"],[797,78,855,78],[798,6,857,4],[798,10,857,10,"enemy"],[798,15,857,28],[798,18,857,31],[799,8,858,6,"id"],[799,10,858,8],[799,12,858,10],[799,30,858,28,"Date"],[799,34,858,32],[799,35,858,33,"now"],[799,38,858,36],[799,39,858,37],[799,40,858,38],[799,44,858,42,"Math"],[799,48,858,46],[799,49,858,47,"random"],[799,55,858,53],[799,56,858,54],[799,57,858,55],[799,59,858,57],[800,8,859,6,"name"],[800,12,859,10],[800,14,859,12],[800,26,859,24,"Math"],[800,30,859,28],[800,31,859,29,"floor"],[800,36,859,34],[800,37,859,35,"Math"],[800,41,859,39],[800,42,859,40,"random"],[800,48,859,46],[800,49,859,47],[800,50,859,48],[800,53,859,51],[800,56,859,54],[800,57,859,55],[800,59,859,57],[801,8,860,6,"health"],[801,14,860,12],[801,16,860,14],[801,18,860,16],[802,8,861,6,"maxHealth"],[802,17,861,15],[802,19,861,17],[802,21,861,19],[803,8,862,6,"stats"],[803,13,862,11],[803,15,862,13],[804,10,863,8,"attack"],[804,16,863,14],[804,18,863,16],[804,20,863,18],[805,10,864,8,"defense"],[805,17,864,15],[805,19,864,17],[805,21,864,19],[806,10,865,8,"health"],[806,16,865,14],[806,18,865,16],[806,20,865,18],[807,10,866,8,"maxHealth"],[807,19,866,17],[807,21,866,19],[807,23,866,21],[808,10,867,8,"critChance"],[808,20,867,18],[808,22,867,20],[808,23,867,21],[809,10,868,8,"critDamage"],[809,20,868,18],[809,22,868,20],[809,25,868,23],[810,10,869,8,"cooldownReduction"],[810,27,869,25],[810,29,869,27],[811,8,870,6],[811,9,870,7],[812,8,871,6,"position"],[812,16,871,14],[812,18,871,16],[813,10,871,18,"x"],[813,11,871,19],[814,10,871,21,"y"],[815,8,871,23],[815,9,871,24],[816,8,872,6,"lastDamaged"],[816,19,872,17],[816,21,872,19],[817,6,873,4],[817,7,873,5],[818,6,875,4,"console"],[818,13,875,11],[818,14,875,12,"log"],[818,17,875,15],[818,18,875,16],[818,42,875,40,"enemy"],[818,47,875,45],[818,48,875,46,"name"],[818,52,875,50],[818,60,875,58,"Math"],[818,64,875,62],[818,65,875,63,"round"],[818,70,875,68],[818,71,875,69,"x"],[818,72,875,70],[818,73,875,71],[818,78,875,76,"Math"],[818,82,875,80],[818,83,875,81,"round"],[818,88,875,86],[818,89,875,87,"y"],[818,90,875,88],[818,91,875,89],[818,94,875,92],[818,95,875,93],[819,6,876,4,"state"],[819,11,876,9],[819,12,876,10,"enemies"],[819,19,876,17],[819,20,876,18,"push"],[819,24,876,22],[819,25,876,23,"enemy"],[819,30,876,28],[819,31,876,29],[820,4,877,2],[820,5,877,3],[822,4,879,2],[823,4,880,2],[824,4,881,2],[824,8,881,8,"startCombat"],[824,19,881,19],[824,22,881,22,"React"],[824,27,881,27],[824,28,881,27,"default"],[824,35,881,27],[824,36,881,28,"useCallback"],[824,47,881,39],[824,48,881,40],[824,54,881,46],[825,6,882,4,"console"],[825,13,882,11],[825,14,882,12,"log"],[825,17,882,15],[825,18,882,16],[825,63,882,61],[825,64,882,62],[826,6,883,4,"console"],[826,13,883,11],[826,14,883,12,"log"],[826,17,883,15],[826,18,883,16],[826,37,883,35],[826,39,883,37,"combatEngine"],[826,58,883,49],[826,59,883,49,"combatEngine"],[826,71,883,49],[826,72,883,50],[827,6,884,4,"console"],[827,13,884,11],[827,14,884,12,"log"],[827,17,884,15],[827,18,884,16],[827,51,884,49],[827,53,884,51,"handleCombatTick"],[827,69,884,67],[827,70,884,68],[828,6,885,4,"setCombatState"],[828,20,885,18],[828,21,885,19,"prev"],[828,25,885,23],[828,30,885,28],[829,8,885,30],[829,11,885,33,"prev"],[829,15,885,37],[830,8,885,39,"isInCombat"],[830,18,885,49],[830,20,885,51],[831,6,885,56],[831,7,885,57],[831,8,885,58],[831,9,885,59],[833,6,887,4],[834,6,888,4,"combatEngine"],[834,25,888,16],[834,26,888,16,"combatEngine"],[834,38,888,16],[834,39,888,17,"addTickCallback"],[834,54,888,32],[834,55,888,33,"handleCombatTick"],[834,71,888,49],[834,72,888,50],[835,6,889,4,"console"],[835,13,889,11],[835,14,889,12,"log"],[835,17,889,15],[835,18,889,16],[835,62,889,60],[835,63,889,61],[837,6,891,4],[838,6,892,4,"combatEngine"],[838,25,892,16],[838,26,892,16,"combatEngine"],[838,38,892,16],[838,39,892,17,"start"],[838,44,892,22],[838,45,892,23],[838,46,892,24],[839,6,893,4,"console"],[839,13,893,11],[839,14,893,12,"log"],[839,17,893,15],[839,18,893,16],[839,51,893,49],[839,52,893,50],[840,4,894,2],[840,5,894,3],[840,7,894,5],[840,8,894,6,"combatEngine"],[840,27,894,18],[840,28,894,18,"combatEngine"],[840,40,894,18],[840,42,894,20,"handleCombatTick"],[840,58,894,36],[840,59,894,37],[840,60,894,38],[842,4,896,2],[843,4,897,2],[843,8,897,8,"stopCombat"],[843,18,897,18],[843,21,897,21,"React"],[843,26,897,26],[843,27,897,26,"default"],[843,34,897,26],[843,35,897,27,"useCallback"],[843,46,897,38],[843,47,897,39],[843,53,897,45],[844,6,898,4,"setCombatState"],[844,20,898,18],[844,21,898,19,"prev"],[844,25,898,23],[844,30,898,28],[845,8,898,30],[845,11,898,33,"prev"],[845,15,898,37],[846,8,898,39,"isInCombat"],[846,18,898,49],[846,20,898,51],[847,6,898,57],[847,7,898,58],[847,8,898,59],[847,9,898,60],[848,6,899,4,"combatEngine"],[848,25,899,16],[848,26,899,16,"combatEngine"],[848,38,899,16],[848,39,899,17,"removeTickCallback"],[848,57,899,35],[848,58,899,36,"handleCombatTick"],[848,74,899,52],[848,75,899,53],[849,4,900,2],[849,5,900,3],[849,7,900,5],[849,8,900,6,"combatEngine"],[849,27,900,18],[849,28,900,18,"combatEngine"],[849,40,900,18],[849,42,900,20,"handleCombatTick"],[849,58,900,36],[849,59,900,37],[849,60,900,38],[851,4,902,2],[852,4,903,2],[852,8,903,8,"equipAbility"],[852,20,903,20],[852,23,903,23,"equipAbility"],[852,24,903,24,"abilityId"],[852,33,903,41],[852,35,903,43,"slotIndex"],[852,44,903,60],[852,49,903,74],[853,6,904,4],[853,13,904,11,"combatState"],[853,24,904,22],[853,25,904,23,"abilityManager"],[853,39,904,37],[853,40,904,38,"equipAbility"],[853,52,904,50],[853,53,904,51,"abilityId"],[853,62,904,60],[853,64,904,62,"slotIndex"],[853,73,904,71],[853,74,904,72],[854,4,905,2],[854,5,905,3],[855,4,907,2],[855,8,907,8,"getDeck"],[855,15,907,15],[855,18,907,18,"getDeck"],[855,19,907,18],[855,24,907,24],[856,6,908,4],[856,13,908,11,"combatState"],[856,24,908,22],[856,25,908,23,"abilityManager"],[856,39,908,37],[856,40,908,38,"getDeck"],[856,47,908,45],[856,48,908,46],[856,49,908,47],[857,4,909,2],[857,5,909,3],[858,4,911,2],[858,8,911,8,"getAvailableAbilities"],[858,29,911,29],[858,32,911,32,"getAvailableAbilities"],[858,33,911,32],[858,38,911,38],[859,6,912,4],[859,13,912,11,"combatState"],[859,24,912,22],[859,25,912,23,"abilityManager"],[859,39,912,37],[859,40,912,38,"getAvailableAbilities"],[859,61,912,59],[859,62,912,60],[859,63,912,61],[860,4,913,2],[860,5,913,3],[861,4,915,2],[861,8,915,8,"upgradeAbility"],[861,22,915,22],[861,25,915,26,"abilityId"],[861,34,915,43],[861,38,915,57],[862,6,916,4],[862,13,916,11,"combatState"],[862,24,916,22],[862,25,916,23,"abilityManager"],[862,39,916,37],[862,40,916,38,"upgradeAbility"],[862,54,916,52],[862,55,916,53,"abilityId"],[862,64,916,62],[862,65,916,63],[863,4,917,2],[863,5,917,3],[865,4,919,2],[866,4,920,2],[866,8,920,8,"clearAllEnemies"],[866,23,920,23],[866,26,920,26,"clearAllEnemies"],[866,27,920,26],[866,32,920,32],[867,6,921,4,"console"],[867,13,921,11],[867,14,921,12,"log"],[867,17,921,15],[867,18,921,16],[867,67,921,65],[867,68,921,66],[868,6,922,4,"setCombatState"],[868,20,922,18],[868,21,922,19,"prev"],[868,25,922,23],[868,30,922,28],[869,8,923,6],[869,11,923,9,"prev"],[869,15,923,13],[870,8,924,6,"enemies"],[870,15,924,13],[870,17,924,15],[871,6,925,4],[871,7,925,5],[871,8,925,6],[871,9,925,7],[872,4,926,2],[872,5,926,3],[874,4,928,2],[875,4,929,2],[877,4,931,2],[878,4,932,2],[878,8,932,8,"spawnEnemy"],[878,18,932,18],[878,21,932,22,"position"],[878,29,932,57],[878,33,932,75],[879,6,933,4],[879,10,933,10,"SCREEN_WIDTH"],[879,22,933,22],[879,25,933,25],[879,28,933,28],[880,6,934,4],[880,10,934,10,"GAME_AREA_HEIGHT"],[880,26,934,26],[880,29,934,29],[880,32,934,32],[880,35,934,35],[880,38,934,38],[880,39,934,39],[880,40,934,40],[881,6,935,4],[881,10,935,10,"ENEMY_SIZE"],[881,20,935,20],[881,23,935,23],[881,25,935,25],[883,6,937,4],[884,6,938,4],[884,10,938,10,"x"],[884,11,938,11],[884,14,938,14,"position"],[884,22,938,22],[884,24,938,24,"x"],[884,25,938,25],[884,29,938,29,"Math"],[884,33,938,33],[884,34,938,34,"random"],[884,40,938,40],[884,41,938,41],[884,42,938,42],[884,46,938,46,"SCREEN_WIDTH"],[884,58,938,58],[884,61,938,61,"ENEMY_SIZE"],[884,71,938,71],[884,74,938,74],[884,75,938,75],[884,76,938,76],[884,79,938,79,"ENEMY_SIZE"],[884,89,938,89],[885,6,939,4],[885,10,939,10,"y"],[885,11,939,11],[885,14,939,14,"position"],[885,22,939,22],[885,24,939,24,"y"],[885,25,939,25],[885,29,939,29,"Math"],[885,33,939,33],[885,34,939,34,"random"],[885,40,939,40],[885,41,939,41],[885,42,939,42],[885,46,939,46,"GAME_AREA_HEIGHT"],[885,62,939,62],[885,65,939,65,"ENEMY_SIZE"],[885,75,939,75],[885,78,939,78],[885,79,939,79],[885,80,939,80],[885,83,939,83,"ENEMY_SIZE"],[885,93,939,93],[886,6,941,4],[886,10,941,10,"enemy"],[886,15,941,28],[886,18,941,31],[887,8,942,6,"id"],[887,10,942,8],[887,12,942,10],[887,21,942,19],[887,23,942,21,"enemyCounter"],[887,35,942,33],[887,37,942,35],[888,8,943,6,"name"],[888,12,943,10],[888,14,943,12],[888,24,943,22],[889,8,944,6,"health"],[889,14,944,12],[889,16,944,14],[889,19,944,17],[890,8,945,6,"maxHealth"],[890,17,945,15],[890,19,945,17],[890,22,945,20],[891,8,946,6,"stats"],[891,13,946,11],[891,15,946,13],[892,10,947,8,"attack"],[892,16,947,14],[892,18,947,16],[892,20,947,18],[893,10,948,8,"defense"],[893,17,948,15],[893,19,948,17],[893,21,948,19],[894,10,949,8,"health"],[894,16,949,14],[894,18,949,16],[894,21,949,19],[895,10,950,8,"maxHealth"],[895,19,950,17],[895,21,950,19],[895,24,950,22],[896,10,951,8,"critChance"],[896,20,951,18],[896,22,951,20],[896,23,951,21],[897,10,952,8,"critDamage"],[897,20,952,18],[897,22,952,20],[897,25,952,23],[898,10,953,8,"cooldownReduction"],[898,27,953,25],[898,29,953,27],[899,8,954,6],[899,9,954,7],[900,8,955,6,"position"],[900,16,955,14],[900,18,955,16],[901,10,955,18,"x"],[901,11,955,19],[902,10,955,21,"y"],[903,8,955,23],[903,9,955,24],[904,8,956,6,"lastDamaged"],[904,19,956,17],[904,21,956,19],[905,6,957,4],[905,7,957,5],[906,6,959,4,"setCombatState"],[906,20,959,18],[906,21,959,19,"prev"],[906,25,959,23],[906,30,959,28],[907,8,960,6],[907,11,960,9,"prev"],[907,15,960,13],[908,8,961,6,"enemies"],[908,15,961,13],[908,17,961,15],[908,18,961,16],[908,21,961,19,"prev"],[908,25,961,23],[908,26,961,24,"enemies"],[908,33,961,31],[908,35,961,33,"enemy"],[908,40,961,38],[909,6,962,4],[909,7,962,5],[909,8,962,6],[909,9,962,7],[910,6,964,4],[910,13,964,11,"enemy"],[910,18,964,16],[911,4,965,2],[911,5,965,3],[913,4,967,2],[914,4,968,2],[914,8,968,8,"spawnBoss"],[914,17,968,17],[914,20,968,21,"bossEnemy"],[914,29,968,43],[914,33,968,48],[915,6,969,4,"console"],[915,13,969,11],[915,14,969,12,"log"],[915,17,969,15],[915,18,969,16],[915,39,969,37,"bossEnemy"],[915,48,969,46],[915,49,969,47,"name"],[915,53,969,51],[915,90,969,88],[915,91,969,89],[916,6,970,4,"setCombatState"],[916,20,970,18],[916,21,970,19,"prev"],[916,25,970,23],[916,30,970,28],[917,8,971,6],[917,11,971,9,"prev"],[917,15,971,13],[918,8,972,6,"enemies"],[918,15,972,13],[918,17,972,15],[918,18,972,16,"bossEnemy"],[918,27,972,25],[918,28,972,26],[918,29,972,27],[919,6,973,4],[919,7,973,5],[919,8,973,6],[919,9,973,7],[920,4,974,2],[920,5,974,3],[922,4,976,2],[923,4,977,2],[923,8,977,8,"clearSpecificEnemy"],[923,26,977,26],[923,29,977,30,"enemyId"],[923,36,977,45],[923,40,977,50],[924,6,978,4,"setCombatState"],[924,20,978,18],[924,21,978,19,"prev"],[924,25,978,23],[924,30,978,28],[925,8,979,6],[925,11,979,9,"prev"],[925,15,979,13],[926,8,980,6,"enemies"],[926,15,980,13],[926,17,980,15,"prev"],[926,21,980,19],[926,22,980,20,"enemies"],[926,29,980,27],[926,30,980,28,"filter"],[926,36,980,34],[926,37,980,35,"enemy"],[926,42,980,40],[926,46,980,44,"enemy"],[926,51,980,49],[926,52,980,50,"id"],[926,54,980,52],[926,59,980,57,"enemyId"],[926,66,980,64],[927,6,981,4],[927,7,981,5],[927,8,981,6],[927,9,981,7],[928,4,982,2],[928,5,982,3],[930,4,984,2],[931,4,985,2],[931,8,985,8,"useAbilityManually"],[931,26,985,26],[931,29,985,26,"_s3"],[931,32,985,26],[931,33,985,29],[931,37,985,29,"useCallback"],[931,43,985,40],[931,44,985,40,"useCallback"],[931,55,985,40],[931,57,985,40,"_s3"],[931,60,985,40],[931,61,985,42,"slotIndex"],[931,70,985,59],[931,74,985,73],[932,6,985,73,"_s3"],[932,9,985,73],[933,6,986,4,"console"],[933,13,986,11],[933,14,986,12,"log"],[933,17,986,15],[933,18,986,16],[933,64,986,62,"slotIndex"],[933,73,986,71],[933,82,986,80],[933,83,986,81],[934,6,987,4,"console"],[934,13,987,11],[934,14,987,12,"log"],[934,17,987,15],[934,18,987,16],[934,65,987,63,"slotIndex"],[934,74,987,72],[934,76,987,74],[934,77,987,75],[935,6,988,4,"console"],[935,13,988,11],[935,14,988,12,"log"],[935,17,988,15],[935,18,988,16],[935,53,988,51,"slotIndex"],[935,62,988,60],[935,64,988,62],[935,65,988,63],[937,6,990,4],[938,6,991,4],[938,10,991,8],[938,11,991,9,"game"],[938,15,991,13],[938,16,991,14,"gameState"],[938,25,991,23],[938,26,991,24,"isAlive"],[938,33,991,31],[938,35,991,33],[939,8,992,6,"console"],[939,15,992,13],[939,16,992,14,"log"],[939,19,992,17],[939,20,992,18],[939,70,992,68],[939,71,992,69],[940,8,993,6],[940,15,993,13],[940,20,993,18],[941,6,994,4],[943,6,996,4],[944,6,997,4],[944,10,997,10,"isReady"],[944,17,997,17],[944,20,997,20,"combatState"],[944,31,997,31],[944,32,997,32,"abilityManager"],[944,46,997,46],[944,47,997,47,"isAbilityReady"],[944,61,997,61],[944,62,997,62,"slotIndex"],[944,71,997,71],[944,72,997,72],[945,6,998,4],[945,10,998,8],[945,11,998,9,"isReady"],[945,18,998,16],[945,20,998,18],[946,8,999,6,"console"],[946,15,999,13],[946,16,999,14,"log"],[946,19,999,17],[946,20,999,18],[946,41,999,39,"slotIndex"],[946,50,999,48],[946,85,999,83],[946,86,999,84],[947,8,1000,6],[947,15,1000,13],[947,20,1000,18],[948,6,1001,4],[950,6,1003,4],[951,6,1004,4],[951,10,1004,8,"combatState"],[951,21,1004,19],[951,22,1004,20,"enemies"],[951,29,1004,27],[951,30,1004,28,"length"],[951,36,1004,34],[951,41,1004,39],[951,42,1004,40],[951,44,1004,42],[952,8,1005,6,"console"],[952,15,1005,13],[952,16,1005,14,"log"],[952,19,1005,17],[952,20,1005,18],[952,69,1005,67],[952,70,1005,68],[953,8,1006,6],[953,15,1006,13],[953,20,1006,18],[954,6,1007,4],[956,6,1009,4],[957,6,1010,4],[957,10,1010,10,"currentTick"],[957,21,1010,21],[957,24,1010,24,"combatEngine"],[957,43,1010,36],[957,44,1010,36,"combatEngine"],[957,56,1010,36],[957,57,1010,37,"getCurrentTick"],[957,71,1010,51],[957,72,1010,52],[957,73,1010,53],[958,6,1011,4],[958,10,1011,10,"success"],[958,17,1011,17],[958,20,1011,20,"combatState"],[958,31,1011,31],[958,32,1011,32,"abilityManager"],[958,46,1011,46],[958,47,1011,47,"useAbility"],[958,57,1011,57],[958,58,1011,58,"slotIndex"],[958,67,1011,67],[958,69,1011,69,"currentTick"],[958,80,1011,80],[958,81,1011,81],[959,6,1013,4],[959,10,1013,8,"success"],[959,17,1013,15],[959,19,1013,17],[960,8,1014,6],[961,8,1015,6,"setCombatState"],[961,22,1015,20],[961,23,1015,21,"prev"],[961,27,1015,25],[961,31,1015,29],[962,10,1016,8],[962,14,1016,14,"newState"],[962,22,1016,22],[962,25,1016,25],[963,12,1016,27],[963,15,1016,30,"prev"],[964,10,1016,35],[964,11,1016,36],[965,10,1017,8,"castAbility"],[965,21,1017,19],[965,22,1017,20,"newState"],[965,30,1017,28],[965,32,1017,30,"slotIndex"],[965,41,1017,39],[965,42,1017,40],[966,10,1018,8],[966,17,1018,15,"newState"],[966,25,1018,23],[967,8,1019,6],[967,9,1019,7],[967,10,1019,8],[968,8,1021,6,"console"],[968,15,1021,13],[968,16,1021,14,"log"],[968,19,1021,17],[968,20,1021,18],[968,65,1021,63,"slotIndex"],[968,74,1021,72],[968,76,1021,74],[968,77,1021,75],[969,8,1022,6],[969,15,1022,13],[969,19,1022,17],[970,6,1023,4],[970,7,1023,5],[970,13,1023,11],[971,8,1024,6,"console"],[971,15,1024,13],[971,16,1024,14,"log"],[971,19,1024,17],[971,20,1024,18],[971,61,1024,59,"slotIndex"],[971,70,1024,68],[971,72,1024,70],[971,73,1024,71],[972,8,1025,6],[972,15,1025,13],[972,20,1025,18],[973,6,1026,4],[974,4,1027,2],[974,5,1027,3],[974,46,1027,5],[974,47,1027,6,"combatState"],[974,58,1027,17],[974,59,1027,18,"abilityManager"],[974,73,1027,32],[974,75,1027,34,"combatState"],[974,86,1027,45],[974,87,1027,46,"enemies"],[974,94,1027,53],[974,95,1027,54],[974,96,1027,55],[975,4,1028,2],[975,8,1028,2,"useEffect"],[975,14,1028,11],[975,15,1028,11,"useEffect"],[975,24,1028,11],[975,26,1028,12],[975,32,1028,18],[976,6,1029,4,"combatEngine"],[976,25,1029,16],[976,26,1029,16,"combatEngine"],[976,38,1029,16],[976,39,1029,17,"start"],[976,44,1029,22],[976,45,1029,23],[976,46,1029,24],[978,6,1031,4],[979,6,1032,4],[980,6,1033,4,"console"],[980,13,1033,11],[980,14,1033,12,"log"],[980,17,1033,15],[980,18,1033,16],[980,97,1033,95],[980,98,1033,96],[981,6,1035,4],[981,13,1035,11],[981,19,1035,17],[982,8,1036,6,"combatEngine"],[982,27,1036,18],[982,28,1036,18,"combatEngine"],[982,40,1036,18],[982,41,1036,19,"stop"],[982,45,1036,23],[982,46,1036,24],[982,47,1036,25],[983,6,1037,4],[983,7,1037,5],[984,4,1038,2],[984,5,1038,3],[984,7,1038,5],[984,9,1038,7],[984,10,1038,8],[986,4,1040,2],[987,4,1041,2],[987,8,1041,2,"useEffect"],[987,14,1041,11],[987,15,1041,11,"useEffect"],[987,24,1041,11],[987,26,1041,12],[987,32,1041,18],[988,6,1042,4],[989,6,1043,4],[989,10,1043,10,"tickInterval"],[989,22,1043,22],[989,25,1043,25,"Platform"],[989,37,1043,33],[989,38,1043,33,"Platform"],[989,46,1043,33],[989,47,1043,34,"OS"],[989,49,1043,36],[989,54,1043,41],[989,59,1043,46],[989,62,1043,49],[989,65,1043,52],[989,68,1043,55],[989,71,1043,58],[989,72,1043,59],[989,73,1043,60],[990,6,1044,4,"console"],[990,13,1044,11],[990,14,1044,12,"log"],[990,17,1044,15],[990,18,1044,16],[990,91,1044,89,"tickInterval"],[990,103,1044,101],[990,112,1044,110,"Platform"],[990,124,1044,118],[990,125,1044,118,"Platform"],[990,133,1044,118],[990,134,1044,119,"OS"],[990,136,1044,121],[990,138,1044,123],[990,139,1044,124],[991,6,1045,4],[991,10,1045,10,"combatTickInterval"],[991,28,1045,28],[991,31,1045,31,"setInterval"],[991,42,1045,42],[991,43,1045,43,"handleCombatTick"],[991,59,1045,59],[991,61,1045,61,"tickInterval"],[991,73,1045,73],[991,74,1045,74],[992,6,1047,4],[992,13,1047,11],[992,19,1047,17],[993,8,1048,6,"console"],[993,15,1048,13],[993,16,1048,14,"log"],[993,19,1048,17],[993,20,1048,18],[993,51,1048,49],[993,52,1048,50],[994,8,1049,6,"clearInterval"],[994,21,1049,19],[994,22,1049,20,"combatTickInterval"],[994,40,1049,38],[994,41,1049,39],[995,6,1050,4],[995,7,1050,5],[996,4,1051,2],[996,5,1051,3],[996,7,1051,5],[996,8,1051,6,"handleCombatTick"],[996,24,1051,22],[996,25,1051,23],[996,26,1051,24],[998,4,1053,2],[999,4,1054,2],[999,8,1054,2,"useEffect"],[999,14,1054,11],[999,15,1054,11,"useEffect"],[999,24,1054,11],[999,26,1054,12],[999,32,1054,18],[1000,6,1055,4],[1000,10,1055,10,"processProjectileImpacts"],[1000,34,1055,34],[1000,37,1055,37,"processProjectileImpacts"],[1000,38,1055,37],[1000,43,1055,43],[1001,8,1056,6,"setProjectiles"],[1001,22,1056,20],[1001,23,1056,21,"currentProjectiles"],[1001,41,1056,39],[1001,45,1056,43],[1002,10,1057,8],[1002,17,1057,15,"currentProjectiles"],[1002,35,1057,33],[1002,36,1057,34,"map"],[1002,39,1057,37],[1002,40,1057,38,"projectile"],[1002,50,1057,48],[1002,54,1057,52],[1003,12,1058,10],[1003,16,1058,14],[1003,17,1058,15,"projectile"],[1003,27,1058,25],[1003,29,1058,27],[1003,36,1058,34],[1003,40,1058,38],[1005,12,1060,10],[1006,12,1061,10],[1006,16,1061,16,"currentTime"],[1006,27,1061,27],[1006,30,1061,30,"Date"],[1006,34,1061,34],[1006,35,1061,35,"now"],[1006,38,1061,38],[1006,39,1061,39],[1006,40,1061,40],[1007,12,1062,10],[1007,16,1062,16,"startTime"],[1007,25,1062,25],[1007,28,1062,28,"projectile"],[1007,38,1062,38],[1007,39,1062,39,"startTime"],[1007,48,1062,48],[1007,52,1062,52,"currentTime"],[1007,63,1062,63],[1008,12,1063,10],[1008,16,1063,16,"elapsedTime"],[1008,27,1063,27],[1008,30,1063,30,"currentTime"],[1008,41,1063,41],[1008,44,1063,44,"startTime"],[1008,53,1063,53],[1009,12,1064,10],[1009,16,1064,16,"progress"],[1009,24,1064,24],[1009,27,1064,27,"Math"],[1009,31,1064,31],[1009,32,1064,32,"min"],[1009,35,1064,35],[1009,36,1064,36,"elapsedTime"],[1009,47,1064,47],[1009,51,1064,51,"projectile"],[1009,61,1064,61],[1009,62,1064,62,"duration"],[1009,70,1064,70],[1009,74,1064,74],[1009,77,1064,77],[1009,78,1064,78],[1009,80,1064,80],[1009,81,1064,81],[1009,82,1064,82],[1011,12,1066,10],[1012,12,1067,10],[1012,16,1067,14,"progress"],[1012,24,1067,22],[1012,28,1067,26],[1012,29,1067,27],[1012,33,1067,31],[1012,34,1067,32,"projectile"],[1012,44,1067,42],[1012,45,1067,43,"hasHit"],[1012,51,1067,49],[1012,53,1067,51],[1013,14,1068,12],[1014,14,1069,12,"console"],[1014,21,1069,19],[1014,22,1069,20,"log"],[1014,25,1069,23],[1014,26,1069,24],[1014,51,1069,49,"projectile"],[1014,61,1069,59],[1014,62,1069,60,"abilityName"],[1014,73,1069,71],[1014,97,1069,95],[1014,98,1069,96],[1015,14,1071,12,"setCombatState"],[1015,28,1071,26],[1015,29,1071,27,"prev"],[1015,33,1071,31],[1015,37,1071,35],[1016,16,1072,14],[1016,20,1072,20,"newState"],[1016,28,1072,28],[1016,31,1072,31],[1017,18,1072,33],[1017,21,1072,36,"prev"],[1018,16,1072,41],[1018,17,1072,42],[1019,16,1074,14],[1019,20,1074,18,"projectile"],[1019,30,1074,28],[1019,31,1074,29,"isAOE"],[1019,36,1074,34],[1019,40,1074,38,"projectile"],[1019,50,1074,48],[1019,51,1074,49,"aoeRadius"],[1019,60,1074,58],[1019,64,1074,62,"projectile"],[1019,74,1074,72],[1019,75,1074,73,"aoeRadius"],[1019,84,1074,82],[1019,87,1074,85],[1019,88,1074,86],[1019,90,1074,88],[1020,18,1075,16],[1021,18,1076,16,"console"],[1021,25,1076,23],[1021,26,1076,24,"log"],[1021,29,1076,27],[1021,30,1076,28],[1021,59,1076,57,"projectile"],[1021,69,1076,67],[1021,70,1076,68,"abilityName"],[1021,81,1076,79],[1021,97,1076,95,"projectile"],[1021,107,1076,105],[1021,108,1076,106,"aoeRadius"],[1021,117,1076,115],[1021,119,1076,117],[1021,120,1076,118],[1022,18,1078,16],[1022,22,1078,22,"impactX"],[1022,29,1078,29],[1022,32,1078,32,"projectile"],[1022,42,1078,42],[1022,43,1078,43,"targetX"],[1022,50,1078,50],[1023,18,1079,16],[1023,22,1079,22,"impactY"],[1023,29,1079,29],[1023,32,1079,32,"projectile"],[1023,42,1079,42],[1023,43,1079,43,"targetY"],[1023,50,1079,50],[1024,18,1080,16],[1024,22,1080,22,"enemiesKilled"],[1024,35,1080,50],[1024,38,1080,53],[1024,40,1080,55],[1026,18,1082,16],[1027,18,1083,16,"newState"],[1027,26,1083,24],[1027,27,1083,25,"enemies"],[1027,34,1083,32],[1027,37,1083,35,"newState"],[1027,45,1083,43],[1027,46,1083,44,"enemies"],[1027,53,1083,51],[1027,54,1083,52,"map"],[1027,57,1083,55],[1027,58,1083,56,"enemy"],[1027,63,1083,61],[1027,67,1083,65],[1028,20,1084,18],[1028,24,1084,22,"enemy"],[1028,29,1084,27],[1028,30,1084,28,"health"],[1028,36,1084,34],[1028,40,1084,38],[1028,41,1084,39],[1028,45,1084,43,"enemy"],[1028,50,1084,48],[1028,51,1084,49,"markedForDeath"],[1028,65,1084,63],[1028,67,1084,65],[1028,74,1084,72,"enemy"],[1028,79,1084,77],[1029,20,1086,18],[1029,24,1086,24,"enemyX"],[1029,30,1086,30],[1029,33,1086,33,"enemy"],[1029,38,1086,38],[1029,39,1086,39,"position"],[1029,47,1086,47],[1029,48,1086,48,"x"],[1029,49,1086,49],[1029,52,1086,52],[1029,56,1086,56],[1029,57,1086,57],[1029,58,1086,58],[1030,20,1087,18],[1030,24,1087,24,"enemyY"],[1030,30,1087,30],[1030,33,1087,33,"enemy"],[1030,38,1087,38],[1030,39,1087,39,"position"],[1030,47,1087,47],[1030,48,1087,48,"y"],[1030,49,1087,49],[1030,52,1087,52],[1030,56,1087,56],[1031,20,1088,18],[1031,24,1088,24,"distance"],[1031,32,1088,32],[1031,35,1088,35,"Math"],[1031,39,1088,39],[1031,40,1088,40,"sqrt"],[1031,44,1088,44],[1031,45,1088,45,"Math"],[1031,49,1088,49],[1031,50,1088,50,"pow"],[1031,53,1088,53],[1031,54,1088,54,"enemyX"],[1031,60,1088,60],[1031,63,1088,63,"impactX"],[1031,70,1088,70],[1031,72,1088,72],[1031,73,1088,73],[1031,74,1088,74],[1031,77,1088,77,"Math"],[1031,81,1088,81],[1031,82,1088,82,"pow"],[1031,85,1088,85],[1031,86,1088,86,"enemyY"],[1031,92,1088,92],[1031,95,1088,95,"impactY"],[1031,102,1088,102],[1031,104,1088,104],[1031,105,1088,105],[1031,106,1088,106],[1031,107,1088,107],[1032,20,1090,18,"console"],[1032,27,1090,25],[1032,28,1090,26,"log"],[1032,31,1090,29],[1032,32,1090,30],[1032,58,1090,56,"enemy"],[1032,63,1090,61],[1032,64,1090,62,"name"],[1032,68,1090,66],[1032,76,1090,74,"enemyX"],[1032,82,1090,80],[1032,87,1090,85,"enemyY"],[1032,93,1090,91],[1032,109,1090,107,"impactX"],[1032,116,1090,114],[1032,121,1090,119,"impactY"],[1032,128,1090,126],[1032,135,1090,133,"distance"],[1032,143,1090,141],[1032,144,1090,142,"toFixed"],[1032,151,1090,149],[1032,152,1090,150],[1032,153,1090,151],[1032,154,1090,152],[1032,169,1090,167,"projectile"],[1032,179,1090,177],[1032,180,1090,178,"aoeRadius"],[1032,189,1090,187],[1032,194,1090,192],[1032,195,1090,193],[1033,20,1092,18],[1033,24,1092,22,"distance"],[1033,32,1092,30],[1033,36,1092,34,"projectile"],[1033,46,1092,44],[1033,47,1092,45,"aoeRadius"],[1033,56,1092,54],[1033,58,1092,56],[1034,22,1093,20],[1035,22,1094,20],[1035,26,1094,26,"newHealth"],[1035,35,1094,35],[1035,38,1094,38,"Math"],[1035,42,1094,42],[1035,43,1094,43,"max"],[1035,46,1094,46],[1035,47,1094,47],[1035,48,1094,48],[1035,50,1094,50,"enemy"],[1035,55,1094,55],[1035,56,1094,56,"health"],[1035,62,1094,62],[1035,65,1094,65,"projectile"],[1035,75,1094,75],[1035,76,1094,76,"damage"],[1035,82,1094,82],[1035,83,1094,83],[1036,22,1096,20,"console"],[1036,29,1096,27],[1036,30,1096,28,"log"],[1036,33,1096,31],[1036,34,1096,32],[1036,52,1096,50,"enemy"],[1036,57,1096,55],[1036,58,1096,56,"name"],[1036,62,1096,60],[1036,74,1096,72,"projectile"],[1036,84,1096,82],[1036,85,1096,83,"damage"],[1036,91,1096,89],[1036,103,1096,101,"enemy"],[1036,108,1096,106],[1036,109,1096,107,"health"],[1036,115,1096,113],[1036,122,1096,120,"newHealth"],[1036,131,1096,129],[1036,134,1096,132],[1036,135,1096,133],[1038,22,1098,20],[1039,22,1099,20],[1039,26,1099,24,"newHealth"],[1039,35,1099,33],[1039,39,1099,37],[1039,40,1099,38],[1039,44,1099,42,"enemy"],[1039,49,1099,47],[1039,50,1099,48,"health"],[1039,56,1099,54],[1039,59,1099,57],[1039,60,1099,58],[1039,62,1099,60],[1040,24,1100,22,"console"],[1040,31,1100,29],[1040,32,1100,30,"log"],[1040,35,1100,33],[1040,36,1100,34],[1040,52,1100,50,"enemy"],[1040,57,1100,55],[1040,58,1100,56,"name"],[1040,62,1100,60],[1040,76,1100,74,"projectile"],[1040,86,1100,84],[1040,87,1100,85,"abilityName"],[1040,98,1100,96],[1040,101,1100,99],[1040,102,1100,100],[1041,24,1101,22,"enemiesKilled"],[1041,37,1101,35],[1041,38,1101,36,"push"],[1041,42,1101,40],[1041,43,1101,41,"enemy"],[1041,48,1101,46],[1041,49,1101,47],[1041,50,1101,48],[1041,51,1101,49],[1043,24,1103,22],[1043,31,1103,29],[1044,26,1104,24],[1044,29,1104,27,"enemy"],[1044,34,1104,32],[1045,26,1105,24,"health"],[1045,32,1105,30],[1045,34,1105,32],[1045,35,1105,33],[1046,26,1106,24,"markedForDeath"],[1046,40,1106,38],[1046,42,1106,40],[1046,46,1106,44],[1047,26,1107,24,"lastDamaged"],[1047,37,1107,35],[1047,39,1107,37,"combatEngine"],[1047,58,1107,49],[1047,59,1107,49,"combatEngine"],[1047,71,1107,49],[1047,72,1107,50,"getCurrentTick"],[1047,86,1107,64],[1047,87,1107,65],[1048,24,1108,22],[1048,25,1108,23],[1049,22,1109,20],[1049,23,1109,21],[1049,29,1109,27],[1050,24,1110,22],[1050,31,1110,29],[1051,26,1111,24],[1051,29,1111,27,"enemy"],[1051,34,1111,32],[1052,26,1112,24,"health"],[1052,32,1112,30],[1052,34,1112,32,"newHealth"],[1052,43,1112,41],[1053,26,1113,24,"lastDamaged"],[1053,37,1113,35],[1053,39,1113,37,"combatEngine"],[1053,58,1113,49],[1053,59,1113,49,"combatEngine"],[1053,71,1113,49],[1053,72,1113,50,"getCurrentTick"],[1053,86,1113,64],[1053,87,1113,65],[1054,24,1114,22],[1054,25,1114,23],[1055,22,1115,20],[1056,20,1116,18],[1057,20,1118,18],[1057,27,1118,25,"enemy"],[1057,32,1118,30],[1057,33,1118,31],[1057,34,1118,32],[1058,18,1119,16],[1058,19,1119,17],[1058,20,1119,18],[1060,18,1121,16],[1061,18,1122,16],[1061,22,1122,20,"enemiesKilled"],[1061,35,1122,33],[1061,36,1122,34,"length"],[1061,42,1122,40],[1061,45,1122,43],[1061,46,1122,44],[1061,48,1122,46],[1062,20,1123,18,"console"],[1062,27,1123,25],[1062,28,1123,26,"log"],[1062,31,1123,29],[1062,32,1123,30],[1062,52,1123,50,"enemiesKilled"],[1062,65,1123,63],[1062,66,1123,64,"length"],[1062,72,1123,70],[1062,94,1123,92,"projectile"],[1062,104,1123,102],[1062,105,1123,103,"abilityName"],[1062,116,1123,114],[1062,118,1123,116],[1062,119,1123,117],[1063,20,1124,18],[1064,20,1125,18,"enemiesKilled"],[1064,33,1125,31],[1064,34,1125,32,"forEach"],[1064,41,1125,39],[1064,42,1125,40,"enemy"],[1064,47,1125,45],[1064,51,1125,49,"handleEnemyKill"],[1064,66,1125,64],[1064,67,1125,65,"enemy"],[1064,72,1125,70],[1064,73,1125,71],[1064,74,1125,72],[1065,18,1126,16],[1066,16,1128,14],[1066,17,1128,15],[1066,23,1128,21],[1067,18,1129,16],[1068,18,1130,16],[1068,22,1130,22,"enemyIndex"],[1068,32,1130,32],[1068,35,1130,35,"newState"],[1068,43,1130,43],[1068,44,1130,44,"enemies"],[1068,51,1130,51],[1068,52,1130,52,"findIndex"],[1068,61,1130,61],[1068,62,1130,62,"e"],[1068,63,1130,63],[1068,67,1130,67,"e"],[1068,68,1130,68],[1068,69,1130,69,"id"],[1068,71,1130,71],[1068,76,1130,76,"projectile"],[1068,86,1130,86],[1068,87,1130,87,"targetEnemyId"],[1068,100,1130,100],[1068,101,1130,101],[1069,18,1132,16],[1069,22,1132,20,"enemyIndex"],[1069,32,1132,30],[1069,36,1132,34],[1069,37,1132,35],[1069,41,1132,39,"newState"],[1069,49,1132,47],[1069,50,1132,48,"enemies"],[1069,57,1132,55],[1069,58,1132,56,"enemyIndex"],[1069,68,1132,66],[1069,69,1132,67],[1069,70,1132,68,"health"],[1069,76,1132,74],[1069,79,1132,77],[1069,80,1132,78],[1069,84,1132,82],[1069,85,1132,83,"newState"],[1069,93,1132,91],[1069,94,1132,92,"enemies"],[1069,101,1132,99],[1069,102,1132,100,"enemyIndex"],[1069,112,1132,110],[1069,113,1132,111],[1069,114,1132,112,"markedForDeath"],[1069,128,1132,126],[1069,130,1132,128],[1070,20,1133,18,"newState"],[1070,28,1133,26],[1070,29,1133,27,"enemies"],[1070,36,1133,34],[1070,39,1133,37],[1070,40,1133,38],[1070,43,1133,41,"newState"],[1070,51,1133,49],[1070,52,1133,50,"enemies"],[1070,59,1133,57],[1070,60,1133,58],[1071,20,1134,18],[1071,24,1134,24,"enemy"],[1071,29,1134,29],[1071,32,1134,32,"newState"],[1071,40,1134,40],[1071,41,1134,41,"enemies"],[1071,48,1134,48],[1071,49,1134,49,"enemyIndex"],[1071,59,1134,59],[1071,60,1134,60],[1072,20,1135,18],[1072,24,1135,24,"newHealth"],[1072,33,1135,33],[1072,36,1135,36,"Math"],[1072,40,1135,40],[1072,41,1135,41,"max"],[1072,44,1135,44],[1072,45,1135,45],[1072,46,1135,46],[1072,48,1135,48,"enemy"],[1072,53,1135,53],[1072,54,1135,54,"health"],[1072,60,1135,60],[1072,63,1135,63,"projectile"],[1072,73,1135,73],[1072,74,1135,74,"damage"],[1072,80,1135,80],[1072,81,1135,81],[1073,20,1137,18,"newState"],[1073,28,1137,26],[1073,29,1137,27,"enemies"],[1073,36,1137,34],[1073,37,1137,35,"enemyIndex"],[1073,47,1137,45],[1073,48,1137,46],[1073,51,1137,49],[1074,22,1138,20],[1074,25,1138,23,"enemy"],[1074,30,1138,28],[1075,22,1139,20,"health"],[1075,28,1139,26],[1075,30,1139,28,"newHealth"],[1075,39,1139,37],[1076,22,1140,20,"lastDamaged"],[1076,33,1140,31],[1076,35,1140,33,"combatEngine"],[1076,54,1140,45],[1076,55,1140,45,"combatEngine"],[1076,67,1140,45],[1076,68,1140,46,"getCurrentTick"],[1076,82,1140,60],[1076,83,1140,61],[1077,20,1141,18],[1077,21,1141,19],[1078,20,1143,18,"console"],[1078,27,1143,25],[1078,28,1143,26,"log"],[1078,31,1143,29],[1078,32,1143,30],[1078,60,1143,58,"enemy"],[1078,65,1143,63],[1078,66,1143,64,"name"],[1078,70,1143,68],[1078,82,1143,80,"newHealth"],[1078,91,1143,89],[1078,95,1143,93,"enemy"],[1078,100,1143,98],[1078,101,1143,99,"maxHealth"],[1078,110,1143,108],[1078,112,1143,110],[1078,113,1143,111],[1080,20,1145,18],[1081,20,1146,18],[1081,24,1146,22,"newHealth"],[1081,33,1146,31],[1081,37,1146,35],[1081,38,1146,36],[1081,42,1146,40,"enemy"],[1081,47,1146,45],[1081,48,1146,46,"health"],[1081,54,1146,52],[1081,57,1146,55],[1081,58,1146,56],[1081,60,1146,58],[1082,22,1147,20,"console"],[1082,29,1147,27],[1082,30,1147,28,"log"],[1082,33,1147,31],[1082,34,1147,32],[1082,54,1147,52,"enemy"],[1082,59,1147,57],[1082,60,1147,58,"name"],[1082,64,1147,62],[1082,78,1147,76,"projectile"],[1082,88,1147,86],[1082,89,1147,87,"abilityName"],[1082,100,1147,98],[1082,136,1147,134],[1082,137,1147,135],[1084,22,1149,20],[1085,22,1150,20,"newState"],[1085,30,1150,28],[1085,31,1150,29,"enemies"],[1085,38,1150,36],[1085,39,1150,37,"enemyIndex"],[1085,49,1150,47],[1085,50,1150,48],[1085,53,1150,51],[1086,24,1151,22],[1086,27,1151,25,"newState"],[1086,35,1151,33],[1086,36,1151,34,"enemies"],[1086,43,1151,41],[1086,44,1151,42,"enemyIndex"],[1086,54,1151,52],[1086,55,1151,53],[1087,24,1152,22,"health"],[1087,30,1152,28],[1087,32,1152,30],[1087,33,1152,31],[1088,24,1153,22,"isDying"],[1088,31,1153,29],[1088,33,1153,31],[1088,37,1153,35],[1089,24,1154,22,"deathStartTime"],[1089,38,1154,36],[1089,40,1154,38,"Date"],[1089,44,1154,42],[1089,45,1154,43,"now"],[1089,48,1154,46],[1089,49,1154,47],[1090,22,1155,20],[1090,23,1155,21],[1091,20,1156,18],[1091,21,1156,19],[1091,27,1156,25],[1091,31,1156,29,"enemy"],[1091,36,1156,34],[1091,37,1156,35,"health"],[1091,43,1156,41],[1091,46,1156,44],[1091,47,1156,45],[1091,49,1156,47],[1092,22,1157,20,"console"],[1092,29,1157,27],[1092,30,1157,28,"log"],[1092,33,1157,31],[1092,34,1157,32],[1092,48,1157,46,"enemy"],[1092,53,1157,51],[1092,54,1157,52,"name"],[1092,58,1157,56],[1092,70,1157,68,"projectile"],[1092,80,1157,78],[1092,81,1157,79,"damage"],[1092,87,1157,85],[1092,99,1157,97,"enemy"],[1092,104,1157,102],[1092,105,1157,103,"health"],[1092,111,1157,109],[1092,117,1157,115,"newHealth"],[1092,126,1157,124],[1092,129,1157,127],[1092,130,1157,128],[1093,20,1158,18],[1094,18,1159,16],[1095,16,1160,14],[1096,16,1162,14],[1096,23,1162,21,"newState"],[1096,31,1162,29],[1097,14,1163,12],[1097,15,1163,13],[1097,16,1163,14],[1099,14,1165,12],[1100,14,1166,12],[1101,12,1167,10],[1103,12,1169,10],[1104,12,1170,10],[1105,12,1171,10],[1105,16,1171,16,"timeBasedCleanup"],[1105,32,1171,32],[1105,35,1171,35,"elapsedTime"],[1105,46,1171,46],[1105,49,1171,49],[1105,53,1171,53],[1105,54,1171,54],[1105,55,1171,55],[1106,12,1172,10],[1106,16,1172,14,"progress"],[1106,24,1172,22],[1106,28,1172,26],[1106,31,1172,29],[1106,35,1172,33,"timeBasedCleanup"],[1106,51,1172,49],[1106,53,1172,51],[1107,14,1173,12],[1107,18,1173,16,"timeBasedCleanup"],[1107,34,1173,32],[1107,36,1173,34],[1108,16,1174,14,"console"],[1108,23,1174,21],[1108,24,1174,22,"log"],[1108,27,1174,25],[1108,28,1174,26],[1108,63,1174,61,"projectile"],[1108,73,1174,71],[1108,74,1174,72,"id"],[1108,76,1174,74],[1108,105,1174,103],[1108,106,1174,104],[1109,14,1175,12],[1110,14,1176,12],[1110,21,1176,19],[1110,25,1176,23],[1111,12,1177,10],[1112,12,1179,10],[1112,19,1179,17,"projectile"],[1112,29,1179,27],[1113,10,1180,8],[1113,11,1180,9],[1113,12,1180,10],[1113,13,1180,11,"filter"],[1113,19,1180,17],[1113,20,1180,18,"Boolean"],[1113,27,1180,25],[1113,28,1180,26],[1114,8,1181,6],[1114,9,1181,7],[1114,10,1181,8],[1115,6,1182,4],[1115,7,1182,5],[1117,6,1184,4],[1118,6,1185,4],[1118,10,1185,10,"impactInterval"],[1118,24,1185,24],[1118,27,1185,27,"setInterval"],[1118,38,1185,38],[1118,39,1185,39,"processProjectileImpacts"],[1118,63,1185,63],[1118,65,1185,65],[1118,67,1185,67],[1118,68,1185,68],[1119,6,1186,4],[1119,13,1186,11],[1119,19,1186,17,"clearInterval"],[1119,32,1186,30],[1119,33,1186,31,"impactInterval"],[1119,47,1186,45],[1119,48,1186,46],[1120,4,1187,2],[1120,5,1187,3],[1120,7,1187,5],[1120,9,1187,7],[1120,10,1187,8],[1120,11,1187,9],[1120,12,1187,10],[1122,4,1189,2],[1123,4,1190,2],[1123,8,1190,8,"saveAbilityData"],[1123,23,1190,23],[1123,26,1190,26],[1123,30,1190,26,"useCallback"],[1123,36,1190,37],[1123,37,1190,37,"useCallback"],[1123,48,1190,37],[1123,50,1190,38],[1123,56,1190,44],[1124,6,1191,4],[1124,10,1191,8,"combatState"],[1124,21,1191,19],[1124,22,1191,20,"abilityManager"],[1124,36,1191,34],[1124,38,1191,36],[1125,8,1192,6],[1125,12,1192,12,"abilityData"],[1125,23,1192,23],[1125,26,1192,26,"combatState"],[1125,37,1192,37],[1125,38,1192,38,"abilityManager"],[1125,52,1192,52],[1125,53,1192,53,"getSaveData"],[1125,64,1192,64],[1125,65,1192,65],[1125,66,1192,66],[1126,8,1193,6,"console"],[1126,15,1193,13],[1126,16,1193,14,"log"],[1126,19,1193,17],[1126,20,1193,18],[1126,70,1193,68],[1126,72,1193,70,"abilityData"],[1126,83,1193,81],[1126,84,1193,82],[1127,8,1194,6,"game"],[1127,12,1194,10],[1127,13,1194,11,"updateAbilityData"],[1127,30,1194,28],[1127,31,1194,29,"abilityData"],[1127,42,1194,40],[1127,43,1194,41],[1128,6,1195,4],[1129,4,1196,2],[1129,5,1196,3],[1129,7,1196,5],[1129,8,1196,6,"combatState"],[1129,19,1196,17],[1129,20,1196,18,"abilityManager"],[1129,34,1196,32],[1129,36,1196,34,"game"],[1129,40,1196,38],[1129,41,1196,39,"updateAbilityData"],[1129,58,1196,56],[1129,59,1196,57],[1129,60,1196,58],[1130,4,1198,2],[1130,8,1198,8,"contextValue"],[1130,20,1198,39],[1130,23,1198,42,"React"],[1130,28,1198,47],[1130,29,1198,47,"default"],[1130,36,1198,47],[1130,37,1198,48,"useMemo"],[1130,44,1198,55],[1130,45,1198,56],[1130,52,1198,63],[1131,6,1199,4,"combatState"],[1131,17,1199,15],[1132,6,1200,4,"projectiles"],[1132,17,1200,15],[1133,6,1201,4,"startCombat"],[1133,17,1201,15],[1134,6,1202,4,"stopCombat"],[1134,16,1202,14],[1135,6,1203,4,"equipAbility"],[1135,18,1203,16],[1136,6,1204,4,"handleEnemyKill"],[1136,21,1204,19],[1137,6,1205,4,"getDeck"],[1137,13,1205,11],[1138,6,1206,4,"getAvailableAbilities"],[1138,27,1206,25],[1139,6,1207,4,"upgradeAbility"],[1139,20,1207,18],[1140,6,1208,4,"spawnEnemy"],[1140,16,1208,14],[1141,6,1209,4,"spawnBoss"],[1141,15,1209,13],[1142,6,1210,4,"clearAllEnemies"],[1142,21,1210,19],[1143,6,1211,4,"clearSpecificEnemy"],[1143,24,1211,22],[1144,6,1212,4],[1145,6,1213,4,"findClosestEnemy"],[1145,22,1213,20],[1146,6,1214,4,"updateNinjaPosition"],[1146,25,1214,23],[1147,6,1215,4,"setManualControlActive"],[1147,28,1215,26],[1148,6,1216,4,"lastExplosionTime"],[1148,23,1216,21],[1149,6,1217,4,"useAbilityManually"],[1149,24,1217,22],[1150,6,1217,24],[1151,6,1218,4,"saveAbilityData"],[1151,21,1218,19],[1152,6,1218,21],[1153,6,1219,4,"shadowClone"],[1153,17,1219,15],[1153,19,1219,17,"combatState"],[1153,30,1219,28],[1153,31,1219,29,"shadowClone"],[1153,42,1219,40],[1153,43,1219,42],[1154,4,1220,2],[1154,5,1220,3],[1154,6,1220,4],[1154,8,1220,6],[1155,4,1221,4],[1156,4,1222,4],[1157,4,1223,4,"combatState"],[1157,15,1223,15],[1157,17,1224,4,"projectiles"],[1157,28,1224,15],[1157,30,1225,4,"lastExplosionTime"],[1157,47,1225,21],[1158,4,1226,4],[1159,4,1227,4,"combatState"],[1159,15,1227,15],[1159,16,1227,16,"abilityManager"],[1159,30,1227,30],[1159,32,1228,4,"combatState"],[1159,43,1228,15],[1159,44,1228,16,"enemies"],[1159,51,1228,23],[1159,53,1229,4,"combatState"],[1159,64,1229,15],[1159,65,1229,16,"shadowClone"],[1159,76,1229,27],[1160,4,1229,29],[1161,4,1230,4,"useAbilityManually"],[1161,22,1230,22],[1162,4,1230,24],[1163,4,1231,4,"saveAbilityData"],[1163,19,1231,19],[1163,20,1231,21],[1164,4,1231,21],[1164,5,1232,3],[1164,6,1232,4],[1165,4,1234,2],[1165,24,1235,4],[1165,28,1235,4,"_reactJsxDevRuntime"],[1165,47,1235,4],[1165,48,1235,4,"jsxDEV"],[1165,54,1235,4],[1165,56,1235,5,"CombatContext"],[1165,69,1235,18],[1165,70,1235,19,"Provider"],[1165,78,1235,27],[1166,6,1235,28,"value"],[1166,11,1235,33],[1166,13,1235,35,"contextValue"],[1166,25,1235,48],[1167,6,1235,48,"children"],[1167,14,1235,48],[1167,16,1236,7,"children"],[1168,4,1236,15],[1169,6,1236,15,"fileName"],[1169,14,1236,15],[1169,16,1236,15,"_jsxFileName"],[1169,28,1236,15],[1170,6,1236,15,"lineNumber"],[1170,16,1236,15],[1171,6,1236,15,"columnNumber"],[1171,18,1236,15],[1172,4,1236,15],[1172,11,1237,28],[1172,12,1237,29],[1173,2,1239,0],[1173,3,1239,1],[1174,2,1239,2,"_s4"],[1174,5,1239,2],[1174,6,106,13,"CombatProvider"],[1174,20,106,27],[1175,4,106,27],[1175,12,107,15,"useGame"],[1175,24,107,22],[1175,25,107,22,"useGame"],[1175,32,107,22],[1175,34,108,77,"useZone"],[1175,46,108,84],[1175,47,108,84,"useZone"],[1175,54,108,84],[1176,2,108,84],[1177,2,108,84,"_c"],[1177,4,108,84],[1177,7,106,13,"CombatProvider"],[1177,21,106,27],[1178,2,106,27],[1178,6,106,27,"_c"],[1178,8,106,27],[1179,2,106,27,"$RefreshReg$"],[1179,14,106,27],[1179,15,106,27,"_c"],[1179,17,106,27],[1180,0,106,27],[1180,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","enemiesToKill.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMI;mBJM;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;gFSS,uDT;mCUY;SViB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}