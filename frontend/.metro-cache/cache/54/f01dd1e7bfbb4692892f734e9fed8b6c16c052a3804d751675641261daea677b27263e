{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":111},"end":{"line":2,"column":62,"index":173}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _react = require(_dependencyMap[1], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNative = require(_dependencyMap[2], \"react-native\");\n  var _engineCombatEngine = require(_dependencyMap[3], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[4], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[5], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[6], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[7], \"react/jsx-dev-runtime\");\n  var CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  var useCombat = () => {\n    _s();\n    var context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  var enemyCounter = 0; // Global counter for unique enemy IDs\n\n  var CombatProvider = _ref => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    var children = _ref.children;\n    var game = (0, _GameContext.useGame)();\n    var _useZone = (0, _ZoneContext.useZone)(),\n      currentZone = _useZone.currentZone,\n      currentZoneLevel = _useZone.currentZoneLevel,\n      recordEnemyKill = _useZone.recordEnemyKill,\n      spawnZoneEnemy = _useZone.spawnZoneEnemy;\n\n    // Define initialCombatState before using it\n    var initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    var _useState = (0, _react.useState)(initialCombatState),\n      _useState2 = (0, _slicedToArray.default)(_useState, 2),\n      combatState = _useState2[0],\n      setCombatState = _useState2[1];\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        var effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    var _useState3 = (0, _react.useState)([]),\n      _useState4 = (0, _slicedToArray.default)(_useState3, 2),\n      projectiles = _useState4[0],\n      setProjectiles = _useState4[1];\n    var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray.default)(_useState5, 2),\n      lastExplosionTime = _useState6[0],\n      setLastExplosionTime = _useState6[1];\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - integrates with zone progression and awards XP/gold\n    var handleEnemyKill = (0, _react.useCallback)(enemy => {\n      console.log(`🔍 XP DEBUG: handleEnemyKill called for ${enemy.name} (ID: ${enemy.id})`);\n      console.log(`🗡️  MOBILE DEBUG - handleEnemyKill CALLED for enemy:`, enemy.id);\n\n      // Use zone-based XP system instead of base XP to avoid conflicts\n      var xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n      var dropMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n\n      // Use zone XP if available, otherwise fallback to ultra boosted base XP\n      var baseXpReward = enemy.zoneXP || 5000; // Use zone XP system, fallback to 5000 for non-zone enemies\n      var xpReward = Math.floor(baseXpReward * xpMultiplier);\n      var goldReward = Math.floor(10000 * dropMultiplier); // 1000X GOLD BOOST (was 10, now 10000) - matches XP scaling\n\n      console.log(`💰 MOBILE DEBUG - Awarding ${xpReward} XP and ${goldReward} gold for kill`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - XP Multiplier: ${xpMultiplier}, Drop Multiplier: ${dropMultiplier}`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - Base XP: ${baseXpReward}, Final XP: ${xpReward}`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - Full benefits:`, JSON.stringify(game.gameState.subscriptionBenefits));\n      console.log(`📱 MOBILE DEBUG - Platform: ${_reactNative.Platform.OS}, Time: ${Date.now()}`);\n\n      // MOBILE FIX: Defer ALL cross-context state updates to prevent render-phase violations\n      // Use setTimeout to break the synchronous chain and prevent React Native bridge overload\n      setTimeout(() => {\n        console.log(`🥷 MOBILE DEBUG - About to call updateNinja with rewards`);\n\n        // Award XP and gold using GameContext\n        game.updateNinja(prev => {\n          console.log(`📊 MOBILE DEBUG - XP before: ${prev.experience}, after: ${prev.experience + xpReward}`);\n          console.log(`💰 MOBILE DEBUG - Gold before: ${prev.gold}, after: ${prev.gold + goldReward}`);\n          return {\n            experience: prev.experience + xpReward,\n            gold: prev.gold + goldReward\n          };\n        });\n\n        // Convert CombatEnemy to CurrentEnemy format for zone progression\n        var zoneEnemy = {\n          id: enemy.id,\n          typeId: enemy.zoneTypeId || 'test_orc',\n          // Use zone type ID if available, fallback to test\n          name: enemy.name,\n          icon: '🧌',\n          // Default icon for test enemies\n          hp: 0,\n          // Dead enemy\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 20,\n          // Use zone XP if available, fallback to base reward\n          position: enemy.position\n        };\n        console.log(`🎯 ENEMY KILLED: ${zoneEnemy.name} (${zoneEnemy.typeId}) - Recording kill for selected zone`);\n        recordEnemyKill(zoneEnemy);\n      }, 0); // 0ms delay to defer to next event loop\n    }, [game.updateNinja, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    var handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      var enemiesToKill = []; // Track enemies to kill outside of setState\n\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        var newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        var newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        var effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          var enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          var effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            var newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                var healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            var MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            var SCREEN_WIDTH = 390;\n            var GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            var ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            var playerX = currentNinjaPosition.x;\n            var playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            var deltaX = playerX - enemy.position.x;\n            var deltaY = playerY - enemy.position.y;\n            var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            var ATTACK_RANGE = 50; // Enemy attack range\n            var ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  var isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    var baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    var attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    var playerDefense = newState.playerStats.defense;\n                    var finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    var newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal\n                      setTimeout(() => {\n                        // Set isAlive to false to trigger revival system\n                        game.updateGameState({\n                          isAlive: false\n                        });\n                      }, 100);\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                var normalizedX = deltaX / distance;\n                var normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                var randomFactor = 0.2; // 20% randomness\n                var finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                var finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                var newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                var newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          var cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            var CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              var target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                var cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (var i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        var dyingEnemies = newState.enemies.filter(enemy => enemy.isDying && enemy.health <= 0);\n        var deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0 && !enemy.isDying);\n\n        // Award XP for dying enemies immediately (they're in death animation)\n        var dyingEnemiesForXP = dyingEnemies.map(enemy => ({\n          ...enemy\n        })); // Copy for XP processing\n        enemiesToKill = [...deadEnemies, ...dyingEnemiesForXP]; // Store for processing outside setState\n\n        // Remove enemies that have finished their death animation (750ms)\n        var currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            var animationDuration = 750; // 750ms death fade\n            var isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (deadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${deadEnemies.length} dead enemies:`, deadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        var lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        var beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        var afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        var MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        var MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        var now = Date.now();\n        var hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // HANDLE ENEMY KILLS OUTSIDE OF setCombatState TO AVOID CROSS-COMPONENT ISSUES\n      console.log(`⚔️ MOBILE DEBUG - Processing ${enemiesToKill.length} enemy kills outside setState`);\n      enemiesToKill.forEach((enemy, index) => {\n        console.log(`💀 MOBILE DEBUG - Processing kill ${index + 1}/${enemiesToKill.length} for enemy ${enemy.id}`);\n        handleEnemyKill(enemy);\n      });\n    }, [handleEnemyKill]); // Only depend on handleEnemyKill, not combatEngine\n\n    // Find closest enemy to ninja - exposed for UI use\n    var findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ninjaX = SCREEN_WIDTH / 2;\n      var ninjaY = GAME_AREA_HEIGHT / 2;\n      var closestEnemy = enemies[0];\n      var closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        var distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    var findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    var _useState7 = (0, _react.useState)({\n        x: 0,\n        y: 0\n      }),\n      _useState8 = (0, _slicedToArray.default)(_useState7, 2),\n      currentNinjaPosition = _useState8[0],\n      setCurrentNinjaPosition = _useState8[1];\n    var _useState9 = (0, _react.useState)(false),\n      _useState0 = (0, _slicedToArray.default)(_useState9, 2),\n      isManualControlActive = _useState0[0],\n      setIsManualControlActive = _useState0[1];\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    var updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    var setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // Handle projectile hit - deals damage to target enemy\n    var handleProjectileHit = projectile => {\n      console.log(`💥 Projectile ${projectile.id} hit enemy ${projectile.targetEnemyId} for ${projectile.damage} damage`);\n      setCombatState(prev => {\n        var newState = {\n          ...prev\n        };\n\n        // Find the target enemy and deal damage\n        var enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n        if (enemyIndex >= 0) {\n          newState.enemies = [...newState.enemies];\n          newState.enemies[enemyIndex] = {\n            ...newState.enemies[enemyIndex],\n            health: newState.enemies[enemyIndex].health - projectile.damage,\n            lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n          };\n          console.log(`🎯 Enemy ${projectile.targetEnemyId} health: ${newState.enemies[enemyIndex].health}/${newState.enemies[enemyIndex].maxHealth}`);\n        }\n        return newState;\n      });\n\n      // Remove projectile after hit\n      setProjectiles(prev => prev.filter(p => p.id !== projectile.id));\n    };\n\n    // Cast ability and apply effects\n    var castAbility = (state, slotIndex) => {\n      var deck = state.abilityManager.getDeck();\n      var ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      var damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      var isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        var ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        var ninjaY = currentNinjaPosition.y + 20;\n        var aoeRadius = ability.stats.aoeRadius;\n        var enemiesInRange = state.enemies.filter(enemy => {\n          var enemyX = enemy.position.x + 17.5; // Center of enemy\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        var target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        var targets = isAOE ? state.enemies.filter(enemy => {\n          var ninjaX = currentNinjaPosition.x + 20;\n          var ninjaY = currentNinjaPosition.y + 20;\n          var enemyX = enemy.position.x + 17.5;\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        var cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        var cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    var createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      var ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      var ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      var ENEMY_SIZE = 35;\n      var projectileId = `proj_${Date.now()}_${Math.random()}`;\n      var projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // Schedule projectile hit\n      setTimeout(() => {\n        handleProjectileHit(projectile);\n      }, 500);\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    var spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      var zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      var combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    var spawnBasicTestEnemy = state => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140;\n      var ENEMY_SIZE = 35;\n      var x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    var startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat\n    var stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    var equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    var getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    var getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    var upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    var clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // Trigger level-up explosion that actually damages enemies\n    var triggerLevelUpExplosion = () => {\n      console.log('💥 LEVEL UP EXPLOSION TRIGGERED IN COMBAT CONTEXT!');\n      var explosionTime = Date.now();\n      setLastExplosionTime(explosionTime);\n      setCombatState(prev => {\n        // Calculate rewards for all current enemies\n        var enemyCount = prev.enemies.length;\n        var explosionXP = enemyCount * 5000; // SAME AS REGULAR KILL XP (5000 XP per enemy in explosion)\n        var explosionGold = enemyCount * 500; // 100X GOLD BOOST (was 5, now 500)\n\n        console.log(`💥 Explosion killing ${enemyCount} enemies, awarding ${explosionXP} XP and ${explosionGold} gold`);\n\n        // Award XP using updateNinja if there are enemies to kill - MOBILE FIX: defer to prevent render-phase violation\n        if (explosionXP > 0) {\n          setTimeout(() => {\n            game.updateNinja(ninja => ({\n              experience: ninja.experience + explosionXP,\n              gold: ninja.gold + explosionGold\n            }));\n          }, 0); // Defer to next event loop to prevent cross-context update during render\n        }\n\n        // Actually damage all enemies to 0 health instead of just clearing them\n        // This will trigger the normal kill processing in the next tick\n        var damagedEnemies = prev.enemies.map(enemy => ({\n          ...enemy,\n          health: 0,\n          // Set health to 0 to trigger normal kill processing\n          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n        }));\n        return {\n          ...prev,\n          enemies: damagedEnemies\n        };\n      });\n    };\n\n    // Enhanced enemy spawning function\n    var spawnEnemy = position => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      var x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    var spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    var clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    var useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      var isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      var currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      var success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          var newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      var processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            var currentTime = Date.now();\n            var startTime = projectile.startTime || currentTime;\n            var elapsedTime = currentTime - startTime;\n            var progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              projectile.hasHit = true;\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                var newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  var impactX = projectile.targetX;\n                  var impactY = projectile.targetY;\n                  var enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    var enemyX = enemy.position.x + 17.5; // Center of enemy\n                    var enemyY = enemy.position.y + 17.5;\n                    var distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      var newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    setTimeout(() => {\n                      enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                    }, 0);\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  var enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    var enemy = newState.enemies[enemyIndex];\n                    var newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // Mark enemies as dying for death animation + batch XP processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 DEATH ANIMATION: ${enemy.name} killed by ${projectile.abilityName}! Starting death fade...`);\n\n                      // Start death animation - keep enemy visible but mark as dying\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n            }\n\n            // Clean up completed projectiles\n            if (progress >= 1.5) {\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      var impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, [handleEnemyKill]);\n\n    // Manual save ability data function - called when abilities are modified\n    var saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        var abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    var contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      triggerLevelUpExplosion,\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1231,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"Ef87VgEx3VhPv5l6GrayJ3/PL7k=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1175,"map":[[15,2,95,0,"Object"],[15,8,95,0],[15,9,95,0,"defineProperty"],[15,23,95,0],[15,24,95,0,"exports"],[15,31,95,0],[16,4,95,0,"enumerable"],[16,14,95,0],[17,4,95,0,"get"],[17,7,95,0],[17,18,95,0,"get"],[17,19,95,0],[18,6,95,0],[18,13,95,0,"useCombat"],[18,22,95,0],[19,4,95,0],[20,2,95,0],[21,2,105,0,"Object"],[21,8,105,0],[21,9,105,0,"defineProperty"],[21,23,105,0],[21,24,105,0,"exports"],[21,31,105,0],[22,4,105,0,"enumerable"],[22,14,105,0],[23,4,105,0,"get"],[23,7,105,0],[23,18,105,0,"get"],[23,19,105,0],[24,6,105,0],[24,13,105,0,"CombatProvider"],[24,27,105,0],[25,4,105,0],[26,2,105,0],[27,2,1235,2],[27,6,1235,2,"_babelRuntimeHelpersSlicedToArray"],[27,39,1235,2],[27,42,1235,2,"require"],[27,49,1235,2],[27,50,1235,2,"_dependencyMap"],[27,64,1235,2],[28,2,1235,2],[28,6,1235,2,"_slicedToArray"],[28,20,1235,2],[28,23,1235,2,"_interopDefault"],[28,38,1235,2],[28,39,1235,2,"_babelRuntimeHelpersSlicedToArray"],[28,72,1235,2],[29,2,1,0],[29,6,1,0,"_react"],[29,12,1,0],[29,15,1,0,"require"],[29,22,1,0],[29,23,1,0,"_dependencyMap"],[29,37,1,0],[30,2,1,0],[30,6,1,0,"React"],[30,11,1,0],[30,14,1,0,"_interopDefault"],[30,29,1,0],[30,30,1,0,"_react"],[30,36,1,0],[31,2,2,0],[31,6,2,0,"_reactNative"],[31,18,2,0],[31,21,2,0,"require"],[31,28,2,0],[31,29,2,0,"_dependencyMap"],[31,43,2,0],[32,2,3,0],[32,6,3,0,"_engineCombatEngine"],[32,25,3,0],[32,28,3,0,"require"],[32,35,3,0],[32,36,3,0,"_dependencyMap"],[32,50,3,0],[33,2,4,0],[33,6,4,0,"_typesAbilityTypes"],[33,24,4,0],[33,27,4,0,"require"],[33,34,4,0],[33,35,4,0,"_dependencyMap"],[33,49,4,0],[34,2,5,0],[34,6,5,0,"_GameContext"],[34,18,5,0],[34,21,5,0,"require"],[34,28,5,0],[34,29,5,0,"_dependencyMap"],[34,43,5,0],[35,2,6,0],[35,6,6,0,"_ZoneContext"],[35,18,6,0],[35,21,6,0,"require"],[35,28,6,0],[35,29,6,0,"_dependencyMap"],[35,43,6,0],[36,2,6,40],[36,6,6,40,"_reactJsxDevRuntime"],[36,25,6,40],[36,28,6,40,"require"],[36,35,6,40],[36,36,6,40,"_dependencyMap"],[36,50,6,40],[37,2,93,0],[37,6,93,6,"CombatContext"],[37,19,93,19],[37,35,93,22],[37,39,93,22,"createContext"],[37,45,93,35],[37,46,93,35,"createContext"],[37,59,93,35],[37,61,93,67,"undefined"],[37,70,93,76],[37,71,93,77],[38,2,95,7],[38,6,95,13,"useCombat"],[38,15,95,22],[38,18,95,25,"useCombat"],[38,19,95,25],[38,24,95,50],[39,4,95,50,"_s"],[39,6,95,50],[40,4,96,2],[40,8,96,8,"context"],[40,15,96,15],[40,18,96,18],[40,22,96,18,"useContext"],[40,28,96,28],[40,29,96,28,"useContext"],[40,39,96,28],[40,41,96,29,"CombatContext"],[40,54,96,42],[40,55,96,43],[41,4,97,2],[41,8,97,6],[41,9,97,7,"context"],[41,16,97,14],[41,18,97,16],[42,6,98,4],[42,12,98,10],[42,16,98,14,"Error"],[42,21,98,19],[42,22,98,20],[42,70,98,68],[42,71,98,69],[43,4,99,2],[44,4,100,2],[44,11,100,9,"context"],[44,18,100,16],[45,2,101,0],[45,3,101,1],[46,2,101,2,"_s"],[46,4,101,2],[46,5,95,13,"useCombat"],[46,14,95,22],[47,2,103,0],[47,6,103,4,"enemyCounter"],[47,18,103,16],[47,21,103,19],[47,22,103,20],[47,23,103,21],[47,24,103,22],[49,2,105,7],[49,6,105,13,"CombatProvider"],[49,20,105,27],[49,23,105,30,"_ref"],[49,27,105,30],[49,31,105,73],[50,4,105,73,"_s4"],[50,7,105,73],[51,4,105,73],[51,8,105,73,"_s3"],[51,11,105,73],[51,14,105,73,"$RefreshSig$"],[51,26,105,73],[52,4,105,73],[52,8,105,33,"children"],[52,16,105,41],[52,19,105,41,"_ref"],[52,23,105,41],[52,24,105,33,"children"],[52,32,105,41],[53,4,106,2],[53,8,106,8,"game"],[53,12,106,12],[53,15,106,15],[53,19,106,15,"useGame"],[53,31,106,22],[53,32,106,22,"useGame"],[53,39,106,22],[53,41,106,23],[53,42,106,24],[54,4,107,2],[54,8,107,2,"_useZone"],[54,16,107,2],[54,19,107,77],[54,23,107,77,"useZone"],[54,35,107,84],[54,36,107,84,"useZone"],[54,43,107,84],[54,45,107,85],[54,46,107,86],[55,6,107,10,"currentZone"],[55,17,107,21],[55,20,107,21,"_useZone"],[55,28,107,21],[55,29,107,10,"currentZone"],[55,40,107,21],[56,6,107,23,"currentZoneLevel"],[56,22,107,39],[56,25,107,39,"_useZone"],[56,33,107,39],[56,34,107,23,"currentZoneLevel"],[56,50,107,39],[57,6,107,41,"recordEnemyKill"],[57,21,107,56],[57,24,107,56,"_useZone"],[57,32,107,56],[57,33,107,41,"recordEnemyKill"],[57,48,107,56],[58,6,107,58,"spawnZoneEnemy"],[58,20,107,72],[58,23,107,72,"_useZone"],[58,31,107,72],[58,32,107,58,"spawnZoneEnemy"],[58,46,107,72],[60,4,109,2],[61,4,110,2],[61,8,110,8,"initialCombatState"],[61,26,110,39],[61,29,110,42],[62,6,111,4,"isInCombat"],[62,16,111,14],[62,18,111,16],[62,23,111,21],[63,6,112,4,"currentTick"],[63,17,112,15],[63,19,112,17],[63,20,112,18],[64,6,113,4,"enemies"],[64,13,113,11],[64,15,113,13],[64,17,113,15],[65,6,114,4,"abilityManager"],[65,20,114,18],[65,22,114,20],[65,26,114,24,"AbilityManager"],[65,44,114,38],[65,45,114,38,"AbilityManager"],[65,59,114,38],[65,60,114,39],[65,61,114,40],[66,6,115,4,"statusEffects"],[66,19,115,17],[66,21,115,19],[66,25,115,23,"StatusEffectManager"],[66,44,115,42],[66,45,115,42,"StatusEffectManager"],[66,64,115,42],[66,65,115,43],[66,66,115,44],[67,6,116,4,"playerStats"],[67,17,116,15],[67,19,116,17],[68,8,117,6,"attack"],[68,14,117,12],[68,16,117,14],[68,18,117,16],[69,8,117,18],[70,8,118,6,"defense"],[70,15,118,13],[70,17,118,15],[70,18,118,16],[71,8,119,6,"health"],[71,14,119,12],[71,16,119,14],[71,19,119,17],[72,8,120,6,"maxHealth"],[72,17,120,15],[72,19,120,17],[72,22,120,20],[73,8,121,6,"critChance"],[73,18,121,16],[73,20,121,18],[73,21,121,19],[74,8,122,6,"critDamage"],[74,18,122,16],[74,20,122,18],[74,23,122,21],[75,8,123,6,"cooldownReduction"],[75,25,123,23],[75,27,123,25],[76,6,124,4],[77,4,125,2],[77,5,125,3],[78,4,127,2],[78,8,127,2,"_useState"],[78,17,127,2],[78,20,127,40],[78,24,127,40,"useState"],[78,30,127,48],[78,31,127,48,"useState"],[78,39,127,48],[78,41,127,62,"initialCombatState"],[78,59,127,80],[78,60,127,81],[79,6,127,81,"_useState2"],[79,16,127,81],[79,23,127,81,"_slicedToArray"],[79,37,127,81],[79,38,127,81,"default"],[79,45,127,81],[79,47,127,81,"_useState"],[79,56,127,81],[80,6,127,9,"combatState"],[80,17,127,20],[80,20,127,20,"_useState2"],[80,30,127,20],[81,6,127,22,"setCombatState"],[81,20,127,36],[81,23,127,36,"_useState2"],[81,33,127,36],[83,4,129,2],[84,4,130,2],[84,8,130,2,"useEffect"],[84,14,130,11],[84,15,130,11,"useEffect"],[84,24,130,11],[84,26,130,12],[84,32,130,18],[85,6,131,4],[85,10,131,8,"game"],[85,14,131,12],[85,15,131,13,"gameState"],[85,24,131,22],[85,25,131,23,"abilityData"],[85,36,131,34],[85,40,131,38,"combatState"],[85,51,131,49],[85,52,131,50,"abilityManager"],[85,66,131,64],[85,68,131,66],[86,8,132,6,"console"],[86,15,132,13],[86,16,132,14,"log"],[86,19,132,17],[86,20,132,18],[86,68,132,66],[86,70,132,68,"game"],[86,74,132,72],[86,75,132,73,"gameState"],[86,84,132,82],[86,85,132,83,"abilityData"],[86,96,132,94],[86,97,132,95],[87,8,133,6,"combatState"],[87,19,133,17],[87,20,133,18,"abilityManager"],[87,34,133,32],[87,35,133,33,"restoreFromSaveData"],[87,54,133,52],[87,55,133,53,"game"],[87,59,133,57],[87,60,133,58,"gameState"],[87,69,133,67],[87,70,133,68,"abilityData"],[87,81,133,79],[87,82,133,80],[89,8,135,6],[90,8,136,6,"setCombatState"],[90,22,136,20],[90,23,136,21,"prev"],[90,27,136,25],[90,32,136,30],[91,10,136,32],[91,13,136,35,"prev"],[92,8,136,40],[92,9,136,41],[92,10,136,42],[92,11,136,43],[93,6,137,4],[94,4,138,2],[94,5,138,3],[94,7,138,5],[94,8,138,6,"game"],[94,12,138,10],[94,13,138,11,"gameState"],[94,22,138,20],[94,23,138,21,"abilityData"],[94,34,138,32],[94,36,138,34,"combatState"],[94,47,138,45],[94,48,138,46,"abilityManager"],[94,62,138,60],[94,63,138,61],[94,64,138,62],[96,4,140,2],[97,4,141,2],[97,8,141,2,"useEffect"],[97,14,141,11],[97,15,141,11,"useEffect"],[97,24,141,11],[97,26,141,12],[97,32,141,18],[98,6,142,4],[98,10,142,8,"game"],[98,14,142,12],[98,15,142,13,"gameState"],[98,24,142,22],[98,25,142,23,"ninja"],[98,30,142,28],[98,32,142,30],[99,8,143,6],[99,12,143,12,"effectiveStats"],[99,26,143,26],[99,29,143,29,"game"],[99,33,143,33],[99,34,143,34,"getEffectiveStats"],[99,51,143,51],[99,52,143,52],[99,53,143,53],[100,8,145,6,"setCombatState"],[100,22,145,20],[100,23,145,21,"prev"],[100,27,145,25],[100,31,145,29],[101,10,146,8],[102,10,147,8],[102,14,147,12,"prev"],[102,18,147,16],[102,19,147,17,"playerStats"],[102,30,147,28],[102,31,147,29,"maxHealth"],[102,40,147,38],[102,45,147,43],[102,48,147,46],[102,52,147,50,"prev"],[102,56,147,54],[102,57,147,55,"playerStats"],[102,68,147,66],[102,69,147,67,"attack"],[102,75,147,73],[102,80,147,78],[102,82,147,80],[102,84,147,82],[103,12,148,10,"console"],[103,19,148,17],[103,20,148,18,"log"],[103,23,148,21],[103,24,148,22],[103,60,148,58,"effectiveStats"],[103,74,148,72],[103,75,148,73,"health"],[103,81,148,79],[103,93,148,91,"effectiveStats"],[103,107,148,105],[103,108,148,106,"attack"],[103,114,148,112],[103,127,148,125,"effectiveStats"],[103,141,148,139],[103,142,148,140,"defense"],[103,149,148,147],[103,151,148,149],[103,152,148,150],[104,12,150,10],[104,19,150,17],[105,14,151,12],[105,17,151,15,"prev"],[105,21,151,19],[106,14,152,12,"playerStats"],[106,25,152,23],[106,27,152,25],[107,16,153,14,"attack"],[107,22,153,20],[107,24,153,22,"effectiveStats"],[107,38,153,36],[107,39,153,37,"attack"],[107,45,153,43],[108,16,154,14,"defense"],[108,23,154,21],[108,25,154,23,"effectiveStats"],[108,39,154,37],[108,40,154,38,"defense"],[108,47,154,45],[109,16,155,14,"health"],[109,22,155,20],[109,24,155,22,"effectiveStats"],[109,38,155,36],[109,39,155,37,"health"],[109,45,155,43],[110,16,155,45],[111,16,156,14,"maxHealth"],[111,25,156,23],[111,27,156,25,"effectiveStats"],[111,41,156,39],[111,42,156,40,"health"],[111,48,156,46],[112,16,157,14,"critChance"],[112,26,157,24],[112,28,157,26,"effectiveStats"],[112,42,157,40],[112,43,157,41,"critChance"],[112,53,157,51],[112,57,157,55],[112,58,157,56],[113,16,158,14,"critDamage"],[113,26,158,24],[113,28,158,26,"effectiveStats"],[113,42,158,40],[113,43,158,41,"critDamage"],[113,53,158,51],[113,57,158,55],[113,60,158,58],[114,16,159,14,"cooldownReduction"],[114,33,159,31],[114,35,159,33,"effectiveStats"],[114,49,159,47],[114,50,159,48,"cooldownReduction"],[114,67,159,65],[114,71,159,69],[115,14,160,12],[116,12,161,10],[116,13,161,11],[117,10,162,8],[118,10,163,8],[118,17,163,15,"prev"],[118,21,163,19],[119,8,164,6],[119,9,164,7],[119,10,164,8],[120,6,165,4],[121,4,166,2],[121,5,166,3],[121,7,166,5],[121,8,166,6,"game"],[121,12,166,10],[121,13,166,11,"gameState"],[121,22,166,20],[121,23,166,21,"ninja"],[121,28,166,26],[121,29,166,27],[121,30,166,28],[122,4,168,2],[122,8,168,2,"_useState3"],[122,18,168,2],[122,21,168,40],[122,25,168,40,"useState"],[122,31,168,48],[122,32,168,48,"useState"],[122,40,168,48],[122,42,168,69],[122,44,168,71],[122,45,168,72],[123,6,168,72,"_useState4"],[123,16,168,72],[123,23,168,72,"_slicedToArray"],[123,37,168,72],[123,38,168,72,"default"],[123,45,168,72],[123,47,168,72,"_useState3"],[123,57,168,72],[124,6,168,9,"projectiles"],[124,17,168,20],[124,20,168,20,"_useState4"],[124,30,168,20],[125,6,168,22,"setProjectiles"],[125,20,168,36],[125,23,168,36,"_useState4"],[125,33,168,36],[126,4,169,2],[126,8,169,2,"_useState5"],[126,18,169,2],[126,21,169,52],[126,25,169,52,"useState"],[126,31,169,60],[126,32,169,60,"useState"],[126,40,169,60],[126,42,169,69],[126,43,169,70],[126,44,169,71],[127,6,169,71,"_useState6"],[127,16,169,71],[127,23,169,71,"_slicedToArray"],[127,37,169,71],[127,38,169,71,"default"],[127,45,169,71],[127,47,169,71,"_useState5"],[127,57,169,71],[128,6,169,9,"lastExplosionTime"],[128,23,169,26],[128,26,169,26,"_useState6"],[128,36,169,26],[129,6,169,28,"setLastExplosionTime"],[129,26,169,48],[129,29,169,48,"_useState6"],[129,39,169,48],[130,4,170,2],[131,4,171,2],[133,4,173,2],[134,4,174,2],[134,8,174,8,"handleEnemyKill"],[134,23,174,23],[134,26,174,26],[134,30,174,26,"useCallback"],[134,36,174,37],[134,37,174,37,"useCallback"],[134,48,174,37],[134,50,174,39,"enemy"],[134,55,174,57],[134,59,174,62],[135,6,175,4,"console"],[135,13,175,11],[135,14,175,12,"log"],[135,17,175,15],[135,18,175,16],[135,61,175,59,"enemy"],[135,66,175,64],[135,67,175,65,"name"],[135,71,175,69],[135,80,175,78,"enemy"],[135,85,175,83],[135,86,175,84,"id"],[135,88,175,86],[135,91,175,89],[135,92,175,90],[136,6,176,4,"console"],[136,13,176,11],[136,14,176,12,"log"],[136,17,176,15],[136,18,176,16],[136,73,176,71],[136,75,176,73,"enemy"],[136,80,176,78],[136,81,176,79,"id"],[136,83,176,81],[136,84,176,82],[138,6,178,4],[139,6,179,4],[139,10,179,10,"xpMultiplier"],[139,22,179,22],[139,25,179,25,"game"],[139,29,179,29],[139,30,179,30,"gameState"],[139,39,179,39],[139,40,179,40,"subscriptionBenefits"],[139,60,179,60],[139,62,179,62,"xp_multiplier"],[139,75,179,75],[139,79,179,79],[139,82,179,82],[140,6,180,4],[140,10,180,10,"dropMultiplier"],[140,24,180,24],[140,27,180,27,"game"],[140,31,180,31],[140,32,180,32,"gameState"],[140,41,180,41],[140,42,180,42,"subscriptionBenefits"],[140,62,180,62],[140,64,180,64,"drop_multiplier"],[140,79,180,79],[140,83,180,83],[140,86,180,86],[142,6,182,4],[143,6,183,4],[143,10,183,10,"baseXpReward"],[143,22,183,22],[143,25,183,25,"enemy"],[143,30,183,30],[143,31,183,31,"zoneXP"],[143,37,183,37],[143,41,183,41],[143,45,183,45],[143,46,183,46],[143,47,183,47],[144,6,184,4],[144,10,184,10,"xpReward"],[144,18,184,18],[144,21,184,21,"Math"],[144,25,184,25],[144,26,184,26,"floor"],[144,31,184,31],[144,32,184,32,"baseXpReward"],[144,44,184,44],[144,47,184,47,"xpMultiplier"],[144,59,184,59],[144,60,184,60],[145,6,185,4],[145,10,185,10,"goldReward"],[145,20,185,20],[145,23,185,23,"Math"],[145,27,185,27],[145,28,185,28,"floor"],[145,33,185,33],[145,34,185,34],[145,39,185,39],[145,42,185,42,"dropMultiplier"],[145,56,185,56],[145,57,185,57],[145,58,185,58],[145,59,185,59],[147,6,187,4,"console"],[147,13,187,11],[147,14,187,12,"log"],[147,17,187,15],[147,18,187,16],[147,48,187,46,"xpReward"],[147,56,187,54],[147,67,187,65,"goldReward"],[147,77,187,75],[147,93,187,91],[147,94,187,92],[148,6,188,4,"console"],[148,13,188,11],[148,14,188,12,"log"],[148,17,188,15],[148,18,188,16],[148,60,188,58,"xpMultiplier"],[148,72,188,70],[148,94,188,92,"dropMultiplier"],[148,108,188,106],[148,110,188,108],[148,111,188,109],[149,6,189,4,"console"],[149,13,189,11],[149,14,189,12,"log"],[149,17,189,15],[149,18,189,16],[149,54,189,52,"baseXpReward"],[149,66,189,64],[149,81,189,79,"xpReward"],[149,89,189,87],[149,91,189,89],[149,92,189,90],[150,6,190,4,"console"],[150,13,190,11],[150,14,190,12,"log"],[150,17,190,15],[150,18,190,16],[150,58,190,56],[150,60,190,58,"JSON"],[150,64,190,62],[150,65,190,63,"stringify"],[150,74,190,72],[150,75,190,73,"game"],[150,79,190,77],[150,80,190,78,"gameState"],[150,89,190,87],[150,90,190,88,"subscriptionBenefits"],[150,110,190,108],[150,111,190,109],[150,112,190,110],[151,6,191,4,"console"],[151,13,191,11],[151,14,191,12,"log"],[151,17,191,15],[151,18,191,16],[151,49,191,47,"Platform"],[151,61,191,55],[151,62,191,55,"Platform"],[151,70,191,55],[151,71,191,56,"OS"],[151,73,191,58],[151,84,191,69,"Date"],[151,88,191,73],[151,89,191,74,"now"],[151,92,191,77],[151,93,191,78],[151,94,191,79],[151,96,191,81],[151,97,191,82],[153,6,193,4],[154,6,194,4],[155,6,195,4,"setTimeout"],[155,16,195,14],[155,17,195,15],[155,23,195,21],[156,8,196,6,"console"],[156,15,196,13],[156,16,196,14,"log"],[156,19,196,17],[156,20,196,18],[156,78,196,76],[156,79,196,77],[158,8,198,6],[159,8,199,6,"game"],[159,12,199,10],[159,13,199,11,"updateNinja"],[159,24,199,22],[159,25,199,24,"prev"],[159,29,199,28],[159,33,199,33],[160,10,200,8,"console"],[160,17,200,15],[160,18,200,16,"log"],[160,21,200,19],[160,22,200,20],[160,54,200,52,"prev"],[160,58,200,56],[160,59,200,57,"experience"],[160,69,200,67],[160,81,200,79,"prev"],[160,85,200,83],[160,86,200,84,"experience"],[160,96,200,94],[160,99,200,97,"xpReward"],[160,107,200,105],[160,109,200,107],[160,110,200,108],[161,10,201,8,"console"],[161,17,201,15],[161,18,201,16,"log"],[161,21,201,19],[161,22,201,20],[161,56,201,54,"prev"],[161,60,201,58],[161,61,201,59,"gold"],[161,65,201,63],[161,77,201,75,"prev"],[161,81,201,79],[161,82,201,80,"gold"],[161,86,201,84],[161,89,201,87,"goldReward"],[161,99,201,97],[161,101,201,99],[161,102,201,100],[162,10,202,8],[162,17,202,15],[163,12,203,10,"experience"],[163,22,203,20],[163,24,203,22,"prev"],[163,28,203,26],[163,29,203,27,"experience"],[163,39,203,37],[163,42,203,40,"xpReward"],[163,50,203,48],[164,12,204,10,"gold"],[164,16,204,14],[164,18,204,16,"prev"],[164,22,204,20],[164,23,204,21,"gold"],[164,27,204,25],[164,30,204,28,"goldReward"],[165,10,205,8],[165,11,205,9],[166,8,206,6],[166,9,206,7],[166,10,206,8],[168,8,208,6],[169,8,209,6],[169,12,209,12,"zoneEnemy"],[169,21,209,21],[169,24,209,24],[170,10,210,8,"id"],[170,12,210,10],[170,14,210,12,"enemy"],[170,19,210,17],[170,20,210,18,"id"],[170,22,210,20],[171,10,211,8,"typeId"],[171,16,211,14],[171,18,211,16,"enemy"],[171,23,211,21],[171,24,211,22,"zoneTypeId"],[171,34,211,32],[171,38,211,36],[171,48,211,46],[172,10,211,48],[173,10,212,8,"name"],[173,14,212,12],[173,16,212,14,"enemy"],[173,21,212,19],[173,22,212,20,"name"],[173,26,212,24],[174,10,213,8,"icon"],[174,14,213,12],[174,16,213,14],[174,20,213,18],[175,10,213,20],[176,10,214,8,"hp"],[176,12,214,10],[176,14,214,12],[176,15,214,13],[177,10,214,15],[178,10,215,8,"maxHP"],[178,15,215,13],[178,17,215,15,"enemy"],[178,22,215,20],[178,23,215,21,"maxHealth"],[178,32,215,30],[179,10,216,8,"attack"],[179,16,216,14],[179,18,216,16,"enemy"],[179,23,216,21],[179,24,216,22,"stats"],[179,29,216,27],[179,30,216,28,"attack"],[179,36,216,34],[180,10,217,8,"xp"],[180,12,217,10],[180,14,217,12,"enemy"],[180,19,217,17],[180,20,217,18,"zoneXP"],[180,26,217,24],[180,30,217,28],[180,32,217,30],[181,10,217,32],[182,10,218,8,"position"],[182,18,218,16],[182,20,218,18,"enemy"],[182,25,218,23],[182,26,218,24,"position"],[183,8,219,6],[183,9,219,7],[184,8,221,6,"console"],[184,15,221,13],[184,16,221,14,"log"],[184,19,221,17],[184,20,221,18],[184,40,221,38,"zoneEnemy"],[184,49,221,47],[184,50,221,48,"name"],[184,54,221,52],[184,59,221,57,"zoneEnemy"],[184,68,221,66],[184,69,221,67,"typeId"],[184,75,221,73],[184,113,221,111],[184,114,221,112],[185,8,222,6,"recordEnemyKill"],[185,23,222,21],[185,24,222,22,"zoneEnemy"],[185,33,222,31],[185,34,222,32],[186,6,223,4],[186,7,223,5],[186,9,223,7],[186,10,223,8],[186,11,223,9],[186,12,223,10],[186,13,223,11],[187,4,224,2],[187,5,224,3],[187,7,224,5],[187,8,224,6,"game"],[187,12,224,10],[187,13,224,11,"updateNinja"],[187,24,224,22],[187,26,224,24,"recordEnemyKill"],[187,41,224,39],[187,42,224,40],[187,43,224,41],[189,4,226,2],[190,4,227,2],[190,8,227,8,"handleCombatTick"],[190,24,227,24],[190,27,227,27,"React"],[190,32,227,32],[190,33,227,32,"default"],[190,40,227,32],[190,41,227,33,"useCallback"],[190,52,227,44],[190,53,227,45],[190,59,227,51],[191,6,227,51],[191,10,227,51,"_s2"],[191,13,227,51],[191,16,227,51,"$RefreshSig$"],[191,28,227,51],[192,6,228,4,"console"],[192,13,228,11],[192,14,228,12,"log"],[192,17,228,15],[192,18,228,16],[192,87,228,85],[192,88,228,86],[193,6,229,4,"console"],[193,13,229,11],[193,14,229,12,"log"],[193,17,229,15],[193,18,229,16],[193,65,229,63,"isManualControlActive"],[193,86,229,84],[193,99,229,97,"game"],[193,103,229,101],[193,104,229,102,"gameState"],[193,113,229,111],[193,114,229,112,"isAlive"],[193,121,229,119],[193,123,229,121],[193,124,229,122],[194,6,231,4],[194,10,231,8,"enemiesToKill"],[194,23,231,36],[194,26,231,39],[194,28,231,41],[194,29,231,42],[194,30,231,43],[196,6,233,4,"_s2"],[196,9,233,4],[196,10,233,4,"setCombatState"],[196,24,233,18],[196,25,233,18,"_s2"],[196,28,233,18],[196,29,233,19,"prev"],[196,33,233,23],[196,37,233,27],[197,8,233,27,"_s2"],[197,11,233,27],[198,8,234,6],[198,12,234,12,"newTick"],[198,19,234,19],[198,22,234,22,"combatEngine"],[198,41,234,34],[198,42,234,34,"combatEngine"],[198,54,234,34],[198,55,234,35,"getCurrentTick"],[198,69,234,49],[198,70,234,50],[198,71,234,51],[199,8,235,6],[199,12,235,12,"newState"],[199,20,235,20],[199,23,235,23],[200,10,235,25],[200,13,235,28,"prev"],[200,17,235,32],[201,10,235,34,"currentTick"],[201,21,235,45],[201,23,235,47,"newTick"],[202,8,235,55],[202,9,235,56],[203,8,237,6],[203,12,237,10],[203,13,237,11,"newState"],[203,21,237,19],[203,22,237,20,"isInCombat"],[203,32,237,30],[203,34,237,32],[203,41,237,39,"newState"],[203,49,237,47],[205,8,239,6],[206,8,240,6,"newState"],[206,16,240,14],[206,17,240,15,"abilityManager"],[206,31,240,29],[206,32,240,30,"updateCooldowns"],[206,47,240,45],[206,48,240,46,"newTick"],[206,55,240,53],[206,56,240,54],[208,8,242,6],[209,8,243,6],[209,12,243,12,"effectResults"],[209,25,243,25],[209,28,243,28,"newState"],[209,36,243,36],[209,37,243,37,"statusEffects"],[209,50,243,50],[209,51,243,51,"processTick"],[209,62,243,62],[209,63,243,63,"newTick"],[209,70,243,70],[209,71,243,71],[211,8,245,6],[212,8,246,6,"effectResults"],[212,21,246,19],[212,22,246,20,"forEach"],[212,29,246,27],[212,30,246,28],[212,31,246,29,"results"],[212,38,246,36],[212,40,246,38,"entityId"],[212,48,246,46],[212,53,246,51],[213,10,247,8],[213,14,247,14,"enemyIndex"],[213,24,247,24],[213,27,247,27,"newState"],[213,35,247,35],[213,36,247,36,"enemies"],[213,43,247,43],[213,44,247,44,"findIndex"],[213,53,247,53],[213,54,247,54,"e"],[213,55,247,55],[213,59,247,59,"e"],[213,60,247,60],[213,61,247,61,"id"],[213,63,247,63],[213,68,247,68,"entityId"],[213,76,247,76],[213,77,247,77],[214,10,248,8],[214,14,248,12,"enemyIndex"],[214,24,248,22],[214,28,248,26],[214,29,248,27],[214,31,248,29],[215,12,249,10,"results"],[215,19,249,17],[215,20,249,18,"forEach"],[215,27,249,25],[215,28,249,26,"result"],[215,34,249,32],[215,38,249,36],[216,14,250,12,"newState"],[216,22,250,20],[216,23,250,21,"enemies"],[216,30,250,28],[216,31,250,29,"enemyIndex"],[216,41,250,39],[216,42,250,40],[216,43,250,41,"health"],[216,49,250,47],[216,53,250,51,"result"],[216,59,250,57],[216,60,250,58,"damage"],[216,66,250,64],[217,14,251,12,"newState"],[217,22,251,20],[217,23,251,21,"enemies"],[217,30,251,28],[217,31,251,29,"enemyIndex"],[217,41,251,39],[217,42,251,40],[217,43,251,41,"lastDamaged"],[217,54,251,52],[217,57,251,55,"newTick"],[217,64,251,62],[218,12,252,10],[218,13,252,11],[218,14,252,12],[219,10,253,8],[220,8,254,6],[220,9,254,7],[220,10,254,8],[222,8,256,6],[223,8,257,6],[224,8,258,6],[224,12,258,10,"newState"],[224,20,258,18],[224,21,258,19,"playerStats"],[224,32,258,30],[224,36,258,34,"game"],[224,40,258,38],[224,41,258,39,"gameState"],[224,50,258,48],[224,51,258,49,"ninja"],[224,56,258,54],[224,58,258,56],[225,10,259,8],[225,14,259,14,"effectiveStats"],[225,28,259,28],[225,31,259,31,"game"],[225,35,259,35],[225,36,259,36,"getEffectiveStats"],[225,53,259,53],[225,54,259,54],[225,55,259,55],[227,10,261,8],[228,10,262,8],[228,14,262,12,"newState"],[228,22,262,20],[228,23,262,21,"playerStats"],[228,34,262,32],[228,35,262,33,"attack"],[228,41,262,39],[228,46,262,44,"effectiveStats"],[228,60,262,58],[228,61,262,59,"attack"],[228,67,262,65],[228,71,263,12,"newState"],[228,79,263,20],[228,80,263,21,"playerStats"],[228,91,263,32],[228,92,263,33,"defense"],[228,99,263,40],[228,104,263,45,"effectiveStats"],[228,118,263,59],[228,119,263,60,"defense"],[228,126,263,67],[228,130,264,12,"newState"],[228,138,264,20],[228,139,264,21,"playerStats"],[228,150,264,32],[228,151,264,33,"maxHealth"],[228,160,264,42],[228,165,264,47,"effectiveStats"],[228,179,264,61],[228,180,264,62,"maxHealth"],[228,189,264,71],[228,191,264,73],[229,12,266,10,"console"],[229,19,266,17],[229,20,266,18,"log"],[229,23,266,21],[229,24,266,22],[229,58,266,56,"newState"],[229,66,266,64],[229,67,266,65,"playerStats"],[229,78,266,76],[229,79,266,77,"attack"],[229,85,266,83],[229,91,266,89,"effectiveStats"],[229,105,266,103],[229,106,266,104,"attack"],[229,112,266,110],[229,125,266,123,"newState"],[229,133,266,131],[229,134,266,132,"playerStats"],[229,145,266,143],[229,146,266,144,"defense"],[229,153,266,151],[229,159,266,157,"effectiveStats"],[229,173,266,171],[229,174,266,172,"defense"],[229,181,266,179],[229,192,266,190,"newState"],[229,200,266,198],[229,201,266,199,"playerStats"],[229,212,266,210],[229,213,266,211,"maxHealth"],[229,222,266,220],[229,228,266,226,"effectiveStats"],[229,242,266,240],[229,243,266,241,"maxHealth"],[229,252,266,250],[229,254,266,252],[229,255,266,253],[231,12,268,10],[232,12,269,10],[232,16,269,14,"newHealth"],[232,25,269,23],[232,28,269,26,"newState"],[232,36,269,34],[232,37,269,35,"playerStats"],[232,48,269,46],[232,49,269,47,"health"],[232,55,269,53],[233,12,270,10],[233,16,270,14,"newState"],[233,24,270,22],[233,25,270,23,"playerStats"],[233,36,270,34],[233,37,270,35,"maxHealth"],[233,46,270,44],[233,51,270,49,"effectiveStats"],[233,65,270,63],[233,66,270,64,"maxHealth"],[233,75,270,73],[233,77,270,75],[234,14,271,12],[235,14,272,12],[235,18,272,16,"effectiveStats"],[235,32,272,30],[235,33,272,31,"maxHealth"],[235,42,272,40],[235,45,272,43,"newState"],[235,53,272,51],[235,54,272,52,"playerStats"],[235,65,272,63],[235,66,272,64,"maxHealth"],[235,75,272,73],[235,78,272,76],[235,81,272,79],[235,83,272,81],[236,16,273,14],[237,16,274,14],[237,20,274,20,"healthRatio"],[237,31,274,31],[237,34,274,34,"newState"],[237,42,274,42],[237,43,274,43,"playerStats"],[237,54,274,54],[237,55,274,55,"maxHealth"],[237,64,274,64],[237,67,274,67],[237,68,274,68],[237,71,275,16,"newState"],[237,79,275,24],[237,80,275,25,"playerStats"],[237,91,275,36],[237,92,275,37,"health"],[237,98,275,43],[237,101,275,46,"newState"],[237,109,275,54],[237,110,275,55,"playerStats"],[237,121,275,66],[237,122,275,67,"maxHealth"],[237,131,275,76],[237,134,275,79],[237,135,275,80],[238,16,276,14,"newHealth"],[238,25,276,23],[238,28,276,26,"Math"],[238,32,276,30],[238,33,276,31,"floor"],[238,38,276,36],[238,39,276,37,"effectiveStats"],[238,53,276,51],[238,54,276,52,"maxHealth"],[238,63,276,61],[238,66,276,64,"healthRatio"],[238,77,276,75],[238,78,276,76],[239,14,277,12],[239,15,277,13],[239,21,277,19],[239,25,277,23,"newState"],[239,33,277,31],[239,34,277,32,"playerStats"],[239,45,277,43],[239,46,277,44,"health"],[239,52,277,50],[239,55,277,53,"effectiveStats"],[239,69,277,67],[239,70,277,68,"maxHealth"],[239,79,277,77],[239,81,277,79],[240,16,278,14],[241,16,279,14,"newHealth"],[241,25,279,23],[241,28,279,26,"effectiveStats"],[241,42,279,40],[241,43,279,41,"maxHealth"],[241,52,279,50],[242,14,280,12],[243,14,281,12],[244,12,282,10],[245,12,284,10,"newState"],[245,20,284,18],[245,21,284,19,"playerStats"],[245,32,284,30],[245,35,284,33],[246,14,285,12],[246,17,285,15,"newState"],[246,25,285,23],[246,26,285,24,"playerStats"],[246,37,285,35],[247,14,286,12,"attack"],[247,20,286,18],[247,22,286,20,"effectiveStats"],[247,36,286,34],[247,37,286,35,"attack"],[247,43,286,41],[248,14,287,12,"defense"],[248,21,287,19],[248,23,287,21,"effectiveStats"],[248,37,287,35],[248,38,287,36,"defense"],[248,45,287,43],[249,14,288,12,"maxHealth"],[249,23,288,21],[249,25,288,23,"effectiveStats"],[249,39,288,37],[249,40,288,38,"maxHealth"],[249,49,288,47],[250,14,288,49],[251,14,289,12,"health"],[251,20,289,18],[251,22,289,20,"newHealth"],[251,31,289,29],[252,14,289,31],[253,14,290,12,"critChance"],[253,24,290,22],[253,26,290,24,"effectiveStats"],[253,40,290,38],[253,41,290,39,"critChance"],[253,51,290,49],[253,55,290,53,"newState"],[253,63,290,61],[253,64,290,62,"playerStats"],[253,75,290,73],[253,76,290,74,"critChance"],[253,86,290,84],[254,14,291,12,"critDamage"],[254,24,291,22],[254,26,291,24,"effectiveStats"],[254,40,291,38],[254,41,291,39,"critDamage"],[254,51,291,49],[254,55,291,53,"newState"],[254,63,291,61],[254,64,291,62,"playerStats"],[254,75,291,73],[254,76,291,74,"critDamage"],[254,86,291,84],[255,14,292,12,"cooldownReduction"],[255,31,292,29],[255,33,292,31,"effectiveStats"],[255,47,292,45],[255,48,292,46,"cooldownReduction"],[255,65,292,63],[255,69,292,67,"newState"],[255,77,292,75],[255,78,292,76,"playerStats"],[255,89,292,87],[255,90,292,88,"cooldownReduction"],[256,12,293,10],[256,13,293,11],[257,10,294,8],[259,10,296,8],[260,10,297,8],[260,14,297,12,"game"],[260,18,297,16],[260,19,297,17,"gameState"],[260,28,297,26],[260,29,297,27,"isAlive"],[260,36,297,34],[260,40,298,12,"game"],[260,44,298,16],[260,45,298,17,"gameState"],[260,54,298,26],[260,55,298,27,"ninja"],[260,60,298,32],[260,61,298,33,"health"],[260,67,298,39],[260,72,298,44,"effectiveStats"],[260,86,298,58],[260,87,298,59,"maxHealth"],[260,96,298,68],[260,100,299,12,"newState"],[260,108,299,20],[260,109,299,21,"playerStats"],[260,120,299,32],[260,121,299,33,"health"],[260,127,299,39],[260,130,299,42,"effectiveStats"],[260,144,299,56],[260,145,299,57,"maxHealth"],[260,154,299,66],[260,157,299,69],[260,160,299,72],[260,162,299,74],[261,12,300,10,"console"],[261,19,300,17],[261,20,300,18,"log"],[261,23,300,21],[261,24,300,22],[261,58,300,56,"newState"],[261,66,300,64],[261,67,300,65,"playerStats"],[261,78,300,76],[261,79,300,77,"health"],[261,85,300,83],[261,91,300,89,"game"],[261,95,300,93],[261,96,300,94,"gameState"],[261,105,300,103],[261,106,300,104,"ninja"],[261,111,300,109],[261,112,300,110,"health"],[261,118,300,116],[261,139,300,137],[261,140,300,138],[262,12,301,10,"newState"],[262,20,301,18],[262,21,301,19,"playerStats"],[262,32,301,30],[262,33,301,31,"health"],[262,39,301,37],[262,42,301,40,"game"],[262,46,301,44],[262,47,301,45,"gameState"],[262,56,301,54],[262,57,301,55,"ninja"],[262,62,301,60],[262,63,301,61,"health"],[262,69,301,67],[263,10,302,8],[264,8,303,6],[266,8,305,6],[267,8,306,6,"newState"],[267,16,306,14],[267,17,306,15,"enemies"],[267,24,306,22],[267,25,306,23,"forEach"],[267,32,306,30],[267,33,306,31,"enemy"],[267,38,306,36],[267,42,306,40],[268,10,307,8],[268,14,307,12],[268,15,307,13,"enemy"],[268,20,307,18],[268,21,307,19,"isBoss"],[268,27,307,25],[268,29,307,27],[269,12,307,29],[270,12,308,10],[271,12,309,10],[271,16,309,16,"MOVEMENT_SPEED"],[271,30,309,30],[271,33,309,33],[271,37,309,37],[271,38,309,38],[271,39,309,39],[272,12,310,10],[272,16,310,16,"SCREEN_WIDTH"],[272,28,310,28],[272,31,310,31],[272,34,310,34],[273,12,311,10],[273,16,311,16,"GAME_AREA_HEIGHT"],[273,32,311,32],[273,35,311,35],[273,38,311,38],[273,39,311,39],[273,40,311,40],[274,12,312,10],[274,16,312,16,"ENEMY_SIZE"],[274,26,312,26],[274,29,312,29],[274,31,312,31],[276,12,314,10],[277,12,315,10],[277,16,315,16,"playerX"],[277,23,315,23],[277,26,315,26,"currentNinjaPosition"],[277,46,315,46],[277,47,315,47,"x"],[277,48,315,48],[278,12,316,10],[278,16,316,16,"playerY"],[278,23,316,23],[278,26,316,26,"currentNinjaPosition"],[278,46,316,46],[278,47,316,47,"y"],[278,48,316,48],[280,12,318,10],[281,12,319,10],[281,16,319,16,"deltaX"],[281,22,319,22],[281,25,319,25,"playerX"],[281,32,319,32],[281,35,319,35,"enemy"],[281,40,319,40],[281,41,319,41,"position"],[281,49,319,49],[281,50,319,50,"x"],[281,51,319,51],[282,12,320,10],[282,16,320,16,"deltaY"],[282,22,320,22],[282,25,320,25,"playerY"],[282,32,320,32],[282,35,320,35,"enemy"],[282,40,320,40],[282,41,320,41,"position"],[282,49,320,49],[282,50,320,50,"y"],[282,51,320,51],[283,12,321,10],[283,16,321,16,"distance"],[283,24,321,24],[283,27,321,27,"Math"],[283,31,321,31],[283,32,321,32,"sqrt"],[283,36,321,36],[283,37,321,37,"deltaX"],[283,43,321,43],[283,46,321,46,"deltaX"],[283,52,321,52],[283,55,321,55,"deltaY"],[283,61,321,61],[283,64,321,64,"deltaY"],[283,70,321,70],[283,71,321,71],[285,12,323,10],[286,12,324,10],[286,16,324,16,"ATTACK_RANGE"],[286,28,324,28],[286,31,324,31],[286,33,324,33],[286,34,324,34],[286,35,324,35],[287,12,325,10],[287,16,325,16,"ATTACK_COOLDOWN"],[287,31,325,31],[287,34,325,34],[287,36,325,36],[287,37,325,37],[287,38,325,38],[289,12,327,10],[289,16,327,14,"distance"],[289,24,327,22],[289,28,327,26,"ATTACK_RANGE"],[289,40,327,38],[289,42,327,40],[290,14,328,12],[291,14,329,12],[291,18,329,16],[291,19,329,17,"enemy"],[291,24,329,22],[291,25,329,23,"lastAttackTick"],[291,39,329,37],[291,41,329,39,"enemy"],[291,46,329,44],[291,47,329,45,"lastAttackTick"],[291,61,329,59],[291,64,329,62],[291,65,329,63],[292,14,331,12],[292,18,331,16,"newState"],[292,26,331,24],[292,27,331,25,"currentTick"],[292,38,331,36],[292,41,331,39,"enemy"],[292,46,331,44],[292,47,331,45,"lastAttackTick"],[292,61,331,59],[292,65,331,63,"ATTACK_COOLDOWN"],[292,80,331,78],[292,82,331,80],[293,16,332,14],[294,16,333,14],[294,20,333,18],[294,21,333,19,"game"],[294,25,333,23],[294,26,333,24,"gameState"],[294,35,333,33],[294,36,333,34,"isAlive"],[294,43,333,41],[294,45,333,43],[295,18,334,16,"console"],[295,25,334,23],[295,26,334,24,"log"],[295,29,334,27],[295,30,334,28],[295,49,334,47,"enemy"],[295,54,334,52],[295,55,334,53,"name"],[295,59,334,57],[295,93,334,91],[295,94,334,92],[296,18,335,16],[297,18,336,16,"enemy"],[297,23,336,21],[297,24,336,22,"lastAttackTick"],[297,38,336,36],[297,41,336,39,"newState"],[297,49,336,47],[297,50,336,48,"currentTick"],[297,61,336,59],[298,16,337,14],[298,17,337,15],[298,23,337,21],[299,18,338,16],[300,18,339,16],[300,22,339,22,"isPlayerInvincible"],[300,40,339,40],[300,43,339,43,"game"],[300,47,339,47],[300,48,339,48,"gameState"],[300,57,339,57],[300,58,339,58,"isInvincible"],[300,70,339,70],[300,74,340,41,"game"],[300,78,340,45],[300,79,340,46,"gameState"],[300,88,340,55],[300,89,340,56,"invincibilityEndTime"],[300,109,340,76],[300,113,341,41,"Date"],[300,117,341,45],[300,118,341,46,"now"],[300,121,341,49],[300,122,341,50],[300,123,341,51],[300,126,341,54,"game"],[300,130,341,58],[300,131,341,59,"gameState"],[300,140,341,68],[300,141,341,69,"invincibilityEndTime"],[300,161,341,89],[301,18,343,16],[301,22,343,20,"isPlayerInvincible"],[301,40,343,38],[301,42,343,40],[302,20,344,18,"console"],[302,27,344,25],[302,28,344,26,"log"],[302,31,344,29],[302,32,344,30],[302,51,344,49,"enemy"],[302,56,344,54],[302,57,344,55,"name"],[302,61,344,59],[302,101,344,99],[302,102,344,100],[303,20,345,18],[304,20,346,18,"enemy"],[304,25,346,23],[304,26,346,24,"lastAttackTick"],[304,40,346,38],[304,43,346,41,"newState"],[304,51,346,49],[304,52,346,50,"currentTick"],[304,63,346,61],[305,18,347,16],[305,19,347,17],[305,25,347,23],[306,20,348,16],[307,20,349,16],[307,24,349,22,"baseAttack"],[307,34,349,32],[307,37,349,35,"enemy"],[307,42,349,40],[307,43,349,41,"stats"],[307,48,349,46],[307,49,349,47,"attack"],[307,55,349,53],[307,58,349,56],[307,61,349,59],[307,62,349,60],[307,63,349,61],[308,20,350,16],[308,24,350,22,"attackDamage"],[308,36,350,34],[308,39,350,37,"Math"],[308,43,350,41],[308,44,350,42,"floor"],[308,49,350,47],[308,50,350,48,"baseAttack"],[308,60,350,58],[308,64,350,62],[308,67,350,65],[308,70,350,68,"Math"],[308,74,350,72],[308,75,350,73,"random"],[308,81,350,79],[308,82,350,80],[308,83,350,81],[308,86,350,84],[308,89,350,87],[308,90,350,88],[308,91,350,89],[308,92,350,90],[308,93,350,91],[309,20,351,16],[309,24,351,22,"playerDefense"],[309,37,351,35],[309,40,351,38,"newState"],[309,48,351,46],[309,49,351,47,"playerStats"],[309,60,351,58],[309,61,351,59,"defense"],[309,68,351,66],[310,20,352,16],[310,24,352,22,"finalDamage"],[310,35,352,33],[310,38,352,36,"Math"],[310,42,352,40],[310,43,352,41,"max"],[310,46,352,44],[310,47,352,45],[310,48,352,46],[310,50,352,48,"attackDamage"],[310,62,352,60],[310,65,352,63,"Math"],[310,69,352,67],[310,70,352,68,"floor"],[310,75,352,73],[310,76,352,74,"playerDefense"],[310,89,352,87],[310,92,352,90],[310,95,352,93],[310,96,352,94],[310,97,352,95],[310,98,352,96],[310,99,352,97],[312,20,354,16,"console"],[312,27,354,23],[312,28,354,24,"log"],[312,31,354,27],[312,32,354,28],[312,53,354,49,"enemy"],[312,58,354,54],[312,59,354,55,"name"],[312,63,354,59],[312,86,354,82,"finalDamage"],[312,97,354,93],[312,109,354,105,"attackDamage"],[312,121,354,117],[312,132,354,128,"Math"],[312,136,354,132],[312,137,354,133,"floor"],[312,142,354,138],[312,143,354,139,"playerDefense"],[312,156,354,152],[312,159,354,155],[312,162,354,158],[312,163,354,159],[312,184,354,180],[312,185,354,181],[314,20,356,16],[315,20,357,16],[315,24,357,22,"newPlayerHealth"],[315,39,357,37],[315,42,357,40,"Math"],[315,46,357,44],[315,47,357,45,"max"],[315,50,357,48],[315,51,357,49],[315,52,357,50],[315,54,357,52,"newState"],[315,62,357,60],[315,63,357,61,"playerStats"],[315,74,357,72],[315,75,357,73,"health"],[315,81,357,79],[315,84,357,82,"finalDamage"],[315,95,357,93],[315,96,357,94],[316,20,358,16,"newState"],[316,28,358,24],[316,29,358,25,"playerStats"],[316,40,358,36],[316,41,358,37,"health"],[316,47,358,43],[316,50,358,46,"newPlayerHealth"],[316,65,358,61],[317,20,360,16,"console"],[317,27,360,23],[317,28,360,24,"log"],[317,31,360,27],[317,32,360,28],[317,53,360,49,"newState"],[317,61,360,57],[317,62,360,58,"playerStats"],[317,73,360,69],[317,74,360,70,"health"],[317,80,360,76],[317,84,360,80,"newState"],[317,92,360,88],[317,93,360,89,"playerStats"],[317,104,360,100],[317,105,360,101,"maxHealth"],[317,114,360,110],[317,124,360,120,"finalDamage"],[317,135,360,131],[317,145,360,141],[317,146,360,142],[319,20,362,16],[320,20,363,16,"enemy"],[320,25,363,21],[320,26,363,22,"lastAttackTick"],[320,40,363,36],[320,43,363,39,"newState"],[320,51,363,47],[320,52,363,48,"currentTick"],[320,63,363,59],[322,20,365,16],[323,20,366,16],[323,24,366,20,"newPlayerHealth"],[323,39,366,35],[323,43,366,39],[323,44,366,40],[323,46,366,42],[324,22,367,18,"console"],[324,29,367,25],[324,30,367,26,"log"],[324,33,367,29],[324,34,367,30],[324,84,367,80],[324,85,367,81],[325,22,368,18],[326,22,369,18,"setTimeout"],[326,32,369,28],[326,33,369,29],[326,39,369,35],[327,24,370,20],[328,24,371,20,"game"],[328,28,371,24],[328,29,371,25,"updateGameState"],[328,44,371,40],[328,45,371,41],[329,26,371,43,"isAlive"],[329,33,371,50],[329,35,371,52],[330,24,371,58],[330,25,371,59],[330,26,371,60],[331,22,372,18],[331,23,372,19],[331,25,372,21],[331,28,372,24],[331,29,372,25],[332,20,373,16],[333,18,374,16],[334,16,375,14],[335,14,376,12],[336,12,377,10],[336,13,377,11],[336,19,377,17],[337,14,378,12],[338,14,379,12],[339,14,380,12],[339,18,380,16,"distance"],[339,26,380,24],[339,29,380,27],[339,31,380,29],[339,33,380,31],[340,16,381,14],[341,16,382,14],[341,20,382,20,"normalizedX"],[341,31,382,31],[341,34,382,34,"deltaX"],[341,40,382,40],[341,43,382,43,"distance"],[341,51,382,51],[342,16,383,14],[342,20,383,20,"normalizedY"],[342,31,383,31],[342,34,383,34,"deltaY"],[342,40,383,40],[342,43,383,43,"distance"],[342,51,383,51],[344,16,385,14],[345,16,386,14],[345,20,386,20,"randomFactor"],[345,32,386,32],[345,35,386,35],[345,38,386,38],[345,39,386,39],[345,40,386,40],[346,16,387,14],[346,20,387,20,"finalX"],[346,26,387,26],[346,29,387,29,"normalizedX"],[346,40,387,40],[346,43,387,43],[346,44,387,44,"Math"],[346,48,387,48],[346,49,387,49,"random"],[346,55,387,55],[346,56,387,56],[346,57,387,57],[346,60,387,60],[346,63,387,63],[346,67,387,67,"randomFactor"],[346,79,387,79],[347,16,388,14],[347,20,388,20,"finalY"],[347,26,388,26],[347,29,388,29,"normalizedY"],[347,40,388,40],[347,43,388,43],[347,44,388,44,"Math"],[347,48,388,48],[347,49,388,49,"random"],[347,55,388,55],[347,56,388,56],[347,57,388,57],[347,60,388,60],[347,63,388,63],[347,67,388,67,"randomFactor"],[347,79,388,79],[349,16,390,14],[350,16,391,14],[350,20,391,18,"newX"],[350,24,391,22],[350,27,391,25,"enemy"],[350,32,391,30],[350,33,391,31,"position"],[350,41,391,39],[350,42,391,40,"x"],[350,43,391,41],[350,46,391,45,"finalX"],[350,52,391,51],[350,55,391,54,"MOVEMENT_SPEED"],[350,69,391,69],[351,16,392,14],[351,20,392,18,"newY"],[351,24,392,22],[351,27,392,25,"enemy"],[351,32,392,30],[351,33,392,31,"position"],[351,41,392,39],[351,42,392,40,"y"],[351,43,392,41],[351,46,392,45,"finalY"],[351,52,392,51],[351,55,392,54,"MOVEMENT_SPEED"],[351,69,392,69],[353,16,394,14],[354,16,395,14,"newX"],[354,20,395,18],[354,23,395,21,"Math"],[354,27,395,25],[354,28,395,26,"max"],[354,31,395,29],[354,32,395,30],[354,33,395,31],[354,35,395,33,"Math"],[354,39,395,37],[354,40,395,38,"min"],[354,43,395,41],[354,44,395,42,"SCREEN_WIDTH"],[354,56,395,54],[354,59,395,57,"ENEMY_SIZE"],[354,69,395,67],[354,71,395,69,"newX"],[354,75,395,73],[354,76,395,74],[354,77,395,75],[355,16,396,14,"newY"],[355,20,396,18],[355,23,396,21,"Math"],[355,27,396,25],[355,28,396,26,"max"],[355,31,396,29],[355,32,396,30],[355,33,396,31],[355,35,396,33,"Math"],[355,39,396,37],[355,40,396,38,"min"],[355,43,396,41],[355,44,396,42,"GAME_AREA_HEIGHT"],[355,60,396,58],[355,63,396,61,"ENEMY_SIZE"],[355,73,396,71],[355,75,396,73,"newY"],[355,79,396,77],[355,80,396,78],[355,81,396,79],[357,16,398,14],[358,16,399,14,"enemy"],[358,21,399,19],[358,22,399,20,"position"],[358,30,399,28],[358,31,399,29,"x"],[358,32,399,30],[358,35,399,33,"newX"],[358,39,399,37],[359,16,400,14,"enemy"],[359,21,400,19],[359,22,400,20,"position"],[359,30,400,28],[359,31,400,29,"y"],[359,32,400,30],[359,35,400,33,"newY"],[359,39,400,37],[360,14,401,12],[361,14,402,12],[362,12,403,10],[363,10,404,8],[364,8,405,6],[364,9,405,7],[364,10,405,8],[366,8,407,6],[367,8,408,6],[367,12,408,10,"newState"],[367,20,408,18],[367,21,408,19,"shadowClone"],[367,32,408,30],[367,34,408,32],[368,10,409,8],[369,10,410,8,"newState"],[369,18,410,16],[369,19,410,17,"shadowClone"],[369,30,410,28],[369,31,410,29,"remainingTicks"],[369,45,410,43],[369,47,410,45],[371,10,412,8],[372,10,413,8],[372,14,413,14,"cloneOffset"],[372,25,413,25],[372,28,413,28],[372,30,413,30],[372,31,413,31],[372,32,413,32],[373,10,414,8,"newState"],[373,18,414,16],[373,19,414,17,"shadowClone"],[373,30,414,28],[373,31,414,29,"position"],[373,39,414,37],[373,40,414,38,"x"],[373,41,414,39],[373,44,414,42,"currentNinjaPosition"],[373,64,414,62],[373,65,414,63,"x"],[373,66,414,64],[373,69,414,67,"cloneOffset"],[373,80,414,78],[374,10,415,8,"newState"],[374,18,415,16],[374,19,415,17,"shadowClone"],[374,30,415,28],[374,31,415,29,"position"],[374,39,415,37],[374,40,415,38,"y"],[374,41,415,39],[374,44,415,42,"currentNinjaPosition"],[374,64,415,62],[374,65,415,63,"y"],[374,66,415,64],[374,69,415,67],[374,71,415,69],[376,10,417,8],[377,10,418,8],[377,14,418,12,"newState"],[377,22,418,20],[377,23,418,21,"shadowClone"],[377,34,418,32],[377,35,418,33,"remainingTicks"],[377,49,418,47],[377,53,418,51],[377,54,418,52],[377,56,418,54],[378,12,419,10,"console"],[378,19,419,17],[378,20,419,18,"log"],[378,23,419,21],[378,24,419,22],[378,75,419,73],[378,76,419,74],[379,12,420,10,"newState"],[379,20,420,18],[379,21,420,19,"shadowClone"],[379,32,420,30],[379,35,420,33,"undefined"],[379,44,420,42],[380,10,421,8],[380,11,421,9],[380,17,421,15],[381,12,422,10],[382,12,423,10],[383,12,424,10],[383,16,424,16,"CLONE_ATTACK_INTERVAL"],[383,37,424,37],[383,40,424,40],[383,42,424,42],[384,12,425,10],[384,16,425,14,"newState"],[384,24,425,22],[384,25,425,23,"currentTick"],[384,36,425,34],[384,39,425,37,"CLONE_ATTACK_INTERVAL"],[384,60,425,58],[384,65,425,63],[384,66,425,64],[384,70,425,68,"newState"],[384,78,425,76],[384,79,425,77,"enemies"],[384,86,425,84],[384,87,425,85,"length"],[384,93,425,91],[384,96,425,94],[384,97,425,95],[384,99,425,97],[385,14,426,12,"console"],[385,21,426,19],[385,22,426,20,"log"],[385,25,426,23],[385,26,426,24],[385,83,426,81],[385,84,426,82],[387,14,428,12],[388,14,429,12],[388,18,429,18,"target"],[388,24,429,24],[388,27,429,27,"findClosestEnemyInternal"],[388,51,429,51],[388,52,429,52,"newState"],[388,60,429,60],[388,61,429,61,"enemies"],[388,68,429,68],[388,69,429,69],[389,14,430,12],[389,18,430,16,"target"],[389,24,430,22],[389,26,430,24],[390,16,431,14],[391,16,432,14],[391,20,432,20,"cloneDamage"],[391,31,432,31],[391,34,432,34,"Math"],[391,38,432,38],[391,39,432,39,"floor"],[391,44,432,44],[391,45,432,45,"newState"],[391,53,432,53],[391,54,432,54,"playerStats"],[391,65,432,65],[391,66,432,66,"attack"],[391,72,432,72],[391,75,432,75],[391,78,432,78],[391,79,432,79],[393,16,434,14],[394,16,435,14,"createProjectile"],[394,32,435,30],[394,33,435,31,"target"],[394,39,435,37],[394,41,435,39,"cloneDamage"],[394,52,435,50],[394,54,435,52,"newState"],[394,62,435,60],[394,63,435,61,"shadowClone"],[394,74,435,72],[394,75,435,73,"position"],[394,83,435,81],[394,85,435,83],[395,18,436,16,"id"],[395,20,436,18],[395,22,436,20],[395,43,436,41],[396,18,437,16,"name"],[396,22,437,20],[396,24,437,22],[396,45,437,43],[397,18,438,16,"icon"],[397,22,438,20],[397,24,438,22],[398,16,439,14],[398,17,439,15],[398,18,439,16],[399,14,440,12],[400,12,441,10],[401,10,442,8],[402,8,443,6],[404,8,445,6],[405,8,446,6],[406,8,447,6,"console"],[406,15,447,13],[406,16,447,14,"log"],[406,19,447,17],[406,20,447,18],[406,63,447,61,"isManualControlActive"],[406,84,447,82],[406,97,447,95,"game"],[406,101,447,99],[406,102,447,100,"gameState"],[406,111,447,109],[406,112,447,110,"isAlive"],[406,119,447,117],[406,121,447,119],[406,122,447,120],[407,8,448,6],[407,12,448,10],[407,13,448,11,"isManualControlActive"],[407,34,448,32],[407,38,448,36,"game"],[407,42,448,40],[407,43,448,41,"gameState"],[407,52,448,50],[407,53,448,51,"isAlive"],[407,60,448,58],[407,62,448,60],[408,10,449,8],[408,15,449,13],[408,19,449,17,"i"],[408,20,449,18],[408,23,449,21],[408,24,449,22],[408,26,449,24,"i"],[408,27,449,25],[408,30,449,28],[408,31,449,29],[408,33,449,31,"i"],[408,34,449,32],[408,36,449,34],[408,38,449,36],[409,12,450,10],[409,16,450,14,"newState"],[409,24,450,22],[409,25,450,23,"abilityManager"],[409,39,450,37],[409,40,450,38,"isAbilityReady"],[409,54,450,52],[409,55,450,53,"i"],[409,56,450,54],[409,57,450,55],[409,61,450,59,"newState"],[409,69,450,67],[409,70,450,68,"enemies"],[409,77,450,75],[409,78,450,76,"length"],[409,84,450,82],[409,87,450,85],[409,88,450,86],[409,90,450,88],[410,14,451,12],[410,18,451,16,"newState"],[410,26,451,24],[410,27,451,25,"abilityManager"],[410,41,451,39],[410,42,451,40,"useAbility"],[410,52,451,50],[410,53,451,51,"i"],[410,54,451,52],[410,56,451,54,"newTick"],[410,63,451,61],[410,64,451,62],[410,66,451,64],[411,16,452,14,"console"],[411,23,452,21],[411,24,452,22,"log"],[411,27,452,25],[411,28,452,26],[411,73,452,71,"i"],[411,74,452,72],[411,76,452,74],[411,77,452,75],[412,16,453,14,"castAbility"],[412,27,453,25],[412,28,453,26,"newState"],[412,36,453,34],[412,38,453,36,"i"],[412,39,453,37],[412,40,453,38],[413,14,454,12],[414,12,455,10],[415,10,456,8],[416,8,457,6],[418,8,459,6],[419,8,460,6],[419,12,460,12,"dyingEnemies"],[419,24,460,24],[419,27,460,27,"newState"],[419,35,460,35],[419,36,460,36,"enemies"],[419,43,460,43],[419,44,460,44,"filter"],[419,50,460,50],[419,51,460,51,"enemy"],[419,56,460,56],[419,60,460,60,"enemy"],[419,65,460,65],[419,66,460,66,"isDying"],[419,73,460,73],[419,77,460,77,"enemy"],[419,82,460,82],[419,83,460,83,"health"],[419,89,460,89],[419,93,460,93],[419,94,460,94],[419,95,460,95],[420,8,461,6],[420,12,461,12,"deadEnemies"],[420,23,461,23],[420,26,461,26,"newState"],[420,34,461,34],[420,35,461,35,"enemies"],[420,42,461,42],[420,43,461,43,"filter"],[420,49,461,49],[420,50,461,50,"enemy"],[420,55,461,55],[420,59,461,59,"enemy"],[420,64,461,64],[420,65,461,65,"health"],[420,71,461,71],[420,75,461,75],[420,76,461,76],[420,80,461,80],[420,81,461,81,"enemy"],[420,86,461,86],[420,87,461,87,"isDying"],[420,94,461,94],[420,95,461,95],[422,8,463,6],[423,8,464,6],[423,12,464,12,"dyingEnemiesForXP"],[423,29,464,29],[423,32,464,32,"dyingEnemies"],[423,44,464,44],[423,45,464,45,"map"],[423,48,464,48],[423,49,464,49,"enemy"],[423,54,464,54],[423,59,464,59],[424,10,464,60],[424,13,464,63,"enemy"],[425,8,464,68],[425,9,464,69],[425,10,464,70],[425,11,464,71],[425,12,464,72],[425,13,464,73],[426,8,465,6,"enemiesToKill"],[426,21,465,19],[426,24,465,22],[426,25,465,23],[426,28,465,26,"deadEnemies"],[426,39,465,37],[426,41,465,39],[426,44,465,42,"dyingEnemiesForXP"],[426,61,465,59],[426,62,465,60],[426,63,465,61],[426,64,465,62],[428,8,467,6],[429,8,468,6],[429,12,468,12,"currentTime"],[429,23,468,23],[429,26,468,26,"Date"],[429,30,468,30],[429,31,468,31,"now"],[429,34,468,34],[429,35,468,35],[429,36,468,36],[430,8,469,6,"newState"],[430,16,469,14],[430,17,469,15,"enemies"],[430,24,469,22],[430,27,469,25,"newState"],[430,35,469,33],[430,36,469,34,"enemies"],[430,43,469,41],[430,44,469,42,"filter"],[430,50,469,48],[430,51,469,49,"enemy"],[430,56,469,54],[430,60,469,58],[431,10,470,8],[431,14,470,12,"enemy"],[431,19,470,17],[431,20,470,18,"isDying"],[431,27,470,25],[431,31,470,29,"enemy"],[431,36,470,34],[431,37,470,35,"deathStartTime"],[431,51,470,49],[431,53,470,51],[432,12,471,10],[432,16,471,16,"animationDuration"],[432,33,471,33],[432,36,471,36],[432,39,471,39],[432,40,471,40],[432,41,471,41],[433,12,472,10],[433,16,472,16,"isAnimationComplete"],[433,35,472,35],[433,38,472,38,"currentTime"],[433,49,472,49],[433,52,472,52,"enemy"],[433,57,472,57],[433,58,472,58,"deathStartTime"],[433,72,472,72],[433,76,472,76,"animationDuration"],[433,93,472,93],[434,12,473,10],[434,16,473,14,"isAnimationComplete"],[434,35,473,33],[434,37,473,35],[435,14,474,12,"console"],[435,21,474,19],[435,22,474,20,"log"],[435,25,474,23],[435,26,474,24],[435,58,474,56,"enemy"],[435,63,474,61],[435,64,474,62,"name"],[435,68,474,66],[435,86,474,84,"currentTime"],[435,97,474,95],[435,100,474,98,"enemy"],[435,105,474,103],[435,106,474,104,"deathStartTime"],[435,120,474,118],[435,129,474,127],[435,130,474,128],[436,14,475,12],[436,21,475,19],[436,26,475,24],[436,27,475,25],[436,28,475,26],[437,12,476,10],[438,10,477,8],[439,10,478,8],[439,17,478,15],[439,21,478,19],[439,22,478,20],[439,23,478,21],[440,8,479,6],[440,9,479,7],[440,10,479,8],[442,8,481,6],[443,8,482,6],[443,12,482,10,"deadEnemies"],[443,23,482,21],[443,24,482,22,"length"],[443,30,482,28],[443,33,482,31],[443,34,482,32],[443,36,482,34],[444,10,483,8,"console"],[444,17,483,15],[444,18,483,16,"log"],[444,21,483,19],[444,22,483,20],[444,49,483,47,"deadEnemies"],[444,60,483,58],[444,61,483,59,"length"],[444,67,483,65],[444,83,483,81],[444,85,483,83,"deadEnemies"],[444,96,483,94],[444,97,483,95,"map"],[444,100,483,98],[444,101,483,99,"e"],[444,102,483,100],[444,106,483,104],[444,109,483,107,"e"],[444,110,483,108],[444,111,483,109,"id"],[444,113,483,111],[444,117,483,115,"e"],[444,118,483,116],[444,119,483,117,"health"],[444,125,483,123],[444,130,483,128],[444,131,483,129],[444,132,483,130],[445,8,484,6],[447,8,486,6],[448,8,487,6],[448,12,487,12,"lowHealthEnemies"],[448,28,487,28],[448,31,487,31,"newState"],[448,39,487,39],[448,40,487,40,"enemies"],[448,47,487,47],[448,48,487,48,"filter"],[448,54,487,54],[448,55,487,55,"enemy"],[448,60,487,60],[448,64,487,64,"enemy"],[448,69,487,69],[448,70,487,70,"health"],[448,76,487,76],[448,80,487,80],[448,82,487,82],[448,86,487,86,"enemy"],[448,91,487,91],[448,92,487,92,"health"],[448,98,487,98],[448,101,487,101],[448,102,487,102],[448,103,487,103],[449,8,488,6],[449,12,488,10,"lowHealthEnemies"],[449,28,488,26],[449,29,488,27,"length"],[449,35,488,33],[449,38,488,36],[449,39,488,37],[449,41,488,39],[450,10,489,8,"console"],[450,17,489,15],[450,18,489,16,"log"],[450,21,489,19],[450,22,489,20],[450,61,489,59],[450,63,489,61,"lowHealthEnemies"],[450,79,489,77],[450,80,489,78,"map"],[450,83,489,81],[450,84,489,82,"e"],[450,85,489,83],[450,89,489,87],[450,92,489,90,"e"],[450,93,489,91],[450,94,489,92,"id"],[450,96,489,94],[450,100,489,98,"e"],[450,101,489,99],[450,102,489,100,"health"],[450,108,489,106],[450,112,489,110,"e"],[450,113,489,111],[450,114,489,112,"maxHealth"],[450,123,489,121],[450,128,489,126],[450,129,489,127],[450,130,489,128],[451,8,490,6],[453,8,492,6],[454,8,493,6],[454,12,493,12,"beforeCount"],[454,23,493,23],[454,26,493,26,"newState"],[454,34,493,34],[454,35,493,35,"enemies"],[454,42,493,42],[454,43,493,43,"length"],[454,49,493,49],[455,8,494,6,"newState"],[455,16,494,14],[455,17,494,15,"enemies"],[455,24,494,22],[455,27,494,25,"newState"],[455,35,494,33],[455,36,494,34,"enemies"],[455,43,494,41],[455,44,494,42,"filter"],[455,50,494,48],[455,51,494,49,"enemy"],[455,56,494,54],[455,60,494,58,"enemy"],[455,65,494,63],[455,66,494,64,"health"],[455,72,494,70],[455,75,494,73],[455,76,494,74],[455,77,494,75],[456,8,495,6],[456,12,495,12,"afterCount"],[456,22,495,22],[456,25,495,25,"newState"],[456,33,495,33],[456,34,495,34,"enemies"],[456,41,495,41],[456,42,495,42,"length"],[456,48,495,48],[457,8,497,6],[457,12,497,10,"beforeCount"],[457,23,497,21],[457,28,497,26,"afterCount"],[457,38,497,36],[457,40,497,38],[458,10,498,8,"console"],[458,17,498,15],[458,18,498,16,"log"],[458,21,498,19],[458,22,498,20],[458,52,498,50,"beforeCount"],[458,63,498,61],[458,66,498,64,"afterCount"],[458,76,498,74],[458,102,498,100],[458,103,498,101],[459,8,499,6],[461,8,501,6],[462,8,502,6],[463,8,503,6],[463,12,503,12,"MAX_ENEMIES"],[463,23,503,23],[463,26,503,26],[463,28,503,28],[463,29,503,29],[463,30,503,30],[464,8,504,6],[464,12,504,12,"MIN_SPAWN_DELAY"],[464,27,504,27],[464,30,504,30],[464,33,504,33],[464,34,504,34],[464,35,504,35],[465,8,505,6],[465,12,505,12,"now"],[465,15,505,15],[465,18,505,18,"Date"],[465,22,505,22],[465,23,505,23,"now"],[465,26,505,26],[465,27,505,27],[465,28,505,28],[466,8,506,6],[466,12,506,12,"hasBoss"],[466,19,506,19],[466,22,506,22,"newState"],[466,30,506,30],[466,31,506,31,"enemies"],[466,38,506,38],[466,39,506,39,"some"],[466,43,506,43],[466,44,506,44,"enemy"],[466,49,506,49],[466,53,506,53,"enemy"],[466,58,506,58],[466,59,506,59,"isBoss"],[466,65,506,65],[466,66,506,66],[468,8,508,6],[469,8,509,6],[469,12,509,10],[469,13,509,11,"newState"],[469,21,509,19],[469,22,509,20,"lastSpawnTime"],[469,35,509,33],[469,37,509,35],[470,10,510,8,"newState"],[470,18,510,16],[470,19,510,17,"lastSpawnTime"],[470,32,510,30],[470,35,510,33,"now"],[470,38,510,36],[471,8,511,6],[472,8,513,6,"console"],[472,15,513,13],[472,16,513,14,"log"],[472,19,513,17],[472,20,513,18],[472,53,513,51,"newState"],[472,61,513,59],[472,62,513,60,"enemies"],[472,69,513,67],[472,70,513,68,"length"],[472,76,513,74],[472,85,513,83,"MAX_ENEMIES"],[472,96,513,94],[472,109,513,107,"hasBoss"],[472,116,513,114],[472,118,513,116],[472,119,513,117],[474,8,515,6],[475,8,516,6],[475,12,516,10],[475,13,516,11,"hasBoss"],[475,20,516,18],[475,24,516,22,"newState"],[475,32,516,30],[475,33,516,31,"enemies"],[475,40,516,38],[475,41,516,39,"length"],[475,47,516,45],[475,50,516,48,"MAX_ENEMIES"],[475,61,516,59],[475,65,516,64,"now"],[475,68,516,67],[475,71,516,70,"newState"],[475,79,516,78],[475,80,516,79,"lastSpawnTime"],[475,93,516,92],[475,97,516,97,"MIN_SPAWN_DELAY"],[475,112,516,112],[475,114,516,114],[476,10,517,8,"console"],[476,17,517,15],[476,18,517,16,"log"],[476,21,517,19],[476,22,517,20],[476,43,517,41,"newState"],[476,51,517,49],[476,52,517,50,"enemies"],[476,59,517,57],[476,60,517,58,"length"],[476,66,517,64],[476,69,517,67],[476,70,517,68],[476,74,517,72,"MAX_ENEMIES"],[476,85,517,83],[476,87,517,85],[476,88,517,86],[477,10,518,8,"spawnTestEnemy"],[477,24,518,22],[477,25,518,23,"newState"],[477,33,518,31],[477,34,518,32],[478,10,519,8,"newState"],[478,18,519,16],[478,19,519,17,"lastSpawnTime"],[478,32,519,30],[478,35,519,33,"now"],[478,38,519,36],[479,8,520,6],[480,8,522,6],[480,15,522,13,"newState"],[480,23,522,21],[481,6,523,4],[481,7,523,5],[481,47,523,6],[483,6,525,4],[484,6,526,4,"console"],[484,13,526,11],[484,14,526,12,"log"],[484,17,526,15],[484,18,526,16],[484,50,526,48,"enemiesToKill"],[484,63,526,61],[484,64,526,62,"length"],[484,70,526,68],[484,101,526,99],[484,102,526,100],[485,6,528,4,"enemiesToKill"],[485,19,528,17],[485,20,528,18,"forEach"],[485,27,528,25],[485,28,528,26],[485,29,528,27,"enemy"],[485,34,528,32],[485,36,528,34,"index"],[485,41,528,39],[485,46,528,44],[486,8,529,6,"console"],[486,15,529,13],[486,16,529,14,"log"],[486,19,529,17],[486,20,529,18],[486,57,529,55,"index"],[486,62,529,60],[486,65,529,63],[486,66,529,64],[486,70,529,68,"enemiesToKill"],[486,83,529,81],[486,84,529,82,"length"],[486,90,529,88],[486,104,529,102,"enemy"],[486,109,529,107],[486,110,529,108,"id"],[486,112,529,110],[486,114,529,112],[486,115,529,113],[487,8,530,6,"handleEnemyKill"],[487,23,530,21],[487,24,530,22,"enemy"],[487,29,530,27],[487,30,530,28],[488,6,531,4],[488,7,531,5],[488,8,531,6],[489,4,532,2],[489,5,532,3],[489,7,532,5],[489,8,532,6,"handleEnemyKill"],[489,23,532,21],[489,24,532,22],[489,25,532,23],[489,26,532,24],[489,27,532,25],[491,4,534,2],[492,4,535,2],[492,8,535,8,"findClosestEnemyInternal"],[492,32,535,32],[492,35,535,36,"enemies"],[492,42,535,58],[492,46,535,83],[493,6,536,4],[493,10,536,8,"enemies"],[493,17,536,15],[493,18,536,16,"length"],[493,24,536,22],[493,29,536,27],[493,30,536,28],[493,32,536,30],[493,39,536,37],[493,43,536,41],[495,6,538,4],[496,6,539,4],[496,10,539,10,"SCREEN_WIDTH"],[496,22,539,22],[496,25,539,25],[496,28,539,28],[497,6,540,4],[497,10,540,10,"GAME_AREA_HEIGHT"],[497,26,540,26],[497,29,540,29],[497,32,540,32],[497,35,540,35],[497,38,540,38],[497,39,540,39],[497,40,540,40],[498,6,541,4],[498,10,541,10,"ninjaX"],[498,16,541,16],[498,19,541,19,"SCREEN_WIDTH"],[498,31,541,31],[498,34,541,34],[498,35,541,35],[499,6,542,4],[499,10,542,10,"ninjaY"],[499,16,542,16],[499,19,542,19,"GAME_AREA_HEIGHT"],[499,35,542,35],[499,38,542,38],[499,39,542,39],[500,6,544,4],[500,10,544,8,"closestEnemy"],[500,22,544,20],[500,25,544,23,"enemies"],[500,32,544,30],[500,33,544,31],[500,34,544,32],[500,35,544,33],[501,6,545,4],[501,10,545,8,"closestDistance"],[501,25,545,23],[501,28,545,26,"Infinity"],[501,36,545,34],[502,6,547,4,"enemies"],[502,13,547,11],[502,14,547,12,"forEach"],[502,21,547,19],[502,22,547,20,"enemy"],[502,27,547,25],[502,31,547,29],[503,8,548,6],[503,12,548,12,"distance"],[503,20,548,20],[503,23,548,23,"Math"],[503,27,548,27],[503,28,548,28,"sqrt"],[503,32,548,32],[503,33,549,8,"Math"],[503,37,549,12],[503,38,549,13,"pow"],[503,41,549,16],[503,42,549,17,"enemy"],[503,47,549,22],[503,48,549,23,"position"],[503,56,549,31],[503,57,549,32,"x"],[503,58,549,33],[503,61,549,36,"ninjaX"],[503,67,549,42],[503,69,549,44],[503,70,549,45],[503,71,549,46],[503,74,550,8,"Math"],[503,78,550,12],[503,79,550,13,"pow"],[503,82,550,16],[503,83,550,17,"enemy"],[503,88,550,22],[503,89,550,23,"position"],[503,97,550,31],[503,98,550,32,"y"],[503,99,550,33],[503,102,550,36,"ninjaY"],[503,108,550,42],[503,110,550,44],[503,111,550,45],[503,112,551,6],[503,113,551,7],[504,8,553,6],[504,12,553,10,"distance"],[504,20,553,18],[504,23,553,21,"closestDistance"],[504,38,553,36],[504,40,553,38],[505,10,554,8,"closestDistance"],[505,25,554,23],[505,28,554,26,"distance"],[505,36,554,34],[506,10,555,8,"closestEnemy"],[506,22,555,20],[506,25,555,23,"enemy"],[506,30,555,28],[507,8,556,6],[508,6,557,4],[508,7,557,5],[508,8,557,6],[509,6,559,4,"console"],[509,13,559,11],[509,14,559,12,"log"],[509,17,559,15],[509,18,559,16],[509,60,559,58,"closestDistance"],[509,75,559,73],[509,76,559,74,"toFixed"],[509,83,559,81],[509,84,559,82],[509,85,559,83],[509,86,559,84],[509,88,559,86],[509,89,559,87],[510,6,560,4],[510,13,560,11,"closestEnemy"],[510,25,560,23],[511,4,561,2],[511,5,561,3],[513,4,563,2],[514,4,564,2],[514,8,564,8,"findClosestEnemy"],[514,24,564,24],[514,27,564,27,"findClosestEnemy"],[514,28,564,27],[514,33,564,53],[515,6,565,4],[515,13,565,11,"findClosestEnemyInternal"],[515,37,565,35],[515,38,565,36,"combatState"],[515,49,565,47],[515,50,565,48,"enemies"],[515,57,565,55],[515,58,565,56],[516,4,566,2],[516,5,566,3],[518,4,568,2],[519,4,569,2],[519,8,569,2,"_useState7"],[519,18,569,2],[519,21,569,58],[519,25,569,58,"useState"],[519,31,569,66],[519,32,569,66,"useState"],[519,40,569,66],[519,42,569,91],[520,8,569,93,"x"],[520,9,569,94],[520,11,569,96],[520,12,569,97],[521,8,569,99,"y"],[521,9,569,100],[521,11,569,102],[522,6,569,104],[522,7,569,105],[522,8,569,106],[523,6,569,106,"_useState8"],[523,16,569,106],[523,23,569,106,"_slicedToArray"],[523,37,569,106],[523,38,569,106,"default"],[523,45,569,106],[523,47,569,106,"_useState7"],[523,57,569,106],[524,6,569,9,"currentNinjaPosition"],[524,26,569,29],[524,29,569,29,"_useState8"],[524,39,569,29],[525,6,569,31,"setCurrentNinjaPosition"],[525,29,569,54],[525,32,569,54,"_useState8"],[525,42,569,54],[526,4,570,2],[526,8,570,2,"_useState9"],[526,18,570,2],[526,21,570,60],[526,25,570,60,"useState"],[526,31,570,68],[526,32,570,68,"useState"],[526,40,570,68],[526,42,570,69],[526,47,570,74],[526,48,570,75],[527,6,570,75,"_useState0"],[527,16,570,75],[527,23,570,75,"_slicedToArray"],[527,37,570,75],[527,38,570,75,"default"],[527,45,570,75],[527,47,570,75,"_useState9"],[527,57,570,75],[528,6,570,9,"isManualControlActive"],[528,27,570,30],[528,30,570,30,"_useState0"],[528,40,570,30],[529,6,570,32,"setIsManualControlActive"],[529,30,570,56],[529,33,570,56,"_useState0"],[529,43,570,56],[531,4,572,2],[532,4,573,2],[532,8,573,8,"updateNinjaPosition"],[532,27,573,27],[532,30,573,30],[532,34,573,30,"useCallback"],[532,40,573,41],[532,41,573,41,"useCallback"],[532,52,573,41],[532,54,573,43,"newPosition"],[532,65,573,78],[532,69,573,83],[533,6,574,4,"setCurrentNinjaPosition"],[533,29,574,27],[533,30,574,28,"newPosition"],[533,41,574,39],[533,42,574,40],[534,4,575,2],[534,5,575,3],[534,7,575,5],[534,9,575,7],[534,10,575,8],[536,4,577,2],[537,4,578,2],[537,8,578,8,"setManualControlActive"],[537,30,578,30],[537,33,578,33],[537,37,578,33,"useCallback"],[537,43,578,44],[537,44,578,44,"useCallback"],[537,55,578,44],[537,57,578,46,"active"],[537,63,578,61],[537,67,578,66],[538,6,579,4,"setIsManualControlActive"],[538,30,579,28],[538,31,579,29,"active"],[538,37,579,35],[538,38,579,36],[539,6,580,4,"console"],[539,13,580,11],[539,14,580,12,"log"],[539,17,580,15],[539,18,580,16],[539,39,580,37,"active"],[539,45,580,43],[539,48,580,46],[539,59,580,57],[539,62,580,60],[539,75,580,73],[539,88,580,86,"active"],[539,94,580,92],[539,97,580,95],[539,105,580,103],[539,108,580,106],[539,117,580,115],[539,119,580,117],[539,120,580,118],[540,4,581,2],[540,5,581,3],[540,7,581,5],[540,9,581,7],[540,10,581,8],[542,4,583,2],[543,4,584,2],[543,8,584,8,"handleProjectileHit"],[543,27,584,27],[543,30,584,31,"projectile"],[543,40,584,59],[543,44,584,64],[544,6,585,4,"console"],[544,13,585,11],[544,14,585,12,"log"],[544,17,585,15],[544,18,585,16],[544,35,585,33,"projectile"],[544,45,585,43],[544,46,585,44,"id"],[544,48,585,46],[544,62,585,60,"projectile"],[544,72,585,70],[544,73,585,71,"targetEnemyId"],[544,86,585,84],[544,94,585,92,"projectile"],[544,104,585,102],[544,105,585,103,"damage"],[544,111,585,109],[544,120,585,118],[544,121,585,119],[545,6,587,4,"setCombatState"],[545,20,587,18],[545,21,587,19,"prev"],[545,25,587,23],[545,29,587,27],[546,8,588,6],[546,12,588,12,"newState"],[546,20,588,20],[546,23,588,23],[547,10,588,25],[547,13,588,28,"prev"],[548,8,588,33],[548,9,588,34],[550,8,590,6],[551,8,591,6],[551,12,591,12,"enemyIndex"],[551,22,591,22],[551,25,591,25,"newState"],[551,33,591,33],[551,34,591,34,"enemies"],[551,41,591,41],[551,42,591,42,"findIndex"],[551,51,591,51],[551,52,591,52,"e"],[551,53,591,53],[551,57,591,57,"e"],[551,58,591,58],[551,59,591,59,"id"],[551,61,591,61],[551,66,591,66,"projectile"],[551,76,591,76],[551,77,591,77,"targetEnemyId"],[551,90,591,90],[551,91,591,91],[552,8,592,6],[552,12,592,10,"enemyIndex"],[552,22,592,20],[552,26,592,24],[552,27,592,25],[552,29,592,27],[553,10,593,8,"newState"],[553,18,593,16],[553,19,593,17,"enemies"],[553,26,593,24],[553,29,593,27],[553,30,593,28],[553,33,593,31,"newState"],[553,41,593,39],[553,42,593,40,"enemies"],[553,49,593,47],[553,50,593,48],[554,10,594,8,"newState"],[554,18,594,16],[554,19,594,17,"enemies"],[554,26,594,24],[554,27,594,25,"enemyIndex"],[554,37,594,35],[554,38,594,36],[554,41,594,39],[555,12,595,10],[555,15,595,13,"newState"],[555,23,595,21],[555,24,595,22,"enemies"],[555,31,595,29],[555,32,595,30,"enemyIndex"],[555,42,595,40],[555,43,595,41],[556,12,596,10,"health"],[556,18,596,16],[556,20,596,18,"newState"],[556,28,596,26],[556,29,596,27,"enemies"],[556,36,596,34],[556,37,596,35,"enemyIndex"],[556,47,596,45],[556,48,596,46],[556,49,596,47,"health"],[556,55,596,53],[556,58,596,56,"projectile"],[556,68,596,66],[556,69,596,67,"damage"],[556,75,596,73],[557,12,597,10,"lastDamaged"],[557,23,597,21],[557,25,597,23,"combatEngine"],[557,44,597,35],[557,45,597,35,"combatEngine"],[557,57,597,35],[557,58,597,36,"getCurrentTick"],[557,72,597,50],[557,73,597,51],[558,10,598,8],[558,11,598,9],[559,10,600,8,"console"],[559,17,600,15],[559,18,600,16,"log"],[559,21,600,19],[559,22,600,20],[559,34,600,32,"projectile"],[559,44,600,42],[559,45,600,43,"targetEnemyId"],[559,58,600,56],[559,70,600,68,"newState"],[559,78,600,76],[559,79,600,77,"enemies"],[559,86,600,84],[559,87,600,85,"enemyIndex"],[559,97,600,95],[559,98,600,96],[559,99,600,97,"health"],[559,105,600,103],[559,109,600,107,"newState"],[559,117,600,115],[559,118,600,116,"enemies"],[559,125,600,123],[559,126,600,124,"enemyIndex"],[559,136,600,134],[559,137,600,135],[559,138,600,136,"maxHealth"],[559,147,600,145],[559,149,600,147],[559,150,600,148],[560,8,601,6],[561,8,603,6],[561,15,603,13,"newState"],[561,23,603,21],[562,6,604,4],[562,7,604,5],[562,8,604,6],[564,6,606,4],[565,6,607,4,"setProjectiles"],[565,20,607,18],[565,21,607,19,"prev"],[565,25,607,23],[565,29,607,27,"prev"],[565,33,607,31],[565,34,607,32,"filter"],[565,40,607,38],[565,41,607,39,"p"],[565,42,607,40],[565,46,607,44,"p"],[565,47,607,45],[565,48,607,46,"id"],[565,50,607,48],[565,55,607,53,"projectile"],[565,65,607,63],[565,66,607,64,"id"],[565,68,607,66],[565,69,607,67],[565,70,607,68],[566,4,608,2],[566,5,608,3],[568,4,610,2],[569,4,611,2],[569,8,611,8,"castAbility"],[569,19,611,19],[569,22,611,22,"castAbility"],[569,23,611,23,"state"],[569,28,611,41],[569,30,611,43,"slotIndex"],[569,39,611,60],[569,44,611,65],[570,6,612,4],[570,10,612,10,"deck"],[570,14,612,14],[570,17,612,17,"state"],[570,22,612,22],[570,23,612,23,"abilityManager"],[570,37,612,37],[570,38,612,38,"getDeck"],[570,45,612,45],[570,46,612,46],[570,47,612,47],[571,6,613,4],[571,10,613,10,"ability"],[571,17,613,17],[571,20,613,20,"deck"],[571,24,613,24],[571,25,613,25,"slots"],[571,30,613,30],[571,31,613,31,"slotIndex"],[571,40,613,40],[571,41,613,41],[572,6,614,4],[572,10,614,8],[572,11,614,9,"ability"],[572,18,614,16],[572,20,614,18],[573,6,616,4,"console"],[573,13,616,11],[573,14,616,12,"log"],[573,17,616,15],[573,18,616,16],[573,43,616,41,"ability"],[573,50,616,48],[573,51,616,49,"id"],[573,53,616,51],[573,67,616,65,"slotIndex"],[573,76,616,74],[573,78,616,76],[573,79,616,77],[575,6,618,4],[576,6,619,4],[576,10,619,8,"damage"],[576,16,619,14],[576,19,619,17,"ability"],[576,26,619,24],[576,27,619,25,"stats"],[576,32,619,30],[576,33,619,31,"baseDamage"],[576,43,619,41],[578,6,621,4],[579,6,622,4,"deck"],[579,10,622,8],[579,11,622,9,"activeSynergies"],[579,26,622,24],[579,27,622,25,"forEach"],[579,34,622,32],[579,35,622,33,"synergy"],[579,42,622,40],[579,46,622,44],[580,8,623,6],[580,12,623,10,"synergy"],[580,19,623,17],[580,20,623,18,"bonus"],[580,25,623,23],[580,26,623,24,"damageBonus"],[580,37,623,35],[580,41,624,10,"synergy"],[580,48,624,17],[580,49,624,18,"requiredTags"],[580,61,624,30],[580,62,624,31,"some"],[580,66,624,35],[580,67,624,36,"tag"],[580,70,624,39],[580,74,624,43,"ability"],[580,81,624,50],[580,82,624,51,"tags"],[580,86,624,55],[580,87,624,56,"includes"],[580,95,624,64],[580,96,624,65,"tag"],[580,99,624,68],[580,100,624,69],[580,101,624,70],[580,103,624,72],[581,10,625,8,"damage"],[581,16,625,14],[581,20,625,19],[581,21,625,20],[581,24,625,23,"synergy"],[581,31,625,30],[581,32,625,31,"bonus"],[581,37,625,36],[581,38,625,37,"damageBonus"],[581,49,625,48],[581,52,625,51],[581,55,625,55],[582,8,626,6],[583,6,627,4],[583,7,627,5],[583,8,627,6],[585,6,629,4],[586,6,630,4],[586,10,630,10,"isAOE"],[586,15,630,15],[586,18,630,18,"ability"],[586,25,630,25],[586,26,630,26,"effects"],[586,33,630,33],[586,34,630,34,"includes"],[586,42,630,42],[586,43,630,43],[586,48,630,48],[586,49,630,49],[586,53,630,53,"ability"],[586,60,630,60],[586,61,630,61,"stats"],[586,66,630,66],[586,67,630,67,"aoeRadius"],[586,76,630,76],[587,6,631,4,"console"],[587,13,631,11],[587,14,631,12,"log"],[587,17,631,15],[587,18,631,16],[587,39,631,37,"ability"],[587,46,631,44],[587,47,631,45,"name"],[587,51,631,49],[587,66,631,64,"JSON"],[587,70,631,68],[587,71,631,69,"stringify"],[587,80,631,78],[587,81,631,79,"ability"],[587,88,631,86],[587,89,631,87,"effects"],[587,96,631,94],[587,97,631,95],[587,113,631,111,"ability"],[587,120,631,118],[587,121,631,119,"stats"],[587,126,631,124],[587,127,631,125,"aoeRadius"],[587,136,631,134],[587,148,631,146,"isAOE"],[587,153,631,151],[587,155,631,153],[587,156,631,154],[588,6,633,4],[588,10,633,8,"isAOE"],[588,15,633,13],[588,17,633,15],[589,8,634,6,"console"],[589,15,634,13],[589,16,634,14,"log"],[589,19,634,17],[589,20,634,18],[589,39,634,37,"ability"],[589,46,634,44],[589,47,634,45,"name"],[589,51,634,49],[589,67,634,65,"ability"],[589,74,634,72],[589,75,634,73,"stats"],[589,80,634,78],[589,81,634,79,"aoeRadius"],[589,90,634,88],[589,92,634,90],[589,93,634,91],[591,8,636,6],[592,8,637,6],[593,8,638,6],[593,12,638,12,"ninjaX"],[593,18,638,18],[593,21,638,21,"currentNinjaPosition"],[593,41,638,41],[593,42,638,42,"x"],[593,43,638,43],[593,46,638,46],[593,48,638,48],[593,49,638,49],[593,50,638,50],[594,8,639,6],[594,12,639,12,"ninjaY"],[594,18,639,18],[594,21,639,21,"currentNinjaPosition"],[594,41,639,41],[594,42,639,42,"y"],[594,43,639,43],[594,46,639,46],[594,48,639,48],[595,8,640,6],[595,12,640,12,"aoeRadius"],[595,21,640,21],[595,24,640,24,"ability"],[595,31,640,31],[595,32,640,32,"stats"],[595,37,640,37],[595,38,640,38,"aoeRadius"],[595,47,640,47],[596,8,642,6],[596,12,642,12,"enemiesInRange"],[596,26,642,26],[596,29,642,29,"state"],[596,34,642,34],[596,35,642,35,"enemies"],[596,42,642,42],[596,43,642,43,"filter"],[596,49,642,49],[596,50,642,50,"enemy"],[596,55,642,55],[596,59,642,59],[597,10,643,8],[597,14,643,14,"enemyX"],[597,20,643,20],[597,23,643,23,"enemy"],[597,28,643,28],[597,29,643,29,"position"],[597,37,643,37],[597,38,643,38,"x"],[597,39,643,39],[597,42,643,42],[597,46,643,46],[597,47,643,47],[597,48,643,48],[598,10,644,8],[598,14,644,14,"enemyY"],[598,20,644,20],[598,23,644,23,"enemy"],[598,28,644,28],[598,29,644,29,"position"],[598,37,644,37],[598,38,644,38,"y"],[598,39,644,39],[598,42,644,42],[598,46,644,46],[599,10,645,8],[599,14,645,14,"distance"],[599,22,645,22],[599,25,645,25,"Math"],[599,29,645,29],[599,30,645,30,"sqrt"],[599,34,645,34],[599,35,645,35,"Math"],[599,39,645,39],[599,40,645,40,"pow"],[599,43,645,43],[599,44,645,44,"enemyX"],[599,50,645,50],[599,53,645,53,"ninjaX"],[599,59,645,59],[599,61,645,61],[599,62,645,62],[599,63,645,63],[599,66,645,66,"Math"],[599,70,645,70],[599,71,645,71,"pow"],[599,74,645,74],[599,75,645,75,"enemyY"],[599,81,645,81],[599,84,645,84,"ninjaY"],[599,90,645,90],[599,92,645,92],[599,93,645,93],[599,94,645,94],[599,95,645,95],[600,10,646,8],[600,17,646,15,"distance"],[600,25,646,23],[600,29,646,27,"aoeRadius"],[600,38,646,36],[601,8,647,6],[601,9,647,7],[601,10,647,8],[602,8,649,6,"console"],[602,15,649,13],[602,16,649,14,"log"],[602,19,649,17],[602,20,649,18],[602,45,649,43,"enemiesInRange"],[602,59,649,57],[602,60,649,58,"length"],[602,66,649,64],[602,88,649,86,"aoeRadius"],[602,97,649,95],[602,107,649,105],[602,108,649,106],[604,8,651,6],[605,8,652,6,"enemiesInRange"],[605,22,652,20],[605,23,652,21,"forEach"],[605,30,652,28],[605,31,652,29,"enemy"],[605,36,652,34],[605,40,652,38],[606,10,653,8],[606,14,653,14,"damageResult"],[606,26,653,26],[606,29,653,29,"DamageCalculator"],[606,48,653,45],[606,49,653,45,"DamageCalculator"],[606,65,653,45],[606,66,653,46,"calculateDamage"],[606,81,653,61],[606,82,653,62,"damage"],[606,88,653,68],[606,90,653,70,"state"],[606,95,653,75],[606,96,653,76,"playerStats"],[606,107,653,87],[606,109,653,89,"enemy"],[606,114,653,94],[606,115,653,95,"stats"],[606,120,653,100],[606,121,653,101],[607,10,654,8,"createProjectile"],[607,26,654,24],[607,27,654,25,"enemy"],[607,32,654,30],[607,34,654,32,"damageResult"],[607,46,654,44],[607,47,654,45,"damage"],[607,53,654,51],[607,55,654,53,"currentNinjaPosition"],[607,75,654,73],[607,77,654,75],[608,12,655,10,"id"],[608,14,655,12],[608,16,655,14,"ability"],[608,23,655,21],[608,24,655,22,"id"],[608,26,655,24],[609,12,656,10,"name"],[609,16,656,14],[609,18,656,16,"ability"],[609,25,656,23],[609,26,656,24,"name"],[609,30,656,28],[610,12,657,10,"icon"],[610,16,657,14],[610,18,657,16,"ability"],[610,25,657,23],[610,26,657,24,"icon"],[611,10,658,8],[611,11,658,9],[611,12,658,10],[612,10,659,8,"console"],[612,17,659,15],[612,18,659,16,"log"],[612,21,659,19],[612,22,659,20],[612,37,659,35,"enemy"],[612,42,659,40],[612,43,659,41,"name"],[612,47,659,45],[612,55,659,53,"damageResult"],[612,67,659,65],[612,68,659,66,"damage"],[612,74,659,72],[612,83,659,81],[612,84,659,82],[614,10,661,8],[615,10,662,8],[615,14,662,12,"damageResult"],[615,26,662,24],[615,27,662,25,"damage"],[615,33,662,31],[615,37,662,35,"enemy"],[615,42,662,40],[615,43,662,41,"health"],[615,49,662,47],[615,51,662,49],[616,12,663,10,"console"],[616,19,663,17],[616,20,663,18,"log"],[616,23,663,21],[616,24,663,22],[616,67,663,65,"enemy"],[616,72,663,70],[616,73,663,71,"name"],[616,77,663,75],[616,90,663,88,"damageResult"],[616,102,663,100],[616,103,663,101,"damage"],[616,109,663,107],[616,124,663,122,"enemy"],[616,129,663,127],[616,130,663,128,"health"],[616,136,663,134],[616,139,663,137],[616,140,663,138],[617,10,664,8],[618,8,665,6],[618,9,665,7],[618,10,665,8],[619,8,667,6,"console"],[619,15,667,13],[619,16,667,14,"log"],[619,19,667,17],[619,20,667,18],[619,26,667,24,"ability"],[619,33,667,31],[619,34,667,32,"name"],[619,38,667,36],[619,56,667,54,"enemiesInRange"],[619,70,667,68],[619,71,667,69,"length"],[619,77,667,75],[619,93,667,91,"damage"],[619,99,667,97],[619,118,667,116],[619,119,667,117],[620,6,669,4],[620,7,669,5],[620,13,669,11],[621,8,670,6],[622,8,671,6],[622,12,671,12,"target"],[622,18,671,18],[622,21,671,21,"findClosestEnemyInternal"],[622,45,671,45],[622,46,671,46,"state"],[622,51,671,51],[622,52,671,52,"enemies"],[622,59,671,59],[622,60,671,60],[623,8,672,6],[623,12,672,10],[623,13,672,11,"target"],[623,19,672,17],[623,21,672,19],[624,8,674,6],[624,12,674,12,"damageResult"],[624,24,674,24],[624,27,674,27,"DamageCalculator"],[624,46,674,43],[624,47,674,43,"DamageCalculator"],[624,63,674,43],[624,64,674,44,"calculateDamage"],[624,79,674,59],[624,80,674,60,"damage"],[624,86,674,66],[624,88,674,68,"state"],[624,93,674,73],[624,94,674,74,"playerStats"],[624,105,674,85],[624,107,674,87,"target"],[624,113,674,93],[624,114,674,94,"stats"],[624,119,674,99],[624,120,674,100],[626,8,676,6],[627,8,677,6,"console"],[627,15,677,13],[627,16,677,14,"log"],[627,19,677,17],[627,20,677,18],[627,71,677,69,"target"],[627,77,677,75],[627,78,677,76,"name"],[627,82,677,80],[627,91,677,89,"damageResult"],[627,103,677,101],[627,104,677,102,"damage"],[627,110,677,108],[627,119,677,117],[627,120,677,118],[628,8,678,6,"createProjectile"],[628,24,678,22],[628,25,678,23,"target"],[628,31,678,29],[628,33,678,31,"damageResult"],[628,45,678,43],[628,46,678,44,"damage"],[628,52,678,50],[628,54,678,52,"currentNinjaPosition"],[628,74,678,72],[628,76,678,74],[629,10,679,8,"id"],[629,12,679,10],[629,14,679,12,"ability"],[629,21,679,19],[629,22,679,20,"id"],[629,24,679,22],[630,10,680,8,"name"],[630,14,680,12],[630,16,680,14,"ability"],[630,23,680,21],[630,24,680,22,"name"],[630,28,680,26],[631,10,681,8,"icon"],[631,14,681,12],[631,16,681,14,"ability"],[631,23,681,21],[631,24,681,22,"icon"],[632,8,682,6],[632,9,682,7],[632,10,682,8],[633,8,684,6,"console"],[633,15,684,13],[633,16,684,14,"log"],[633,19,684,17],[633,20,684,18],[633,26,684,24,"ability"],[633,33,684,31],[633,34,684,32,"name"],[633,38,684,36],[633,66,684,64,"damageResult"],[633,78,684,76],[633,79,684,77,"damage"],[633,85,684,83],[633,95,684,93,"damageResult"],[633,107,684,105],[633,108,684,106,"isCritical"],[633,118,684,116],[633,121,684,119],[633,131,684,129],[633,134,684,132],[633,136,684,134],[633,138,684,136],[633,139,684,137],[635,8,686,6],[636,8,687,6],[636,12,687,10,"damageResult"],[636,24,687,22],[636,25,687,23,"damage"],[636,31,687,29],[636,35,687,33,"target"],[636,41,687,39],[636,42,687,40,"health"],[636,48,687,46],[636,50,687,48],[637,10,688,8,"console"],[637,17,688,15],[637,18,688,16,"log"],[637,21,688,19],[637,22,688,20],[637,75,688,73,"target"],[637,81,688,79],[637,82,688,80,"name"],[637,86,688,84],[637,99,688,97,"damageResult"],[637,111,688,109],[637,112,688,110,"damage"],[637,118,688,116],[637,133,688,131,"target"],[637,139,688,137],[637,140,688,138,"health"],[637,146,688,144],[637,149,688,147],[637,150,688,148],[638,8,689,6],[639,6,690,4],[641,6,692,4],[642,6,693,4],[642,10,693,8,"ability"],[642,17,693,15],[642,18,693,16,"effects"],[642,25,693,23],[642,26,693,24,"includes"],[642,34,693,32],[642,35,693,33],[642,40,693,38],[642,41,693,39],[642,45,693,43,"ability"],[642,52,693,50],[642,53,693,51,"stats"],[642,58,693,56],[642,59,693,57,"duration"],[642,67,693,65],[642,69,693,67],[643,8,694,6],[643,12,694,12,"targets"],[643,19,694,19],[643,22,694,22,"isAOE"],[643,27,694,27],[643,30,695,8,"state"],[643,35,695,13],[643,36,695,14,"enemies"],[643,43,695,21],[643,44,695,22,"filter"],[643,50,695,28],[643,51,695,29,"enemy"],[643,56,695,34],[643,60,695,38],[644,10,696,10],[644,14,696,16,"ninjaX"],[644,20,696,22],[644,23,696,25,"currentNinjaPosition"],[644,43,696,45],[644,44,696,46,"x"],[644,45,696,47],[644,48,696,50],[644,50,696,52],[645,10,697,10],[645,14,697,16,"ninjaY"],[645,20,697,22],[645,23,697,25,"currentNinjaPosition"],[645,43,697,45],[645,44,697,46,"y"],[645,45,697,47],[645,48,697,50],[645,50,697,52],[646,10,698,10],[646,14,698,16,"enemyX"],[646,20,698,22],[646,23,698,25,"enemy"],[646,28,698,30],[646,29,698,31,"position"],[646,37,698,39],[646,38,698,40,"x"],[646,39,698,41],[646,42,698,44],[646,46,698,48],[647,10,699,10],[647,14,699,16,"enemyY"],[647,20,699,22],[647,23,699,25,"enemy"],[647,28,699,30],[647,29,699,31,"position"],[647,37,699,39],[647,38,699,40,"y"],[647,39,699,41],[647,42,699,44],[647,46,699,48],[648,10,700,10],[648,14,700,16,"distance"],[648,22,700,24],[648,25,700,27,"Math"],[648,29,700,31],[648,30,700,32,"sqrt"],[648,34,700,36],[648,35,700,37,"Math"],[648,39,700,41],[648,40,700,42,"pow"],[648,43,700,45],[648,44,700,46,"enemyX"],[648,50,700,52],[648,53,700,55,"ninjaX"],[648,59,700,61],[648,61,700,63],[648,62,700,64],[648,63,700,65],[648,66,700,68,"Math"],[648,70,700,72],[648,71,700,73,"pow"],[648,74,700,76],[648,75,700,77,"enemyY"],[648,81,700,83],[648,84,700,86,"ninjaY"],[648,90,700,92],[648,92,700,94],[648,93,700,95],[648,94,700,96],[648,95,700,97],[649,10,701,10],[649,17,701,17,"distance"],[649,25,701,25],[649,29,701,29,"ability"],[649,36,701,36],[649,37,701,37,"stats"],[649,42,701,42],[649,43,701,43,"aoeRadius"],[649,52,701,52],[650,8,702,8],[650,9,702,9],[650,10,702,10],[650,13,703,8],[650,14,703,9,"findClosestEnemyInternal"],[650,38,703,33],[650,39,703,34,"state"],[650,44,703,39],[650,45,703,40,"enemies"],[650,52,703,47],[650,53,703,48],[650,54,703,49],[650,55,703,50,"filter"],[650,61,703,56],[650,62,703,57,"Boolean"],[650,69,703,64],[650,70,703,65],[651,8,705,6,"targets"],[651,15,705,13],[651,16,705,14,"forEach"],[651,23,705,21],[651,24,705,22,"target"],[651,30,705,28],[651,34,705,32],[652,10,706,8,"state"],[652,15,706,13],[652,16,706,14,"statusEffects"],[652,29,706,27],[652,30,706,28,"addEffect"],[652,39,706,37],[652,40,706,38,"target"],[652,46,706,44],[652,47,706,45,"id"],[652,49,706,47],[652,51,706,49],[653,12,707,10,"id"],[653,14,707,12],[653,16,707,14],[653,19,707,17,"ability"],[653,26,707,24],[653,27,707,25,"id"],[653,29,707,27],[653,35,707,33],[654,12,708,10,"type"],[654,16,708,14],[654,18,708,16],[654,23,708,21],[655,12,709,10,"remainingTicks"],[655,26,709,24],[655,28,709,26,"Math"],[655,32,709,30],[655,33,709,31,"floor"],[655,38,709,36],[655,39,709,37,"ability"],[655,46,709,44],[655,47,709,45,"stats"],[655,52,709,50],[655,53,709,51,"duration"],[655,61,709,59],[655,64,709,62],[655,66,709,64],[655,67,709,65],[656,12,710,10,"tickInterval"],[656,24,710,22],[656,26,710,24],[656,28,710,26],[657,12,711,10,"lastTick"],[657,20,711,18],[657,22,711,20,"state"],[657,27,711,25],[657,28,711,26,"currentTick"],[657,39,711,37],[658,12,712,10,"value"],[658,17,712,15],[658,19,712,17,"Math"],[658,23,712,21],[658,24,712,22,"floor"],[658,29,712,27],[658,30,712,28,"damage"],[658,36,712,34],[658,39,712,37],[658,42,712,40],[658,43,712,41],[659,12,713,10,"stackable"],[659,21,713,19],[659,23,713,21],[660,10,714,8],[660,11,714,9],[660,12,714,10],[661,8,715,6],[661,9,715,7],[661,10,715,8],[662,6,716,4],[664,6,718,4],[665,6,719,4],[665,10,719,8,"ability"],[665,17,719,15],[665,18,719,16,"effects"],[665,25,719,23],[665,26,719,24,"includes"],[665,34,719,32],[665,35,719,33],[665,41,719,39],[665,42,719,40],[665,46,719,44,"ability"],[665,53,719,51],[665,54,719,52,"id"],[665,56,719,54],[665,61,719,59],[665,75,719,73],[665,77,719,75],[666,8,720,6,"console"],[666,15,720,13],[666,16,720,14,"log"],[666,19,720,17],[666,20,720,18],[666,66,720,64,"ability"],[666,73,720,71],[666,74,720,72,"stats"],[666,79,720,77],[666,80,720,78,"duration"],[666,88,720,86],[666,98,720,96],[666,99,720,97],[668,8,722,6],[669,8,723,6],[669,12,723,12,"cloneX"],[669,18,723,18],[669,21,723,21,"currentNinjaPosition"],[669,41,723,41],[669,42,723,42,"x"],[669,43,723,43],[669,46,723,46],[669,48,723,48],[669,49,723,49],[669,50,723,50],[670,8,724,6],[670,12,724,12,"cloneY"],[670,18,724,18],[670,21,724,21,"currentNinjaPosition"],[670,41,724,41],[670,42,724,42,"y"],[670,43,724,43],[670,46,724,46],[670,48,724,48],[670,49,724,49],[670,50,724,50],[672,8,726,6,"state"],[672,13,726,11],[672,14,726,12,"shadowClone"],[672,25,726,23],[672,28,726,26],[673,10,727,8,"id"],[673,12,727,10],[673,14,727,12],[673,30,727,28,"Date"],[673,34,727,32],[673,35,727,33,"now"],[673,38,727,36],[673,39,727,37],[673,40,727,38],[673,42,727,40],[674,10,728,8,"remainingTicks"],[674,24,728,22],[674,26,728,24,"Math"],[674,30,728,28],[674,31,728,29,"floor"],[674,36,728,34],[674,37,728,35,"ability"],[674,44,728,42],[674,45,728,43,"stats"],[674,50,728,48],[674,51,728,49,"duration"],[674,59,728,57],[674,62,728,60],[674,64,728,62],[674,65,728,63],[675,10,728,65],[676,10,729,8,"position"],[676,18,729,16],[676,20,729,18],[677,12,729,20,"x"],[677,13,729,21],[677,15,729,23,"cloneX"],[677,21,729,29],[678,12,729,31,"y"],[678,13,729,32],[678,15,729,34,"cloneY"],[679,10,729,41],[679,11,729,42],[680,10,730,8,"damageMultiplier"],[680,26,730,24],[680,28,730,26],[680,31,730,29],[680,32,730,31],[681,8,731,6],[681,9,731,7],[682,8,733,6,"console"],[682,15,733,13],[682,16,733,14,"log"],[682,19,733,17],[682,20,733,18],[682,63,733,61,"ability"],[682,70,733,68],[682,71,733,69,"stats"],[682,76,733,74],[682,77,733,75,"duration"],[682,85,733,83],[682,108,733,106],[682,109,733,107],[683,6,734,4],[684,4,735,2],[684,5,735,3],[686,4,737,2],[687,4,738,2],[687,8,738,8,"createProjectile"],[687,24,738,24],[687,27,738,27,"createProjectile"],[687,28,738,28,"targetEnemy"],[687,39,738,52],[687,41,738,54,"damage"],[687,47,738,68],[687,49,738,70,"ninjaPos"],[687,57,738,103],[687,59,738,105,"abilityInfo"],[687,70,738,159],[687,72,738,161,"isAOE"],[687,77,738,176],[687,79,738,178,"aoeRadius"],[687,88,738,196],[687,93,738,201],[688,6,739,4],[688,10,739,8],[688,11,739,9,"targetEnemy"],[688,22,739,20],[688,24,739,22],[689,8,740,6,"console"],[689,15,740,13],[689,16,740,14,"log"],[689,19,740,17],[689,20,740,18],[689,65,740,63],[689,66,740,64],[690,8,741,6],[690,15,741,13],[690,19,741,17],[691,6,742,4],[692,6,744,4],[692,10,744,10,"SCREEN_WIDTH"],[692,22,744,22],[692,25,744,25],[692,28,744,28],[693,6,745,4],[693,10,745,10,"GAME_AREA_HEIGHT"],[693,26,745,26],[693,29,745,29],[693,32,745,32],[693,35,745,35],[693,38,745,38],[693,39,745,39],[693,40,745,40],[694,6,746,4],[694,10,746,10,"NINJA_SIZE"],[694,20,746,20],[694,23,746,23],[694,25,746,25],[696,6,748,4],[697,6,749,4],[697,10,749,10,"ninjaX"],[697,16,749,16],[697,19,749,19,"ninjaPos"],[697,27,749,27],[697,30,749,30,"ninjaPos"],[697,38,749,38],[697,39,749,39,"x"],[697,40,749,40],[697,43,749,43,"NINJA_SIZE"],[697,53,749,53],[697,56,749,56],[697,57,749,57],[697,60,749,60,"SCREEN_WIDTH"],[697,72,749,72],[697,75,749,75],[697,76,749,76],[698,6,750,4],[698,10,750,10,"ninjaY"],[698,16,750,16],[698,19,750,19,"ninjaPos"],[698,27,750,27],[698,30,750,30,"ninjaPos"],[698,38,750,38],[698,39,750,39,"y"],[698,40,750,40],[698,43,750,43,"NINJA_SIZE"],[698,53,750,53],[698,56,750,56],[698,57,750,57],[698,60,750,60,"GAME_AREA_HEIGHT"],[698,76,750,76],[698,79,750,79],[698,80,750,80],[699,6,751,4],[699,10,751,10,"ENEMY_SIZE"],[699,20,751,20],[699,23,751,23],[699,25,751,25],[700,6,753,4],[700,10,753,10,"projectileId"],[700,22,753,22],[700,25,753,25],[700,33,753,33,"Date"],[700,37,753,37],[700,38,753,38,"now"],[700,41,753,41],[700,42,753,42],[700,43,753,43],[700,47,753,47,"Math"],[700,51,753,51],[700,52,753,52,"random"],[700,58,753,58],[700,59,753,59],[700,60,753,60],[700,62,753,62],[701,6,755,4],[701,10,755,10,"projectile"],[701,20,755,38],[701,23,755,41],[702,8,756,6,"id"],[702,10,756,8],[702,12,756,10,"projectileId"],[702,24,756,22],[703,8,757,6,"x"],[703,9,757,7],[703,11,757,9,"ninjaX"],[703,17,757,15],[704,8,758,6,"y"],[704,9,758,7],[704,11,758,9,"ninjaY"],[704,17,758,15],[705,8,759,6,"targetX"],[705,15,759,13],[705,17,759,15,"targetEnemy"],[705,28,759,26],[705,29,759,27,"position"],[705,37,759,35],[705,38,759,36,"x"],[705,39,759,37],[705,42,759,40,"ENEMY_SIZE"],[705,52,759,50],[705,55,759,53],[705,56,759,54],[706,8,760,6,"targetY"],[706,15,760,13],[706,17,760,15,"targetEnemy"],[706,28,760,26],[706,29,760,27,"position"],[706,37,760,35],[706,38,760,36,"y"],[706,39,760,37],[706,42,760,40,"ENEMY_SIZE"],[706,52,760,50],[706,55,760,53],[706,56,760,54],[707,8,761,6,"targetEnemyId"],[707,21,761,19],[707,23,761,21,"targetEnemy"],[707,34,761,32],[707,35,761,33,"id"],[707,37,761,35],[708,8,762,6,"damage"],[708,14,762,12],[708,16,762,14,"damage"],[708,22,762,20],[709,8,763,6,"startTime"],[709,17,763,15],[709,19,763,17,"Date"],[709,23,763,21],[709,24,763,22,"now"],[709,27,763,25],[709,28,763,26],[709,29,763,27],[710,8,764,6,"duration"],[710,16,764,14],[710,18,764,16],[710,21,764,19],[711,8,764,21],[712,8,765,6],[713,8,766,6,"abilityId"],[713,17,766,15],[713,19,766,17,"abilityInfo"],[713,30,766,28],[713,32,766,30,"id"],[713,34,766,32],[713,38,766,36],[713,54,766,52],[714,8,767,6,"abilityName"],[714,19,767,17],[714,21,767,19,"abilityInfo"],[714,32,767,30],[714,34,767,32,"name"],[714,38,767,36],[714,42,767,40],[714,58,767,56],[715,8,768,6,"abilityIcon"],[715,19,768,17],[715,21,768,19,"abilityInfo"],[715,32,768,30],[715,34,768,32,"icon"],[715,38,768,36],[715,42,768,40],[715,46,768,44],[716,8,768,46],[717,8,769,6],[718,8,770,6,"isAOE"],[718,13,770,11],[718,15,770,13,"isAOE"],[718,20,770,18],[718,24,770,22],[718,29,770,27],[719,8,771,6,"aoeRadius"],[719,17,771,15],[719,19,771,17,"aoeRadius"],[719,28,771,26],[719,32,771,30],[720,6,772,4],[720,7,772,5],[721,6,774,4,"console"],[721,13,774,11],[721,14,774,12,"log"],[721,17,774,15],[721,18,774,16],[721,44,774,42,"abilityInfo"],[721,55,774,53],[721,57,774,55,"name"],[721,61,774,59],[721,65,774,63],[721,81,774,79],[721,101,774,99,"projectileId"],[721,113,774,111],[721,128,774,126,"targetEnemy"],[721,139,774,137],[721,140,774,138,"name"],[721,144,774,142],[721,152,774,150,"damage"],[721,158,774,156],[721,167,774,165],[721,168,774,166],[722,6,775,4,"console"],[722,13,775,11],[722,14,775,12,"log"],[722,17,775,15],[722,18,775,16],[722,48,775,46,"isAOE"],[722,53,775,51],[722,68,775,66,"aoeRadius"],[722,77,775,75],[722,89,775,87,"damage"],[722,95,775,93],[722,97,775,95],[722,98,775,96],[723,6,777,4,"console"],[723,13,777,11],[723,14,777,12,"log"],[723,17,777,15],[723,18,777,16],[723,53,777,51,"targetEnemy"],[723,64,777,62],[723,65,777,63,"id"],[723,67,777,65],[723,75,777,73,"damage"],[723,81,777,79],[723,90,777,88],[723,91,777,89],[724,6,778,4,"console"],[724,13,778,11],[724,14,778,12,"log"],[724,17,778,15],[724,18,778,16],[724,53,778,51,"ninjaX"],[724,59,778,57],[724,64,778,62,"ninjaY"],[724,70,778,68],[724,87,778,85,"projectile"],[724,97,778,95],[724,98,778,96,"targetX"],[724,105,778,103],[724,110,778,108,"projectile"],[724,120,778,118],[724,121,778,119,"targetY"],[724,128,778,126],[724,131,778,129],[724,132,778,130],[725,6,780,4,"setProjectiles"],[725,20,780,18],[725,21,780,19,"prev"],[725,25,780,23],[725,29,780,27],[725,30,780,28],[725,33,780,31,"prev"],[725,37,780,35],[725,39,780,37,"projectile"],[725,49,780,47],[725,50,780,48],[725,51,780,49],[727,6,782,4],[728,6,783,4,"setTimeout"],[728,16,783,14],[728,17,783,15],[728,23,783,21],[729,8,784,6,"handleProjectileHit"],[729,27,784,25],[729,28,784,26,"projectile"],[729,38,784,36],[729,39,784,37],[730,6,785,4],[730,7,785,5],[730,9,785,7],[730,12,785,10],[730,13,785,11],[731,6,787,4],[731,13,787,11,"projectile"],[731,23,787,21],[732,4,788,2],[732,5,788,3],[734,4,790,2],[735,4,791,2],[735,8,791,8,"spawnTestEnemy"],[735,22,791,22],[735,25,791,26,"state"],[735,30,791,44],[735,34,791,49],[736,6,792,4,"console"],[736,13,792,11],[736,14,792,12,"log"],[736,17,792,15],[736,18,792,16],[736,83,792,81],[736,84,792,82],[738,6,794,4],[739,6,795,4],[739,10,795,10,"zoneEnemy"],[739,19,795,19],[739,22,795,22,"spawnZoneEnemy"],[739,36,795,36],[739,37,795,37],[739,38,795,38],[740,6,796,4],[740,10,796,8],[740,11,796,9,"zoneEnemy"],[740,20,796,18],[740,22,796,20],[741,8,797,6,"console"],[741,15,797,13],[741,16,797,14,"log"],[741,19,797,17],[741,20,797,18],[741,76,797,74],[741,77,797,75],[742,8,798,6],[743,8,799,6,"spawnBasicTestEnemy"],[743,27,799,25],[743,28,799,26,"state"],[743,33,799,31],[743,34,799,32],[744,8,800,6],[745,6,801,4],[746,6,803,4,"console"],[746,13,803,11],[746,14,803,12,"log"],[746,17,803,15],[746,18,803,16],[746,44,803,42,"zoneEnemy"],[746,53,803,51],[746,54,803,52,"name"],[746,58,803,56],[746,63,803,61,"zoneEnemy"],[746,72,803,70],[746,73,803,71,"typeId"],[746,79,803,77],[746,94,803,92,"currentZone"],[746,105,803,103],[746,107,803,105,"id"],[746,109,803,107],[746,119,803,117,"currentZoneLevel"],[746,135,803,133],[746,137,803,135,"level"],[746,142,803,140],[746,144,803,142],[746,145,803,143],[748,6,805,4],[749,6,806,4],[749,10,806,10,"combatEnemy"],[749,21,806,34],[749,24,806,37],[750,8,807,6,"id"],[750,10,807,8],[750,12,807,10,"zoneEnemy"],[750,21,807,19],[750,22,807,20,"id"],[750,24,807,22],[751,8,808,6,"name"],[751,12,808,10],[751,14,808,12,"zoneEnemy"],[751,23,808,21],[751,24,808,22,"name"],[751,28,808,26],[752,8,809,6,"health"],[752,14,809,12],[752,16,809,14,"zoneEnemy"],[752,25,809,23],[752,26,809,24,"hp"],[752,28,809,26],[753,8,810,6,"maxHealth"],[753,17,810,15],[753,19,810,17,"zoneEnemy"],[753,28,810,26],[753,29,810,27,"maxHP"],[753,34,810,32],[754,8,811,6,"stats"],[754,13,811,11],[754,15,811,13],[755,10,812,8,"attack"],[755,16,812,14],[755,18,812,16,"zoneEnemy"],[755,27,812,25],[755,28,812,26,"attack"],[755,34,812,32],[756,10,813,8,"defense"],[756,17,813,15],[756,19,813,17],[756,21,813,19],[757,10,813,21],[758,10,814,8,"health"],[758,16,814,14],[758,18,814,16,"zoneEnemy"],[758,27,814,25],[758,28,814,26,"hp"],[758,30,814,28],[759,10,815,8,"maxHealth"],[759,19,815,17],[759,21,815,19,"zoneEnemy"],[759,30,815,28],[759,31,815,29,"maxHP"],[759,36,815,34],[760,10,816,8,"critChance"],[760,20,816,18],[760,22,816,20],[760,23,816,21],[761,10,817,8,"critDamage"],[761,20,817,18],[761,22,817,20],[761,25,817,23],[762,10,818,8,"cooldownReduction"],[762,27,818,25],[762,29,818,27],[763,8,819,6],[763,9,819,7],[764,8,820,6,"position"],[764,16,820,14],[764,18,820,16,"zoneEnemy"],[764,27,820,25],[764,28,820,26,"position"],[764,36,820,34],[765,8,821,6,"lastDamaged"],[765,19,821,17],[765,21,821,19],[765,22,821,20],[766,8,822,6],[767,8,823,6,"zoneTypeId"],[767,18,823,16],[767,20,823,18,"zoneEnemy"],[767,29,823,27],[767,30,823,28,"typeId"],[767,36,823,34],[768,8,824,6,"zoneXP"],[768,14,824,12],[768,16,824,14,"zoneEnemy"],[768,25,824,23],[768,26,824,24,"xp"],[769,6,825,4],[769,7,825,5],[770,6,827,4,"console"],[770,13,827,11],[770,14,827,12,"log"],[770,17,827,15],[770,18,827,16],[770,42,827,40,"combatEnemy"],[770,53,827,51],[770,54,827,52,"name"],[770,58,827,56],[770,67,827,65,"combatEnemy"],[770,78,827,76],[770,79,827,77,"health"],[770,85,827,83],[770,100,827,98,"currentZone"],[770,111,827,109],[770,113,827,111,"id"],[770,115,827,113],[770,125,827,123,"currentZoneLevel"],[770,141,827,139],[770,143,827,141,"level"],[770,148,827,146],[770,150,827,148],[770,151,827,149],[771,6,828,4,"state"],[771,11,828,9],[771,12,828,10,"enemies"],[771,19,828,17],[771,20,828,18,"push"],[771,24,828,22],[771,25,828,23,"combatEnemy"],[771,36,828,34],[771,37,828,35],[772,4,829,2],[772,5,829,3],[774,4,831,2],[775,4,832,2],[775,8,832,8,"spawnBasicTestEnemy"],[775,27,832,27],[775,30,832,31,"state"],[775,35,832,49],[775,39,832,54],[776,6,833,4],[776,10,833,10,"SCREEN_WIDTH"],[776,22,833,22],[776,25,833,25],[776,28,833,28],[777,6,834,4],[777,10,834,10,"GAME_AREA_HEIGHT"],[777,26,834,26],[777,29,834,29],[777,32,834,32],[777,35,834,35],[777,38,834,38],[778,6,835,4],[778,10,835,10,"ENEMY_SIZE"],[778,20,835,20],[778,23,835,23],[778,25,835,25],[779,6,837,4],[779,10,837,10,"x"],[779,11,837,11],[779,14,837,14,"Math"],[779,18,837,18],[779,19,837,19,"random"],[779,25,837,25],[779,26,837,26],[779,27,837,27],[779,31,837,31,"SCREEN_WIDTH"],[779,43,837,43],[779,46,837,46,"ENEMY_SIZE"],[779,56,837,56],[779,59,837,59],[779,60,837,60],[779,61,837,61],[779,64,837,64,"ENEMY_SIZE"],[779,74,837,74],[780,6,838,4],[780,10,838,10,"y"],[780,11,838,11],[780,14,838,14,"Math"],[780,18,838,18],[780,19,838,19,"random"],[780,25,838,25],[780,26,838,26],[780,27,838,27],[780,31,838,31,"GAME_AREA_HEIGHT"],[780,47,838,47],[780,50,838,50,"ENEMY_SIZE"],[780,60,838,60],[780,63,838,63],[780,64,838,64],[780,65,838,65],[780,68,838,68,"ENEMY_SIZE"],[780,78,838,78],[781,6,840,4],[781,10,840,10,"enemy"],[781,15,840,28],[781,18,840,31],[782,8,841,6,"id"],[782,10,841,8],[782,12,841,10],[782,30,841,28,"Date"],[782,34,841,32],[782,35,841,33,"now"],[782,38,841,36],[782,39,841,37],[782,40,841,38],[782,44,841,42,"Math"],[782,48,841,46],[782,49,841,47,"random"],[782,55,841,53],[782,56,841,54],[782,57,841,55],[782,59,841,57],[783,8,842,6,"name"],[783,12,842,10],[783,14,842,12],[783,26,842,24,"Math"],[783,30,842,28],[783,31,842,29,"floor"],[783,36,842,34],[783,37,842,35,"Math"],[783,41,842,39],[783,42,842,40,"random"],[783,48,842,46],[783,49,842,47],[783,50,842,48],[783,53,842,51],[783,56,842,54],[783,57,842,55],[783,59,842,57],[784,8,843,6,"health"],[784,14,843,12],[784,16,843,14],[784,18,843,16],[785,8,844,6,"maxHealth"],[785,17,844,15],[785,19,844,17],[785,21,844,19],[786,8,845,6,"stats"],[786,13,845,11],[786,15,845,13],[787,10,846,8,"attack"],[787,16,846,14],[787,18,846,16],[787,20,846,18],[788,10,847,8,"defense"],[788,17,847,15],[788,19,847,17],[788,21,847,19],[789,10,848,8,"health"],[789,16,848,14],[789,18,848,16],[789,20,848,18],[790,10,849,8,"maxHealth"],[790,19,849,17],[790,21,849,19],[790,23,849,21],[791,10,850,8,"critChance"],[791,20,850,18],[791,22,850,20],[791,23,850,21],[792,10,851,8,"critDamage"],[792,20,851,18],[792,22,851,20],[792,25,851,23],[793,10,852,8,"cooldownReduction"],[793,27,852,25],[793,29,852,27],[794,8,853,6],[794,9,853,7],[795,8,854,6,"position"],[795,16,854,14],[795,18,854,16],[796,10,854,18,"x"],[796,11,854,19],[797,10,854,21,"y"],[798,8,854,23],[798,9,854,24],[799,8,855,6,"lastDamaged"],[799,19,855,17],[799,21,855,19],[800,6,856,4],[800,7,856,5],[801,6,858,4,"console"],[801,13,858,11],[801,14,858,12,"log"],[801,17,858,15],[801,18,858,16],[801,42,858,40,"enemy"],[801,47,858,45],[801,48,858,46,"name"],[801,52,858,50],[801,60,858,58,"Math"],[801,64,858,62],[801,65,858,63,"round"],[801,70,858,68],[801,71,858,69,"x"],[801,72,858,70],[801,73,858,71],[801,78,858,76,"Math"],[801,82,858,80],[801,83,858,81,"round"],[801,88,858,86],[801,89,858,87,"y"],[801,90,858,88],[801,91,858,89],[801,94,858,92],[801,95,858,93],[802,6,859,4,"state"],[802,11,859,9],[802,12,859,10,"enemies"],[802,19,859,17],[802,20,859,18,"push"],[802,24,859,22],[802,25,859,23,"enemy"],[802,30,859,28],[802,31,859,29],[803,4,860,2],[803,5,860,3],[805,4,862,2],[806,4,863,2],[806,8,863,8,"startCombat"],[806,19,863,19],[806,22,863,22,"React"],[806,27,863,27],[806,28,863,27,"default"],[806,35,863,27],[806,36,863,28,"useCallback"],[806,47,863,39],[806,48,863,40],[806,54,863,46],[807,6,864,4,"console"],[807,13,864,11],[807,14,864,12,"log"],[807,17,864,15],[807,18,864,16],[807,63,864,61],[807,64,864,62],[808,6,865,4,"setCombatState"],[808,20,865,18],[808,21,865,19,"prev"],[808,25,865,23],[808,30,865,28],[809,8,865,30],[809,11,865,33,"prev"],[809,15,865,37],[810,8,865,39,"isInCombat"],[810,18,865,49],[810,20,865,51],[811,6,865,56],[811,7,865,57],[811,8,865,58],[811,9,865,59],[813,6,867,4],[814,6,868,4,"combatEngine"],[814,25,868,16],[814,26,868,16,"combatEngine"],[814,38,868,16],[814,39,868,17,"addTickCallback"],[814,54,868,32],[814,55,868,33,"handleCombatTick"],[814,71,868,49],[814,72,868,50],[815,6,869,4,"console"],[815,13,869,11],[815,14,869,12,"log"],[815,17,869,15],[815,18,869,16],[815,62,869,60],[815,63,869,61],[817,6,871,4],[818,6,872,4,"combatEngine"],[818,25,872,16],[818,26,872,16,"combatEngine"],[818,38,872,16],[818,39,872,17,"start"],[818,44,872,22],[818,45,872,23],[818,46,872,24],[819,4,873,2],[819,5,873,3],[819,7,873,5],[819,8,873,6,"combatEngine"],[819,27,873,18],[819,28,873,18,"combatEngine"],[819,40,873,18],[819,42,873,20,"handleCombatTick"],[819,58,873,36],[819,59,873,37],[819,60,873,38],[821,4,875,2],[822,4,876,2],[822,8,876,8,"stopCombat"],[822,18,876,18],[822,21,876,21,"React"],[822,26,876,26],[822,27,876,26,"default"],[822,34,876,26],[822,35,876,27,"useCallback"],[822,46,876,38],[822,47,876,39],[822,53,876,45],[823,6,877,4,"setCombatState"],[823,20,877,18],[823,21,877,19,"prev"],[823,25,877,23],[823,30,877,28],[824,8,877,30],[824,11,877,33,"prev"],[824,15,877,37],[825,8,877,39,"isInCombat"],[825,18,877,49],[825,20,877,51],[826,6,877,57],[826,7,877,58],[826,8,877,59],[826,9,877,60],[827,6,878,4,"combatEngine"],[827,25,878,16],[827,26,878,16,"combatEngine"],[827,38,878,16],[827,39,878,17,"removeTickCallback"],[827,57,878,35],[827,58,878,36,"handleCombatTick"],[827,74,878,52],[827,75,878,53],[828,4,879,2],[828,5,879,3],[828,7,879,5],[828,8,879,6,"combatEngine"],[828,27,879,18],[828,28,879,18,"combatEngine"],[828,40,879,18],[828,42,879,20,"handleCombatTick"],[828,58,879,36],[828,59,879,37],[828,60,879,38],[830,4,881,2],[831,4,882,2],[831,8,882,8,"equipAbility"],[831,20,882,20],[831,23,882,23,"equipAbility"],[831,24,882,24,"abilityId"],[831,33,882,41],[831,35,882,43,"slotIndex"],[831,44,882,60],[831,49,882,74],[832,6,883,4],[832,13,883,11,"combatState"],[832,24,883,22],[832,25,883,23,"abilityManager"],[832,39,883,37],[832,40,883,38,"equipAbility"],[832,52,883,50],[832,53,883,51,"abilityId"],[832,62,883,60],[832,64,883,62,"slotIndex"],[832,73,883,71],[832,74,883,72],[833,4,884,2],[833,5,884,3],[834,4,886,2],[834,8,886,8,"getDeck"],[834,15,886,15],[834,18,886,18,"getDeck"],[834,19,886,18],[834,24,886,24],[835,6,887,4],[835,13,887,11,"combatState"],[835,24,887,22],[835,25,887,23,"abilityManager"],[835,39,887,37],[835,40,887,38,"getDeck"],[835,47,887,45],[835,48,887,46],[835,49,887,47],[836,4,888,2],[836,5,888,3],[837,4,890,2],[837,8,890,8,"getAvailableAbilities"],[837,29,890,29],[837,32,890,32,"getAvailableAbilities"],[837,33,890,32],[837,38,890,38],[838,6,891,4],[838,13,891,11,"combatState"],[838,24,891,22],[838,25,891,23,"abilityManager"],[838,39,891,37],[838,40,891,38,"getAvailableAbilities"],[838,61,891,59],[838,62,891,60],[838,63,891,61],[839,4,892,2],[839,5,892,3],[840,4,894,2],[840,8,894,8,"upgradeAbility"],[840,22,894,22],[840,25,894,26,"abilityId"],[840,34,894,43],[840,38,894,57],[841,6,895,4],[841,13,895,11,"combatState"],[841,24,895,22],[841,25,895,23,"abilityManager"],[841,39,895,37],[841,40,895,38,"upgradeAbility"],[841,54,895,52],[841,55,895,53,"abilityId"],[841,64,895,62],[841,65,895,63],[842,4,896,2],[842,5,896,3],[844,4,898,2],[845,4,899,2],[845,8,899,8,"clearAllEnemies"],[845,23,899,23],[845,26,899,26,"clearAllEnemies"],[845,27,899,26],[845,32,899,32],[846,6,900,4,"console"],[846,13,900,11],[846,14,900,12,"log"],[846,17,900,15],[846,18,900,16],[846,67,900,65],[846,68,900,66],[847,6,901,4,"setCombatState"],[847,20,901,18],[847,21,901,19,"prev"],[847,25,901,23],[847,30,901,28],[848,8,902,6],[848,11,902,9,"prev"],[848,15,902,13],[849,8,903,6,"enemies"],[849,15,903,13],[849,17,903,15],[850,6,904,4],[850,7,904,5],[850,8,904,6],[850,9,904,7],[851,4,905,2],[851,5,905,3],[853,4,907,2],[854,4,908,2],[854,8,908,8,"triggerLevelUpExplosion"],[854,31,908,31],[854,34,908,34,"triggerLevelUpExplosion"],[854,35,908,34],[854,40,908,40],[855,6,909,4,"console"],[855,13,909,11],[855,14,909,12,"log"],[855,17,909,15],[855,18,909,16],[855,70,909,68],[855,71,909,69],[856,6,911,4],[856,10,911,10,"explosionTime"],[856,23,911,23],[856,26,911,26,"Date"],[856,30,911,30],[856,31,911,31,"now"],[856,34,911,34],[856,35,911,35],[856,36,911,36],[857,6,912,4,"setLastExplosionTime"],[857,26,912,24],[857,27,912,25,"explosionTime"],[857,40,912,38],[857,41,912,39],[858,6,914,4,"setCombatState"],[858,20,914,18],[858,21,914,19,"prev"],[858,25,914,23],[858,29,914,27],[859,8,915,6],[860,8,916,6],[860,12,916,12,"enemyCount"],[860,22,916,22],[860,25,916,25,"prev"],[860,29,916,29],[860,30,916,30,"enemies"],[860,37,916,37],[860,38,916,38,"length"],[860,44,916,44],[861,8,917,6],[861,12,917,12,"explosionXP"],[861,23,917,23],[861,26,917,26,"enemyCount"],[861,36,917,36],[861,39,917,39],[861,43,917,43],[861,44,917,44],[861,45,917,45],[862,8,918,6],[862,12,918,12,"explosionGold"],[862,25,918,25],[862,28,918,28,"enemyCount"],[862,38,918,38],[862,41,918,41],[862,44,918,44],[862,45,918,45],[862,46,918,46],[864,8,920,6,"console"],[864,15,920,13],[864,16,920,14,"log"],[864,19,920,17],[864,20,920,18],[864,44,920,42,"enemyCount"],[864,54,920,52],[864,76,920,74,"explosionXP"],[864,87,920,85],[864,98,920,96,"explosionGold"],[864,111,920,109],[864,118,920,116],[864,119,920,117],[866,8,922,6],[867,8,923,6],[867,12,923,10,"explosionXP"],[867,23,923,21],[867,26,923,24],[867,27,923,25],[867,29,923,27],[868,10,924,8,"setTimeout"],[868,20,924,18],[868,21,924,19],[868,27,924,25],[869,12,925,10,"game"],[869,16,925,14],[869,17,925,15,"updateNinja"],[869,28,925,26],[869,29,925,28,"ninja"],[869,34,925,33],[869,39,925,39],[870,14,926,12,"experience"],[870,24,926,22],[870,26,926,24,"ninja"],[870,31,926,29],[870,32,926,30,"experience"],[870,42,926,40],[870,45,926,43,"explosionXP"],[870,56,926,54],[871,14,927,12,"gold"],[871,18,927,16],[871,20,927,18,"ninja"],[871,25,927,23],[871,26,927,24,"gold"],[871,30,927,28],[871,33,927,31,"explosionGold"],[872,12,928,10],[872,13,928,11],[872,14,928,12],[872,15,928,13],[873,10,929,8],[873,11,929,9],[873,13,929,11],[873,14,929,12],[873,15,929,13],[873,16,929,14],[873,17,929,15],[874,8,930,6],[876,8,932,6],[877,8,933,6],[878,8,934,6],[878,12,934,12,"damagedEnemies"],[878,26,934,26],[878,29,934,29,"prev"],[878,33,934,33],[878,34,934,34,"enemies"],[878,41,934,41],[878,42,934,42,"map"],[878,45,934,45],[878,46,934,46,"enemy"],[878,51,934,51],[878,56,934,56],[879,10,935,8],[879,13,935,11,"enemy"],[879,18,935,16],[880,10,936,8,"health"],[880,16,936,14],[880,18,936,16],[880,19,936,17],[881,10,936,19],[882,10,937,8,"lastDamaged"],[882,21,937,19],[882,23,937,21,"combatEngine"],[882,42,937,33],[882,43,937,33,"combatEngine"],[882,55,937,33],[882,56,937,34,"getCurrentTick"],[882,70,937,48],[882,71,937,49],[883,8,938,6],[883,9,938,7],[883,10,938,8],[883,11,938,9],[884,8,940,6],[884,15,940,13],[885,10,941,8],[885,13,941,11,"prev"],[885,17,941,15],[886,10,942,8,"enemies"],[886,17,942,15],[886,19,942,17,"damagedEnemies"],[887,8,943,6],[887,9,943,7],[888,6,944,4],[888,7,944,5],[888,8,944,6],[889,4,945,2],[889,5,945,3],[891,4,947,2],[892,4,948,2],[892,8,948,8,"spawnEnemy"],[892,18,948,18],[892,21,948,22,"position"],[892,29,948,57],[892,33,948,75],[893,6,949,4],[893,10,949,10,"SCREEN_WIDTH"],[893,22,949,22],[893,25,949,25],[893,28,949,28],[894,6,950,4],[894,10,950,10,"GAME_AREA_HEIGHT"],[894,26,950,26],[894,29,950,29],[894,32,950,32],[894,35,950,35],[894,38,950,38],[894,39,950,39],[894,40,950,40],[895,6,951,4],[895,10,951,10,"ENEMY_SIZE"],[895,20,951,20],[895,23,951,23],[895,25,951,25],[897,6,953,4],[898,6,954,4],[898,10,954,10,"x"],[898,11,954,11],[898,14,954,14,"position"],[898,22,954,22],[898,24,954,24,"x"],[898,25,954,25],[898,29,954,29,"Math"],[898,33,954,33],[898,34,954,34,"random"],[898,40,954,40],[898,41,954,41],[898,42,954,42],[898,46,954,46,"SCREEN_WIDTH"],[898,58,954,58],[898,61,954,61,"ENEMY_SIZE"],[898,71,954,71],[898,74,954,74],[898,75,954,75],[898,76,954,76],[898,79,954,79,"ENEMY_SIZE"],[898,89,954,89],[899,6,955,4],[899,10,955,10,"y"],[899,11,955,11],[899,14,955,14,"position"],[899,22,955,22],[899,24,955,24,"y"],[899,25,955,25],[899,29,955,29,"Math"],[899,33,955,33],[899,34,955,34,"random"],[899,40,955,40],[899,41,955,41],[899,42,955,42],[899,46,955,46,"GAME_AREA_HEIGHT"],[899,62,955,62],[899,65,955,65,"ENEMY_SIZE"],[899,75,955,75],[899,78,955,78],[899,79,955,79],[899,80,955,80],[899,83,955,83,"ENEMY_SIZE"],[899,93,955,93],[900,6,957,4],[900,10,957,10,"enemy"],[900,15,957,28],[900,18,957,31],[901,8,958,6,"id"],[901,10,958,8],[901,12,958,10],[901,21,958,19],[901,23,958,21,"enemyCounter"],[901,35,958,33],[901,37,958,35],[902,8,959,6,"name"],[902,12,959,10],[902,14,959,12],[902,24,959,22],[903,8,960,6,"health"],[903,14,960,12],[903,16,960,14],[903,19,960,17],[904,8,961,6,"maxHealth"],[904,17,961,15],[904,19,961,17],[904,22,961,20],[905,8,962,6,"stats"],[905,13,962,11],[905,15,962,13],[906,10,963,8,"attack"],[906,16,963,14],[906,18,963,16],[906,20,963,18],[907,10,964,8,"defense"],[907,17,964,15],[907,19,964,17],[907,21,964,19],[908,10,965,8,"health"],[908,16,965,14],[908,18,965,16],[908,21,965,19],[909,10,966,8,"maxHealth"],[909,19,966,17],[909,21,966,19],[909,24,966,22],[910,10,967,8,"critChance"],[910,20,967,18],[910,22,967,20],[910,23,967,21],[911,10,968,8,"critDamage"],[911,20,968,18],[911,22,968,20],[911,25,968,23],[912,10,969,8,"cooldownReduction"],[912,27,969,25],[912,29,969,27],[913,8,970,6],[913,9,970,7],[914,8,971,6,"position"],[914,16,971,14],[914,18,971,16],[915,10,971,18,"x"],[915,11,971,19],[916,10,971,21,"y"],[917,8,971,23],[917,9,971,24],[918,8,972,6,"lastDamaged"],[918,19,972,17],[918,21,972,19],[919,6,973,4],[919,7,973,5],[920,6,975,4,"setCombatState"],[920,20,975,18],[920,21,975,19,"prev"],[920,25,975,23],[920,30,975,28],[921,8,976,6],[921,11,976,9,"prev"],[921,15,976,13],[922,8,977,6,"enemies"],[922,15,977,13],[922,17,977,15],[922,18,977,16],[922,21,977,19,"prev"],[922,25,977,23],[922,26,977,24,"enemies"],[922,33,977,31],[922,35,977,33,"enemy"],[922,40,977,38],[923,6,978,4],[923,7,978,5],[923,8,978,6],[923,9,978,7],[924,6,980,4],[924,13,980,11,"enemy"],[924,18,980,16],[925,4,981,2],[925,5,981,3],[927,4,983,2],[928,4,984,2],[928,8,984,8,"spawnBoss"],[928,17,984,17],[928,20,984,21,"bossEnemy"],[928,29,984,43],[928,33,984,48],[929,6,985,4,"console"],[929,13,985,11],[929,14,985,12,"log"],[929,17,985,15],[929,18,985,16],[929,39,985,37,"bossEnemy"],[929,48,985,46],[929,49,985,47,"name"],[929,53,985,51],[929,90,985,88],[929,91,985,89],[930,6,986,4,"setCombatState"],[930,20,986,18],[930,21,986,19,"prev"],[930,25,986,23],[930,30,986,28],[931,8,987,6],[931,11,987,9,"prev"],[931,15,987,13],[932,8,988,6,"enemies"],[932,15,988,13],[932,17,988,15],[932,18,988,16,"bossEnemy"],[932,27,988,25],[932,28,988,26],[932,29,988,27],[933,6,989,4],[933,7,989,5],[933,8,989,6],[933,9,989,7],[934,4,990,2],[934,5,990,3],[936,4,992,2],[937,4,993,2],[937,8,993,8,"clearSpecificEnemy"],[937,26,993,26],[937,29,993,30,"enemyId"],[937,36,993,45],[937,40,993,50],[938,6,994,4,"setCombatState"],[938,20,994,18],[938,21,994,19,"prev"],[938,25,994,23],[938,30,994,28],[939,8,995,6],[939,11,995,9,"prev"],[939,15,995,13],[940,8,996,6,"enemies"],[940,15,996,13],[940,17,996,15,"prev"],[940,21,996,19],[940,22,996,20,"enemies"],[940,29,996,27],[940,30,996,28,"filter"],[940,36,996,34],[940,37,996,35,"enemy"],[940,42,996,40],[940,46,996,44,"enemy"],[940,51,996,49],[940,52,996,50,"id"],[940,54,996,52],[940,59,996,57,"enemyId"],[940,66,996,64],[941,6,997,4],[941,7,997,5],[941,8,997,6],[941,9,997,7],[942,4,998,2],[942,5,998,3],[944,4,1000,2],[945,4,1001,2],[945,8,1001,8,"useAbilityManually"],[945,26,1001,26],[945,29,1001,26,"_s3"],[945,32,1001,26],[945,33,1001,29],[945,37,1001,29,"useCallback"],[945,43,1001,40],[945,44,1001,40,"useCallback"],[945,55,1001,40],[945,57,1001,40,"_s3"],[945,60,1001,40],[945,61,1001,42,"slotIndex"],[945,70,1001,59],[945,74,1001,73],[946,6,1001,73,"_s3"],[946,9,1001,73],[947,6,1002,4,"console"],[947,13,1002,11],[947,14,1002,12,"log"],[947,17,1002,15],[947,18,1002,16],[947,64,1002,62,"slotIndex"],[947,73,1002,71],[947,82,1002,80],[947,83,1002,81],[948,6,1003,4,"console"],[948,13,1003,11],[948,14,1003,12,"log"],[948,17,1003,15],[948,18,1003,16],[948,65,1003,63,"slotIndex"],[948,74,1003,72],[948,76,1003,74],[948,77,1003,75],[949,6,1004,4,"console"],[949,13,1004,11],[949,14,1004,12,"log"],[949,17,1004,15],[949,18,1004,16],[949,53,1004,51,"slotIndex"],[949,62,1004,60],[949,64,1004,62],[949,65,1004,63],[951,6,1006,4],[952,6,1007,4],[952,10,1007,8],[952,11,1007,9,"game"],[952,15,1007,13],[952,16,1007,14,"gameState"],[952,25,1007,23],[952,26,1007,24,"isAlive"],[952,33,1007,31],[952,35,1007,33],[953,8,1008,6,"console"],[953,15,1008,13],[953,16,1008,14,"log"],[953,19,1008,17],[953,20,1008,18],[953,70,1008,68],[953,71,1008,69],[954,8,1009,6],[954,15,1009,13],[954,20,1009,18],[955,6,1010,4],[957,6,1012,4],[958,6,1013,4],[958,10,1013,10,"isReady"],[958,17,1013,17],[958,20,1013,20,"combatState"],[958,31,1013,31],[958,32,1013,32,"abilityManager"],[958,46,1013,46],[958,47,1013,47,"isAbilityReady"],[958,61,1013,61],[958,62,1013,62,"slotIndex"],[958,71,1013,71],[958,72,1013,72],[959,6,1014,4],[959,10,1014,8],[959,11,1014,9,"isReady"],[959,18,1014,16],[959,20,1014,18],[960,8,1015,6,"console"],[960,15,1015,13],[960,16,1015,14,"log"],[960,19,1015,17],[960,20,1015,18],[960,41,1015,39,"slotIndex"],[960,50,1015,48],[960,85,1015,83],[960,86,1015,84],[961,8,1016,6],[961,15,1016,13],[961,20,1016,18],[962,6,1017,4],[964,6,1019,4],[965,6,1020,4],[965,10,1020,8,"combatState"],[965,21,1020,19],[965,22,1020,20,"enemies"],[965,29,1020,27],[965,30,1020,28,"length"],[965,36,1020,34],[965,41,1020,39],[965,42,1020,40],[965,44,1020,42],[966,8,1021,6,"console"],[966,15,1021,13],[966,16,1021,14,"log"],[966,19,1021,17],[966,20,1021,18],[966,69,1021,67],[966,70,1021,68],[967,8,1022,6],[967,15,1022,13],[967,20,1022,18],[968,6,1023,4],[970,6,1025,4],[971,6,1026,4],[971,10,1026,10,"currentTick"],[971,21,1026,21],[971,24,1026,24,"combatEngine"],[971,43,1026,36],[971,44,1026,36,"combatEngine"],[971,56,1026,36],[971,57,1026,37,"getCurrentTick"],[971,71,1026,51],[971,72,1026,52],[971,73,1026,53],[972,6,1027,4],[972,10,1027,10,"success"],[972,17,1027,17],[972,20,1027,20,"combatState"],[972,31,1027,31],[972,32,1027,32,"abilityManager"],[972,46,1027,46],[972,47,1027,47,"useAbility"],[972,57,1027,57],[972,58,1027,58,"slotIndex"],[972,67,1027,67],[972,69,1027,69,"currentTick"],[972,80,1027,80],[972,81,1027,81],[973,6,1029,4],[973,10,1029,8,"success"],[973,17,1029,15],[973,19,1029,17],[974,8,1030,6],[975,8,1031,6,"setCombatState"],[975,22,1031,20],[975,23,1031,21,"prev"],[975,27,1031,25],[975,31,1031,29],[976,10,1032,8],[976,14,1032,14,"newState"],[976,22,1032,22],[976,25,1032,25],[977,12,1032,27],[977,15,1032,30,"prev"],[978,10,1032,35],[978,11,1032,36],[979,10,1033,8,"castAbility"],[979,21,1033,19],[979,22,1033,20,"newState"],[979,30,1033,28],[979,32,1033,30,"slotIndex"],[979,41,1033,39],[979,42,1033,40],[980,10,1034,8],[980,17,1034,15,"newState"],[980,25,1034,23],[981,8,1035,6],[981,9,1035,7],[981,10,1035,8],[982,8,1037,6,"console"],[982,15,1037,13],[982,16,1037,14,"log"],[982,19,1037,17],[982,20,1037,18],[982,65,1037,63,"slotIndex"],[982,74,1037,72],[982,76,1037,74],[982,77,1037,75],[983,8,1038,6],[983,15,1038,13],[983,19,1038,17],[984,6,1039,4],[984,7,1039,5],[984,13,1039,11],[985,8,1040,6,"console"],[985,15,1040,13],[985,16,1040,14,"log"],[985,19,1040,17],[985,20,1040,18],[985,61,1040,59,"slotIndex"],[985,70,1040,68],[985,72,1040,70],[985,73,1040,71],[986,8,1041,6],[986,15,1041,13],[986,20,1041,18],[987,6,1042,4],[988,4,1043,2],[988,5,1043,3],[988,46,1043,5],[988,47,1043,6,"combatState"],[988,58,1043,17],[988,59,1043,18,"abilityManager"],[988,73,1043,32],[988,75,1043,34,"combatState"],[988,86,1043,45],[988,87,1043,46,"enemies"],[988,94,1043,53],[988,95,1043,54],[988,96,1043,55],[989,4,1044,2],[989,8,1044,2,"useEffect"],[989,14,1044,11],[989,15,1044,11,"useEffect"],[989,24,1044,11],[989,26,1044,12],[989,32,1044,18],[990,6,1045,4,"combatEngine"],[990,25,1045,16],[990,26,1045,16,"combatEngine"],[990,38,1045,16],[990,39,1045,17,"start"],[990,44,1045,22],[990,45,1045,23],[990,46,1045,24],[992,6,1047,4],[993,6,1048,4],[994,6,1049,4,"console"],[994,13,1049,11],[994,14,1049,12,"log"],[994,17,1049,15],[994,18,1049,16],[994,97,1049,95],[994,98,1049,96],[995,6,1051,4],[995,13,1051,11],[995,19,1051,17],[996,8,1052,6,"combatEngine"],[996,27,1052,18],[996,28,1052,18,"combatEngine"],[996,40,1052,18],[996,41,1052,19,"stop"],[996,45,1052,23],[996,46,1052,24],[996,47,1052,25],[997,6,1053,4],[997,7,1053,5],[998,4,1054,2],[998,5,1054,3],[998,7,1054,5],[998,9,1054,7],[998,10,1054,8],[1000,4,1056,2],[1001,4,1057,2],[1001,8,1057,2,"useEffect"],[1001,14,1057,11],[1001,15,1057,11,"useEffect"],[1001,24,1057,11],[1001,26,1057,12],[1001,32,1057,18],[1002,6,1058,4],[1002,10,1058,10,"processProjectileImpacts"],[1002,34,1058,34],[1002,37,1058,37,"processProjectileImpacts"],[1002,38,1058,37],[1002,43,1058,43],[1003,8,1059,6,"setProjectiles"],[1003,22,1059,20],[1003,23,1059,21,"currentProjectiles"],[1003,41,1059,39],[1003,45,1059,43],[1004,10,1060,8],[1004,17,1060,15,"currentProjectiles"],[1004,35,1060,33],[1004,36,1060,34,"map"],[1004,39,1060,37],[1004,40,1060,38,"projectile"],[1004,50,1060,48],[1004,54,1060,52],[1005,12,1061,10],[1005,16,1061,14],[1005,17,1061,15,"projectile"],[1005,27,1061,25],[1005,29,1061,27],[1005,36,1061,34],[1005,40,1061,38],[1007,12,1063,10],[1008,12,1064,10],[1008,16,1064,16,"currentTime"],[1008,27,1064,27],[1008,30,1064,30,"Date"],[1008,34,1064,34],[1008,35,1064,35,"now"],[1008,38,1064,38],[1008,39,1064,39],[1008,40,1064,40],[1009,12,1065,10],[1009,16,1065,16,"startTime"],[1009,25,1065,25],[1009,28,1065,28,"projectile"],[1009,38,1065,38],[1009,39,1065,39,"startTime"],[1009,48,1065,48],[1009,52,1065,52,"currentTime"],[1009,63,1065,63],[1010,12,1066,10],[1010,16,1066,16,"elapsedTime"],[1010,27,1066,27],[1010,30,1066,30,"currentTime"],[1010,41,1066,41],[1010,44,1066,44,"startTime"],[1010,53,1066,53],[1011,12,1067,10],[1011,16,1067,16,"progress"],[1011,24,1067,24],[1011,27,1067,27,"Math"],[1011,31,1067,31],[1011,32,1067,32,"min"],[1011,35,1067,35],[1011,36,1067,36,"elapsedTime"],[1011,47,1067,47],[1011,51,1067,51,"projectile"],[1011,61,1067,61],[1011,62,1067,62,"duration"],[1011,70,1067,70],[1011,74,1067,74],[1011,77,1067,77],[1011,78,1067,78],[1011,80,1067,80],[1011,81,1067,81],[1011,82,1067,82],[1013,12,1069,10],[1014,12,1070,10],[1014,16,1070,14,"progress"],[1014,24,1070,22],[1014,28,1070,26],[1014,29,1070,27],[1014,33,1070,31],[1014,34,1070,32,"projectile"],[1014,44,1070,42],[1014,45,1070,43,"hasHit"],[1014,51,1070,49],[1014,53,1070,51],[1015,14,1071,12,"projectile"],[1015,24,1071,22],[1015,25,1071,23,"hasHit"],[1015,31,1071,29],[1015,34,1071,32],[1015,38,1071,36],[1016,14,1073,12,"console"],[1016,21,1073,19],[1016,22,1073,20,"log"],[1016,25,1073,23],[1016,26,1073,24],[1016,51,1073,49,"projectile"],[1016,61,1073,59],[1016,62,1073,60,"abilityName"],[1016,73,1073,71],[1016,97,1073,95],[1016,98,1073,96],[1017,14,1074,12,"setCombatState"],[1017,28,1074,26],[1017,29,1074,27,"prev"],[1017,33,1074,31],[1017,37,1074,35],[1018,16,1075,14],[1018,20,1075,20,"newState"],[1018,28,1075,28],[1018,31,1075,31],[1019,18,1075,33],[1019,21,1075,36,"prev"],[1020,16,1075,41],[1020,17,1075,42],[1021,16,1077,14],[1021,20,1077,18,"projectile"],[1021,30,1077,28],[1021,31,1077,29,"isAOE"],[1021,36,1077,34],[1021,40,1077,38,"projectile"],[1021,50,1077,48],[1021,51,1077,49,"aoeRadius"],[1021,60,1077,58],[1021,64,1077,62,"projectile"],[1021,74,1077,72],[1021,75,1077,73,"aoeRadius"],[1021,84,1077,82],[1021,87,1077,85],[1021,88,1077,86],[1021,90,1077,88],[1022,18,1078,16],[1023,18,1079,16,"console"],[1023,25,1079,23],[1023,26,1079,24,"log"],[1023,29,1079,27],[1023,30,1079,28],[1023,59,1079,57,"projectile"],[1023,69,1079,67],[1023,70,1079,68,"abilityName"],[1023,81,1079,79],[1023,97,1079,95,"projectile"],[1023,107,1079,105],[1023,108,1079,106,"aoeRadius"],[1023,117,1079,115],[1023,119,1079,117],[1023,120,1079,118],[1024,18,1081,16],[1024,22,1081,22,"impactX"],[1024,29,1081,29],[1024,32,1081,32,"projectile"],[1024,42,1081,42],[1024,43,1081,43,"targetX"],[1024,50,1081,50],[1025,18,1082,16],[1025,22,1082,22,"impactY"],[1025,29,1082,29],[1025,32,1082,32,"projectile"],[1025,42,1082,42],[1025,43,1082,43,"targetY"],[1025,50,1082,50],[1026,18,1083,16],[1026,22,1083,22,"enemiesKilled"],[1026,35,1083,50],[1026,38,1083,53],[1026,40,1083,55],[1028,18,1085,16],[1029,18,1086,16,"newState"],[1029,26,1086,24],[1029,27,1086,25,"enemies"],[1029,34,1086,32],[1029,37,1086,35,"newState"],[1029,45,1086,43],[1029,46,1086,44,"enemies"],[1029,53,1086,51],[1029,54,1086,52,"map"],[1029,57,1086,55],[1029,58,1086,56,"enemy"],[1029,63,1086,61],[1029,67,1086,65],[1030,20,1087,18],[1030,24,1087,22,"enemy"],[1030,29,1087,27],[1030,30,1087,28,"health"],[1030,36,1087,34],[1030,40,1087,38],[1030,41,1087,39],[1030,45,1087,43,"enemy"],[1030,50,1087,48],[1030,51,1087,49,"markedForDeath"],[1030,65,1087,63],[1030,67,1087,65],[1030,74,1087,72,"enemy"],[1030,79,1087,77],[1031,20,1089,18],[1031,24,1089,24,"enemyX"],[1031,30,1089,30],[1031,33,1089,33,"enemy"],[1031,38,1089,38],[1031,39,1089,39,"position"],[1031,47,1089,47],[1031,48,1089,48,"x"],[1031,49,1089,49],[1031,52,1089,52],[1031,56,1089,56],[1031,57,1089,57],[1031,58,1089,58],[1032,20,1090,18],[1032,24,1090,24,"enemyY"],[1032,30,1090,30],[1032,33,1090,33,"enemy"],[1032,38,1090,38],[1032,39,1090,39,"position"],[1032,47,1090,47],[1032,48,1090,48,"y"],[1032,49,1090,49],[1032,52,1090,52],[1032,56,1090,56],[1033,20,1091,18],[1033,24,1091,24,"distance"],[1033,32,1091,32],[1033,35,1091,35,"Math"],[1033,39,1091,39],[1033,40,1091,40,"sqrt"],[1033,44,1091,44],[1033,45,1091,45,"Math"],[1033,49,1091,49],[1033,50,1091,50,"pow"],[1033,53,1091,53],[1033,54,1091,54,"enemyX"],[1033,60,1091,60],[1033,63,1091,63,"impactX"],[1033,70,1091,70],[1033,72,1091,72],[1033,73,1091,73],[1033,74,1091,74],[1033,77,1091,77,"Math"],[1033,81,1091,81],[1033,82,1091,82,"pow"],[1033,85,1091,85],[1033,86,1091,86,"enemyY"],[1033,92,1091,92],[1033,95,1091,95,"impactY"],[1033,102,1091,102],[1033,104,1091,104],[1033,105,1091,105],[1033,106,1091,106],[1033,107,1091,107],[1034,20,1093,18,"console"],[1034,27,1093,25],[1034,28,1093,26,"log"],[1034,31,1093,29],[1034,32,1093,30],[1034,58,1093,56,"enemy"],[1034,63,1093,61],[1034,64,1093,62,"name"],[1034,68,1093,66],[1034,76,1093,74,"enemyX"],[1034,82,1093,80],[1034,87,1093,85,"enemyY"],[1034,93,1093,91],[1034,109,1093,107,"impactX"],[1034,116,1093,114],[1034,121,1093,119,"impactY"],[1034,128,1093,126],[1034,135,1093,133,"distance"],[1034,143,1093,141],[1034,144,1093,142,"toFixed"],[1034,151,1093,149],[1034,152,1093,150],[1034,153,1093,151],[1034,154,1093,152],[1034,169,1093,167,"projectile"],[1034,179,1093,177],[1034,180,1093,178,"aoeRadius"],[1034,189,1093,187],[1034,194,1093,192],[1034,195,1093,193],[1035,20,1095,18],[1035,24,1095,22,"distance"],[1035,32,1095,30],[1035,36,1095,34,"projectile"],[1035,46,1095,44],[1035,47,1095,45,"aoeRadius"],[1035,56,1095,54],[1035,58,1095,56],[1036,22,1096,20],[1037,22,1097,20],[1037,26,1097,26,"newHealth"],[1037,35,1097,35],[1037,38,1097,38,"Math"],[1037,42,1097,42],[1037,43,1097,43,"max"],[1037,46,1097,46],[1037,47,1097,47],[1037,48,1097,48],[1037,50,1097,50,"enemy"],[1037,55,1097,55],[1037,56,1097,56,"health"],[1037,62,1097,62],[1037,65,1097,65,"projectile"],[1037,75,1097,75],[1037,76,1097,76,"damage"],[1037,82,1097,82],[1037,83,1097,83],[1038,22,1099,20,"console"],[1038,29,1099,27],[1038,30,1099,28,"log"],[1038,33,1099,31],[1038,34,1099,32],[1038,52,1099,50,"enemy"],[1038,57,1099,55],[1038,58,1099,56,"name"],[1038,62,1099,60],[1038,74,1099,72,"projectile"],[1038,84,1099,82],[1038,85,1099,83,"damage"],[1038,91,1099,89],[1038,103,1099,101,"enemy"],[1038,108,1099,106],[1038,109,1099,107,"health"],[1038,115,1099,113],[1038,122,1099,120,"newHealth"],[1038,131,1099,129],[1038,134,1099,132],[1038,135,1099,133],[1040,22,1101,20],[1041,22,1102,20],[1041,26,1102,24,"newHealth"],[1041,35,1102,33],[1041,39,1102,37],[1041,40,1102,38],[1041,44,1102,42,"enemy"],[1041,49,1102,47],[1041,50,1102,48,"health"],[1041,56,1102,54],[1041,59,1102,57],[1041,60,1102,58],[1041,62,1102,60],[1042,24,1103,22,"console"],[1042,31,1103,29],[1042,32,1103,30,"log"],[1042,35,1103,33],[1042,36,1103,34],[1042,52,1103,50,"enemy"],[1042,57,1103,55],[1042,58,1103,56,"name"],[1042,62,1103,60],[1042,76,1103,74,"projectile"],[1042,86,1103,84],[1042,87,1103,85,"abilityName"],[1042,98,1103,96],[1042,101,1103,99],[1042,102,1103,100],[1043,24,1104,22,"enemiesKilled"],[1043,37,1104,35],[1043,38,1104,36,"push"],[1043,42,1104,40],[1043,43,1104,41,"enemy"],[1043,48,1104,46],[1043,49,1104,47],[1043,50,1104,48],[1043,51,1104,49],[1045,24,1106,22],[1045,31,1106,29],[1046,26,1107,24],[1046,29,1107,27,"enemy"],[1046,34,1107,32],[1047,26,1108,24,"health"],[1047,32,1108,30],[1047,34,1108,32],[1047,35,1108,33],[1048,26,1109,24,"markedForDeath"],[1048,40,1109,38],[1048,42,1109,40],[1048,46,1109,44],[1049,26,1110,24,"lastDamaged"],[1049,37,1110,35],[1049,39,1110,37,"combatEngine"],[1049,58,1110,49],[1049,59,1110,49,"combatEngine"],[1049,71,1110,49],[1049,72,1110,50,"getCurrentTick"],[1049,86,1110,64],[1049,87,1110,65],[1050,24,1111,22],[1050,25,1111,23],[1051,22,1112,20],[1051,23,1112,21],[1051,29,1112,27],[1052,24,1113,22],[1052,31,1113,29],[1053,26,1114,24],[1053,29,1114,27,"enemy"],[1053,34,1114,32],[1054,26,1115,24,"health"],[1054,32,1115,30],[1054,34,1115,32,"newHealth"],[1054,43,1115,41],[1055,26,1116,24,"lastDamaged"],[1055,37,1116,35],[1055,39,1116,37,"combatEngine"],[1055,58,1116,49],[1055,59,1116,49,"combatEngine"],[1055,71,1116,49],[1055,72,1116,50,"getCurrentTick"],[1055,86,1116,64],[1055,87,1116,65],[1056,24,1117,22],[1056,25,1117,23],[1057,22,1118,20],[1058,20,1119,18],[1059,20,1121,18],[1059,27,1121,25,"enemy"],[1059,32,1121,30],[1059,33,1121,31],[1059,34,1121,32],[1060,18,1122,16],[1060,19,1122,17],[1060,20,1122,18],[1062,18,1124,16],[1063,18,1125,16],[1063,22,1125,20,"enemiesKilled"],[1063,35,1125,33],[1063,36,1125,34,"length"],[1063,42,1125,40],[1063,45,1125,43],[1063,46,1125,44],[1063,48,1125,46],[1064,20,1126,18,"console"],[1064,27,1126,25],[1064,28,1126,26,"log"],[1064,31,1126,29],[1064,32,1126,30],[1064,52,1126,50,"enemiesKilled"],[1064,65,1126,63],[1064,66,1126,64,"length"],[1064,72,1126,70],[1064,94,1126,92,"projectile"],[1064,104,1126,102],[1064,105,1126,103,"abilityName"],[1064,116,1126,114],[1064,118,1126,116],[1064,119,1126,117],[1065,20,1127,18,"setTimeout"],[1065,30,1127,28],[1065,31,1127,29],[1065,37,1127,35],[1066,22,1128,20,"enemiesKilled"],[1066,35,1128,33],[1066,36,1128,34,"forEach"],[1066,43,1128,41],[1066,44,1128,42,"enemy"],[1066,49,1128,47],[1066,53,1128,51,"handleEnemyKill"],[1066,68,1128,66],[1066,69,1128,67,"enemy"],[1066,74,1128,72],[1066,75,1128,73],[1066,76,1128,74],[1067,20,1129,18],[1067,21,1129,19],[1067,23,1129,21],[1067,24,1129,22],[1067,25,1129,23],[1068,18,1130,16],[1069,16,1132,14],[1069,17,1132,15],[1069,23,1132,21],[1070,18,1133,16],[1071,18,1134,16],[1071,22,1134,22,"enemyIndex"],[1071,32,1134,32],[1071,35,1134,35,"newState"],[1071,43,1134,43],[1071,44,1134,44,"enemies"],[1071,51,1134,51],[1071,52,1134,52,"findIndex"],[1071,61,1134,61],[1071,62,1134,62,"e"],[1071,63,1134,63],[1071,67,1134,67,"e"],[1071,68,1134,68],[1071,69,1134,69,"id"],[1071,71,1134,71],[1071,76,1134,76,"projectile"],[1071,86,1134,86],[1071,87,1134,87,"targetEnemyId"],[1071,100,1134,100],[1071,101,1134,101],[1072,18,1136,16],[1072,22,1136,20,"enemyIndex"],[1072,32,1136,30],[1072,36,1136,34],[1072,37,1136,35],[1072,41,1136,39,"newState"],[1072,49,1136,47],[1072,50,1136,48,"enemies"],[1072,57,1136,55],[1072,58,1136,56,"enemyIndex"],[1072,68,1136,66],[1072,69,1136,67],[1072,70,1136,68,"health"],[1072,76,1136,74],[1072,79,1136,77],[1072,80,1136,78],[1072,84,1136,82],[1072,85,1136,83,"newState"],[1072,93,1136,91],[1072,94,1136,92,"enemies"],[1072,101,1136,99],[1072,102,1136,100,"enemyIndex"],[1072,112,1136,110],[1072,113,1136,111],[1072,114,1136,112,"markedForDeath"],[1072,128,1136,126],[1072,130,1136,128],[1073,20,1137,18,"newState"],[1073,28,1137,26],[1073,29,1137,27,"enemies"],[1073,36,1137,34],[1073,39,1137,37],[1073,40,1137,38],[1073,43,1137,41,"newState"],[1073,51,1137,49],[1073,52,1137,50,"enemies"],[1073,59,1137,57],[1073,60,1137,58],[1074,20,1138,18],[1074,24,1138,24,"enemy"],[1074,29,1138,29],[1074,32,1138,32,"newState"],[1074,40,1138,40],[1074,41,1138,41,"enemies"],[1074,48,1138,48],[1074,49,1138,49,"enemyIndex"],[1074,59,1138,59],[1074,60,1138,60],[1075,20,1139,18],[1075,24,1139,24,"newHealth"],[1075,33,1139,33],[1075,36,1139,36,"Math"],[1075,40,1139,40],[1075,41,1139,41,"max"],[1075,44,1139,44],[1075,45,1139,45],[1075,46,1139,46],[1075,48,1139,48,"enemy"],[1075,53,1139,53],[1075,54,1139,54,"health"],[1075,60,1139,60],[1075,63,1139,63,"projectile"],[1075,73,1139,73],[1075,74,1139,74,"damage"],[1075,80,1139,80],[1075,81,1139,81],[1076,20,1141,18,"newState"],[1076,28,1141,26],[1076,29,1141,27,"enemies"],[1076,36,1141,34],[1076,37,1141,35,"enemyIndex"],[1076,47,1141,45],[1076,48,1141,46],[1076,51,1141,49],[1077,22,1142,20],[1077,25,1142,23,"enemy"],[1077,30,1142,28],[1078,22,1143,20,"health"],[1078,28,1143,26],[1078,30,1143,28,"newHealth"],[1078,39,1143,37],[1079,22,1144,20,"lastDamaged"],[1079,33,1144,31],[1079,35,1144,33,"combatEngine"],[1079,54,1144,45],[1079,55,1144,45,"combatEngine"],[1079,67,1144,45],[1079,68,1144,46,"getCurrentTick"],[1079,82,1144,60],[1079,83,1144,61],[1080,20,1145,18],[1080,21,1145,19],[1081,20,1147,18,"console"],[1081,27,1147,25],[1081,28,1147,26,"log"],[1081,31,1147,29],[1081,32,1147,30],[1081,60,1147,58,"enemy"],[1081,65,1147,63],[1081,66,1147,64,"name"],[1081,70,1147,68],[1081,82,1147,80,"newHealth"],[1081,91,1147,89],[1081,95,1147,93,"enemy"],[1081,100,1147,98],[1081,101,1147,99,"maxHealth"],[1081,110,1147,108],[1081,112,1147,110],[1081,113,1147,111],[1083,20,1149,18],[1084,20,1150,18],[1084,24,1150,22,"newHealth"],[1084,33,1150,31],[1084,37,1150,35],[1084,38,1150,36],[1084,42,1150,40,"enemy"],[1084,47,1150,45],[1084,48,1150,46,"health"],[1084,54,1150,52],[1084,57,1150,55],[1084,58,1150,56],[1084,60,1150,58],[1085,22,1151,20,"console"],[1085,29,1151,27],[1085,30,1151,28,"log"],[1085,33,1151,31],[1085,34,1151,32],[1085,57,1151,55,"enemy"],[1085,62,1151,60],[1085,63,1151,61,"name"],[1085,67,1151,65],[1085,81,1151,79,"projectile"],[1085,91,1151,89],[1085,92,1151,90,"abilityName"],[1085,103,1151,101],[1085,129,1151,127],[1085,130,1151,128],[1087,22,1153,20],[1088,22,1154,20,"newState"],[1088,30,1154,28],[1088,31,1154,29,"enemies"],[1088,38,1154,36],[1088,39,1154,37,"enemyIndex"],[1088,49,1154,47],[1088,50,1154,48],[1088,53,1154,51],[1089,24,1155,22],[1089,27,1155,25,"newState"],[1089,35,1155,33],[1089,36,1155,34,"enemies"],[1089,43,1155,41],[1089,44,1155,42,"enemyIndex"],[1089,54,1155,52],[1089,55,1155,53],[1090,24,1156,22,"health"],[1090,30,1156,28],[1090,32,1156,30],[1090,33,1156,31],[1091,24,1157,22,"isDying"],[1091,31,1157,29],[1091,33,1157,31],[1091,37,1157,35],[1092,24,1158,22,"deathStartTime"],[1092,38,1158,36],[1092,40,1158,38,"Date"],[1092,44,1158,42],[1092,45,1158,43,"now"],[1092,48,1158,46],[1092,49,1158,47],[1093,22,1159,20],[1093,23,1159,21],[1094,20,1160,18],[1094,21,1160,19],[1094,27,1160,25],[1094,31,1160,29,"enemy"],[1094,36,1160,34],[1094,37,1160,35,"health"],[1094,43,1160,41],[1094,46,1160,44],[1094,47,1160,45],[1094,49,1160,47],[1095,22,1161,20,"console"],[1095,29,1161,27],[1095,30,1161,28,"log"],[1095,33,1161,31],[1095,34,1161,32],[1095,48,1161,46,"enemy"],[1095,53,1161,51],[1095,54,1161,52,"name"],[1095,58,1161,56],[1095,70,1161,68,"projectile"],[1095,80,1161,78],[1095,81,1161,79,"damage"],[1095,87,1161,85],[1095,99,1161,97,"enemy"],[1095,104,1161,102],[1095,105,1161,103,"health"],[1095,111,1161,109],[1095,117,1161,115,"newHealth"],[1095,126,1161,124],[1095,129,1161,127],[1095,130,1161,128],[1096,20,1162,18],[1097,18,1163,16],[1098,16,1164,14],[1099,16,1166,14],[1099,23,1166,21,"newState"],[1099,31,1166,29],[1100,14,1167,12],[1100,15,1167,13],[1100,16,1167,14],[1101,12,1168,10],[1103,12,1170,10],[1104,12,1171,10],[1104,16,1171,14,"progress"],[1104,24,1171,22],[1104,28,1171,26],[1104,31,1171,29],[1104,33,1171,31],[1105,14,1172,12],[1105,21,1172,19],[1105,25,1172,23],[1106,12,1173,10],[1107,12,1175,10],[1107,19,1175,17,"projectile"],[1107,29,1175,27],[1108,10,1176,8],[1108,11,1176,9],[1108,12,1176,10],[1108,13,1176,11,"filter"],[1108,19,1176,17],[1108,20,1176,18,"Boolean"],[1108,27,1176,25],[1108,28,1176,26],[1109,8,1177,6],[1109,9,1177,7],[1109,10,1177,8],[1110,6,1178,4],[1110,7,1178,5],[1112,6,1180,4],[1113,6,1181,4],[1113,10,1181,10,"impactInterval"],[1113,24,1181,24],[1113,27,1181,27,"setInterval"],[1113,38,1181,38],[1113,39,1181,39,"processProjectileImpacts"],[1113,63,1181,63],[1113,65,1181,65],[1113,67,1181,67],[1113,68,1181,68],[1114,6,1182,4],[1114,13,1182,11],[1114,19,1182,17,"clearInterval"],[1114,32,1182,30],[1114,33,1182,31,"impactInterval"],[1114,47,1182,45],[1114,48,1182,46],[1115,4,1183,2],[1115,5,1183,3],[1115,7,1183,5],[1115,8,1183,6,"handleEnemyKill"],[1115,23,1183,21],[1115,24,1183,22],[1115,25,1183,23],[1117,4,1185,2],[1118,4,1186,2],[1118,8,1186,8,"saveAbilityData"],[1118,23,1186,23],[1118,26,1186,26],[1118,30,1186,26,"useCallback"],[1118,36,1186,37],[1118,37,1186,37,"useCallback"],[1118,48,1186,37],[1118,50,1186,38],[1118,56,1186,44],[1119,6,1187,4],[1119,10,1187,8,"combatState"],[1119,21,1187,19],[1119,22,1187,20,"abilityManager"],[1119,36,1187,34],[1119,38,1187,36],[1120,8,1188,6],[1120,12,1188,12,"abilityData"],[1120,23,1188,23],[1120,26,1188,26,"combatState"],[1120,37,1188,37],[1120,38,1188,38,"abilityManager"],[1120,52,1188,52],[1120,53,1188,53,"getSaveData"],[1120,64,1188,64],[1120,65,1188,65],[1120,66,1188,66],[1121,8,1189,6,"console"],[1121,15,1189,13],[1121,16,1189,14,"log"],[1121,19,1189,17],[1121,20,1189,18],[1121,70,1189,68],[1121,72,1189,70,"abilityData"],[1121,83,1189,81],[1121,84,1189,82],[1122,8,1190,6,"game"],[1122,12,1190,10],[1122,13,1190,11,"updateAbilityData"],[1122,30,1190,28],[1122,31,1190,29,"abilityData"],[1122,42,1190,40],[1122,43,1190,41],[1123,6,1191,4],[1124,4,1192,2],[1124,5,1192,3],[1124,7,1192,5],[1124,8,1192,6,"combatState"],[1124,19,1192,17],[1124,20,1192,18,"abilityManager"],[1124,34,1192,32],[1124,36,1192,34,"game"],[1124,40,1192,38],[1124,41,1192,39,"updateAbilityData"],[1124,58,1192,56],[1124,59,1192,57],[1124,60,1192,58],[1125,4,1194,2],[1125,8,1194,8,"contextValue"],[1125,20,1194,39],[1125,23,1194,42,"React"],[1125,28,1194,47],[1125,29,1194,47,"default"],[1125,36,1194,47],[1125,37,1194,48,"useMemo"],[1125,44,1194,55],[1125,45,1194,56],[1125,52,1194,63],[1126,6,1195,4,"combatState"],[1126,17,1195,15],[1127,6,1196,4,"projectiles"],[1127,17,1196,15],[1128,6,1197,4,"startCombat"],[1128,17,1197,15],[1129,6,1198,4,"stopCombat"],[1129,16,1198,14],[1130,6,1199,4,"equipAbility"],[1130,18,1199,16],[1131,6,1200,4,"handleEnemyKill"],[1131,21,1200,19],[1132,6,1201,4,"getDeck"],[1132,13,1201,11],[1133,6,1202,4,"getAvailableAbilities"],[1133,27,1202,25],[1134,6,1203,4,"upgradeAbility"],[1134,20,1203,18],[1135,6,1204,4,"spawnEnemy"],[1135,16,1204,14],[1136,6,1205,4,"spawnBoss"],[1136,15,1205,13],[1137,6,1206,4,"clearAllEnemies"],[1137,21,1206,19],[1138,6,1207,4,"clearSpecificEnemy"],[1138,24,1207,22],[1139,6,1208,4,"triggerLevelUpExplosion"],[1139,29,1208,27],[1140,6,1209,4,"findClosestEnemy"],[1140,22,1209,20],[1141,6,1210,4,"updateNinjaPosition"],[1141,25,1210,23],[1142,6,1211,4,"setManualControlActive"],[1142,28,1211,26],[1143,6,1212,4,"lastExplosionTime"],[1143,23,1212,21],[1144,6,1213,4,"useAbilityManually"],[1144,24,1213,22],[1145,6,1213,24],[1146,6,1214,4,"saveAbilityData"],[1146,21,1214,19],[1147,6,1214,21],[1148,6,1215,4,"shadowClone"],[1148,17,1215,15],[1148,19,1215,17,"combatState"],[1148,30,1215,28],[1148,31,1215,29,"shadowClone"],[1148,42,1215,40],[1148,43,1215,42],[1149,4,1216,2],[1149,5,1216,3],[1149,6,1216,4],[1149,8,1216,6],[1150,4,1217,4],[1151,4,1218,4],[1152,4,1219,4,"combatState"],[1152,15,1219,15],[1152,17,1220,4,"projectiles"],[1152,28,1220,15],[1152,30,1221,4,"lastExplosionTime"],[1152,47,1221,21],[1153,4,1222,4],[1154,4,1223,4,"combatState"],[1154,15,1223,15],[1154,16,1223,16,"abilityManager"],[1154,30,1223,30],[1154,32,1224,4,"combatState"],[1154,43,1224,15],[1154,44,1224,16,"enemies"],[1154,51,1224,23],[1154,53,1225,4,"combatState"],[1154,64,1225,15],[1154,65,1225,16,"shadowClone"],[1154,76,1225,27],[1155,4,1225,29],[1156,4,1226,4,"useAbilityManually"],[1156,22,1226,22],[1157,4,1226,24],[1158,4,1227,4,"saveAbilityData"],[1158,19,1227,19],[1158,20,1227,21],[1159,4,1227,21],[1159,5,1228,3],[1159,6,1228,4],[1160,4,1230,2],[1160,24,1231,4],[1160,28,1231,4,"_reactJsxDevRuntime"],[1160,47,1231,4],[1160,48,1231,4,"jsxDEV"],[1160,54,1231,4],[1160,56,1231,5,"CombatContext"],[1160,69,1231,18],[1160,70,1231,19,"Provider"],[1160,78,1231,27],[1161,6,1231,28,"value"],[1161,11,1231,33],[1161,13,1231,35,"contextValue"],[1161,25,1231,48],[1162,6,1231,48,"children"],[1162,14,1231,48],[1162,16,1232,7,"children"],[1163,4,1232,15],[1164,6,1232,15,"fileName"],[1164,14,1232,15],[1164,16,1232,15,"_jsxFileName"],[1164,28,1232,15],[1165,6,1232,15,"lineNumber"],[1165,16,1232,15],[1166,6,1232,15,"columnNumber"],[1166,18,1232,15],[1167,4,1232,15],[1167,11,1233,28],[1167,12,1233,29],[1168,2,1235,0],[1168,3,1235,1],[1169,2,1235,2,"_s4"],[1169,5,1235,2],[1169,6,105,13,"CombatProvider"],[1169,20,105,27],[1170,4,105,27],[1170,12,106,15,"useGame"],[1170,24,106,22],[1170,25,106,22,"useGame"],[1170,32,106,22],[1170,34,107,77,"useZone"],[1170,46,107,84],[1170,47,107,84,"useZone"],[1170,54,107,84],[1171,2,107,84],[1172,2,107,84,"_c"],[1172,4,107,84],[1172,7,105,13,"CombatProvider"],[1172,21,105,27],[1173,2,105,27],[1173,6,105,27,"_c"],[1173,8,105,27],[1174,2,105,27,"$RefreshReg$"],[1174,14,105,27],[1174,15,105,27,"_c"],[1174,17,105,27],[1175,0,105,27],[1175,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","setTimeout$argument_0","game.updateNinja$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","dyingEnemies.map$argument_0","deadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","enemiesToKill.forEach$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","handleProjectileHit","setProjectiles$argument_0","prev.filter$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","triggerLevelUpExplosion","prev.enemies.map$argument_0","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC8F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;eCqB;uBCI;ODO;KDiB;GHC;6CMG;mBJM;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;6BN+D;mBMG;ORiC;mDSuD,2CT;kDSC,4CT;iDUG,qBV;iDSK;OTU;mGWI,6BX;uDSI,+CT;kFYE,4CZ;iDSK,yBT;4CaY,qBb;KIiB;0BUK;KVG;GNC;mCiBG;oBCY;KDU;GjBI;2BmBG;GnBE;0CoBO;GpBE;6CqBG;GrBG;8BsBG;mBpBG;oDMI,sCN;KoBa;mBCG,oBC,2BD,CD;GtBC;sByBG;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBR0C,6BQ;e3BG;K2BE;G/BG;yBgCG;GhCsC;8BiCG;GjC4B;wCkCG;mBhCE,uCgC;GlCQ;uCmCG;mBjCC,wCiC;GnCE;uBoCG;GpCE;kBqCE;GrCE;gCsCE;GtCE;yBuCE;GvCE;0BwCG;mBtCE;MsCG;GxCC;kCyCG;mBvCM;mBEU;2BCC;YDG;SFC;8CwCK;QxCI;KuCM;GzCC;qB2CG;mBzC2B;MyCG;G3CG;oB4CG;mB1CE;M0CG;G5CC;6B6CG;mB3CC;mC4CE,6B5C;M2CC;G7CC;yC+CG;qB7C8B;O6CI;G/CQ;YCC;W+CO;K/CE;GDC;YCG;qCgDC;qB1BC;sC2BC;2BhDc;wDiDY;iBjDoC;6BEK;0CgDC,+BhD;mBFC;8DMK,sCN;agDiC;S3BS;O0BC;KhDC;W+CI,mC/C;GDC;sCqDG;GrDM;wDsDE;ItDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}