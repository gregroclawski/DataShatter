{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":111},"end":{"line":2,"column":62,"index":173}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _react = require(_dependencyMap[1], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNative = require(_dependencyMap[2], \"react-native\");\n  var _engineCombatEngine = require(_dependencyMap[3], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[4], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[5], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[6], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[7], \"react/jsx-dev-runtime\");\n  var CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  var useCombat = () => {\n    _s();\n    var context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  var enemyCounter = 0; // Global counter for unique enemy IDs\n\n  var CombatProvider = _ref => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    var children = _ref.children;\n    var game = (0, _GameContext.useGame)();\n    var _useZone = (0, _ZoneContext.useZone)(),\n      currentZone = _useZone.currentZone,\n      currentZoneLevel = _useZone.currentZoneLevel,\n      recordEnemyKill = _useZone.recordEnemyKill,\n      spawnZoneEnemy = _useZone.spawnZoneEnemy;\n\n    // Define initialCombatState before using it\n    var initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    var _useState = (0, _react.useState)(initialCombatState),\n      _useState2 = (0, _slicedToArray.default)(_useState, 2),\n      combatState = _useState2[0],\n      setCombatState = _useState2[1];\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        var effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    var _useState3 = (0, _react.useState)([]),\n      _useState4 = (0, _slicedToArray.default)(_useState3, 2),\n      projectiles = _useState4[0],\n      setProjectiles = _useState4[1];\n    var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray.default)(_useState5, 2),\n      lastExplosionTime = _useState6[0],\n      setLastExplosionTime = _useState6[1];\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    var handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      var xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      var goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    // CRITICAL FIX: Use React ref to capture dead enemies for XP processing to avoid closure issues\n    var deadEnemiesRef = (0, _react.useRef)([]);\n    var handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        var newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        var newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        var effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          var enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          var effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            var newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                var healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            var MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            var SCREEN_WIDTH = 390;\n            var GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            var ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            var playerX = currentNinjaPosition.x;\n            var playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            var deltaX = playerX - enemy.position.x;\n            var deltaY = playerY - enemy.position.y;\n            var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            var ATTACK_RANGE = 50; // Enemy attack range\n            var ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  var isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    var baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    var attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    var playerDefense = newState.playerStats.defense;\n                    var finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    var newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                var normalizedX = deltaX / distance;\n                var normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                var randomFactor = 0.2; // 20% randomness\n                var finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                var finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                var newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                var newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          var cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            var CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              var target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                var cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (var i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        var allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Use React ref to store dead enemies to avoid closure scoping issues\n        deadEnemiesRef.current = [...allDeadEnemies]; // Store in ref for XP processing\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        var currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            var animationDuration = 750; // 750ms death fade\n            var isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        var lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        var beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        var afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        var MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        var MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        var now = Date.now();\n        var hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // BULK XP PROCESSING - Use ref to get dead enemies (FIXED: Closure scoping issue)\n      var deadEnemiesToProcess = deadEnemiesRef.current; // Get from ref instead of closure variable\n      if (deadEnemiesToProcess.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        var unprocessedEnemies = deadEnemiesToProcess; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG deadEnemiesToProcess xpAwarded status:`, deadEnemiesToProcess.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${deadEnemiesToProcess.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          var totalXP = 0;\n          var totalGold = 0;\n          var zoneKills = [];\n          var xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          var goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            // BALANCE CHANGE: XP rate ÷ 2, Gold rate × 100\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier / 2; // Divide XP by 2\n            totalGold += 10 * goldMultiplier * 100; // Multiply gold by 100\n\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              var wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    var findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ninjaX = SCREEN_WIDTH / 2;\n      var ninjaY = GAME_AREA_HEIGHT / 2;\n      var closestEnemy = enemies[0];\n      var closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        var distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    var findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    var _useState7 = (0, _react.useState)({\n        x: 195,\n        y: 400\n      }),\n      _useState8 = (0, _slicedToArray.default)(_useState7, 2),\n      currentNinjaPosition = _useState8[0],\n      setCurrentNinjaPosition = _useState8[1];\n    var _useState9 = (0, _react.useState)(false),\n      _useState0 = (0, _slicedToArray.default)(_useState9, 2),\n      isManualControlActive = _useState0[0],\n      setIsManualControlActive = _useState0[1];\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    var updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    var setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    var castAbility = (state, slotIndex) => {\n      var deck = state.abilityManager.getDeck();\n      var ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      var damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      var isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        var ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        var ninjaY = currentNinjaPosition.y + 20;\n        var aoeRadius = ability.stats.aoeRadius;\n        var enemiesInRange = state.enemies.filter(enemy => {\n          var enemyX = enemy.position.x + 17.5; // Center of enemy\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        var target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        var damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        var targets = isAOE ? state.enemies.filter(enemy => {\n          var ninjaX = currentNinjaPosition.x + 20;\n          var ninjaY = currentNinjaPosition.y + 20;\n          var enemyX = enemy.position.x + 17.5;\n          var enemyY = enemy.position.y + 17.5;\n          var distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        var cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        var cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    var createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      var ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      var ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      var ENEMY_SIZE = 35;\n      var projectileId = `proj_${Date.now()}_${Math.random()}`;\n      var projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    var spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      var zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      var combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    var spawnBasicTestEnemy = state => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140;\n      var ENEMY_SIZE = 35;\n      var x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    var startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    var stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    var equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    var getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    var getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    var upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    var clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    var spawnEnemy = position => {\n      var SCREEN_WIDTH = 390;\n      var GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      var ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      var x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      var enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    var spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    var clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    var useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      var isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      var currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      var success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          var newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      var tickInterval = _reactNative.Platform.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${_reactNative.Platform.OS}`);\n      var combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      var processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            var currentTime = Date.now();\n            var startTime = projectile.startTime || currentTime;\n            var elapsedTime = currentTime - startTime;\n            var progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                var newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  var impactX = projectile.targetX;\n                  var impactY = projectile.targetY;\n                  var enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    var enemyX = enemy.position.x + 17.5; // Center of enemy\n                    var enemyY = enemy.position.y + 17.5;\n                    var distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      var newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  var enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    var enemy = newState.enemies[enemyIndex];\n                    var newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            var timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      var impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    var saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        var abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    var contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1238,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"MDeq8hWzWP3Z+s+8FtZeHd86Tq0=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1183,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1242,2],[27,6,1242,2,"_babelRuntimeHelpersSlicedToArray"],[27,39,1242,2],[27,42,1242,2,"require"],[27,49,1242,2],[27,50,1242,2,"_dependencyMap"],[27,64,1242,2],[28,2,1242,2],[28,6,1242,2,"_slicedToArray"],[28,20,1242,2],[28,23,1242,2,"_interopDefault"],[28,38,1242,2],[28,39,1242,2,"_babelRuntimeHelpersSlicedToArray"],[28,72,1242,2],[29,2,1,0],[29,6,1,0,"_react"],[29,12,1,0],[29,15,1,0,"require"],[29,22,1,0],[29,23,1,0,"_dependencyMap"],[29,37,1,0],[30,2,1,0],[30,6,1,0,"React"],[30,11,1,0],[30,14,1,0,"_interopDefault"],[30,29,1,0],[30,30,1,0,"_react"],[30,36,1,0],[31,2,2,0],[31,6,2,0,"_reactNative"],[31,18,2,0],[31,21,2,0,"require"],[31,28,2,0],[31,29,2,0,"_dependencyMap"],[31,43,2,0],[32,2,3,0],[32,6,3,0,"_engineCombatEngine"],[32,25,3,0],[32,28,3,0,"require"],[32,35,3,0],[32,36,3,0,"_dependencyMap"],[32,50,3,0],[33,2,4,0],[33,6,4,0,"_typesAbilityTypes"],[33,24,4,0],[33,27,4,0,"require"],[33,34,4,0],[33,35,4,0,"_dependencyMap"],[33,49,4,0],[34,2,5,0],[34,6,5,0,"_GameContext"],[34,18,5,0],[34,21,5,0,"require"],[34,28,5,0],[34,29,5,0,"_dependencyMap"],[34,43,5,0],[35,2,6,0],[35,6,6,0,"_ZoneContext"],[35,18,6,0],[35,21,6,0,"require"],[35,28,6,0],[35,29,6,0,"_dependencyMap"],[35,43,6,0],[36,2,6,40],[36,6,6,40,"_reactJsxDevRuntime"],[36,25,6,40],[36,28,6,40,"require"],[36,35,6,40],[36,36,6,40,"_dependencyMap"],[36,50,6,40],[37,2,94,0],[37,6,94,6,"CombatContext"],[37,19,94,19],[37,35,94,22],[37,39,94,22,"createContext"],[37,45,94,35],[37,46,94,35,"createContext"],[37,59,94,35],[37,61,94,67,"undefined"],[37,70,94,76],[37,71,94,77],[38,2,96,7],[38,6,96,13,"useCombat"],[38,15,96,22],[38,18,96,25,"useCombat"],[38,19,96,25],[38,24,96,50],[39,4,96,50,"_s"],[39,6,96,50],[40,4,97,2],[40,8,97,8,"context"],[40,15,97,15],[40,18,97,18],[40,22,97,18,"useContext"],[40,28,97,28],[40,29,97,28,"useContext"],[40,39,97,28],[40,41,97,29,"CombatContext"],[40,54,97,42],[40,55,97,43],[41,4,98,2],[41,8,98,6],[41,9,98,7,"context"],[41,16,98,14],[41,18,98,16],[42,6,99,4],[42,12,99,10],[42,16,99,14,"Error"],[42,21,99,19],[42,22,99,20],[42,70,99,68],[42,71,99,69],[43,4,100,2],[44,4,101,2],[44,11,101,9,"context"],[44,18,101,16],[45,2,102,0],[45,3,102,1],[46,2,102,2,"_s"],[46,4,102,2],[46,5,96,13,"useCombat"],[46,14,96,22],[47,2,104,0],[47,6,104,4,"enemyCounter"],[47,18,104,16],[47,21,104,19],[47,22,104,20],[47,23,104,21],[47,24,104,22],[49,2,106,7],[49,6,106,13,"CombatProvider"],[49,20,106,27],[49,23,106,30,"_ref"],[49,27,106,30],[49,31,106,73],[50,4,106,73,"_s4"],[50,7,106,73],[51,4,106,73],[51,8,106,73,"_s3"],[51,11,106,73],[51,14,106,73,"$RefreshSig$"],[51,26,106,73],[52,4,106,73],[52,8,106,33,"children"],[52,16,106,41],[52,19,106,41,"_ref"],[52,23,106,41],[52,24,106,33,"children"],[52,32,106,41],[53,4,107,2],[53,8,107,8,"game"],[53,12,107,12],[53,15,107,15],[53,19,107,15,"useGame"],[53,31,107,22],[53,32,107,22,"useGame"],[53,39,107,22],[53,41,107,23],[53,42,107,24],[54,4,108,2],[54,8,108,2,"_useZone"],[54,16,108,2],[54,19,108,77],[54,23,108,77,"useZone"],[54,35,108,84],[54,36,108,84,"useZone"],[54,43,108,84],[54,45,108,85],[54,46,108,86],[55,6,108,10,"currentZone"],[55,17,108,21],[55,20,108,21,"_useZone"],[55,28,108,21],[55,29,108,10,"currentZone"],[55,40,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[56,25,108,39,"_useZone"],[56,33,108,39],[56,34,108,23,"currentZoneLevel"],[56,50,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[57,24,108,56,"_useZone"],[57,32,108,56],[57,33,108,41,"recordEnemyKill"],[57,48,108,56],[58,6,108,58,"spawnZoneEnemy"],[58,20,108,72],[58,23,108,72,"_useZone"],[58,31,108,72],[58,32,108,58,"spawnZoneEnemy"],[58,46,108,72],[60,4,110,2],[61,4,111,2],[61,8,111,8,"initialCombatState"],[61,26,111,39],[61,29,111,42],[62,6,112,4,"isInCombat"],[62,16,112,14],[62,18,112,16],[62,23,112,21],[63,6,113,4,"currentTick"],[63,17,113,15],[63,19,113,17],[63,20,113,18],[64,6,114,4,"enemies"],[64,13,114,11],[64,15,114,13],[64,17,114,15],[65,6,115,4,"abilityManager"],[65,20,115,18],[65,22,115,20],[65,26,115,24,"AbilityManager"],[65,44,115,38],[65,45,115,38,"AbilityManager"],[65,59,115,38],[65,60,115,39],[65,61,115,40],[66,6,116,4,"statusEffects"],[66,19,116,17],[66,21,116,19],[66,25,116,23,"StatusEffectManager"],[66,44,116,42],[66,45,116,42,"StatusEffectManager"],[66,64,116,42],[66,65,116,43],[66,66,116,44],[67,6,117,4,"playerStats"],[67,17,117,15],[67,19,117,17],[68,8,118,6,"attack"],[68,14,118,12],[68,16,118,14],[68,18,118,16],[69,8,118,18],[70,8,119,6,"defense"],[70,15,119,13],[70,17,119,15],[70,18,119,16],[71,8,120,6,"health"],[71,14,120,12],[71,16,120,14],[71,19,120,17],[72,8,121,6,"maxHealth"],[72,17,121,15],[72,19,121,17],[72,22,121,20],[73,8,122,6,"critChance"],[73,18,122,16],[73,20,122,18],[73,21,122,19],[74,8,123,6,"critDamage"],[74,18,123,16],[74,20,123,18],[74,23,123,21],[75,8,124,6,"cooldownReduction"],[75,25,124,23],[75,27,124,25],[76,6,125,4],[77,4,126,2],[77,5,126,3],[78,4,128,2],[78,8,128,2,"_useState"],[78,17,128,2],[78,20,128,40],[78,24,128,40,"useState"],[78,30,128,48],[78,31,128,48,"useState"],[78,39,128,48],[78,41,128,62,"initialCombatState"],[78,59,128,80],[78,60,128,81],[79,6,128,81,"_useState2"],[79,16,128,81],[79,23,128,81,"_slicedToArray"],[79,37,128,81],[79,38,128,81,"default"],[79,45,128,81],[79,47,128,81,"_useState"],[79,56,128,81],[80,6,128,9,"combatState"],[80,17,128,20],[80,20,128,20,"_useState2"],[80,30,128,20],[81,6,128,22,"setCombatState"],[81,20,128,36],[81,23,128,36,"_useState2"],[81,33,128,36],[83,4,130,2],[84,4,131,2],[84,8,131,2,"useEffect"],[84,14,131,11],[84,15,131,11,"useEffect"],[84,24,131,11],[84,26,131,12],[84,32,131,18],[85,6,132,4],[85,10,132,8,"game"],[85,14,132,12],[85,15,132,13,"gameState"],[85,24,132,22],[85,25,132,23,"abilityData"],[85,36,132,34],[85,40,132,38,"combatState"],[85,51,132,49],[85,52,132,50,"abilityManager"],[85,66,132,64],[85,68,132,66],[86,8,133,6,"console"],[86,15,133,13],[86,16,133,14,"log"],[86,19,133,17],[86,20,133,18],[86,68,133,66],[86,70,133,68,"game"],[86,74,133,72],[86,75,133,73,"gameState"],[86,84,133,82],[86,85,133,83,"abilityData"],[86,96,133,94],[86,97,133,95],[87,8,134,6,"combatState"],[87,19,134,17],[87,20,134,18,"abilityManager"],[87,34,134,32],[87,35,134,33,"restoreFromSaveData"],[87,54,134,52],[87,55,134,53,"game"],[87,59,134,57],[87,60,134,58,"gameState"],[87,69,134,67],[87,70,134,68,"abilityData"],[87,81,134,79],[87,82,134,80],[89,8,136,6],[90,8,137,6,"setCombatState"],[90,22,137,20],[90,23,137,21,"prev"],[90,27,137,25],[90,32,137,30],[91,10,137,32],[91,13,137,35,"prev"],[92,8,137,40],[92,9,137,41],[92,10,137,42],[92,11,137,43],[93,6,138,4],[94,4,139,2],[94,5,139,3],[94,7,139,5],[94,8,139,6,"game"],[94,12,139,10],[94,13,139,11,"gameState"],[94,22,139,20],[94,23,139,21,"abilityData"],[94,34,139,32],[94,36,139,34,"combatState"],[94,47,139,45],[94,48,139,46,"abilityManager"],[94,62,139,60],[94,63,139,61],[94,64,139,62],[96,4,141,2],[97,4,142,2],[97,8,142,2,"useEffect"],[97,14,142,11],[97,15,142,11,"useEffect"],[97,24,142,11],[97,26,142,12],[97,32,142,18],[98,6,143,4],[98,10,143,8,"game"],[98,14,143,12],[98,15,143,13,"gameState"],[98,24,143,22],[98,25,143,23,"ninja"],[98,30,143,28],[98,32,143,30],[99,8,144,6],[99,12,144,12,"effectiveStats"],[99,26,144,26],[99,29,144,29,"game"],[99,33,144,33],[99,34,144,34,"getEffectiveStats"],[99,51,144,51],[99,52,144,52],[99,53,144,53],[100,8,146,6,"setCombatState"],[100,22,146,20],[100,23,146,21,"prev"],[100,27,146,25],[100,31,146,29],[101,10,147,8],[102,10,148,8],[102,14,148,12,"prev"],[102,18,148,16],[102,19,148,17,"playerStats"],[102,30,148,28],[102,31,148,29,"maxHealth"],[102,40,148,38],[102,45,148,43],[102,48,148,46],[102,52,148,50,"prev"],[102,56,148,54],[102,57,148,55,"playerStats"],[102,68,148,66],[102,69,148,67,"attack"],[102,75,148,73],[102,80,148,78],[102,82,148,80],[102,84,148,82],[103,12,149,10,"console"],[103,19,149,17],[103,20,149,18,"log"],[103,23,149,21],[103,24,149,22],[103,60,149,58,"effectiveStats"],[103,74,149,72],[103,75,149,73,"health"],[103,81,149,79],[103,93,149,91,"effectiveStats"],[103,107,149,105],[103,108,149,106,"attack"],[103,114,149,112],[103,127,149,125,"effectiveStats"],[103,141,149,139],[103,142,149,140,"defense"],[103,149,149,147],[103,151,149,149],[103,152,149,150],[104,12,151,10],[104,19,151,17],[105,14,152,12],[105,17,152,15,"prev"],[105,21,152,19],[106,14,153,12,"playerStats"],[106,25,153,23],[106,27,153,25],[107,16,154,14,"attack"],[107,22,154,20],[107,24,154,22,"effectiveStats"],[107,38,154,36],[107,39,154,37,"attack"],[107,45,154,43],[108,16,155,14,"defense"],[108,23,155,21],[108,25,155,23,"effectiveStats"],[108,39,155,37],[108,40,155,38,"defense"],[108,47,155,45],[109,16,156,14,"health"],[109,22,156,20],[109,24,156,22,"effectiveStats"],[109,38,156,36],[109,39,156,37,"health"],[109,45,156,43],[110,16,156,45],[111,16,157,14,"maxHealth"],[111,25,157,23],[111,27,157,25,"effectiveStats"],[111,41,157,39],[111,42,157,40,"health"],[111,48,157,46],[112,16,158,14,"critChance"],[112,26,158,24],[112,28,158,26,"effectiveStats"],[112,42,158,40],[112,43,158,41,"critChance"],[112,53,158,51],[112,57,158,55],[112,58,158,56],[113,16,159,14,"critDamage"],[113,26,159,24],[113,28,159,26,"effectiveStats"],[113,42,159,40],[113,43,159,41,"critDamage"],[113,53,159,51],[113,57,159,55],[113,60,159,58],[114,16,160,14,"cooldownReduction"],[114,33,160,31],[114,35,160,33,"effectiveStats"],[114,49,160,47],[114,50,160,48,"cooldownReduction"],[114,67,160,65],[114,71,160,69],[115,14,161,12],[116,12,162,10],[116,13,162,11],[117,10,163,8],[118,10,164,8],[118,17,164,15,"prev"],[118,21,164,19],[119,8,165,6],[119,9,165,7],[119,10,165,8],[120,6,166,4],[121,4,167,2],[121,5,167,3],[121,7,167,5],[121,8,167,6,"game"],[121,12,167,10],[121,13,167,11,"gameState"],[121,22,167,20],[121,23,167,21,"ninja"],[121,28,167,26],[121,29,167,27],[121,30,167,28],[122,4,169,2],[122,8,169,2,"_useState3"],[122,18,169,2],[122,21,169,40],[122,25,169,40,"useState"],[122,31,169,48],[122,32,169,48,"useState"],[122,40,169,48],[122,42,169,69],[122,44,169,71],[122,45,169,72],[123,6,169,72,"_useState4"],[123,16,169,72],[123,23,169,72,"_slicedToArray"],[123,37,169,72],[123,38,169,72,"default"],[123,45,169,72],[123,47,169,72,"_useState3"],[123,57,169,72],[124,6,169,9,"projectiles"],[124,17,169,20],[124,20,169,20,"_useState4"],[124,30,169,20],[125,6,169,22,"setProjectiles"],[125,20,169,36],[125,23,169,36,"_useState4"],[125,33,169,36],[126,4,170,2],[126,8,170,2,"_useState5"],[126,18,170,2],[126,21,170,52],[126,25,170,52,"useState"],[126,31,170,60],[126,32,170,60,"useState"],[126,40,170,60],[126,42,170,69],[126,43,170,70],[126,44,170,71],[127,6,170,71,"_useState6"],[127,16,170,71],[127,23,170,71,"_slicedToArray"],[127,37,170,71],[127,38,170,71,"default"],[127,45,170,71],[127,47,170,71,"_useState5"],[127,57,170,71],[128,6,170,9,"lastExplosionTime"],[128,23,170,26],[128,26,170,26,"_useState6"],[128,36,170,26],[129,6,170,28,"setLastExplosionTime"],[129,26,170,48],[129,29,170,48,"_useState6"],[129,39,170,48],[130,4,171,2],[131,4,172,2],[133,4,174,2],[134,4,175,2],[134,8,175,8,"handleEnemyKill"],[134,23,175,23],[134,26,175,26],[134,30,175,26,"useCallback"],[134,36,175,37],[134,37,175,37,"useCallback"],[134,48,175,37],[134,50,175,39,"enemy"],[134,55,175,57],[134,59,175,62],[135,6,176,4],[136,6,177,4],[136,10,177,10,"xpReward"],[136,18,177,18],[136,21,177,21],[136,22,177,22,"enemy"],[136,27,177,27],[136,28,177,28,"zoneXP"],[136,34,177,34],[136,38,177,38],[136,39,177,39],[136,44,177,44,"game"],[136,48,177,48],[136,49,177,49,"gameState"],[136,58,177,58],[136,59,177,59,"subscriptionBenefits"],[136,79,177,79],[136,81,177,81,"xp_multiplier"],[136,94,177,94],[136,98,177,98],[136,101,177,101],[136,102,177,102],[137,6,178,4],[137,10,178,10,"goldReward"],[137,20,178,20],[137,23,178,23],[137,25,178,25],[137,29,178,29,"game"],[137,33,178,33],[137,34,178,34,"gameState"],[137,43,178,43],[137,44,178,44,"subscriptionBenefits"],[137,64,178,64],[137,66,178,66,"drop_multiplier"],[137,81,178,81],[137,85,178,85],[137,88,178,88],[137,89,178,89],[138,6,180,4,"console"],[138,13,180,11],[138,14,180,12,"log"],[138,17,180,15],[138,18,180,16],[138,46,180,44,"xpReward"],[138,54,180,52],[138,65,180,63,"goldReward"],[138,75,180,73],[138,88,180,86,"enemy"],[138,93,180,91],[138,94,180,92,"name"],[138,98,180,96],[138,100,180,98],[138,101,180,99],[140,6,182,4],[141,6,183,4,"game"],[141,10,183,8],[141,11,183,9,"updateNinja"],[141,22,183,20],[141,23,183,21,"prev"],[141,27,183,25],[141,32,183,30],[142,8,184,6,"experience"],[142,18,184,16],[142,20,184,18,"prev"],[142,24,184,22],[142,25,184,23,"experience"],[142,35,184,33],[142,38,184,36,"xpReward"],[142,46,184,44],[143,8,185,6,"gold"],[143,12,185,10],[143,14,185,12,"prev"],[143,18,185,16],[143,19,185,17,"gold"],[143,23,185,21],[143,26,185,24,"goldReward"],[144,6,186,4],[144,7,186,5],[144,8,186,6],[144,9,186,7],[146,6,188,4],[147,6,189,4,"setCombatState"],[147,20,189,18],[147,21,189,19,"prevState"],[147,30,189,28],[147,35,189,33],[148,8,190,6],[148,11,190,9,"prevState"],[148,20,190,18],[149,8,191,6,"enemies"],[149,15,191,13],[149,17,191,15,"prevState"],[149,26,191,24],[149,27,191,25,"enemies"],[149,34,191,32],[149,35,191,33,"map"],[149,38,191,36],[149,39,191,37,"e"],[149,40,191,38],[149,44,192,8,"e"],[149,45,192,9],[149,46,192,10,"id"],[149,48,192,12],[149,53,192,17,"enemy"],[149,58,192,22],[149,59,192,23,"id"],[149,61,192,25],[149,64,192,28],[150,10,192,30],[150,13,192,33,"e"],[150,14,192,34],[151,10,192,36,"xpAwarded"],[151,19,192,45],[151,21,192,47],[152,8,192,52],[152,9,192,53],[152,12,192,56,"e"],[152,13,193,6],[153,6,194,4],[153,7,194,5],[153,8,194,6],[153,9,194,7],[155,6,196,4],[156,6,197,4],[156,10,197,8,"enemy"],[156,15,197,13],[156,16,197,14,"zoneTypeId"],[156,26,197,24],[156,28,197,26],[157,8,198,6,"recordEnemyKill"],[157,23,198,21],[157,24,198,22],[158,10,199,8,"id"],[158,12,199,10],[158,14,199,12,"enemy"],[158,19,199,17],[158,20,199,18,"id"],[158,22,199,20],[159,10,200,8,"typeId"],[159,16,200,14],[159,18,200,16,"enemy"],[159,23,200,21],[159,24,200,22,"zoneTypeId"],[159,34,200,32],[160,10,201,8,"name"],[160,14,201,12],[160,16,201,14,"enemy"],[160,21,201,19],[160,22,201,20,"name"],[160,26,201,24],[161,10,202,8,"icon"],[161,14,202,12],[161,16,202,14],[161,20,202,18],[162,10,203,8,"hp"],[162,12,203,10],[162,14,203,12],[162,15,203,13],[163,10,204,8,"maxHP"],[163,15,204,13],[163,17,204,15,"enemy"],[163,22,204,20],[163,23,204,21,"maxHealth"],[163,32,204,30],[164,10,205,8,"attack"],[164,16,205,14],[164,18,205,16,"enemy"],[164,23,205,21],[164,24,205,22,"stats"],[164,29,205,27],[164,30,205,28,"attack"],[164,36,205,34],[165,10,206,8,"xp"],[165,12,206,10],[165,14,206,12,"enemy"],[165,19,206,17],[165,20,206,18,"zoneXP"],[165,26,206,24],[165,30,206,28],[165,31,206,29],[166,10,207,8,"position"],[166,18,207,16],[166,20,207,18,"enemy"],[166,25,207,23],[166,26,207,24,"position"],[167,8,208,6],[167,9,208,7],[167,10,208,8],[168,6,209,4],[169,4,210,2],[169,5,210,3],[169,7,210,5],[169,8,210,6,"game"],[169,12,210,10],[169,13,210,11,"updateNinja"],[169,24,210,22],[169,26,210,24,"game"],[169,30,210,28],[169,31,210,29,"gameState"],[169,40,210,38],[169,41,210,39,"subscriptionBenefits"],[169,61,210,59],[169,63,210,61,"recordEnemyKill"],[169,78,210,76],[169,79,210,77],[169,80,210,78],[171,4,212,2],[172,4,213,2],[173,4,214,2],[174,4,215,2],[174,8,215,8,"deadEnemiesRef"],[174,22,215,22],[174,25,215,25],[174,29,215,25,"useRef"],[174,35,215,31],[174,36,215,31,"useRef"],[174,42,215,31],[174,44,215,47],[174,46,215,49],[174,47,215,50],[175,4,217,2],[175,8,217,8,"handleCombatTick"],[175,24,217,24],[175,27,217,27,"React"],[175,32,217,32],[175,33,217,32,"default"],[175,40,217,32],[175,41,217,33,"useCallback"],[175,52,217,44],[175,53,217,45],[175,59,217,51],[176,6,217,51],[176,10,217,51,"_s2"],[176,13,217,51],[176,16,217,51,"$RefreshSig$"],[176,28,217,51],[177,6,218,4,"console"],[177,13,218,11],[177,14,218,12,"log"],[177,17,218,15],[177,18,218,16],[177,87,218,85],[177,88,218,86],[178,6,219,4,"console"],[178,13,219,11],[178,14,219,12,"log"],[178,17,219,15],[178,18,219,16],[178,65,219,63,"isManualControlActive"],[178,86,219,84],[178,99,219,97,"game"],[178,103,219,101],[178,104,219,102,"gameState"],[178,113,219,111],[178,114,219,112,"isAlive"],[178,121,219,119],[178,123,219,121],[178,124,219,122],[179,6,221,4,"_s2"],[179,9,221,4],[179,10,221,4,"setCombatState"],[179,24,221,18],[179,25,221,18,"_s2"],[179,28,221,18],[179,29,221,19,"prev"],[179,33,221,23],[179,37,221,27],[180,8,221,27,"_s2"],[180,11,221,27],[181,8,222,6],[181,12,222,12,"newTick"],[181,19,222,19],[181,22,222,22,"combatEngine"],[181,41,222,34],[181,42,222,34,"combatEngine"],[181,54,222,34],[181,55,222,35,"getCurrentTick"],[181,69,222,49],[181,70,222,50],[181,71,222,51],[182,8,223,6],[182,12,223,12,"newState"],[182,20,223,20],[182,23,223,23],[183,10,223,25],[183,13,223,28,"prev"],[183,17,223,32],[184,10,223,34,"currentTick"],[184,21,223,45],[184,23,223,47,"newTick"],[185,8,223,55],[185,9,223,56],[186,8,225,6],[186,12,225,10],[186,13,225,11,"newState"],[186,21,225,19],[186,22,225,20,"isInCombat"],[186,32,225,30],[186,34,225,32],[186,41,225,39,"newState"],[186,49,225,47],[188,8,227,6],[189,8,228,6,"newState"],[189,16,228,14],[189,17,228,15,"abilityManager"],[189,31,228,29],[189,32,228,30,"updateCooldowns"],[189,47,228,45],[189,48,228,46,"newTick"],[189,55,228,53],[189,56,228,54],[191,8,230,6],[192,8,231,6],[192,12,231,12,"effectResults"],[192,25,231,25],[192,28,231,28,"newState"],[192,36,231,36],[192,37,231,37,"statusEffects"],[192,50,231,50],[192,51,231,51,"processTick"],[192,62,231,62],[192,63,231,63,"newTick"],[192,70,231,70],[192,71,231,71],[194,8,233,6],[195,8,234,6,"effectResults"],[195,21,234,19],[195,22,234,20,"forEach"],[195,29,234,27],[195,30,234,28],[195,31,234,29,"results"],[195,38,234,36],[195,40,234,38,"entityId"],[195,48,234,46],[195,53,234,51],[196,10,235,8],[196,14,235,14,"enemyIndex"],[196,24,235,24],[196,27,235,27,"newState"],[196,35,235,35],[196,36,235,36,"enemies"],[196,43,235,43],[196,44,235,44,"findIndex"],[196,53,235,53],[196,54,235,54,"e"],[196,55,235,55],[196,59,235,59,"e"],[196,60,235,60],[196,61,235,61,"id"],[196,63,235,63],[196,68,235,68,"entityId"],[196,76,235,76],[196,77,235,77],[197,10,236,8],[197,14,236,12,"enemyIndex"],[197,24,236,22],[197,28,236,26],[197,29,236,27],[197,31,236,29],[198,12,237,10,"results"],[198,19,237,17],[198,20,237,18,"forEach"],[198,27,237,25],[198,28,237,26,"result"],[198,34,237,32],[198,38,237,36],[199,14,238,12,"newState"],[199,22,238,20],[199,23,238,21,"enemies"],[199,30,238,28],[199,31,238,29,"enemyIndex"],[199,41,238,39],[199,42,238,40],[199,43,238,41,"health"],[199,49,238,47],[199,53,238,51,"result"],[199,59,238,57],[199,60,238,58,"damage"],[199,66,238,64],[200,14,239,12,"newState"],[200,22,239,20],[200,23,239,21,"enemies"],[200,30,239,28],[200,31,239,29,"enemyIndex"],[200,41,239,39],[200,42,239,40],[200,43,239,41,"lastDamaged"],[200,54,239,52],[200,57,239,55,"newTick"],[200,64,239,62],[201,12,240,10],[201,13,240,11],[201,14,240,12],[202,10,241,8],[203,8,242,6],[203,9,242,7],[203,10,242,8],[205,8,244,6],[206,8,245,6],[207,8,246,6],[207,12,246,10,"newState"],[207,20,246,18],[207,21,246,19,"playerStats"],[207,32,246,30],[207,36,246,34,"game"],[207,40,246,38],[207,41,246,39,"gameState"],[207,50,246,48],[207,51,246,49,"ninja"],[207,56,246,54],[207,58,246,56],[208,10,247,8],[208,14,247,14,"effectiveStats"],[208,28,247,28],[208,31,247,31,"game"],[208,35,247,35],[208,36,247,36,"getEffectiveStats"],[208,53,247,53],[208,54,247,54],[208,55,247,55],[210,10,249,8],[211,10,250,8],[211,14,250,12,"newState"],[211,22,250,20],[211,23,250,21,"playerStats"],[211,34,250,32],[211,35,250,33,"attack"],[211,41,250,39],[211,46,250,44,"effectiveStats"],[211,60,250,58],[211,61,250,59,"attack"],[211,67,250,65],[211,71,251,12,"newState"],[211,79,251,20],[211,80,251,21,"playerStats"],[211,91,251,32],[211,92,251,33,"defense"],[211,99,251,40],[211,104,251,45,"effectiveStats"],[211,118,251,59],[211,119,251,60,"defense"],[211,126,251,67],[211,130,252,12,"newState"],[211,138,252,20],[211,139,252,21,"playerStats"],[211,150,252,32],[211,151,252,33,"maxHealth"],[211,160,252,42],[211,165,252,47,"effectiveStats"],[211,179,252,61],[211,180,252,62,"maxHealth"],[211,189,252,71],[211,191,252,73],[212,12,254,10,"console"],[212,19,254,17],[212,20,254,18,"log"],[212,23,254,21],[212,24,254,22],[212,58,254,56,"newState"],[212,66,254,64],[212,67,254,65,"playerStats"],[212,78,254,76],[212,79,254,77,"attack"],[212,85,254,83],[212,91,254,89,"effectiveStats"],[212,105,254,103],[212,106,254,104,"attack"],[212,112,254,110],[212,125,254,123,"newState"],[212,133,254,131],[212,134,254,132,"playerStats"],[212,145,254,143],[212,146,254,144,"defense"],[212,153,254,151],[212,159,254,157,"effectiveStats"],[212,173,254,171],[212,174,254,172,"defense"],[212,181,254,179],[212,192,254,190,"newState"],[212,200,254,198],[212,201,254,199,"playerStats"],[212,212,254,210],[212,213,254,211,"maxHealth"],[212,222,254,220],[212,228,254,226,"effectiveStats"],[212,242,254,240],[212,243,254,241,"maxHealth"],[212,252,254,250],[212,254,254,252],[212,255,254,253],[214,12,256,10],[215,12,257,10],[215,16,257,14,"newHealth"],[215,25,257,23],[215,28,257,26,"newState"],[215,36,257,34],[215,37,257,35,"playerStats"],[215,48,257,46],[215,49,257,47,"health"],[215,55,257,53],[216,12,258,10],[216,16,258,14,"newState"],[216,24,258,22],[216,25,258,23,"playerStats"],[216,36,258,34],[216,37,258,35,"maxHealth"],[216,46,258,44],[216,51,258,49,"effectiveStats"],[216,65,258,63],[216,66,258,64,"maxHealth"],[216,75,258,73],[216,77,258,75],[217,14,259,12],[218,14,260,12],[218,18,260,16,"effectiveStats"],[218,32,260,30],[218,33,260,31,"maxHealth"],[218,42,260,40],[218,45,260,43,"newState"],[218,53,260,51],[218,54,260,52,"playerStats"],[218,65,260,63],[218,66,260,64,"maxHealth"],[218,75,260,73],[218,78,260,76],[218,81,260,79],[218,83,260,81],[219,16,261,14],[220,16,262,14],[220,20,262,20,"healthRatio"],[220,31,262,31],[220,34,262,34,"newState"],[220,42,262,42],[220,43,262,43,"playerStats"],[220,54,262,54],[220,55,262,55,"maxHealth"],[220,64,262,64],[220,67,262,67],[220,68,262,68],[220,71,263,16,"newState"],[220,79,263,24],[220,80,263,25,"playerStats"],[220,91,263,36],[220,92,263,37,"health"],[220,98,263,43],[220,101,263,46,"newState"],[220,109,263,54],[220,110,263,55,"playerStats"],[220,121,263,66],[220,122,263,67,"maxHealth"],[220,131,263,76],[220,134,263,79],[220,135,263,80],[221,16,264,14,"newHealth"],[221,25,264,23],[221,28,264,26,"Math"],[221,32,264,30],[221,33,264,31,"floor"],[221,38,264,36],[221,39,264,37,"effectiveStats"],[221,53,264,51],[221,54,264,52,"maxHealth"],[221,63,264,61],[221,66,264,64,"healthRatio"],[221,77,264,75],[221,78,264,76],[222,14,265,12],[222,15,265,13],[222,21,265,19],[222,25,265,23,"newState"],[222,33,265,31],[222,34,265,32,"playerStats"],[222,45,265,43],[222,46,265,44,"health"],[222,52,265,50],[222,55,265,53,"effectiveStats"],[222,69,265,67],[222,70,265,68,"maxHealth"],[222,79,265,77],[222,81,265,79],[223,16,266,14],[224,16,267,14,"newHealth"],[224,25,267,23],[224,28,267,26,"effectiveStats"],[224,42,267,40],[224,43,267,41,"maxHealth"],[224,52,267,50],[225,14,268,12],[226,14,269,12],[227,12,270,10],[228,12,272,10,"newState"],[228,20,272,18],[228,21,272,19,"playerStats"],[228,32,272,30],[228,35,272,33],[229,14,273,12],[229,17,273,15,"newState"],[229,25,273,23],[229,26,273,24,"playerStats"],[229,37,273,35],[230,14,274,12,"attack"],[230,20,274,18],[230,22,274,20,"effectiveStats"],[230,36,274,34],[230,37,274,35,"attack"],[230,43,274,41],[231,14,275,12,"defense"],[231,21,275,19],[231,23,275,21,"effectiveStats"],[231,37,275,35],[231,38,275,36,"defense"],[231,45,275,43],[232,14,276,12,"maxHealth"],[232,23,276,21],[232,25,276,23,"effectiveStats"],[232,39,276,37],[232,40,276,38,"maxHealth"],[232,49,276,47],[233,14,276,49],[234,14,277,12,"health"],[234,20,277,18],[234,22,277,20,"newHealth"],[234,31,277,29],[235,14,277,31],[236,14,278,12,"critChance"],[236,24,278,22],[236,26,278,24,"effectiveStats"],[236,40,278,38],[236,41,278,39,"critChance"],[236,51,278,49],[236,55,278,53,"newState"],[236,63,278,61],[236,64,278,62,"playerStats"],[236,75,278,73],[236,76,278,74,"critChance"],[236,86,278,84],[237,14,279,12,"critDamage"],[237,24,279,22],[237,26,279,24,"effectiveStats"],[237,40,279,38],[237,41,279,39,"critDamage"],[237,51,279,49],[237,55,279,53,"newState"],[237,63,279,61],[237,64,279,62,"playerStats"],[237,75,279,73],[237,76,279,74,"critDamage"],[237,86,279,84],[238,14,280,12,"cooldownReduction"],[238,31,280,29],[238,33,280,31,"effectiveStats"],[238,47,280,45],[238,48,280,46,"cooldownReduction"],[238,65,280,63],[238,69,280,67,"newState"],[238,77,280,75],[238,78,280,76,"playerStats"],[238,89,280,87],[238,90,280,88,"cooldownReduction"],[239,12,281,10],[239,13,281,11],[240,10,282,8],[242,10,284,8],[243,10,285,8],[243,14,285,12,"game"],[243,18,285,16],[243,19,285,17,"gameState"],[243,28,285,26],[243,29,285,27,"isAlive"],[243,36,285,34],[243,40,286,12,"game"],[243,44,286,16],[243,45,286,17,"gameState"],[243,54,286,26],[243,55,286,27,"ninja"],[243,60,286,32],[243,61,286,33,"health"],[243,67,286,39],[243,72,286,44,"effectiveStats"],[243,86,286,58],[243,87,286,59,"maxHealth"],[243,96,286,68],[243,100,287,12,"newState"],[243,108,287,20],[243,109,287,21,"playerStats"],[243,120,287,32],[243,121,287,33,"health"],[243,127,287,39],[243,130,287,42,"effectiveStats"],[243,144,287,56],[243,145,287,57,"maxHealth"],[243,154,287,66],[243,157,287,69],[243,160,287,72],[243,162,287,74],[244,12,288,10,"console"],[244,19,288,17],[244,20,288,18,"log"],[244,23,288,21],[244,24,288,22],[244,58,288,56,"newState"],[244,66,288,64],[244,67,288,65,"playerStats"],[244,78,288,76],[244,79,288,77,"health"],[244,85,288,83],[244,91,288,89,"game"],[244,95,288,93],[244,96,288,94,"gameState"],[244,105,288,103],[244,106,288,104,"ninja"],[244,111,288,109],[244,112,288,110,"health"],[244,118,288,116],[244,139,288,137],[244,140,288,138],[245,12,289,10,"newState"],[245,20,289,18],[245,21,289,19,"playerStats"],[245,32,289,30],[245,33,289,31,"health"],[245,39,289,37],[245,42,289,40,"game"],[245,46,289,44],[245,47,289,45,"gameState"],[245,56,289,54],[245,57,289,55,"ninja"],[245,62,289,60],[245,63,289,61,"health"],[245,69,289,67],[246,10,290,8],[247,8,291,6],[249,8,293,6],[250,8,294,6,"newState"],[250,16,294,14],[250,17,294,15,"enemies"],[250,24,294,22],[250,25,294,23,"forEach"],[250,32,294,30],[250,33,294,31,"enemy"],[250,38,294,36],[250,42,294,40],[251,10,295,8],[251,14,295,12],[251,15,295,13,"enemy"],[251,20,295,18],[251,21,295,19,"isBoss"],[251,27,295,25],[251,29,295,27],[252,12,295,29],[253,12,296,10],[254,12,297,10],[254,16,297,16,"MOVEMENT_SPEED"],[254,30,297,30],[254,33,297,33],[254,37,297,37],[254,38,297,38],[254,39,297,39],[255,12,298,10],[255,16,298,16,"SCREEN_WIDTH"],[255,28,298,28],[255,31,298,31],[255,34,298,34],[256,12,299,10],[256,16,299,16,"GAME_AREA_HEIGHT"],[256,32,299,32],[256,35,299,35],[256,38,299,38],[256,39,299,39],[256,40,299,40],[257,12,300,10],[257,16,300,16,"ENEMY_SIZE"],[257,26,300,26],[257,29,300,29],[257,31,300,31],[259,12,302,10],[260,12,303,10],[260,16,303,16,"playerX"],[260,23,303,23],[260,26,303,26,"currentNinjaPosition"],[260,46,303,46],[260,47,303,47,"x"],[260,48,303,48],[261,12,304,10],[261,16,304,16,"playerY"],[261,23,304,23],[261,26,304,26,"currentNinjaPosition"],[261,46,304,46],[261,47,304,47,"y"],[261,48,304,48],[263,12,306,10],[264,12,307,10],[264,16,307,16,"deltaX"],[264,22,307,22],[264,25,307,25,"playerX"],[264,32,307,32],[264,35,307,35,"enemy"],[264,40,307,40],[264,41,307,41,"position"],[264,49,307,49],[264,50,307,50,"x"],[264,51,307,51],[265,12,308,10],[265,16,308,16,"deltaY"],[265,22,308,22],[265,25,308,25,"playerY"],[265,32,308,32],[265,35,308,35,"enemy"],[265,40,308,40],[265,41,308,41,"position"],[265,49,308,49],[265,50,308,50,"y"],[265,51,308,51],[266,12,309,10],[266,16,309,16,"distance"],[266,24,309,24],[266,27,309,27,"Math"],[266,31,309,31],[266,32,309,32,"sqrt"],[266,36,309,36],[266,37,309,37,"deltaX"],[266,43,309,43],[266,46,309,46,"deltaX"],[266,52,309,52],[266,55,309,55,"deltaY"],[266,61,309,61],[266,64,309,64,"deltaY"],[266,70,309,70],[266,71,309,71],[268,12,311,10],[269,12,312,10],[269,16,312,16,"ATTACK_RANGE"],[269,28,312,28],[269,31,312,31],[269,33,312,33],[269,34,312,34],[269,35,312,35],[270,12,313,10],[270,16,313,16,"ATTACK_COOLDOWN"],[270,31,313,31],[270,34,313,34],[270,36,313,36],[270,37,313,37],[270,38,313,38],[272,12,315,10],[272,16,315,14,"distance"],[272,24,315,22],[272,28,315,26,"ATTACK_RANGE"],[272,40,315,38],[272,42,315,40],[273,14,316,12],[274,14,317,12],[274,18,317,16],[274,19,317,17,"enemy"],[274,24,317,22],[274,25,317,23,"lastAttackTick"],[274,39,317,37],[274,41,317,39,"enemy"],[274,46,317,44],[274,47,317,45,"lastAttackTick"],[274,61,317,59],[274,64,317,62],[274,65,317,63],[275,14,319,12],[275,18,319,16,"newState"],[275,26,319,24],[275,27,319,25,"currentTick"],[275,38,319,36],[275,41,319,39,"enemy"],[275,46,319,44],[275,47,319,45,"lastAttackTick"],[275,61,319,59],[275,65,319,63,"ATTACK_COOLDOWN"],[275,80,319,78],[275,82,319,80],[276,16,320,14],[277,16,321,14],[277,20,321,18],[277,21,321,19,"game"],[277,25,321,23],[277,26,321,24,"gameState"],[277,35,321,33],[277,36,321,34,"isAlive"],[277,43,321,41],[277,45,321,43],[278,18,322,16,"console"],[278,25,322,23],[278,26,322,24,"log"],[278,29,322,27],[278,30,322,28],[278,49,322,47,"enemy"],[278,54,322,52],[278,55,322,53,"name"],[278,59,322,57],[278,93,322,91],[278,94,322,92],[279,18,323,16],[280,18,324,16,"enemy"],[280,23,324,21],[280,24,324,22,"lastAttackTick"],[280,38,324,36],[280,41,324,39,"newState"],[280,49,324,47],[280,50,324,48,"currentTick"],[280,61,324,59],[281,16,325,14],[281,17,325,15],[281,23,325,21],[282,18,326,16],[283,18,327,16],[283,22,327,22,"isPlayerInvincible"],[283,40,327,40],[283,43,327,43,"game"],[283,47,327,47],[283,48,327,48,"gameState"],[283,57,327,57],[283,58,327,58,"isInvincible"],[283,70,327,70],[283,74,328,41,"game"],[283,78,328,45],[283,79,328,46,"gameState"],[283,88,328,55],[283,89,328,56,"invincibilityEndTime"],[283,109,328,76],[283,113,329,41,"Date"],[283,117,329,45],[283,118,329,46,"now"],[283,121,329,49],[283,122,329,50],[283,123,329,51],[283,126,329,54,"game"],[283,130,329,58],[283,131,329,59,"gameState"],[283,140,329,68],[283,141,329,69,"invincibilityEndTime"],[283,161,329,89],[284,18,331,16],[284,22,331,20,"isPlayerInvincible"],[284,40,331,38],[284,42,331,40],[285,20,332,18,"console"],[285,27,332,25],[285,28,332,26,"log"],[285,31,332,29],[285,32,332,30],[285,51,332,49,"enemy"],[285,56,332,54],[285,57,332,55,"name"],[285,61,332,59],[285,101,332,99],[285,102,332,100],[286,20,333,18],[287,20,334,18,"enemy"],[287,25,334,23],[287,26,334,24,"lastAttackTick"],[287,40,334,38],[287,43,334,41,"newState"],[287,51,334,49],[287,52,334,50,"currentTick"],[287,63,334,61],[288,18,335,16],[288,19,335,17],[288,25,335,23],[289,20,336,16],[290,20,337,16],[290,24,337,22,"baseAttack"],[290,34,337,32],[290,37,337,35,"enemy"],[290,42,337,40],[290,43,337,41,"stats"],[290,48,337,46],[290,49,337,47,"attack"],[290,55,337,53],[290,58,337,56],[290,61,337,59],[290,62,337,60],[290,63,337,61],[291,20,338,16],[291,24,338,22,"attackDamage"],[291,36,338,34],[291,39,338,37,"Math"],[291,43,338,41],[291,44,338,42,"floor"],[291,49,338,47],[291,50,338,48,"baseAttack"],[291,60,338,58],[291,64,338,62],[291,67,338,65],[291,70,338,68,"Math"],[291,74,338,72],[291,75,338,73,"random"],[291,81,338,79],[291,82,338,80],[291,83,338,81],[291,86,338,84],[291,89,338,87],[291,90,338,88],[291,91,338,89],[291,92,338,90],[291,93,338,91],[292,20,339,16],[292,24,339,22,"playerDefense"],[292,37,339,35],[292,40,339,38,"newState"],[292,48,339,46],[292,49,339,47,"playerStats"],[292,60,339,58],[292,61,339,59,"defense"],[292,68,339,66],[293,20,340,16],[293,24,340,22,"finalDamage"],[293,35,340,33],[293,38,340,36,"Math"],[293,42,340,40],[293,43,340,41,"max"],[293,46,340,44],[293,47,340,45],[293,48,340,46],[293,50,340,48,"attackDamage"],[293,62,340,60],[293,65,340,63,"Math"],[293,69,340,67],[293,70,340,68,"floor"],[293,75,340,73],[293,76,340,74,"playerDefense"],[293,89,340,87],[293,92,340,90],[293,95,340,93],[293,96,340,94],[293,97,340,95],[293,98,340,96],[293,99,340,97],[295,20,342,16,"console"],[295,27,342,23],[295,28,342,24,"log"],[295,31,342,27],[295,32,342,28],[295,53,342,49,"enemy"],[295,58,342,54],[295,59,342,55,"name"],[295,63,342,59],[295,86,342,82,"finalDamage"],[295,97,342,93],[295,109,342,105,"attackDamage"],[295,121,342,117],[295,132,342,128,"Math"],[295,136,342,132],[295,137,342,133,"floor"],[295,142,342,138],[295,143,342,139,"playerDefense"],[295,156,342,152],[295,159,342,155],[295,162,342,158],[295,163,342,159],[295,184,342,180],[295,185,342,181],[297,20,344,16],[298,20,345,16],[298,24,345,22,"newPlayerHealth"],[298,39,345,37],[298,42,345,40,"Math"],[298,46,345,44],[298,47,345,45,"max"],[298,50,345,48],[298,51,345,49],[298,52,345,50],[298,54,345,52,"newState"],[298,62,345,60],[298,63,345,61,"playerStats"],[298,74,345,72],[298,75,345,73,"health"],[298,81,345,79],[298,84,345,82,"finalDamage"],[298,95,345,93],[298,96,345,94],[299,20,346,16,"newState"],[299,28,346,24],[299,29,346,25,"playerStats"],[299,40,346,36],[299,41,346,37,"health"],[299,47,346,43],[299,50,346,46,"newPlayerHealth"],[299,65,346,61],[300,20,348,16,"console"],[300,27,348,23],[300,28,348,24,"log"],[300,31,348,27],[300,32,348,28],[300,53,348,49,"newState"],[300,61,348,57],[300,62,348,58,"playerStats"],[300,73,348,69],[300,74,348,70,"health"],[300,80,348,76],[300,84,348,80,"newState"],[300,92,348,88],[300,93,348,89,"playerStats"],[300,104,348,100],[300,105,348,101,"maxHealth"],[300,114,348,110],[300,124,348,120,"finalDamage"],[300,135,348,131],[300,145,348,141],[300,146,348,142],[302,20,350,16],[303,20,351,16,"enemy"],[303,25,351,21],[303,26,351,22,"lastAttackTick"],[303,40,351,36],[303,43,351,39,"newState"],[303,51,351,47],[303,52,351,48,"currentTick"],[303,63,351,59],[305,20,353,16],[306,20,354,16],[306,24,354,20,"newPlayerHealth"],[306,39,354,35],[306,43,354,39],[306,44,354,40],[306,46,354,42],[307,22,355,18,"console"],[307,29,355,25],[307,30,355,26,"log"],[307,33,355,29],[307,34,355,30],[307,84,355,80],[307,85,355,81],[308,22,356,18],[309,22,357,18,"game"],[309,26,357,22],[309,27,357,23,"updateGameState"],[309,42,357,38],[309,43,357,39],[310,24,357,41,"isAlive"],[310,31,357,48],[310,33,357,50],[311,22,357,56],[311,23,357,57],[311,24,357,58],[312,20,358,16],[313,18,359,16],[314,16,360,14],[315,14,361,12],[316,12,362,10],[316,13,362,11],[316,19,362,17],[317,14,363,12],[318,14,364,12],[319,14,365,12],[319,18,365,16,"distance"],[319,26,365,24],[319,29,365,27],[319,31,365,29],[319,33,365,31],[320,16,366,14],[321,16,367,14],[321,20,367,20,"normalizedX"],[321,31,367,31],[321,34,367,34,"deltaX"],[321,40,367,40],[321,43,367,43,"distance"],[321,51,367,51],[322,16,368,14],[322,20,368,20,"normalizedY"],[322,31,368,31],[322,34,368,34,"deltaY"],[322,40,368,40],[322,43,368,43,"distance"],[322,51,368,51],[324,16,370,14],[325,16,371,14],[325,20,371,20,"randomFactor"],[325,32,371,32],[325,35,371,35],[325,38,371,38],[325,39,371,39],[325,40,371,40],[326,16,372,14],[326,20,372,20,"finalX"],[326,26,372,26],[326,29,372,29,"normalizedX"],[326,40,372,40],[326,43,372,43],[326,44,372,44,"Math"],[326,48,372,48],[326,49,372,49,"random"],[326,55,372,55],[326,56,372,56],[326,57,372,57],[326,60,372,60],[326,63,372,63],[326,67,372,67,"randomFactor"],[326,79,372,79],[327,16,373,14],[327,20,373,20,"finalY"],[327,26,373,26],[327,29,373,29,"normalizedY"],[327,40,373,40],[327,43,373,43],[327,44,373,44,"Math"],[327,48,373,48],[327,49,373,49,"random"],[327,55,373,55],[327,56,373,56],[327,57,373,57],[327,60,373,60],[327,63,373,63],[327,67,373,67,"randomFactor"],[327,79,373,79],[329,16,375,14],[330,16,376,14],[330,20,376,18,"newX"],[330,24,376,22],[330,27,376,25,"enemy"],[330,32,376,30],[330,33,376,31,"position"],[330,41,376,39],[330,42,376,40,"x"],[330,43,376,41],[330,46,376,45,"finalX"],[330,52,376,51],[330,55,376,54,"MOVEMENT_SPEED"],[330,69,376,69],[331,16,377,14],[331,20,377,18,"newY"],[331,24,377,22],[331,27,377,25,"enemy"],[331,32,377,30],[331,33,377,31,"position"],[331,41,377,39],[331,42,377,40,"y"],[331,43,377,41],[331,46,377,45,"finalY"],[331,52,377,51],[331,55,377,54,"MOVEMENT_SPEED"],[331,69,377,69],[333,16,379,14],[334,16,380,14,"newX"],[334,20,380,18],[334,23,380,21,"Math"],[334,27,380,25],[334,28,380,26,"max"],[334,31,380,29],[334,32,380,30],[334,33,380,31],[334,35,380,33,"Math"],[334,39,380,37],[334,40,380,38,"min"],[334,43,380,41],[334,44,380,42,"SCREEN_WIDTH"],[334,56,380,54],[334,59,380,57,"ENEMY_SIZE"],[334,69,380,67],[334,71,380,69,"newX"],[334,75,380,73],[334,76,380,74],[334,77,380,75],[335,16,381,14,"newY"],[335,20,381,18],[335,23,381,21,"Math"],[335,27,381,25],[335,28,381,26,"max"],[335,31,381,29],[335,32,381,30],[335,33,381,31],[335,35,381,33,"Math"],[335,39,381,37],[335,40,381,38,"min"],[335,43,381,41],[335,44,381,42,"GAME_AREA_HEIGHT"],[335,60,381,58],[335,63,381,61,"ENEMY_SIZE"],[335,73,381,71],[335,75,381,73,"newY"],[335,79,381,77],[335,80,381,78],[335,81,381,79],[337,16,383,14],[338,16,384,14,"enemy"],[338,21,384,19],[338,22,384,20,"position"],[338,30,384,28],[338,31,384,29,"x"],[338,32,384,30],[338,35,384,33,"newX"],[338,39,384,37],[339,16,385,14,"enemy"],[339,21,385,19],[339,22,385,20,"position"],[339,30,385,28],[339,31,385,29,"y"],[339,32,385,30],[339,35,385,33,"newY"],[339,39,385,37],[340,14,386,12],[341,14,387,12],[342,12,388,10],[343,10,389,8],[344,8,390,6],[344,9,390,7],[344,10,390,8],[346,8,392,6],[347,8,393,6],[347,12,393,10,"newState"],[347,20,393,18],[347,21,393,19,"shadowClone"],[347,32,393,30],[347,34,393,32],[348,10,394,8],[349,10,395,8,"newState"],[349,18,395,16],[349,19,395,17,"shadowClone"],[349,30,395,28],[349,31,395,29,"remainingTicks"],[349,45,395,43],[349,47,395,45],[351,10,397,8],[352,10,398,8],[352,14,398,14,"cloneOffset"],[352,25,398,25],[352,28,398,28],[352,30,398,30],[352,31,398,31],[352,32,398,32],[353,10,399,8,"newState"],[353,18,399,16],[353,19,399,17,"shadowClone"],[353,30,399,28],[353,31,399,29,"position"],[353,39,399,37],[353,40,399,38,"x"],[353,41,399,39],[353,44,399,42,"currentNinjaPosition"],[353,64,399,62],[353,65,399,63,"x"],[353,66,399,64],[353,69,399,67,"cloneOffset"],[353,80,399,78],[354,10,400,8,"newState"],[354,18,400,16],[354,19,400,17,"shadowClone"],[354,30,400,28],[354,31,400,29,"position"],[354,39,400,37],[354,40,400,38,"y"],[354,41,400,39],[354,44,400,42,"currentNinjaPosition"],[354,64,400,62],[354,65,400,63,"y"],[354,66,400,64],[354,69,400,67],[354,71,400,69],[356,10,402,8],[357,10,403,8],[357,14,403,12,"newState"],[357,22,403,20],[357,23,403,21,"shadowClone"],[357,34,403,32],[357,35,403,33,"remainingTicks"],[357,49,403,47],[357,53,403,51],[357,54,403,52],[357,56,403,54],[358,12,404,10,"console"],[358,19,404,17],[358,20,404,18,"log"],[358,23,404,21],[358,24,404,22],[358,75,404,73],[358,76,404,74],[359,12,405,10,"newState"],[359,20,405,18],[359,21,405,19,"shadowClone"],[359,32,405,30],[359,35,405,33,"undefined"],[359,44,405,42],[360,10,406,8],[360,11,406,9],[360,17,406,15],[361,12,407,10],[362,12,408,10],[363,12,409,10],[363,16,409,16,"CLONE_ATTACK_INTERVAL"],[363,37,409,37],[363,40,409,40],[363,42,409,42],[364,12,410,10],[364,16,410,14,"newState"],[364,24,410,22],[364,25,410,23,"currentTick"],[364,36,410,34],[364,39,410,37,"CLONE_ATTACK_INTERVAL"],[364,60,410,58],[364,65,410,63],[364,66,410,64],[364,70,410,68,"newState"],[364,78,410,76],[364,79,410,77,"enemies"],[364,86,410,84],[364,87,410,85,"length"],[364,93,410,91],[364,96,410,94],[364,97,410,95],[364,99,410,97],[365,14,411,12,"console"],[365,21,411,19],[365,22,411,20,"log"],[365,25,411,23],[365,26,411,24],[365,83,411,81],[365,84,411,82],[367,14,413,12],[368,14,414,12],[368,18,414,18,"target"],[368,24,414,24],[368,27,414,27,"findClosestEnemyInternal"],[368,51,414,51],[368,52,414,52,"newState"],[368,60,414,60],[368,61,414,61,"enemies"],[368,68,414,68],[368,69,414,69],[369,14,415,12],[369,18,415,16,"target"],[369,24,415,22],[369,26,415,24],[370,16,416,14],[371,16,417,14],[371,20,417,20,"cloneDamage"],[371,31,417,31],[371,34,417,34,"Math"],[371,38,417,38],[371,39,417,39,"floor"],[371,44,417,44],[371,45,417,45,"newState"],[371,53,417,53],[371,54,417,54,"playerStats"],[371,65,417,65],[371,66,417,66,"attack"],[371,72,417,72],[371,75,417,75],[371,78,417,78],[371,79,417,79],[373,16,419,14],[374,16,420,14,"createProjectile"],[374,32,420,30],[374,33,420,31,"target"],[374,39,420,37],[374,41,420,39,"cloneDamage"],[374,52,420,50],[374,54,420,52,"newState"],[374,62,420,60],[374,63,420,61,"shadowClone"],[374,74,420,72],[374,75,420,73,"position"],[374,83,420,81],[374,85,420,83],[375,18,421,16,"id"],[375,20,421,18],[375,22,421,20],[375,43,421,41],[376,18,422,16,"name"],[376,22,422,20],[376,24,422,22],[376,45,422,43],[377,18,423,16,"icon"],[377,22,423,20],[377,24,423,22],[378,16,424,14],[378,17,424,15],[378,18,424,16],[379,14,425,12],[380,12,426,10],[381,10,427,8],[382,8,428,6],[384,8,430,6],[385,8,431,6],[386,8,432,6,"console"],[386,15,432,13],[386,16,432,14,"log"],[386,19,432,17],[386,20,432,18],[386,63,432,61,"isManualControlActive"],[386,84,432,82],[386,97,432,95,"game"],[386,101,432,99],[386,102,432,100,"gameState"],[386,111,432,109],[386,112,432,110,"isAlive"],[386,119,432,117],[386,121,432,119],[386,122,432,120],[387,8,433,6],[387,12,433,10],[387,13,433,11,"isManualControlActive"],[387,34,433,32],[387,38,433,36,"game"],[387,42,433,40],[387,43,433,41,"gameState"],[387,52,433,50],[387,53,433,51,"isAlive"],[387,60,433,58],[387,62,433,60],[388,10,434,8],[388,15,434,13],[388,19,434,17,"i"],[388,20,434,18],[388,23,434,21],[388,24,434,22],[388,26,434,24,"i"],[388,27,434,25],[388,30,434,28],[388,31,434,29],[388,33,434,31,"i"],[388,34,434,32],[388,36,434,34],[388,38,434,36],[389,12,435,10],[389,16,435,14,"newState"],[389,24,435,22],[389,25,435,23,"abilityManager"],[389,39,435,37],[389,40,435,38,"isAbilityReady"],[389,54,435,52],[389,55,435,53,"i"],[389,56,435,54],[389,57,435,55],[389,61,435,59,"newState"],[389,69,435,67],[389,70,435,68,"enemies"],[389,77,435,75],[389,78,435,76,"length"],[389,84,435,82],[389,87,435,85],[389,88,435,86],[389,90,435,88],[390,14,436,12],[390,18,436,16,"newState"],[390,26,436,24],[390,27,436,25,"abilityManager"],[390,41,436,39],[390,42,436,40,"useAbility"],[390,52,436,50],[390,53,436,51,"i"],[390,54,436,52],[390,56,436,54,"newTick"],[390,63,436,61],[390,64,436,62],[390,66,436,64],[391,16,437,14,"console"],[391,23,437,21],[391,24,437,22,"log"],[391,27,437,25],[391,28,437,26],[391,73,437,71,"i"],[391,74,437,72],[391,76,437,74],[391,77,437,75],[392,16,438,14,"castAbility"],[392,27,438,25],[392,28,438,26,"newState"],[392,36,438,34],[392,38,438,36,"i"],[392,39,438,37],[392,40,438,38],[393,14,439,12],[394,12,440,10],[395,10,441,8],[396,8,442,6],[398,8,444,6],[399,8,445,6],[400,8,446,6],[400,12,446,12,"allDeadEnemies"],[400,26,446,26],[400,29,446,29,"newState"],[400,37,446,37],[400,38,446,38,"enemies"],[400,45,446,45],[400,46,446,46,"filter"],[400,52,446,52],[400,53,446,53,"enemy"],[400,58,446,58],[400,62,446,62,"enemy"],[400,67,446,67],[400,68,446,68,"health"],[400,74,446,74],[400,78,446,78],[400,79,446,79],[400,80,446,80],[402,8,448,6],[403,8,449,6,"deadEnemiesRef"],[403,22,449,20],[403,23,449,21,"current"],[403,30,449,28],[403,33,449,31],[403,34,449,32],[403,37,449,35,"allDeadEnemies"],[403,51,449,49],[403,52,449,50],[403,53,449,51],[403,54,449,52],[405,8,451,6],[406,8,452,6],[406,12,452,10,"allDeadEnemies"],[406,26,452,24],[406,27,452,25,"length"],[406,33,452,31],[406,36,452,34],[406,37,452,35],[406,39,452,37],[407,10,453,8,"console"],[407,17,453,15],[407,18,453,16,"log"],[407,21,453,19],[407,22,453,20],[407,34,453,32,"allDeadEnemies"],[407,48,453,46],[407,49,453,47,"length"],[407,55,453,53],[407,83,453,81],[407,85,453,83,"allDeadEnemies"],[407,99,453,97],[407,100,453,98,"map"],[407,103,453,101],[407,104,453,102,"e"],[407,105,453,103],[407,109,453,107],[407,112,453,110,"e"],[407,113,453,111],[407,114,453,112,"name"],[407,118,453,116],[407,122,453,120,"e"],[407,123,453,121],[407,124,453,122,"health"],[407,130,453,128],[407,145,453,143,"e"],[407,146,453,144],[407,147,453,145,"isDying"],[407,154,453,152],[407,157,453,155],[407,158,453,156],[407,159,453,157],[408,8,454,6],[410,8,456,6],[411,8,457,6],[411,12,457,12,"currentTime"],[411,23,457,23],[411,26,457,26,"Date"],[411,30,457,30],[411,31,457,31,"now"],[411,34,457,34],[411,35,457,35],[411,36,457,36],[412,8,458,6,"newState"],[412,16,458,14],[412,17,458,15,"enemies"],[412,24,458,22],[412,27,458,25,"newState"],[412,35,458,33],[412,36,458,34,"enemies"],[412,43,458,41],[412,44,458,42,"filter"],[412,50,458,48],[412,51,458,49,"enemy"],[412,56,458,54],[412,60,458,58],[413,10,459,8],[413,14,459,12,"enemy"],[413,19,459,17],[413,20,459,18,"isDying"],[413,27,459,25],[413,31,459,29,"enemy"],[413,36,459,34],[413,37,459,35,"deathStartTime"],[413,51,459,49],[413,53,459,51],[414,12,460,10],[414,16,460,16,"animationDuration"],[414,33,460,33],[414,36,460,36],[414,39,460,39],[414,40,460,40],[414,41,460,41],[415,12,461,10],[415,16,461,16,"isAnimationComplete"],[415,35,461,35],[415,38,461,38,"currentTime"],[415,49,461,49],[415,52,461,52,"enemy"],[415,57,461,57],[415,58,461,58,"deathStartTime"],[415,72,461,72],[415,76,461,76,"animationDuration"],[415,93,461,93],[416,12,462,10],[416,16,462,14,"isAnimationComplete"],[416,35,462,33],[416,37,462,35],[417,14,463,12,"console"],[417,21,463,19],[417,22,463,20,"log"],[417,25,463,23],[417,26,463,24],[417,58,463,56,"enemy"],[417,63,463,61],[417,64,463,62,"name"],[417,68,463,66],[417,86,463,84,"currentTime"],[417,97,463,95],[417,100,463,98,"enemy"],[417,105,463,103],[417,106,463,104,"deathStartTime"],[417,120,463,118],[417,129,463,127],[417,130,463,128],[418,14,464,12],[418,21,464,19],[418,26,464,24],[418,27,464,25],[418,28,464,26],[419,12,465,10],[420,10,466,8],[421,10,467,8],[421,17,467,15],[421,21,467,19],[421,22,467,20],[421,23,467,21],[422,8,468,6],[422,9,468,7],[422,10,468,8],[424,8,470,6],[425,8,471,6],[425,12,471,10,"allDeadEnemies"],[425,26,471,24],[425,27,471,25,"length"],[425,33,471,31],[425,36,471,34],[425,37,471,35],[425,39,471,37],[426,10,472,8,"console"],[426,17,472,15],[426,18,472,16,"log"],[426,21,472,19],[426,22,472,20],[426,49,472,47,"allDeadEnemies"],[426,63,472,61],[426,64,472,62,"length"],[426,70,472,68],[426,86,472,84],[426,88,472,86,"allDeadEnemies"],[426,102,472,100],[426,103,472,101,"map"],[426,106,472,104],[426,107,472,105,"e"],[426,108,472,106],[426,112,472,110],[426,115,472,113,"e"],[426,116,472,114],[426,117,472,115,"id"],[426,119,472,117],[426,123,472,121,"e"],[426,124,472,122],[426,125,472,123,"health"],[426,131,472,129],[426,136,472,134],[426,137,472,135],[426,138,472,136],[427,8,473,6],[429,8,475,6],[430,8,476,6],[430,12,476,12,"lowHealthEnemies"],[430,28,476,28],[430,31,476,31,"newState"],[430,39,476,39],[430,40,476,40,"enemies"],[430,47,476,47],[430,48,476,48,"filter"],[430,54,476,54],[430,55,476,55,"enemy"],[430,60,476,60],[430,64,476,64,"enemy"],[430,69,476,69],[430,70,476,70,"health"],[430,76,476,76],[430,80,476,80],[430,82,476,82],[430,86,476,86,"enemy"],[430,91,476,91],[430,92,476,92,"health"],[430,98,476,98],[430,101,476,101],[430,102,476,102],[430,103,476,103],[431,8,477,6],[431,12,477,10,"lowHealthEnemies"],[431,28,477,26],[431,29,477,27,"length"],[431,35,477,33],[431,38,477,36],[431,39,477,37],[431,41,477,39],[432,10,478,8,"console"],[432,17,478,15],[432,18,478,16,"log"],[432,21,478,19],[432,22,478,20],[432,61,478,59],[432,63,478,61,"lowHealthEnemies"],[432,79,478,77],[432,80,478,78,"map"],[432,83,478,81],[432,84,478,82,"e"],[432,85,478,83],[432,89,478,87],[432,92,478,90,"e"],[432,93,478,91],[432,94,478,92,"id"],[432,96,478,94],[432,100,478,98,"e"],[432,101,478,99],[432,102,478,100,"health"],[432,108,478,106],[432,112,478,110,"e"],[432,113,478,111],[432,114,478,112,"maxHealth"],[432,123,478,121],[432,128,478,126],[432,129,478,127],[432,130,478,128],[433,8,479,6],[435,8,481,6],[436,8,482,6],[436,12,482,12,"beforeCount"],[436,23,482,23],[436,26,482,26,"newState"],[436,34,482,34],[436,35,482,35,"enemies"],[436,42,482,42],[436,43,482,43,"length"],[436,49,482,49],[437,8,483,6,"newState"],[437,16,483,14],[437,17,483,15,"enemies"],[437,24,483,22],[437,27,483,25,"newState"],[437,35,483,33],[437,36,483,34,"enemies"],[437,43,483,41],[437,44,483,42,"filter"],[437,50,483,48],[437,51,483,49,"enemy"],[437,56,483,54],[437,60,483,58,"enemy"],[437,65,483,63],[437,66,483,64,"health"],[437,72,483,70],[437,75,483,73],[437,76,483,74],[437,77,483,75],[438,8,484,6],[438,12,484,12,"afterCount"],[438,22,484,22],[438,25,484,25,"newState"],[438,33,484,33],[438,34,484,34,"enemies"],[438,41,484,41],[438,42,484,42,"length"],[438,48,484,48],[439,8,486,6],[439,12,486,10,"beforeCount"],[439,23,486,21],[439,28,486,26,"afterCount"],[439,38,486,36],[439,40,486,38],[440,10,487,8,"console"],[440,17,487,15],[440,18,487,16,"log"],[440,21,487,19],[440,22,487,20],[440,52,487,50,"beforeCount"],[440,63,487,61],[440,66,487,64,"afterCount"],[440,76,487,74],[440,102,487,100],[440,103,487,101],[441,8,488,6],[443,8,490,6],[444,8,491,6],[445,8,492,6],[445,12,492,12,"MAX_ENEMIES"],[445,23,492,23],[445,26,492,26],[445,28,492,28],[445,29,492,29],[445,30,492,30],[446,8,493,6],[446,12,493,12,"MIN_SPAWN_DELAY"],[446,27,493,27],[446,30,493,30],[446,33,493,33],[446,34,493,34],[446,35,493,35],[447,8,494,6],[447,12,494,12,"now"],[447,15,494,15],[447,18,494,18,"Date"],[447,22,494,22],[447,23,494,23,"now"],[447,26,494,26],[447,27,494,27],[447,28,494,28],[448,8,495,6],[448,12,495,12,"hasBoss"],[448,19,495,19],[448,22,495,22,"newState"],[448,30,495,30],[448,31,495,31,"enemies"],[448,38,495,38],[448,39,495,39,"some"],[448,43,495,43],[448,44,495,44,"enemy"],[448,49,495,49],[448,53,495,53,"enemy"],[448,58,495,58],[448,59,495,59,"isBoss"],[448,65,495,65],[448,66,495,66],[450,8,497,6],[451,8,498,6],[451,12,498,10],[451,13,498,11,"newState"],[451,21,498,19],[451,22,498,20,"lastSpawnTime"],[451,35,498,33],[451,37,498,35],[452,10,499,8,"newState"],[452,18,499,16],[452,19,499,17,"lastSpawnTime"],[452,32,499,30],[452,35,499,33,"now"],[452,38,499,36],[453,8,500,6],[454,8,502,6,"console"],[454,15,502,13],[454,16,502,14,"log"],[454,19,502,17],[454,20,502,18],[454,53,502,51,"newState"],[454,61,502,59],[454,62,502,60,"enemies"],[454,69,502,67],[454,70,502,68,"length"],[454,76,502,74],[454,85,502,83,"MAX_ENEMIES"],[454,96,502,94],[454,109,502,107,"hasBoss"],[454,116,502,114],[454,118,502,116],[454,119,502,117],[456,8,504,6],[457,8,505,6],[457,12,505,10],[457,13,505,11,"hasBoss"],[457,20,505,18],[457,24,505,22,"newState"],[457,32,505,30],[457,33,505,31,"enemies"],[457,40,505,38],[457,41,505,39,"length"],[457,47,505,45],[457,50,505,48,"MAX_ENEMIES"],[457,61,505,59],[457,65,505,64,"now"],[457,68,505,67],[457,71,505,70,"newState"],[457,79,505,78],[457,80,505,79,"lastSpawnTime"],[457,93,505,92],[457,97,505,97,"MIN_SPAWN_DELAY"],[457,112,505,112],[457,114,505,114],[458,10,506,8,"console"],[458,17,506,15],[458,18,506,16,"log"],[458,21,506,19],[458,22,506,20],[458,43,506,41,"newState"],[458,51,506,49],[458,52,506,50,"enemies"],[458,59,506,57],[458,60,506,58,"length"],[458,66,506,64],[458,69,506,67],[458,70,506,68],[458,74,506,72,"MAX_ENEMIES"],[458,85,506,83],[458,87,506,85],[458,88,506,86],[459,10,507,8,"spawnTestEnemy"],[459,24,507,22],[459,25,507,23,"newState"],[459,33,507,31],[459,34,507,32],[460,10,508,8,"newState"],[460,18,508,16],[460,19,508,17,"lastSpawnTime"],[460,32,508,30],[460,35,508,33,"now"],[460,38,508,36],[461,8,509,6],[462,8,511,6],[462,15,511,13,"newState"],[462,23,511,21],[463,6,512,4],[463,7,512,5],[463,47,512,6],[465,6,514,4],[466,6,515,4],[466,10,515,10,"deadEnemiesToProcess"],[466,30,515,30],[466,33,515,33,"deadEnemiesRef"],[466,47,515,47],[466,48,515,48,"current"],[466,55,515,55],[466,56,515,56],[466,57,515,57],[467,6,516,4],[467,10,516,8,"deadEnemiesToProcess"],[467,30,516,28],[467,31,516,29,"length"],[467,37,516,35],[467,40,516,38],[467,41,516,39],[467,43,516,41],[468,8,517,6],[469,8,518,6],[470,8,519,6],[470,12,519,12,"unprocessedEnemies"],[470,30,519,30],[470,33,519,33,"deadEnemiesToProcess"],[470,53,519,53],[470,54,519,54],[470,55,519,55],[472,8,521,6],[473,8,522,6,"console"],[473,15,522,13],[473,16,522,14,"log"],[473,19,522,17],[473,20,522,18],[473,69,522,67],[473,71,522,69,"deadEnemiesToProcess"],[473,91,522,89],[473,92,522,90,"map"],[473,95,522,93],[473,96,522,94,"e"],[473,97,522,95],[473,102,522,100],[474,10,522,101,"id"],[474,12,522,103],[474,14,522,105,"e"],[474,15,522,106],[474,16,522,107,"id"],[474,18,522,109],[475,10,522,111,"name"],[475,14,522,115],[475,16,522,117,"e"],[475,17,522,118],[475,18,522,119,"name"],[475,22,522,123],[476,10,522,125,"xpAwarded"],[476,19,522,134],[476,21,522,136,"e"],[476,22,522,137],[476,23,522,138,"xpAwarded"],[477,8,522,147],[477,9,522,148],[477,10,522,149],[477,11,522,150],[477,12,522,151],[478,8,523,6,"console"],[478,15,523,13],[478,16,523,14,"log"],[478,19,523,17],[478,20,523,18],[478,43,523,41,"deadEnemiesToProcess"],[478,63,523,61],[478,64,523,62,"length"],[478,70,523,68],[478,87,523,85,"unprocessedEnemies"],[478,105,523,103],[478,106,523,104,"length"],[478,112,523,110],[478,126,523,124],[478,127,523,125],[479,8,525,6],[479,12,525,10,"unprocessedEnemies"],[479,30,525,28],[479,31,525,29,"length"],[479,37,525,35],[479,40,525,38],[479,41,525,39],[479,43,525,41],[480,10,526,8],[481,10,527,8],[481,14,527,12,"totalXP"],[481,21,527,19],[481,24,527,22],[481,25,527,23],[482,10,528,8],[482,14,528,12,"totalGold"],[482,23,528,21],[482,26,528,24],[482,27,528,25],[483,10,529,8],[483,14,529,14,"zoneKills"],[483,23,529,30],[483,26,529,33],[483,28,529,35],[484,10,531,8],[484,14,531,14,"xpMultiplier"],[484,26,531,26],[484,29,531,29,"game"],[484,33,531,33],[484,34,531,34,"gameState"],[484,43,531,43],[484,44,531,44,"subscriptionBenefits"],[484,64,531,64],[484,66,531,66,"xp_multiplier"],[484,79,531,79],[484,83,531,83],[484,86,531,86],[485,10,532,8],[485,14,532,14,"goldMultiplier"],[485,28,532,28],[485,31,532,31,"game"],[485,35,532,35],[485,36,532,36,"gameState"],[485,45,532,45],[485,46,532,46,"subscriptionBenefits"],[485,66,532,66],[485,68,532,68,"drop_multiplier"],[485,83,532,83],[485,87,532,87],[485,90,532,90],[486,10,534,8,"unprocessedEnemies"],[486,28,534,26],[486,29,534,27,"forEach"],[486,36,534,34],[486,37,534,35,"enemy"],[486,42,534,40],[486,46,534,44],[487,12,535,10],[488,12,536,10,"totalXP"],[488,19,536,17],[488,23,536,22],[488,24,536,23,"enemy"],[488,29,536,28],[488,30,536,29,"zoneXP"],[488,36,536,35],[488,40,536,39],[488,41,536,40],[488,45,536,44,"xpMultiplier"],[488,57,536,56],[488,60,536,60],[488,61,536,61],[488,62,536,62],[488,63,536,63],[489,12,537,10,"totalGold"],[489,21,537,19],[489,25,537,24],[489,27,537,26],[489,30,537,29,"goldMultiplier"],[489,44,537,43],[489,47,537,47],[489,50,537,50],[489,51,537,51],[489,52,537,52],[491,12,539,10],[491,16,539,14,"enemy"],[491,21,539,19],[491,22,539,20,"zoneTypeId"],[491,32,539,30],[491,34,539,32],[492,14,540,12,"zoneKills"],[492,23,540,21],[492,24,540,22,"push"],[492,28,540,26],[492,29,540,27],[493,16,541,14,"id"],[493,18,541,16],[493,20,541,18,"enemy"],[493,25,541,23],[493,26,541,24,"id"],[493,28,541,26],[494,16,542,14,"typeId"],[494,22,542,20],[494,24,542,22,"enemy"],[494,29,542,27],[494,30,542,28,"zoneTypeId"],[494,40,542,38],[495,16,543,14,"name"],[495,20,543,18],[495,22,543,20,"enemy"],[495,27,543,25],[495,28,543,26,"name"],[495,32,543,30],[496,16,544,14,"icon"],[496,20,544,18],[496,22,544,20],[496,26,544,24],[497,16,545,14,"hp"],[497,18,545,16],[497,20,545,18],[497,21,545,19],[498,16,546,14,"maxHP"],[498,21,546,19],[498,23,546,21,"enemy"],[498,28,546,26],[498,29,546,27,"maxHealth"],[498,38,546,36],[499,16,547,14,"attack"],[499,22,547,20],[499,24,547,22,"enemy"],[499,29,547,27],[499,30,547,28,"stats"],[499,35,547,33],[499,36,547,34,"attack"],[499,42,547,40],[500,16,548,14,"xp"],[500,18,548,16],[500,20,548,18,"enemy"],[500,25,548,23],[500,26,548,24,"zoneXP"],[500,32,548,30],[500,36,548,34],[500,37,548,35],[501,16,549,14,"position"],[501,24,549,22],[501,26,549,24,"enemy"],[501,31,549,29],[501,32,549,30,"position"],[502,14,550,12],[502,15,550,13],[502,16,550,14],[503,12,551,10],[504,10,552,8],[504,11,552,9],[504,12,552,10],[506,10,554,8],[507,10,555,8,"game"],[507,14,555,12],[507,15,555,13,"updateNinja"],[507,26,555,24],[507,27,555,25,"prev"],[507,31,555,29],[507,36,555,34],[508,12,556,10,"experience"],[508,22,556,20],[508,24,556,22,"prev"],[508,28,556,26],[508,29,556,27,"experience"],[508,39,556,37],[508,42,556,40,"totalXP"],[508,49,556,47],[509,12,557,10,"gold"],[509,16,557,14],[509,18,557,16,"prev"],[509,22,557,20],[509,23,557,21,"gold"],[509,27,557,25],[509,30,557,28,"totalGold"],[510,10,558,8],[510,11,558,9],[510,12,558,10],[510,13,558,11],[512,10,560,8],[513,10,561,8,"zoneKills"],[513,19,561,17],[513,20,561,18,"forEach"],[513,27,561,25],[513,28,561,26,"zoneEnemy"],[513,37,561,35],[513,41,561,39,"recordEnemyKill"],[513,56,561,54],[513,57,561,55,"zoneEnemy"],[513,66,561,64],[513,67,561,65],[513,68,561,66],[515,10,563,8],[516,10,564,8,"setCombatState"],[516,24,564,22],[516,25,564,23,"prev"],[516,29,564,27],[516,34,564,32],[517,12,565,10],[517,15,565,13,"prev"],[517,19,565,17],[518,12,566,10,"enemies"],[518,19,566,17],[518,21,566,19,"prev"],[518,25,566,23],[518,26,566,24,"enemies"],[518,33,566,31],[518,34,566,32,"map"],[518,37,566,35],[518,38,566,36,"enemy"],[518,43,566,41],[518,47,566,45],[519,14,567,12],[519,18,567,18,"wasProcessed"],[519,30,567,30],[519,33,567,33,"unprocessedEnemies"],[519,51,567,51],[519,52,567,52,"find"],[519,56,567,56],[519,57,567,57,"processed"],[519,66,567,66],[519,70,567,70,"processed"],[519,79,567,79],[519,80,567,80,"id"],[519,82,567,82],[519,87,567,87,"enemy"],[519,92,567,92],[519,93,567,93,"id"],[519,95,567,95],[519,96,567,96],[520,14,568,12],[520,21,568,19,"wasProcessed"],[520,33,568,31],[520,36,568,34],[521,16,568,36],[521,19,568,39,"enemy"],[521,24,568,44],[522,16,568,46,"xpAwarded"],[522,25,568,55],[522,27,568,57],[523,14,568,62],[523,15,568,63],[523,18,568,66,"enemy"],[523,23,568,71],[524,12,569,10],[524,13,569,11],[525,10,570,8],[525,11,570,9],[525,12,570,10],[525,13,570,11],[526,8,571,6],[527,6,572,4],[528,4,573,2],[528,5,573,3],[528,7,573,5],[528,8,573,6,"game"],[528,12,573,10],[528,13,573,11,"updateNinja"],[528,24,573,22],[528,26,573,24,"game"],[528,30,573,28],[528,31,573,29,"gameState"],[528,40,573,38],[528,41,573,39,"subscriptionBenefits"],[528,61,573,59],[528,63,573,61,"recordEnemyKill"],[528,78,573,76],[528,80,573,78,"spawnTestEnemy"],[528,94,573,92],[528,96,573,94,"spawnZoneEnemy"],[528,110,573,108],[528,111,573,109],[528,112,573,110],[528,113,573,111],[528,114,573,112],[530,4,575,2],[531,4,576,2],[531,8,576,8,"findClosestEnemyInternal"],[531,32,576,32],[531,35,576,36,"enemies"],[531,42,576,58],[531,46,576,83],[532,6,577,4],[532,10,577,8,"enemies"],[532,17,577,15],[532,18,577,16,"length"],[532,24,577,22],[532,29,577,27],[532,30,577,28],[532,32,577,30],[532,39,577,37],[532,43,577,41],[534,6,579,4],[535,6,580,4],[535,10,580,10,"SCREEN_WIDTH"],[535,22,580,22],[535,25,580,25],[535,28,580,28],[536,6,581,4],[536,10,581,10,"GAME_AREA_HEIGHT"],[536,26,581,26],[536,29,581,29],[536,32,581,32],[536,35,581,35],[536,38,581,38],[536,39,581,39],[536,40,581,40],[537,6,582,4],[537,10,582,10,"ninjaX"],[537,16,582,16],[537,19,582,19,"SCREEN_WIDTH"],[537,31,582,31],[537,34,582,34],[537,35,582,35],[538,6,583,4],[538,10,583,10,"ninjaY"],[538,16,583,16],[538,19,583,19,"GAME_AREA_HEIGHT"],[538,35,583,35],[538,38,583,38],[538,39,583,39],[539,6,585,4],[539,10,585,8,"closestEnemy"],[539,22,585,20],[539,25,585,23,"enemies"],[539,32,585,30],[539,33,585,31],[539,34,585,32],[539,35,585,33],[540,6,586,4],[540,10,586,8,"closestDistance"],[540,25,586,23],[540,28,586,26,"Infinity"],[540,36,586,34],[541,6,588,4,"enemies"],[541,13,588,11],[541,14,588,12,"forEach"],[541,21,588,19],[541,22,588,20,"enemy"],[541,27,588,25],[541,31,588,29],[542,8,589,6],[542,12,589,12,"distance"],[542,20,589,20],[542,23,589,23,"Math"],[542,27,589,27],[542,28,589,28,"sqrt"],[542,32,589,32],[542,33,590,8,"Math"],[542,37,590,12],[542,38,590,13,"pow"],[542,41,590,16],[542,42,590,17,"enemy"],[542,47,590,22],[542,48,590,23,"position"],[542,56,590,31],[542,57,590,32,"x"],[542,58,590,33],[542,61,590,36,"ninjaX"],[542,67,590,42],[542,69,590,44],[542,70,590,45],[542,71,590,46],[542,74,591,8,"Math"],[542,78,591,12],[542,79,591,13,"pow"],[542,82,591,16],[542,83,591,17,"enemy"],[542,88,591,22],[542,89,591,23,"position"],[542,97,591,31],[542,98,591,32,"y"],[542,99,591,33],[542,102,591,36,"ninjaY"],[542,108,591,42],[542,110,591,44],[542,111,591,45],[542,112,592,6],[542,113,592,7],[543,8,594,6],[543,12,594,10,"distance"],[543,20,594,18],[543,23,594,21,"closestDistance"],[543,38,594,36],[543,40,594,38],[544,10,595,8,"closestDistance"],[544,25,595,23],[544,28,595,26,"distance"],[544,36,595,34],[545,10,596,8,"closestEnemy"],[545,22,596,20],[545,25,596,23,"enemy"],[545,30,596,28],[546,8,597,6],[547,6,598,4],[547,7,598,5],[547,8,598,6],[548,6,600,4,"console"],[548,13,600,11],[548,14,600,12,"log"],[548,17,600,15],[548,18,600,16],[548,60,600,58,"closestDistance"],[548,75,600,73],[548,76,600,74,"toFixed"],[548,83,600,81],[548,84,600,82],[548,85,600,83],[548,86,600,84],[548,88,600,86],[548,89,600,87],[549,6,601,4],[549,13,601,11,"closestEnemy"],[549,25,601,23],[550,4,602,2],[550,5,602,3],[552,4,604,2],[553,4,605,2],[553,8,605,8,"findClosestEnemy"],[553,24,605,24],[553,27,605,27,"findClosestEnemy"],[553,28,605,27],[553,33,605,53],[554,6,606,4],[554,13,606,11,"findClosestEnemyInternal"],[554,37,606,35],[554,38,606,36,"combatState"],[554,49,606,47],[554,50,606,48,"enemies"],[554,57,606,55],[554,58,606,56],[555,4,607,2],[555,5,607,3],[557,4,609,2],[558,4,610,2],[559,4,611,2],[559,8,611,2,"_useState7"],[559,18,611,2],[559,21,611,58],[559,25,611,58,"useState"],[559,31,611,66],[559,32,611,66,"useState"],[559,40,611,66],[559,42,611,91],[560,8,611,93,"x"],[560,9,611,94],[560,11,611,96],[560,14,611,99],[561,8,611,101,"y"],[561,9,611,102],[561,11,611,104],[562,6,611,108],[562,7,611,109],[562,8,611,110],[563,6,611,110,"_useState8"],[563,16,611,110],[563,23,611,110,"_slicedToArray"],[563,37,611,110],[563,38,611,110,"default"],[563,45,611,110],[563,47,611,110,"_useState7"],[563,57,611,110],[564,6,611,9,"currentNinjaPosition"],[564,26,611,29],[564,29,611,29,"_useState8"],[564,39,611,29],[565,6,611,31,"setCurrentNinjaPosition"],[565,29,611,54],[565,32,611,54,"_useState8"],[565,42,611,54],[566,4,612,2],[566,8,612,2,"_useState9"],[566,18,612,2],[566,21,612,60],[566,25,612,60,"useState"],[566,31,612,68],[566,32,612,68,"useState"],[566,40,612,68],[566,42,612,69],[566,47,612,74],[566,48,612,75],[567,6,612,75,"_useState0"],[567,16,612,75],[567,23,612,75,"_slicedToArray"],[567,37,612,75],[567,38,612,75,"default"],[567,45,612,75],[567,47,612,75,"_useState9"],[567,57,612,75],[568,6,612,9,"isManualControlActive"],[568,27,612,30],[568,30,612,30,"_useState0"],[568,40,612,30],[569,6,612,32,"setIsManualControlActive"],[569,30,612,56],[569,33,612,56,"_useState0"],[569,43,612,56],[571,4,614,2],[572,4,615,2],[572,8,615,8,"updateNinjaPosition"],[572,27,615,27],[572,30,615,30],[572,34,615,30,"useCallback"],[572,40,615,41],[572,41,615,41,"useCallback"],[572,52,615,41],[572,54,615,43,"newPosition"],[572,65,615,78],[572,69,615,83],[573,6,616,4,"setCurrentNinjaPosition"],[573,29,616,27],[573,30,616,28,"newPosition"],[573,41,616,39],[573,42,616,40],[574,4,617,2],[574,5,617,3],[574,7,617,5],[574,9,617,7],[574,10,617,8],[576,4,619,2],[577,4,620,2],[577,8,620,8,"setManualControlActive"],[577,30,620,30],[577,33,620,33],[577,37,620,33,"useCallback"],[577,43,620,44],[577,44,620,44,"useCallback"],[577,55,620,44],[577,57,620,46,"active"],[577,63,620,61],[577,67,620,66],[578,6,621,4,"setIsManualControlActive"],[578,30,621,28],[578,31,621,29,"active"],[578,37,621,35],[578,38,621,36],[579,6,622,4,"console"],[579,13,622,11],[579,14,622,12,"log"],[579,17,622,15],[579,18,622,16],[579,39,622,37,"active"],[579,45,622,43],[579,48,622,46],[579,59,622,57],[579,62,622,60],[579,75,622,73],[579,88,622,86,"active"],[579,94,622,92],[579,97,622,95],[579,105,622,103],[579,108,622,106],[579,117,622,115],[579,119,622,117],[579,120,622,118],[580,4,623,2],[580,5,623,3],[580,7,623,5],[580,9,623,7],[580,10,623,8],[582,4,625,2],[583,4,626,2],[584,4,627,2],[586,4,629,2],[587,4,630,2],[587,8,630,8,"castAbility"],[587,19,630,19],[587,22,630,22,"castAbility"],[587,23,630,23,"state"],[587,28,630,41],[587,30,630,43,"slotIndex"],[587,39,630,60],[587,44,630,65],[588,6,631,4],[588,10,631,10,"deck"],[588,14,631,14],[588,17,631,17,"state"],[588,22,631,22],[588,23,631,23,"abilityManager"],[588,37,631,37],[588,38,631,38,"getDeck"],[588,45,631,45],[588,46,631,46],[588,47,631,47],[589,6,632,4],[589,10,632,10,"ability"],[589,17,632,17],[589,20,632,20,"deck"],[589,24,632,24],[589,25,632,25,"slots"],[589,30,632,30],[589,31,632,31,"slotIndex"],[589,40,632,40],[589,41,632,41],[590,6,633,4],[590,10,633,8],[590,11,633,9,"ability"],[590,18,633,16],[590,20,633,18],[591,6,635,4,"console"],[591,13,635,11],[591,14,635,12,"log"],[591,17,635,15],[591,18,635,16],[591,43,635,41,"ability"],[591,50,635,48],[591,51,635,49,"id"],[591,53,635,51],[591,67,635,65,"slotIndex"],[591,76,635,74],[591,78,635,76],[591,79,635,77],[593,6,637,4],[594,6,638,4],[594,10,638,8,"damage"],[594,16,638,14],[594,19,638,17,"ability"],[594,26,638,24],[594,27,638,25,"stats"],[594,32,638,30],[594,33,638,31,"baseDamage"],[594,43,638,41],[596,6,640,4],[597,6,641,4,"deck"],[597,10,641,8],[597,11,641,9,"activeSynergies"],[597,26,641,24],[597,27,641,25,"forEach"],[597,34,641,32],[597,35,641,33,"synergy"],[597,42,641,40],[597,46,641,44],[598,8,642,6],[598,12,642,10,"synergy"],[598,19,642,17],[598,20,642,18,"bonus"],[598,25,642,23],[598,26,642,24,"damageBonus"],[598,37,642,35],[598,41,643,10,"synergy"],[598,48,643,17],[598,49,643,18,"requiredTags"],[598,61,643,30],[598,62,643,31,"some"],[598,66,643,35],[598,67,643,36,"tag"],[598,70,643,39],[598,74,643,43,"ability"],[598,81,643,50],[598,82,643,51,"tags"],[598,86,643,55],[598,87,643,56,"includes"],[598,95,643,64],[598,96,643,65,"tag"],[598,99,643,68],[598,100,643,69],[598,101,643,70],[598,103,643,72],[599,10,644,8,"damage"],[599,16,644,14],[599,20,644,19],[599,21,644,20],[599,24,644,23,"synergy"],[599,31,644,30],[599,32,644,31,"bonus"],[599,37,644,36],[599,38,644,37,"damageBonus"],[599,49,644,48],[599,52,644,51],[599,55,644,55],[600,8,645,6],[601,6,646,4],[601,7,646,5],[601,8,646,6],[603,6,648,4],[604,6,649,4],[604,10,649,10,"isAOE"],[604,15,649,15],[604,18,649,18,"ability"],[604,25,649,25],[604,26,649,26,"effects"],[604,33,649,33],[604,34,649,34,"includes"],[604,42,649,42],[604,43,649,43],[604,48,649,48],[604,49,649,49],[604,53,649,53,"ability"],[604,60,649,60],[604,61,649,61,"stats"],[604,66,649,66],[604,67,649,67,"aoeRadius"],[604,76,649,76],[605,6,650,4,"console"],[605,13,650,11],[605,14,650,12,"log"],[605,17,650,15],[605,18,650,16],[605,39,650,37,"ability"],[605,46,650,44],[605,47,650,45,"name"],[605,51,650,49],[605,66,650,64,"JSON"],[605,70,650,68],[605,71,650,69,"stringify"],[605,80,650,78],[605,81,650,79,"ability"],[605,88,650,86],[605,89,650,87,"effects"],[605,96,650,94],[605,97,650,95],[605,113,650,111,"ability"],[605,120,650,118],[605,121,650,119,"stats"],[605,126,650,124],[605,127,650,125,"aoeRadius"],[605,136,650,134],[605,148,650,146,"isAOE"],[605,153,650,151],[605,155,650,153],[605,156,650,154],[606,6,652,4],[606,10,652,8,"isAOE"],[606,15,652,13],[606,17,652,15],[607,8,653,6,"console"],[607,15,653,13],[607,16,653,14,"log"],[607,19,653,17],[607,20,653,18],[607,39,653,37,"ability"],[607,46,653,44],[607,47,653,45,"name"],[607,51,653,49],[607,67,653,65,"ability"],[607,74,653,72],[607,75,653,73,"stats"],[607,80,653,78],[607,81,653,79,"aoeRadius"],[607,90,653,88],[607,92,653,90],[607,93,653,91],[609,8,655,6],[610,8,656,6],[611,8,657,6],[611,12,657,12,"ninjaX"],[611,18,657,18],[611,21,657,21,"currentNinjaPosition"],[611,41,657,41],[611,42,657,42,"x"],[611,43,657,43],[611,46,657,46],[611,48,657,48],[611,49,657,49],[611,50,657,50],[612,8,658,6],[612,12,658,12,"ninjaY"],[612,18,658,18],[612,21,658,21,"currentNinjaPosition"],[612,41,658,41],[612,42,658,42,"y"],[612,43,658,43],[612,46,658,46],[612,48,658,48],[613,8,659,6],[613,12,659,12,"aoeRadius"],[613,21,659,21],[613,24,659,24,"ability"],[613,31,659,31],[613,32,659,32,"stats"],[613,37,659,37],[613,38,659,38,"aoeRadius"],[613,47,659,47],[614,8,661,6],[614,12,661,12,"enemiesInRange"],[614,26,661,26],[614,29,661,29,"state"],[614,34,661,34],[614,35,661,35,"enemies"],[614,42,661,42],[614,43,661,43,"filter"],[614,49,661,49],[614,50,661,50,"enemy"],[614,55,661,55],[614,59,661,59],[615,10,662,8],[615,14,662,14,"enemyX"],[615,20,662,20],[615,23,662,23,"enemy"],[615,28,662,28],[615,29,662,29,"position"],[615,37,662,37],[615,38,662,38,"x"],[615,39,662,39],[615,42,662,42],[615,46,662,46],[615,47,662,47],[615,48,662,48],[616,10,663,8],[616,14,663,14,"enemyY"],[616,20,663,20],[616,23,663,23,"enemy"],[616,28,663,28],[616,29,663,29,"position"],[616,37,663,37],[616,38,663,38,"y"],[616,39,663,39],[616,42,663,42],[616,46,663,46],[617,10,664,8],[617,14,664,14,"distance"],[617,22,664,22],[617,25,664,25,"Math"],[617,29,664,29],[617,30,664,30,"sqrt"],[617,34,664,34],[617,35,664,35,"Math"],[617,39,664,39],[617,40,664,40,"pow"],[617,43,664,43],[617,44,664,44,"enemyX"],[617,50,664,50],[617,53,664,53,"ninjaX"],[617,59,664,59],[617,61,664,61],[617,62,664,62],[617,63,664,63],[617,66,664,66,"Math"],[617,70,664,70],[617,71,664,71,"pow"],[617,74,664,74],[617,75,664,75,"enemyY"],[617,81,664,81],[617,84,664,84,"ninjaY"],[617,90,664,90],[617,92,664,92],[617,93,664,93],[617,94,664,94],[617,95,664,95],[618,10,665,8],[618,17,665,15,"distance"],[618,25,665,23],[618,29,665,27,"aoeRadius"],[618,38,665,36],[619,8,666,6],[619,9,666,7],[619,10,666,8],[620,8,668,6,"console"],[620,15,668,13],[620,16,668,14,"log"],[620,19,668,17],[620,20,668,18],[620,45,668,43,"enemiesInRange"],[620,59,668,57],[620,60,668,58,"length"],[620,66,668,64],[620,88,668,86,"aoeRadius"],[620,97,668,95],[620,107,668,105],[620,108,668,106],[622,8,670,6],[623,8,671,6,"enemiesInRange"],[623,22,671,20],[623,23,671,21,"forEach"],[623,30,671,28],[623,31,671,29,"enemy"],[623,36,671,34],[623,40,671,38],[624,10,672,8],[624,14,672,14,"damageResult"],[624,26,672,26],[624,29,672,29,"DamageCalculator"],[624,48,672,45],[624,49,672,45,"DamageCalculator"],[624,65,672,45],[624,66,672,46,"calculateDamage"],[624,81,672,61],[624,82,672,62,"damage"],[624,88,672,68],[624,90,672,70,"state"],[624,95,672,75],[624,96,672,76,"playerStats"],[624,107,672,87],[624,109,672,89,"enemy"],[624,114,672,94],[624,115,672,95,"stats"],[624,120,672,100],[624,121,672,101],[625,10,673,8,"createProjectile"],[625,26,673,24],[625,27,673,25,"enemy"],[625,32,673,30],[625,34,673,32,"damageResult"],[625,46,673,44],[625,47,673,45,"damage"],[625,53,673,51],[625,55,673,53,"currentNinjaPosition"],[625,75,673,73],[625,77,673,75],[626,12,674,10,"id"],[626,14,674,12],[626,16,674,14,"ability"],[626,23,674,21],[626,24,674,22,"id"],[626,26,674,24],[627,12,675,10,"name"],[627,16,675,14],[627,18,675,16,"ability"],[627,25,675,23],[627,26,675,24,"name"],[627,30,675,28],[628,12,676,10,"icon"],[628,16,676,14],[628,18,676,16,"ability"],[628,25,676,23],[628,26,676,24,"icon"],[629,10,677,8],[629,11,677,9],[629,12,677,10],[630,10,678,8,"console"],[630,17,678,15],[630,18,678,16,"log"],[630,21,678,19],[630,22,678,20],[630,37,678,35,"enemy"],[630,42,678,40],[630,43,678,41,"name"],[630,47,678,45],[630,55,678,53,"damageResult"],[630,67,678,65],[630,68,678,66,"damage"],[630,74,678,72],[630,83,678,81],[630,84,678,82],[632,10,680,8],[633,10,681,8],[633,14,681,12,"damageResult"],[633,26,681,24],[633,27,681,25,"damage"],[633,33,681,31],[633,37,681,35,"enemy"],[633,42,681,40],[633,43,681,41,"health"],[633,49,681,47],[633,51,681,49],[634,12,682,10,"console"],[634,19,682,17],[634,20,682,18,"log"],[634,23,682,21],[634,24,682,22],[634,67,682,65,"enemy"],[634,72,682,70],[634,73,682,71,"name"],[634,77,682,75],[634,90,682,88,"damageResult"],[634,102,682,100],[634,103,682,101,"damage"],[634,109,682,107],[634,124,682,122,"enemy"],[634,129,682,127],[634,130,682,128,"health"],[634,136,682,134],[634,139,682,137],[634,140,682,138],[635,10,683,8],[636,8,684,6],[636,9,684,7],[636,10,684,8],[637,8,686,6,"console"],[637,15,686,13],[637,16,686,14,"log"],[637,19,686,17],[637,20,686,18],[637,26,686,24,"ability"],[637,33,686,31],[637,34,686,32,"name"],[637,38,686,36],[637,56,686,54,"enemiesInRange"],[637,70,686,68],[637,71,686,69,"length"],[637,77,686,75],[637,93,686,91,"damage"],[637,99,686,97],[637,118,686,116],[637,119,686,117],[638,6,688,4],[638,7,688,5],[638,13,688,11],[639,8,689,6],[640,8,690,6],[640,12,690,12,"target"],[640,18,690,18],[640,21,690,21,"findClosestEnemyInternal"],[640,45,690,45],[640,46,690,46,"state"],[640,51,690,51],[640,52,690,52,"enemies"],[640,59,690,59],[640,60,690,60],[641,8,691,6],[641,12,691,10],[641,13,691,11,"target"],[641,19,691,17],[641,21,691,19],[642,8,693,6],[642,12,693,12,"damageResult"],[642,24,693,24],[642,27,693,27,"DamageCalculator"],[642,46,693,43],[642,47,693,43,"DamageCalculator"],[642,63,693,43],[642,64,693,44,"calculateDamage"],[642,79,693,59],[642,80,693,60,"damage"],[642,86,693,66],[642,88,693,68,"state"],[642,93,693,73],[642,94,693,74,"playerStats"],[642,105,693,85],[642,107,693,87,"target"],[642,113,693,93],[642,114,693,94,"stats"],[642,119,693,99],[642,120,693,100],[644,8,695,6],[645,8,696,6,"console"],[645,15,696,13],[645,16,696,14,"log"],[645,19,696,17],[645,20,696,18],[645,71,696,69,"target"],[645,77,696,75],[645,78,696,76,"name"],[645,82,696,80],[645,91,696,89,"damageResult"],[645,103,696,101],[645,104,696,102,"damage"],[645,110,696,108],[645,119,696,117],[645,120,696,118],[646,8,697,6,"createProjectile"],[646,24,697,22],[646,25,697,23,"target"],[646,31,697,29],[646,33,697,31,"damageResult"],[646,45,697,43],[646,46,697,44,"damage"],[646,52,697,50],[646,54,697,52,"currentNinjaPosition"],[646,74,697,72],[646,76,697,74],[647,10,698,8,"id"],[647,12,698,10],[647,14,698,12,"ability"],[647,21,698,19],[647,22,698,20,"id"],[647,24,698,22],[648,10,699,8,"name"],[648,14,699,12],[648,16,699,14,"ability"],[648,23,699,21],[648,24,699,22,"name"],[648,28,699,26],[649,10,700,8,"icon"],[649,14,700,12],[649,16,700,14,"ability"],[649,23,700,21],[649,24,700,22,"icon"],[650,8,701,6],[650,9,701,7],[650,10,701,8],[651,8,703,6,"console"],[651,15,703,13],[651,16,703,14,"log"],[651,19,703,17],[651,20,703,18],[651,26,703,24,"ability"],[651,33,703,31],[651,34,703,32,"name"],[651,38,703,36],[651,66,703,64,"damageResult"],[651,78,703,76],[651,79,703,77,"damage"],[651,85,703,83],[651,95,703,93,"damageResult"],[651,107,703,105],[651,108,703,106,"isCritical"],[651,118,703,116],[651,121,703,119],[651,131,703,129],[651,134,703,132],[651,136,703,134],[651,138,703,136],[651,139,703,137],[653,8,705,6],[654,8,706,6],[654,12,706,10,"damageResult"],[654,24,706,22],[654,25,706,23,"damage"],[654,31,706,29],[654,35,706,33,"target"],[654,41,706,39],[654,42,706,40,"health"],[654,48,706,46],[654,50,706,48],[655,10,707,8,"console"],[655,17,707,15],[655,18,707,16,"log"],[655,21,707,19],[655,22,707,20],[655,75,707,73,"target"],[655,81,707,79],[655,82,707,80,"name"],[655,86,707,84],[655,99,707,97,"damageResult"],[655,111,707,109],[655,112,707,110,"damage"],[655,118,707,116],[655,133,707,131,"target"],[655,139,707,137],[655,140,707,138,"health"],[655,146,707,144],[655,149,707,147],[655,150,707,148],[656,8,708,6],[657,6,709,4],[659,6,711,4],[660,6,712,4],[660,10,712,8,"ability"],[660,17,712,15],[660,18,712,16,"effects"],[660,25,712,23],[660,26,712,24,"includes"],[660,34,712,32],[660,35,712,33],[660,40,712,38],[660,41,712,39],[660,45,712,43,"ability"],[660,52,712,50],[660,53,712,51,"stats"],[660,58,712,56],[660,59,712,57,"duration"],[660,67,712,65],[660,69,712,67],[661,8,713,6],[661,12,713,12,"targets"],[661,19,713,19],[661,22,713,22,"isAOE"],[661,27,713,27],[661,30,714,8,"state"],[661,35,714,13],[661,36,714,14,"enemies"],[661,43,714,21],[661,44,714,22,"filter"],[661,50,714,28],[661,51,714,29,"enemy"],[661,56,714,34],[661,60,714,38],[662,10,715,10],[662,14,715,16,"ninjaX"],[662,20,715,22],[662,23,715,25,"currentNinjaPosition"],[662,43,715,45],[662,44,715,46,"x"],[662,45,715,47],[662,48,715,50],[662,50,715,52],[663,10,716,10],[663,14,716,16,"ninjaY"],[663,20,716,22],[663,23,716,25,"currentNinjaPosition"],[663,43,716,45],[663,44,716,46,"y"],[663,45,716,47],[663,48,716,50],[663,50,716,52],[664,10,717,10],[664,14,717,16,"enemyX"],[664,20,717,22],[664,23,717,25,"enemy"],[664,28,717,30],[664,29,717,31,"position"],[664,37,717,39],[664,38,717,40,"x"],[664,39,717,41],[664,42,717,44],[664,46,717,48],[665,10,718,10],[665,14,718,16,"enemyY"],[665,20,718,22],[665,23,718,25,"enemy"],[665,28,718,30],[665,29,718,31,"position"],[665,37,718,39],[665,38,718,40,"y"],[665,39,718,41],[665,42,718,44],[665,46,718,48],[666,10,719,10],[666,14,719,16,"distance"],[666,22,719,24],[666,25,719,27,"Math"],[666,29,719,31],[666,30,719,32,"sqrt"],[666,34,719,36],[666,35,719,37,"Math"],[666,39,719,41],[666,40,719,42,"pow"],[666,43,719,45],[666,44,719,46,"enemyX"],[666,50,719,52],[666,53,719,55,"ninjaX"],[666,59,719,61],[666,61,719,63],[666,62,719,64],[666,63,719,65],[666,66,719,68,"Math"],[666,70,719,72],[666,71,719,73,"pow"],[666,74,719,76],[666,75,719,77,"enemyY"],[666,81,719,83],[666,84,719,86,"ninjaY"],[666,90,719,92],[666,92,719,94],[666,93,719,95],[666,94,719,96],[666,95,719,97],[667,10,720,10],[667,17,720,17,"distance"],[667,25,720,25],[667,29,720,29,"ability"],[667,36,720,36],[667,37,720,37,"stats"],[667,42,720,42],[667,43,720,43,"aoeRadius"],[667,52,720,52],[668,8,721,8],[668,9,721,9],[668,10,721,10],[668,13,722,8],[668,14,722,9,"findClosestEnemyInternal"],[668,38,722,33],[668,39,722,34,"state"],[668,44,722,39],[668,45,722,40,"enemies"],[668,52,722,47],[668,53,722,48],[668,54,722,49],[668,55,722,50,"filter"],[668,61,722,56],[668,62,722,57,"Boolean"],[668,69,722,64],[668,70,722,65],[669,8,724,6,"targets"],[669,15,724,13],[669,16,724,14,"forEach"],[669,23,724,21],[669,24,724,22,"target"],[669,30,724,28],[669,34,724,32],[670,10,725,8,"state"],[670,15,725,13],[670,16,725,14,"statusEffects"],[670,29,725,27],[670,30,725,28,"addEffect"],[670,39,725,37],[670,40,725,38,"target"],[670,46,725,44],[670,47,725,45,"id"],[670,49,725,47],[670,51,725,49],[671,12,726,10,"id"],[671,14,726,12],[671,16,726,14],[671,19,726,17,"ability"],[671,26,726,24],[671,27,726,25,"id"],[671,29,726,27],[671,35,726,33],[672,12,727,10,"type"],[672,16,727,14],[672,18,727,16],[672,23,727,21],[673,12,728,10,"remainingTicks"],[673,26,728,24],[673,28,728,26,"Math"],[673,32,728,30],[673,33,728,31,"floor"],[673,38,728,36],[673,39,728,37,"ability"],[673,46,728,44],[673,47,728,45,"stats"],[673,52,728,50],[673,53,728,51,"duration"],[673,61,728,59],[673,64,728,62],[673,66,728,64],[673,67,728,65],[674,12,729,10,"tickInterval"],[674,24,729,22],[674,26,729,24],[674,28,729,26],[675,12,730,10,"lastTick"],[675,20,730,18],[675,22,730,20,"state"],[675,27,730,25],[675,28,730,26,"currentTick"],[675,39,730,37],[676,12,731,10,"value"],[676,17,731,15],[676,19,731,17,"Math"],[676,23,731,21],[676,24,731,22,"floor"],[676,29,731,27],[676,30,731,28,"damage"],[676,36,731,34],[676,39,731,37],[676,42,731,40],[676,43,731,41],[677,12,732,10,"stackable"],[677,21,732,19],[677,23,732,21],[678,10,733,8],[678,11,733,9],[678,12,733,10],[679,8,734,6],[679,9,734,7],[679,10,734,8],[680,6,735,4],[682,6,737,4],[683,6,738,4],[683,10,738,8,"ability"],[683,17,738,15],[683,18,738,16,"effects"],[683,25,738,23],[683,26,738,24,"includes"],[683,34,738,32],[683,35,738,33],[683,41,738,39],[683,42,738,40],[683,46,738,44,"ability"],[683,53,738,51],[683,54,738,52,"id"],[683,56,738,54],[683,61,738,59],[683,75,738,73],[683,77,738,75],[684,8,739,6,"console"],[684,15,739,13],[684,16,739,14,"log"],[684,19,739,17],[684,20,739,18],[684,66,739,64,"ability"],[684,73,739,71],[684,74,739,72,"stats"],[684,79,739,77],[684,80,739,78,"duration"],[684,88,739,86],[684,98,739,96],[684,99,739,97],[686,8,741,6],[687,8,742,6],[687,12,742,12,"cloneX"],[687,18,742,18],[687,21,742,21,"currentNinjaPosition"],[687,41,742,41],[687,42,742,42,"x"],[687,43,742,43],[687,46,742,46],[687,48,742,48],[687,49,742,49],[687,50,742,50],[688,8,743,6],[688,12,743,12,"cloneY"],[688,18,743,18],[688,21,743,21,"currentNinjaPosition"],[688,41,743,41],[688,42,743,42,"y"],[688,43,743,43],[688,46,743,46],[688,48,743,48],[688,49,743,49],[688,50,743,50],[690,8,745,6,"state"],[690,13,745,11],[690,14,745,12,"shadowClone"],[690,25,745,23],[690,28,745,26],[691,10,746,8,"id"],[691,12,746,10],[691,14,746,12],[691,30,746,28,"Date"],[691,34,746,32],[691,35,746,33,"now"],[691,38,746,36],[691,39,746,37],[691,40,746,38],[691,42,746,40],[692,10,747,8,"remainingTicks"],[692,24,747,22],[692,26,747,24,"Math"],[692,30,747,28],[692,31,747,29,"floor"],[692,36,747,34],[692,37,747,35,"ability"],[692,44,747,42],[692,45,747,43,"stats"],[692,50,747,48],[692,51,747,49,"duration"],[692,59,747,57],[692,62,747,60],[692,64,747,62],[692,65,747,63],[693,10,747,65],[694,10,748,8,"position"],[694,18,748,16],[694,20,748,18],[695,12,748,20,"x"],[695,13,748,21],[695,15,748,23,"cloneX"],[695,21,748,29],[696,12,748,31,"y"],[696,13,748,32],[696,15,748,34,"cloneY"],[697,10,748,41],[697,11,748,42],[698,10,749,8,"damageMultiplier"],[698,26,749,24],[698,28,749,26],[698,31,749,29],[698,32,749,31],[699,8,750,6],[699,9,750,7],[700,8,752,6,"console"],[700,15,752,13],[700,16,752,14,"log"],[700,19,752,17],[700,20,752,18],[700,63,752,61,"ability"],[700,70,752,68],[700,71,752,69,"stats"],[700,76,752,74],[700,77,752,75,"duration"],[700,85,752,83],[700,108,752,106],[700,109,752,107],[701,6,753,4],[702,4,754,2],[702,5,754,3],[704,4,756,2],[705,4,757,2],[705,8,757,8,"createProjectile"],[705,24,757,24],[705,27,757,27,"createProjectile"],[705,28,757,28,"targetEnemy"],[705,39,757,52],[705,41,757,54,"damage"],[705,47,757,68],[705,49,757,70,"ninjaPos"],[705,57,757,103],[705,59,757,105,"abilityInfo"],[705,70,757,159],[705,72,757,161,"isAOE"],[705,77,757,176],[705,79,757,178,"aoeRadius"],[705,88,757,196],[705,93,757,201],[706,6,758,4],[706,10,758,8],[706,11,758,9,"targetEnemy"],[706,22,758,20],[706,24,758,22],[707,8,759,6,"console"],[707,15,759,13],[707,16,759,14,"log"],[707,19,759,17],[707,20,759,18],[707,65,759,63],[707,66,759,64],[708,8,760,6],[708,15,760,13],[708,19,760,17],[709,6,761,4],[711,6,763,4],[712,6,764,4,"console"],[712,13,764,11],[712,14,764,12,"log"],[712,17,764,15],[712,18,764,16],[712,52,764,50,"damage"],[712,58,764,56],[712,70,764,68,"targetEnemy"],[712,81,764,79],[712,82,764,80,"name"],[712,86,764,84],[712,91,764,89,"targetEnemy"],[712,102,764,100],[712,103,764,101,"health"],[712,109,764,107],[712,113,764,111,"targetEnemy"],[712,124,764,122],[712,125,764,123,"maxHealth"],[712,134,764,132],[712,140,764,138],[712,141,764,139],[713,6,766,4],[713,10,766,10,"SCREEN_WIDTH"],[713,22,766,22],[713,25,766,25],[713,28,766,28],[714,6,767,4],[714,10,767,10,"GAME_AREA_HEIGHT"],[714,26,767,26],[714,29,767,29],[714,32,767,32],[714,35,767,35],[714,38,767,38],[714,39,767,39],[714,40,767,40],[715,6,768,4],[715,10,768,10,"NINJA_SIZE"],[715,20,768,20],[715,23,768,23],[715,25,768,25],[717,6,770,4],[718,6,771,4],[718,10,771,10,"ninjaX"],[718,16,771,16],[718,19,771,19,"ninjaPos"],[718,27,771,27],[718,30,771,30,"ninjaPos"],[718,38,771,38],[718,39,771,39,"x"],[718,40,771,40],[718,43,771,43,"NINJA_SIZE"],[718,53,771,53],[718,56,771,56],[718,57,771,57],[718,60,771,60,"SCREEN_WIDTH"],[718,72,771,72],[718,75,771,75],[718,76,771,76],[719,6,772,4],[719,10,772,10,"ninjaY"],[719,16,772,16],[719,19,772,19,"ninjaPos"],[719,27,772,27],[719,30,772,30,"ninjaPos"],[719,38,772,38],[719,39,772,39,"y"],[719,40,772,40],[719,43,772,43,"NINJA_SIZE"],[719,53,772,53],[719,56,772,56],[719,57,772,57],[719,60,772,60,"GAME_AREA_HEIGHT"],[719,76,772,76],[719,79,772,79],[719,80,772,80],[720,6,773,4],[720,10,773,10,"ENEMY_SIZE"],[720,20,773,20],[720,23,773,23],[720,25,773,25],[721,6,775,4],[721,10,775,10,"projectileId"],[721,22,775,22],[721,25,775,25],[721,33,775,33,"Date"],[721,37,775,37],[721,38,775,38,"now"],[721,41,775,41],[721,42,775,42],[721,43,775,43],[721,47,775,47,"Math"],[721,51,775,51],[721,52,775,52,"random"],[721,58,775,58],[721,59,775,59],[721,60,775,60],[721,62,775,62],[722,6,777,4],[722,10,777,10,"projectile"],[722,20,777,38],[722,23,777,41],[723,8,778,6,"id"],[723,10,778,8],[723,12,778,10,"projectileId"],[723,24,778,22],[724,8,779,6,"x"],[724,9,779,7],[724,11,779,9,"ninjaX"],[724,17,779,15],[725,8,780,6,"y"],[725,9,780,7],[725,11,780,9,"ninjaY"],[725,17,780,15],[726,8,781,6,"targetX"],[726,15,781,13],[726,17,781,15,"targetEnemy"],[726,28,781,26],[726,29,781,27,"position"],[726,37,781,35],[726,38,781,36,"x"],[726,39,781,37],[726,42,781,40,"ENEMY_SIZE"],[726,52,781,50],[726,55,781,53],[726,56,781,54],[727,8,782,6,"targetY"],[727,15,782,13],[727,17,782,15,"targetEnemy"],[727,28,782,26],[727,29,782,27,"position"],[727,37,782,35],[727,38,782,36,"y"],[727,39,782,37],[727,42,782,40,"ENEMY_SIZE"],[727,52,782,50],[727,55,782,53],[727,56,782,54],[728,8,783,6,"targetEnemyId"],[728,21,783,19],[728,23,783,21,"targetEnemy"],[728,34,783,32],[728,35,783,33,"id"],[728,37,783,35],[729,8,784,6,"damage"],[729,14,784,12],[729,16,784,14,"damage"],[729,22,784,20],[730,8,785,6,"startTime"],[730,17,785,15],[730,19,785,17,"Date"],[730,23,785,21],[730,24,785,22,"now"],[730,27,785,25],[730,28,785,26],[730,29,785,27],[731,8,786,6,"duration"],[731,16,786,14],[731,18,786,16],[731,21,786,19],[732,8,786,21],[733,8,787,6],[734,8,788,6,"abilityId"],[734,17,788,15],[734,19,788,17,"abilityInfo"],[734,30,788,28],[734,32,788,30,"id"],[734,34,788,32],[734,38,788,36],[734,54,788,52],[735,8,789,6,"abilityName"],[735,19,789,17],[735,21,789,19,"abilityInfo"],[735,32,789,30],[735,34,789,32,"name"],[735,38,789,36],[735,42,789,40],[735,58,789,56],[736,8,790,6,"abilityIcon"],[736,19,790,17],[736,21,790,19,"abilityInfo"],[736,32,790,30],[736,34,790,32,"icon"],[736,38,790,36],[736,42,790,40],[736,46,790,44],[737,8,790,46],[738,8,791,6],[739,8,792,6,"isAOE"],[739,13,792,11],[739,15,792,13,"isAOE"],[739,20,792,18],[739,24,792,22],[739,29,792,27],[740,8,793,6,"aoeRadius"],[740,17,793,15],[740,19,793,17,"aoeRadius"],[740,28,793,26],[740,32,793,30],[741,6,794,4],[741,7,794,5],[742,6,796,4,"console"],[742,13,796,11],[742,14,796,12,"log"],[742,17,796,15],[742,18,796,16],[742,44,796,42,"abilityInfo"],[742,55,796,53],[742,57,796,55,"name"],[742,61,796,59],[742,65,796,63],[742,81,796,79],[742,101,796,99,"projectileId"],[742,113,796,111],[742,128,796,126,"targetEnemy"],[742,139,796,137],[742,140,796,138,"name"],[742,144,796,142],[742,152,796,150,"damage"],[742,158,796,156],[742,167,796,165],[742,168,796,166],[743,6,797,4,"console"],[743,13,797,11],[743,14,797,12,"log"],[743,17,797,15],[743,18,797,16],[743,48,797,46,"isAOE"],[743,53,797,51],[743,68,797,66,"aoeRadius"],[743,77,797,75],[743,89,797,87,"damage"],[743,95,797,93],[743,97,797,95],[743,98,797,96],[744,6,799,4,"console"],[744,13,799,11],[744,14,799,12,"log"],[744,17,799,15],[744,18,799,16],[744,53,799,51,"targetEnemy"],[744,64,799,62],[744,65,799,63,"id"],[744,67,799,65],[744,75,799,73,"damage"],[744,81,799,79],[744,90,799,88],[744,91,799,89],[745,6,800,4,"console"],[745,13,800,11],[745,14,800,12,"log"],[745,17,800,15],[745,18,800,16],[745,53,800,51,"ninjaX"],[745,59,800,57],[745,64,800,62,"ninjaY"],[745,70,800,68],[745,87,800,85,"projectile"],[745,97,800,95],[745,98,800,96,"targetX"],[745,105,800,103],[745,110,800,108,"projectile"],[745,120,800,118],[745,121,800,119,"targetY"],[745,128,800,126],[745,131,800,129],[745,132,800,130],[746,6,802,4,"setProjectiles"],[746,20,802,18],[746,21,802,19,"prev"],[746,25,802,23],[746,29,802,27],[746,30,802,28],[746,33,802,31,"prev"],[746,37,802,35],[746,39,802,37,"projectile"],[746,49,802,47],[746,50,802,48],[746,51,802,49],[748,6,804,4],[749,6,805,4],[751,6,807,4],[751,13,807,11,"projectile"],[751,23,807,21],[752,4,808,2],[752,5,808,3],[754,4,810,2],[755,4,811,2],[755,8,811,8,"spawnTestEnemy"],[755,22,811,22],[755,25,811,26,"state"],[755,30,811,44],[755,34,811,49],[756,6,812,4,"console"],[756,13,812,11],[756,14,812,12,"log"],[756,17,812,15],[756,18,812,16],[756,83,812,81],[756,84,812,82],[758,6,814,4],[759,6,815,4],[759,10,815,10,"zoneEnemy"],[759,19,815,19],[759,22,815,22,"spawnZoneEnemy"],[759,36,815,36],[759,37,815,37],[759,38,815,38],[760,6,816,4],[760,10,816,8],[760,11,816,9,"zoneEnemy"],[760,20,816,18],[760,22,816,20],[761,8,817,6,"console"],[761,15,817,13],[761,16,817,14,"log"],[761,19,817,17],[761,20,817,18],[761,76,817,74],[761,77,817,75],[762,8,818,6],[763,8,819,6,"spawnBasicTestEnemy"],[763,27,819,25],[763,28,819,26,"state"],[763,33,819,31],[763,34,819,32],[764,8,820,6],[765,6,821,4],[766,6,823,4,"console"],[766,13,823,11],[766,14,823,12,"log"],[766,17,823,15],[766,18,823,16],[766,44,823,42,"zoneEnemy"],[766,53,823,51],[766,54,823,52,"name"],[766,58,823,56],[766,63,823,61,"zoneEnemy"],[766,72,823,70],[766,73,823,71,"typeId"],[766,79,823,77],[766,94,823,92,"currentZone"],[766,105,823,103],[766,107,823,105,"id"],[766,109,823,107],[766,119,823,117,"currentZoneLevel"],[766,135,823,133],[766,137,823,135,"level"],[766,142,823,140],[766,144,823,142],[766,145,823,143],[768,6,825,4],[769,6,826,4],[769,10,826,10,"combatEnemy"],[769,21,826,34],[769,24,826,37],[770,8,827,6,"id"],[770,10,827,8],[770,12,827,10,"zoneEnemy"],[770,21,827,19],[770,22,827,20,"id"],[770,24,827,22],[771,8,828,6,"name"],[771,12,828,10],[771,14,828,12,"zoneEnemy"],[771,23,828,21],[771,24,828,22,"name"],[771,28,828,26],[772,8,829,6,"health"],[772,14,829,12],[772,16,829,14,"zoneEnemy"],[772,25,829,23],[772,26,829,24,"hp"],[772,28,829,26],[773,8,830,6,"maxHealth"],[773,17,830,15],[773,19,830,17,"zoneEnemy"],[773,28,830,26],[773,29,830,27,"maxHP"],[773,34,830,32],[774,8,831,6,"stats"],[774,13,831,11],[774,15,831,13],[775,10,832,8,"attack"],[775,16,832,14],[775,18,832,16,"zoneEnemy"],[775,27,832,25],[775,28,832,26,"attack"],[775,34,832,32],[776,10,833,8,"defense"],[776,17,833,15],[776,19,833,17],[776,21,833,19],[777,10,833,21],[778,10,834,8,"health"],[778,16,834,14],[778,18,834,16,"zoneEnemy"],[778,27,834,25],[778,28,834,26,"hp"],[778,30,834,28],[779,10,835,8,"maxHealth"],[779,19,835,17],[779,21,835,19,"zoneEnemy"],[779,30,835,28],[779,31,835,29,"maxHP"],[779,36,835,34],[780,10,836,8,"critChance"],[780,20,836,18],[780,22,836,20],[780,23,836,21],[781,10,837,8,"critDamage"],[781,20,837,18],[781,22,837,20],[781,25,837,23],[782,10,838,8,"cooldownReduction"],[782,27,838,25],[782,29,838,27],[783,8,839,6],[783,9,839,7],[784,8,840,6,"position"],[784,16,840,14],[784,18,840,16,"zoneEnemy"],[784,27,840,25],[784,28,840,26,"position"],[784,36,840,34],[785,8,841,6,"lastDamaged"],[785,19,841,17],[785,21,841,19],[785,22,841,20],[786,8,842,6],[787,8,843,6,"zoneTypeId"],[787,18,843,16],[787,20,843,18,"zoneEnemy"],[787,29,843,27],[787,30,843,28,"typeId"],[787,36,843,34],[788,8,844,6,"zoneXP"],[788,14,844,12],[788,16,844,14,"zoneEnemy"],[788,25,844,23],[788,26,844,24,"xp"],[789,6,845,4],[789,7,845,5],[790,6,847,4,"console"],[790,13,847,11],[790,14,847,12,"log"],[790,17,847,15],[790,18,847,16],[790,42,847,40,"combatEnemy"],[790,53,847,51],[790,54,847,52,"name"],[790,58,847,56],[790,67,847,65,"combatEnemy"],[790,78,847,76],[790,79,847,77,"health"],[790,85,847,83],[790,100,847,98,"currentZone"],[790,111,847,109],[790,113,847,111,"id"],[790,115,847,113],[790,125,847,123,"currentZoneLevel"],[790,141,847,139],[790,143,847,141,"level"],[790,148,847,146],[790,150,847,148],[790,151,847,149],[791,6,848,4,"state"],[791,11,848,9],[791,12,848,10,"enemies"],[791,19,848,17],[791,20,848,18,"push"],[791,24,848,22],[791,25,848,23,"combatEnemy"],[791,36,848,34],[791,37,848,35],[792,4,849,2],[792,5,849,3],[794,4,851,2],[795,4,852,2],[795,8,852,8,"spawnBasicTestEnemy"],[795,27,852,27],[795,30,852,31,"state"],[795,35,852,49],[795,39,852,54],[796,6,853,4],[796,10,853,10,"SCREEN_WIDTH"],[796,22,853,22],[796,25,853,25],[796,28,853,28],[797,6,854,4],[797,10,854,10,"GAME_AREA_HEIGHT"],[797,26,854,26],[797,29,854,29],[797,32,854,32],[797,35,854,35],[797,38,854,38],[798,6,855,4],[798,10,855,10,"ENEMY_SIZE"],[798,20,855,20],[798,23,855,23],[798,25,855,25],[799,6,857,4],[799,10,857,10,"x"],[799,11,857,11],[799,14,857,14,"Math"],[799,18,857,18],[799,19,857,19,"random"],[799,25,857,25],[799,26,857,26],[799,27,857,27],[799,31,857,31,"SCREEN_WIDTH"],[799,43,857,43],[799,46,857,46,"ENEMY_SIZE"],[799,56,857,56],[799,59,857,59],[799,60,857,60],[799,61,857,61],[799,64,857,64,"ENEMY_SIZE"],[799,74,857,74],[800,6,858,4],[800,10,858,10,"y"],[800,11,858,11],[800,14,858,14,"Math"],[800,18,858,18],[800,19,858,19,"random"],[800,25,858,25],[800,26,858,26],[800,27,858,27],[800,31,858,31,"GAME_AREA_HEIGHT"],[800,47,858,47],[800,50,858,50,"ENEMY_SIZE"],[800,60,858,60],[800,63,858,63],[800,64,858,64],[800,65,858,65],[800,68,858,68,"ENEMY_SIZE"],[800,78,858,78],[801,6,860,4],[801,10,860,10,"enemy"],[801,15,860,28],[801,18,860,31],[802,8,861,6,"id"],[802,10,861,8],[802,12,861,10],[802,30,861,28,"Date"],[802,34,861,32],[802,35,861,33,"now"],[802,38,861,36],[802,39,861,37],[802,40,861,38],[802,44,861,42,"Math"],[802,48,861,46],[802,49,861,47,"random"],[802,55,861,53],[802,56,861,54],[802,57,861,55],[802,59,861,57],[803,8,862,6,"name"],[803,12,862,10],[803,14,862,12],[803,26,862,24,"Math"],[803,30,862,28],[803,31,862,29,"floor"],[803,36,862,34],[803,37,862,35,"Math"],[803,41,862,39],[803,42,862,40,"random"],[803,48,862,46],[803,49,862,47],[803,50,862,48],[803,53,862,51],[803,56,862,54],[803,57,862,55],[803,59,862,57],[804,8,863,6,"health"],[804,14,863,12],[804,16,863,14],[804,18,863,16],[805,8,864,6,"maxHealth"],[805,17,864,15],[805,19,864,17],[805,21,864,19],[806,8,865,6,"stats"],[806,13,865,11],[806,15,865,13],[807,10,866,8,"attack"],[807,16,866,14],[807,18,866,16],[807,20,866,18],[808,10,867,8,"defense"],[808,17,867,15],[808,19,867,17],[808,21,867,19],[809,10,868,8,"health"],[809,16,868,14],[809,18,868,16],[809,20,868,18],[810,10,869,8,"maxHealth"],[810,19,869,17],[810,21,869,19],[810,23,869,21],[811,10,870,8,"critChance"],[811,20,870,18],[811,22,870,20],[811,23,870,21],[812,10,871,8,"critDamage"],[812,20,871,18],[812,22,871,20],[812,25,871,23],[813,10,872,8,"cooldownReduction"],[813,27,872,25],[813,29,872,27],[814,8,873,6],[814,9,873,7],[815,8,874,6,"position"],[815,16,874,14],[815,18,874,16],[816,10,874,18,"x"],[816,11,874,19],[817,10,874,21,"y"],[818,8,874,23],[818,9,874,24],[819,8,875,6,"lastDamaged"],[819,19,875,17],[819,21,875,19],[820,6,876,4],[820,7,876,5],[821,6,878,4,"console"],[821,13,878,11],[821,14,878,12,"log"],[821,17,878,15],[821,18,878,16],[821,42,878,40,"enemy"],[821,47,878,45],[821,48,878,46,"name"],[821,52,878,50],[821,60,878,58,"Math"],[821,64,878,62],[821,65,878,63,"round"],[821,70,878,68],[821,71,878,69,"x"],[821,72,878,70],[821,73,878,71],[821,78,878,76,"Math"],[821,82,878,80],[821,83,878,81,"round"],[821,88,878,86],[821,89,878,87,"y"],[821,90,878,88],[821,91,878,89],[821,94,878,92],[821,95,878,93],[822,6,879,4,"state"],[822,11,879,9],[822,12,879,10,"enemies"],[822,19,879,17],[822,20,879,18,"push"],[822,24,879,22],[822,25,879,23,"enemy"],[822,30,879,28],[822,31,879,29],[823,4,880,2],[823,5,880,3],[825,4,882,2],[826,4,883,2],[827,4,884,2],[827,8,884,8,"startCombat"],[827,19,884,19],[827,22,884,22,"React"],[827,27,884,27],[827,28,884,27,"default"],[827,35,884,27],[827,36,884,28,"useCallback"],[827,47,884,39],[827,48,884,40],[827,54,884,46],[828,6,885,4,"console"],[828,13,885,11],[828,14,885,12,"log"],[828,17,885,15],[828,18,885,16],[828,63,885,61],[828,64,885,62],[829,6,886,4,"console"],[829,13,886,11],[829,14,886,12,"log"],[829,17,886,15],[829,18,886,16],[829,37,886,35],[829,39,886,37,"combatEngine"],[829,58,886,49],[829,59,886,49,"combatEngine"],[829,71,886,49],[829,72,886,50],[830,6,887,4,"console"],[830,13,887,11],[830,14,887,12,"log"],[830,17,887,15],[830,18,887,16],[830,51,887,49],[830,53,887,51,"handleCombatTick"],[830,69,887,67],[830,70,887,68],[831,6,888,4,"setCombatState"],[831,20,888,18],[831,21,888,19,"prev"],[831,25,888,23],[831,30,888,28],[832,8,888,30],[832,11,888,33,"prev"],[832,15,888,37],[833,8,888,39,"isInCombat"],[833,18,888,49],[833,20,888,51],[834,6,888,56],[834,7,888,57],[834,8,888,58],[834,9,888,59],[836,6,890,4],[837,6,891,4,"combatEngine"],[837,25,891,16],[837,26,891,16,"combatEngine"],[837,38,891,16],[837,39,891,17,"addTickCallback"],[837,54,891,32],[837,55,891,33,"handleCombatTick"],[837,71,891,49],[837,72,891,50],[838,6,892,4,"console"],[838,13,892,11],[838,14,892,12,"log"],[838,17,892,15],[838,18,892,16],[838,62,892,60],[838,63,892,61],[840,6,894,4],[841,6,895,4,"combatEngine"],[841,25,895,16],[841,26,895,16,"combatEngine"],[841,38,895,16],[841,39,895,17,"start"],[841,44,895,22],[841,45,895,23],[841,46,895,24],[842,6,896,4,"console"],[842,13,896,11],[842,14,896,12,"log"],[842,17,896,15],[842,18,896,16],[842,51,896,49],[842,52,896,50],[843,4,897,2],[843,5,897,3],[843,7,897,5],[843,8,897,6,"combatEngine"],[843,27,897,18],[843,28,897,18,"combatEngine"],[843,40,897,18],[843,42,897,20,"handleCombatTick"],[843,58,897,36],[843,59,897,37],[843,60,897,38],[845,4,899,2],[846,4,900,2],[846,8,900,8,"stopCombat"],[846,18,900,18],[846,21,900,21,"React"],[846,26,900,26],[846,27,900,26,"default"],[846,34,900,26],[846,35,900,27,"useCallback"],[846,46,900,38],[846,47,900,39],[846,53,900,45],[847,6,901,4,"setCombatState"],[847,20,901,18],[847,21,901,19,"prev"],[847,25,901,23],[847,30,901,28],[848,8,901,30],[848,11,901,33,"prev"],[848,15,901,37],[849,8,901,39,"isInCombat"],[849,18,901,49],[849,20,901,51],[850,6,901,57],[850,7,901,58],[850,8,901,59],[850,9,901,60],[851,6,902,4,"combatEngine"],[851,25,902,16],[851,26,902,16,"combatEngine"],[851,38,902,16],[851,39,902,17,"removeTickCallback"],[851,57,902,35],[851,58,902,36,"handleCombatTick"],[851,74,902,52],[851,75,902,53],[852,4,903,2],[852,5,903,3],[852,7,903,5],[852,8,903,6,"combatEngine"],[852,27,903,18],[852,28,903,18,"combatEngine"],[852,40,903,18],[852,42,903,20,"handleCombatTick"],[852,58,903,36],[852,59,903,37],[852,60,903,38],[854,4,905,2],[855,4,906,2],[855,8,906,8,"equipAbility"],[855,20,906,20],[855,23,906,23,"equipAbility"],[855,24,906,24,"abilityId"],[855,33,906,41],[855,35,906,43,"slotIndex"],[855,44,906,60],[855,49,906,74],[856,6,907,4],[856,13,907,11,"combatState"],[856,24,907,22],[856,25,907,23,"abilityManager"],[856,39,907,37],[856,40,907,38,"equipAbility"],[856,52,907,50],[856,53,907,51,"abilityId"],[856,62,907,60],[856,64,907,62,"slotIndex"],[856,73,907,71],[856,74,907,72],[857,4,908,2],[857,5,908,3],[858,4,910,2],[858,8,910,8,"getDeck"],[858,15,910,15],[858,18,910,18,"getDeck"],[858,19,910,18],[858,24,910,24],[859,6,911,4],[859,13,911,11,"combatState"],[859,24,911,22],[859,25,911,23,"abilityManager"],[859,39,911,37],[859,40,911,38,"getDeck"],[859,47,911,45],[859,48,911,46],[859,49,911,47],[860,4,912,2],[860,5,912,3],[861,4,914,2],[861,8,914,8,"getAvailableAbilities"],[861,29,914,29],[861,32,914,32,"getAvailableAbilities"],[861,33,914,32],[861,38,914,38],[862,6,915,4],[862,13,915,11,"combatState"],[862,24,915,22],[862,25,915,23,"abilityManager"],[862,39,915,37],[862,40,915,38,"getAvailableAbilities"],[862,61,915,59],[862,62,915,60],[862,63,915,61],[863,4,916,2],[863,5,916,3],[864,4,918,2],[864,8,918,8,"upgradeAbility"],[864,22,918,22],[864,25,918,26,"abilityId"],[864,34,918,43],[864,38,918,57],[865,6,919,4],[865,13,919,11,"combatState"],[865,24,919,22],[865,25,919,23,"abilityManager"],[865,39,919,37],[865,40,919,38,"upgradeAbility"],[865,54,919,52],[865,55,919,53,"abilityId"],[865,64,919,62],[865,65,919,63],[866,4,920,2],[866,5,920,3],[868,4,922,2],[869,4,923,2],[869,8,923,8,"clearAllEnemies"],[869,23,923,23],[869,26,923,26,"clearAllEnemies"],[869,27,923,26],[869,32,923,32],[870,6,924,4,"console"],[870,13,924,11],[870,14,924,12,"log"],[870,17,924,15],[870,18,924,16],[870,67,924,65],[870,68,924,66],[871,6,925,4,"setCombatState"],[871,20,925,18],[871,21,925,19,"prev"],[871,25,925,23],[871,30,925,28],[872,8,926,6],[872,11,926,9,"prev"],[872,15,926,13],[873,8,927,6,"enemies"],[873,15,927,13],[873,17,927,15],[874,6,928,4],[874,7,928,5],[874,8,928,6],[874,9,928,7],[875,4,929,2],[875,5,929,3],[877,4,931,2],[878,4,932,2],[880,4,934,2],[881,4,935,2],[881,8,935,8,"spawnEnemy"],[881,18,935,18],[881,21,935,22,"position"],[881,29,935,57],[881,33,935,75],[882,6,936,4],[882,10,936,10,"SCREEN_WIDTH"],[882,22,936,22],[882,25,936,25],[882,28,936,28],[883,6,937,4],[883,10,937,10,"GAME_AREA_HEIGHT"],[883,26,937,26],[883,29,937,29],[883,32,937,32],[883,35,937,35],[883,38,937,38],[883,39,937,39],[883,40,937,40],[884,6,938,4],[884,10,938,10,"ENEMY_SIZE"],[884,20,938,20],[884,23,938,23],[884,25,938,25],[886,6,940,4],[887,6,941,4],[887,10,941,10,"x"],[887,11,941,11],[887,14,941,14,"position"],[887,22,941,22],[887,24,941,24,"x"],[887,25,941,25],[887,29,941,29,"Math"],[887,33,941,33],[887,34,941,34,"random"],[887,40,941,40],[887,41,941,41],[887,42,941,42],[887,46,941,46,"SCREEN_WIDTH"],[887,58,941,58],[887,61,941,61,"ENEMY_SIZE"],[887,71,941,71],[887,74,941,74],[887,75,941,75],[887,76,941,76],[887,79,941,79,"ENEMY_SIZE"],[887,89,941,89],[888,6,942,4],[888,10,942,10,"y"],[888,11,942,11],[888,14,942,14,"position"],[888,22,942,22],[888,24,942,24,"y"],[888,25,942,25],[888,29,942,29,"Math"],[888,33,942,33],[888,34,942,34,"random"],[888,40,942,40],[888,41,942,41],[888,42,942,42],[888,46,942,46,"GAME_AREA_HEIGHT"],[888,62,942,62],[888,65,942,65,"ENEMY_SIZE"],[888,75,942,75],[888,78,942,78],[888,79,942,79],[888,80,942,80],[888,83,942,83,"ENEMY_SIZE"],[888,93,942,93],[889,6,944,4],[889,10,944,10,"enemy"],[889,15,944,28],[889,18,944,31],[890,8,945,6,"id"],[890,10,945,8],[890,12,945,10],[890,21,945,19],[890,23,945,21,"enemyCounter"],[890,35,945,33],[890,37,945,35],[891,8,946,6,"name"],[891,12,946,10],[891,14,946,12],[891,24,946,22],[892,8,947,6,"health"],[892,14,947,12],[892,16,947,14],[892,19,947,17],[893,8,948,6,"maxHealth"],[893,17,948,15],[893,19,948,17],[893,22,948,20],[894,8,949,6,"stats"],[894,13,949,11],[894,15,949,13],[895,10,950,8,"attack"],[895,16,950,14],[895,18,950,16],[895,20,950,18],[896,10,951,8,"defense"],[896,17,951,15],[896,19,951,17],[896,21,951,19],[897,10,952,8,"health"],[897,16,952,14],[897,18,952,16],[897,21,952,19],[898,10,953,8,"maxHealth"],[898,19,953,17],[898,21,953,19],[898,24,953,22],[899,10,954,8,"critChance"],[899,20,954,18],[899,22,954,20],[899,23,954,21],[900,10,955,8,"critDamage"],[900,20,955,18],[900,22,955,20],[900,25,955,23],[901,10,956,8,"cooldownReduction"],[901,27,956,25],[901,29,956,27],[902,8,957,6],[902,9,957,7],[903,8,958,6,"position"],[903,16,958,14],[903,18,958,16],[904,10,958,18,"x"],[904,11,958,19],[905,10,958,21,"y"],[906,8,958,23],[906,9,958,24],[907,8,959,6,"lastDamaged"],[907,19,959,17],[907,21,959,19],[908,6,960,4],[908,7,960,5],[909,6,962,4,"setCombatState"],[909,20,962,18],[909,21,962,19,"prev"],[909,25,962,23],[909,30,962,28],[910,8,963,6],[910,11,963,9,"prev"],[910,15,963,13],[911,8,964,6,"enemies"],[911,15,964,13],[911,17,964,15],[911,18,964,16],[911,21,964,19,"prev"],[911,25,964,23],[911,26,964,24,"enemies"],[911,33,964,31],[911,35,964,33,"enemy"],[911,40,964,38],[912,6,965,4],[912,7,965,5],[912,8,965,6],[912,9,965,7],[913,6,967,4],[913,13,967,11,"enemy"],[913,18,967,16],[914,4,968,2],[914,5,968,3],[916,4,970,2],[917,4,971,2],[917,8,971,8,"spawnBoss"],[917,17,971,17],[917,20,971,21,"bossEnemy"],[917,29,971,43],[917,33,971,48],[918,6,972,4,"console"],[918,13,972,11],[918,14,972,12,"log"],[918,17,972,15],[918,18,972,16],[918,39,972,37,"bossEnemy"],[918,48,972,46],[918,49,972,47,"name"],[918,53,972,51],[918,90,972,88],[918,91,972,89],[919,6,973,4,"setCombatState"],[919,20,973,18],[919,21,973,19,"prev"],[919,25,973,23],[919,30,973,28],[920,8,974,6],[920,11,974,9,"prev"],[920,15,974,13],[921,8,975,6,"enemies"],[921,15,975,13],[921,17,975,15],[921,18,975,16,"bossEnemy"],[921,27,975,25],[921,28,975,26],[921,29,975,27],[922,6,976,4],[922,7,976,5],[922,8,976,6],[922,9,976,7],[923,4,977,2],[923,5,977,3],[925,4,979,2],[926,4,980,2],[926,8,980,8,"clearSpecificEnemy"],[926,26,980,26],[926,29,980,30,"enemyId"],[926,36,980,45],[926,40,980,50],[927,6,981,4,"setCombatState"],[927,20,981,18],[927,21,981,19,"prev"],[927,25,981,23],[927,30,981,28],[928,8,982,6],[928,11,982,9,"prev"],[928,15,982,13],[929,8,983,6,"enemies"],[929,15,983,13],[929,17,983,15,"prev"],[929,21,983,19],[929,22,983,20,"enemies"],[929,29,983,27],[929,30,983,28,"filter"],[929,36,983,34],[929,37,983,35,"enemy"],[929,42,983,40],[929,46,983,44,"enemy"],[929,51,983,49],[929,52,983,50,"id"],[929,54,983,52],[929,59,983,57,"enemyId"],[929,66,983,64],[930,6,984,4],[930,7,984,5],[930,8,984,6],[930,9,984,7],[931,4,985,2],[931,5,985,3],[933,4,987,2],[934,4,988,2],[934,8,988,8,"useAbilityManually"],[934,26,988,26],[934,29,988,26,"_s3"],[934,32,988,26],[934,33,988,29],[934,37,988,29,"useCallback"],[934,43,988,40],[934,44,988,40,"useCallback"],[934,55,988,40],[934,57,988,40,"_s3"],[934,60,988,40],[934,61,988,42,"slotIndex"],[934,70,988,59],[934,74,988,73],[935,6,988,73,"_s3"],[935,9,988,73],[936,6,989,4,"console"],[936,13,989,11],[936,14,989,12,"log"],[936,17,989,15],[936,18,989,16],[936,64,989,62,"slotIndex"],[936,73,989,71],[936,82,989,80],[936,83,989,81],[937,6,990,4,"console"],[937,13,990,11],[937,14,990,12,"log"],[937,17,990,15],[937,18,990,16],[937,65,990,63,"slotIndex"],[937,74,990,72],[937,76,990,74],[937,77,990,75],[938,6,991,4,"console"],[938,13,991,11],[938,14,991,12,"log"],[938,17,991,15],[938,18,991,16],[938,53,991,51,"slotIndex"],[938,62,991,60],[938,64,991,62],[938,65,991,63],[940,6,993,4],[941,6,994,4],[941,10,994,8],[941,11,994,9,"game"],[941,15,994,13],[941,16,994,14,"gameState"],[941,25,994,23],[941,26,994,24,"isAlive"],[941,33,994,31],[941,35,994,33],[942,8,995,6,"console"],[942,15,995,13],[942,16,995,14,"log"],[942,19,995,17],[942,20,995,18],[942,70,995,68],[942,71,995,69],[943,8,996,6],[943,15,996,13],[943,20,996,18],[944,6,997,4],[946,6,999,4],[947,6,1000,4],[947,10,1000,10,"isReady"],[947,17,1000,17],[947,20,1000,20,"combatState"],[947,31,1000,31],[947,32,1000,32,"abilityManager"],[947,46,1000,46],[947,47,1000,47,"isAbilityReady"],[947,61,1000,61],[947,62,1000,62,"slotIndex"],[947,71,1000,71],[947,72,1000,72],[948,6,1001,4],[948,10,1001,8],[948,11,1001,9,"isReady"],[948,18,1001,16],[948,20,1001,18],[949,8,1002,6,"console"],[949,15,1002,13],[949,16,1002,14,"log"],[949,19,1002,17],[949,20,1002,18],[949,41,1002,39,"slotIndex"],[949,50,1002,48],[949,85,1002,83],[949,86,1002,84],[950,8,1003,6],[950,15,1003,13],[950,20,1003,18],[951,6,1004,4],[953,6,1006,4],[954,6,1007,4],[954,10,1007,8,"combatState"],[954,21,1007,19],[954,22,1007,20,"enemies"],[954,29,1007,27],[954,30,1007,28,"length"],[954,36,1007,34],[954,41,1007,39],[954,42,1007,40],[954,44,1007,42],[955,8,1008,6,"console"],[955,15,1008,13],[955,16,1008,14,"log"],[955,19,1008,17],[955,20,1008,18],[955,69,1008,67],[955,70,1008,68],[956,8,1009,6],[956,15,1009,13],[956,20,1009,18],[957,6,1010,4],[959,6,1012,4],[960,6,1013,4],[960,10,1013,10,"currentTick"],[960,21,1013,21],[960,24,1013,24,"combatEngine"],[960,43,1013,36],[960,44,1013,36,"combatEngine"],[960,56,1013,36],[960,57,1013,37,"getCurrentTick"],[960,71,1013,51],[960,72,1013,52],[960,73,1013,53],[961,6,1014,4],[961,10,1014,10,"success"],[961,17,1014,17],[961,20,1014,20,"combatState"],[961,31,1014,31],[961,32,1014,32,"abilityManager"],[961,46,1014,46],[961,47,1014,47,"useAbility"],[961,57,1014,57],[961,58,1014,58,"slotIndex"],[961,67,1014,67],[961,69,1014,69,"currentTick"],[961,80,1014,80],[961,81,1014,81],[962,6,1016,4],[962,10,1016,8,"success"],[962,17,1016,15],[962,19,1016,17],[963,8,1017,6],[964,8,1018,6,"setCombatState"],[964,22,1018,20],[964,23,1018,21,"prev"],[964,27,1018,25],[964,31,1018,29],[965,10,1019,8],[965,14,1019,14,"newState"],[965,22,1019,22],[965,25,1019,25],[966,12,1019,27],[966,15,1019,30,"prev"],[967,10,1019,35],[967,11,1019,36],[968,10,1020,8,"castAbility"],[968,21,1020,19],[968,22,1020,20,"newState"],[968,30,1020,28],[968,32,1020,30,"slotIndex"],[968,41,1020,39],[968,42,1020,40],[969,10,1021,8],[969,17,1021,15,"newState"],[969,25,1021,23],[970,8,1022,6],[970,9,1022,7],[970,10,1022,8],[971,8,1024,6,"console"],[971,15,1024,13],[971,16,1024,14,"log"],[971,19,1024,17],[971,20,1024,18],[971,65,1024,63,"slotIndex"],[971,74,1024,72],[971,76,1024,74],[971,77,1024,75],[972,8,1025,6],[972,15,1025,13],[972,19,1025,17],[973,6,1026,4],[973,7,1026,5],[973,13,1026,11],[974,8,1027,6,"console"],[974,15,1027,13],[974,16,1027,14,"log"],[974,19,1027,17],[974,20,1027,18],[974,61,1027,59,"slotIndex"],[974,70,1027,68],[974,72,1027,70],[974,73,1027,71],[975,8,1028,6],[975,15,1028,13],[975,20,1028,18],[976,6,1029,4],[977,4,1030,2],[977,5,1030,3],[977,46,1030,5],[977,47,1030,6,"combatState"],[977,58,1030,17],[977,59,1030,18,"abilityManager"],[977,73,1030,32],[977,75,1030,34,"combatState"],[977,86,1030,45],[977,87,1030,46,"enemies"],[977,94,1030,53],[977,95,1030,54],[977,96,1030,55],[978,4,1031,2],[978,8,1031,2,"useEffect"],[978,14,1031,11],[978,15,1031,11,"useEffect"],[978,24,1031,11],[978,26,1031,12],[978,32,1031,18],[979,6,1032,4,"combatEngine"],[979,25,1032,16],[979,26,1032,16,"combatEngine"],[979,38,1032,16],[979,39,1032,17,"start"],[979,44,1032,22],[979,45,1032,23],[979,46,1032,24],[981,6,1034,4],[982,6,1035,4],[983,6,1036,4,"console"],[983,13,1036,11],[983,14,1036,12,"log"],[983,17,1036,15],[983,18,1036,16],[983,97,1036,95],[983,98,1036,96],[984,6,1038,4],[984,13,1038,11],[984,19,1038,17],[985,8,1039,6,"combatEngine"],[985,27,1039,18],[985,28,1039,18,"combatEngine"],[985,40,1039,18],[985,41,1039,19,"stop"],[985,45,1039,23],[985,46,1039,24],[985,47,1039,25],[986,6,1040,4],[986,7,1040,5],[987,4,1041,2],[987,5,1041,3],[987,7,1041,5],[987,9,1041,7],[987,10,1041,8],[989,4,1043,2],[990,4,1044,2],[990,8,1044,2,"useEffect"],[990,14,1044,11],[990,15,1044,11,"useEffect"],[990,24,1044,11],[990,26,1044,12],[990,32,1044,18],[991,6,1045,4],[992,6,1046,4],[992,10,1046,10,"tickInterval"],[992,22,1046,22],[992,25,1046,25,"Platform"],[992,37,1046,33],[992,38,1046,33,"Platform"],[992,46,1046,33],[992,47,1046,34,"OS"],[992,49,1046,36],[992,54,1046,41],[992,59,1046,46],[992,62,1046,49],[992,65,1046,52],[992,68,1046,55],[992,71,1046,58],[992,72,1046,59],[992,73,1046,60],[993,6,1047,4,"console"],[993,13,1047,11],[993,14,1047,12,"log"],[993,17,1047,15],[993,18,1047,16],[993,91,1047,89,"tickInterval"],[993,103,1047,101],[993,112,1047,110,"Platform"],[993,124,1047,118],[993,125,1047,118,"Platform"],[993,133,1047,118],[993,134,1047,119,"OS"],[993,136,1047,121],[993,138,1047,123],[993,139,1047,124],[994,6,1048,4],[994,10,1048,10,"combatTickInterval"],[994,28,1048,28],[994,31,1048,31,"setInterval"],[994,42,1048,42],[994,43,1048,43,"handleCombatTick"],[994,59,1048,59],[994,61,1048,61,"tickInterval"],[994,73,1048,73],[994,74,1048,74],[995,6,1050,4],[995,13,1050,11],[995,19,1050,17],[996,8,1051,6,"console"],[996,15,1051,13],[996,16,1051,14,"log"],[996,19,1051,17],[996,20,1051,18],[996,51,1051,49],[996,52,1051,50],[997,8,1052,6,"clearInterval"],[997,21,1052,19],[997,22,1052,20,"combatTickInterval"],[997,40,1052,38],[997,41,1052,39],[998,6,1053,4],[998,7,1053,5],[999,4,1054,2],[999,5,1054,3],[999,7,1054,5],[999,8,1054,6,"handleCombatTick"],[999,24,1054,22],[999,25,1054,23],[999,26,1054,24],[1001,4,1056,2],[1002,4,1057,2],[1002,8,1057,2,"useEffect"],[1002,14,1057,11],[1002,15,1057,11,"useEffect"],[1002,24,1057,11],[1002,26,1057,12],[1002,32,1057,18],[1003,6,1058,4],[1003,10,1058,10,"processProjectileImpacts"],[1003,34,1058,34],[1003,37,1058,37,"processProjectileImpacts"],[1003,38,1058,37],[1003,43,1058,43],[1004,8,1059,6,"setProjectiles"],[1004,22,1059,20],[1004,23,1059,21,"currentProjectiles"],[1004,41,1059,39],[1004,45,1059,43],[1005,10,1060,8],[1005,17,1060,15,"currentProjectiles"],[1005,35,1060,33],[1005,36,1060,34,"map"],[1005,39,1060,37],[1005,40,1060,38,"projectile"],[1005,50,1060,48],[1005,54,1060,52],[1006,12,1061,10],[1006,16,1061,14],[1006,17,1061,15,"projectile"],[1006,27,1061,25],[1006,29,1061,27],[1006,36,1061,34],[1006,40,1061,38],[1008,12,1063,10],[1009,12,1064,10],[1009,16,1064,16,"currentTime"],[1009,27,1064,27],[1009,30,1064,30,"Date"],[1009,34,1064,34],[1009,35,1064,35,"now"],[1009,38,1064,38],[1009,39,1064,39],[1009,40,1064,40],[1010,12,1065,10],[1010,16,1065,16,"startTime"],[1010,25,1065,25],[1010,28,1065,28,"projectile"],[1010,38,1065,38],[1010,39,1065,39,"startTime"],[1010,48,1065,48],[1010,52,1065,52,"currentTime"],[1010,63,1065,63],[1011,12,1066,10],[1011,16,1066,16,"elapsedTime"],[1011,27,1066,27],[1011,30,1066,30,"currentTime"],[1011,41,1066,41],[1011,44,1066,44,"startTime"],[1011,53,1066,53],[1012,12,1067,10],[1012,16,1067,16,"progress"],[1012,24,1067,24],[1012,27,1067,27,"Math"],[1012,31,1067,31],[1012,32,1067,32,"min"],[1012,35,1067,35],[1012,36,1067,36,"elapsedTime"],[1012,47,1067,47],[1012,51,1067,51,"projectile"],[1012,61,1067,61],[1012,62,1067,62,"duration"],[1012,70,1067,70],[1012,74,1067,74],[1012,77,1067,77],[1012,78,1067,78],[1012,80,1067,80],[1012,81,1067,81],[1012,82,1067,82],[1014,12,1069,10],[1015,12,1070,10],[1015,16,1070,14,"progress"],[1015,24,1070,22],[1015,28,1070,26],[1015,29,1070,27],[1015,33,1070,31],[1015,34,1070,32,"projectile"],[1015,44,1070,42],[1015,45,1070,43,"hasHit"],[1015,51,1070,49],[1015,53,1070,51],[1016,14,1071,12],[1017,14,1072,12,"console"],[1017,21,1072,19],[1017,22,1072,20,"log"],[1017,25,1072,23],[1017,26,1072,24],[1017,51,1072,49,"projectile"],[1017,61,1072,59],[1017,62,1072,60,"abilityName"],[1017,73,1072,71],[1017,97,1072,95],[1017,98,1072,96],[1018,14,1074,12,"setCombatState"],[1018,28,1074,26],[1018,29,1074,27,"prev"],[1018,33,1074,31],[1018,37,1074,35],[1019,16,1075,14],[1019,20,1075,20,"newState"],[1019,28,1075,28],[1019,31,1075,31],[1020,18,1075,33],[1020,21,1075,36,"prev"],[1021,16,1075,41],[1021,17,1075,42],[1022,16,1077,14],[1022,20,1077,18,"projectile"],[1022,30,1077,28],[1022,31,1077,29,"isAOE"],[1022,36,1077,34],[1022,40,1077,38,"projectile"],[1022,50,1077,48],[1022,51,1077,49,"aoeRadius"],[1022,60,1077,58],[1022,64,1077,62,"projectile"],[1022,74,1077,72],[1022,75,1077,73,"aoeRadius"],[1022,84,1077,82],[1022,87,1077,85],[1022,88,1077,86],[1022,90,1077,88],[1023,18,1078,16],[1024,18,1079,16,"console"],[1024,25,1079,23],[1024,26,1079,24,"log"],[1024,29,1079,27],[1024,30,1079,28],[1024,59,1079,57,"projectile"],[1024,69,1079,67],[1024,70,1079,68,"abilityName"],[1024,81,1079,79],[1024,97,1079,95,"projectile"],[1024,107,1079,105],[1024,108,1079,106,"aoeRadius"],[1024,117,1079,115],[1024,119,1079,117],[1024,120,1079,118],[1025,18,1081,16],[1025,22,1081,22,"impactX"],[1025,29,1081,29],[1025,32,1081,32,"projectile"],[1025,42,1081,42],[1025,43,1081,43,"targetX"],[1025,50,1081,50],[1026,18,1082,16],[1026,22,1082,22,"impactY"],[1026,29,1082,29],[1026,32,1082,32,"projectile"],[1026,42,1082,42],[1026,43,1082,43,"targetY"],[1026,50,1082,50],[1027,18,1083,16],[1027,22,1083,22,"enemiesKilled"],[1027,35,1083,50],[1027,38,1083,53],[1027,40,1083,55],[1029,18,1085,16],[1030,18,1086,16,"newState"],[1030,26,1086,24],[1030,27,1086,25,"enemies"],[1030,34,1086,32],[1030,37,1086,35,"newState"],[1030,45,1086,43],[1030,46,1086,44,"enemies"],[1030,53,1086,51],[1030,54,1086,52,"map"],[1030,57,1086,55],[1030,58,1086,56,"enemy"],[1030,63,1086,61],[1030,67,1086,65],[1031,20,1087,18],[1031,24,1087,22,"enemy"],[1031,29,1087,27],[1031,30,1087,28,"health"],[1031,36,1087,34],[1031,40,1087,38],[1031,41,1087,39],[1031,45,1087,43,"enemy"],[1031,50,1087,48],[1031,51,1087,49,"markedForDeath"],[1031,65,1087,63],[1031,67,1087,65],[1031,74,1087,72,"enemy"],[1031,79,1087,77],[1032,20,1089,18],[1032,24,1089,24,"enemyX"],[1032,30,1089,30],[1032,33,1089,33,"enemy"],[1032,38,1089,38],[1032,39,1089,39,"position"],[1032,47,1089,47],[1032,48,1089,48,"x"],[1032,49,1089,49],[1032,52,1089,52],[1032,56,1089,56],[1032,57,1089,57],[1032,58,1089,58],[1033,20,1090,18],[1033,24,1090,24,"enemyY"],[1033,30,1090,30],[1033,33,1090,33,"enemy"],[1033,38,1090,38],[1033,39,1090,39,"position"],[1033,47,1090,47],[1033,48,1090,48,"y"],[1033,49,1090,49],[1033,52,1090,52],[1033,56,1090,56],[1034,20,1091,18],[1034,24,1091,24,"distance"],[1034,32,1091,32],[1034,35,1091,35,"Math"],[1034,39,1091,39],[1034,40,1091,40,"sqrt"],[1034,44,1091,44],[1034,45,1091,45,"Math"],[1034,49,1091,49],[1034,50,1091,50,"pow"],[1034,53,1091,53],[1034,54,1091,54,"enemyX"],[1034,60,1091,60],[1034,63,1091,63,"impactX"],[1034,70,1091,70],[1034,72,1091,72],[1034,73,1091,73],[1034,74,1091,74],[1034,77,1091,77,"Math"],[1034,81,1091,81],[1034,82,1091,82,"pow"],[1034,85,1091,85],[1034,86,1091,86,"enemyY"],[1034,92,1091,92],[1034,95,1091,95,"impactY"],[1034,102,1091,102],[1034,104,1091,104],[1034,105,1091,105],[1034,106,1091,106],[1034,107,1091,107],[1035,20,1093,18,"console"],[1035,27,1093,25],[1035,28,1093,26,"log"],[1035,31,1093,29],[1035,32,1093,30],[1035,58,1093,56,"enemy"],[1035,63,1093,61],[1035,64,1093,62,"name"],[1035,68,1093,66],[1035,76,1093,74,"enemyX"],[1035,82,1093,80],[1035,87,1093,85,"enemyY"],[1035,93,1093,91],[1035,109,1093,107,"impactX"],[1035,116,1093,114],[1035,121,1093,119,"impactY"],[1035,128,1093,126],[1035,135,1093,133,"distance"],[1035,143,1093,141],[1035,144,1093,142,"toFixed"],[1035,151,1093,149],[1035,152,1093,150],[1035,153,1093,151],[1035,154,1093,152],[1035,169,1093,167,"projectile"],[1035,179,1093,177],[1035,180,1093,178,"aoeRadius"],[1035,189,1093,187],[1035,194,1093,192],[1035,195,1093,193],[1036,20,1095,18],[1036,24,1095,22,"distance"],[1036,32,1095,30],[1036,36,1095,34,"projectile"],[1036,46,1095,44],[1036,47,1095,45,"aoeRadius"],[1036,56,1095,54],[1036,58,1095,56],[1037,22,1096,20],[1038,22,1097,20],[1038,26,1097,26,"newHealth"],[1038,35,1097,35],[1038,38,1097,38,"Math"],[1038,42,1097,42],[1038,43,1097,43,"max"],[1038,46,1097,46],[1038,47,1097,47],[1038,48,1097,48],[1038,50,1097,50,"enemy"],[1038,55,1097,55],[1038,56,1097,56,"health"],[1038,62,1097,62],[1038,65,1097,65,"projectile"],[1038,75,1097,75],[1038,76,1097,76,"damage"],[1038,82,1097,82],[1038,83,1097,83],[1039,22,1099,20,"console"],[1039,29,1099,27],[1039,30,1099,28,"log"],[1039,33,1099,31],[1039,34,1099,32],[1039,52,1099,50,"enemy"],[1039,57,1099,55],[1039,58,1099,56,"name"],[1039,62,1099,60],[1039,74,1099,72,"projectile"],[1039,84,1099,82],[1039,85,1099,83,"damage"],[1039,91,1099,89],[1039,103,1099,101,"enemy"],[1039,108,1099,106],[1039,109,1099,107,"health"],[1039,115,1099,113],[1039,122,1099,120,"newHealth"],[1039,131,1099,129],[1039,134,1099,132],[1039,135,1099,133],[1041,22,1101,20],[1042,22,1102,20],[1042,26,1102,24,"newHealth"],[1042,35,1102,33],[1042,39,1102,37],[1042,40,1102,38],[1042,44,1102,42,"enemy"],[1042,49,1102,47],[1042,50,1102,48,"health"],[1042,56,1102,54],[1042,59,1102,57],[1042,60,1102,58],[1042,62,1102,60],[1043,24,1103,22,"console"],[1043,31,1103,29],[1043,32,1103,30,"log"],[1043,35,1103,33],[1043,36,1103,34],[1043,52,1103,50,"enemy"],[1043,57,1103,55],[1043,58,1103,56,"name"],[1043,62,1103,60],[1043,76,1103,74,"projectile"],[1043,86,1103,84],[1043,87,1103,85,"abilityName"],[1043,98,1103,96],[1043,101,1103,99],[1043,102,1103,100],[1044,24,1104,22,"enemiesKilled"],[1044,37,1104,35],[1044,38,1104,36,"push"],[1044,42,1104,40],[1044,43,1104,41,"enemy"],[1044,48,1104,46],[1044,49,1104,47],[1044,50,1104,48],[1044,51,1104,49],[1046,24,1106,22],[1046,31,1106,29],[1047,26,1107,24],[1047,29,1107,27,"enemy"],[1047,34,1107,32],[1048,26,1108,24,"health"],[1048,32,1108,30],[1048,34,1108,32],[1048,35,1108,33],[1049,26,1109,24,"markedForDeath"],[1049,40,1109,38],[1049,42,1109,40],[1049,46,1109,44],[1050,26,1110,24,"lastDamaged"],[1050,37,1110,35],[1050,39,1110,37,"combatEngine"],[1050,58,1110,49],[1050,59,1110,49,"combatEngine"],[1050,71,1110,49],[1050,72,1110,50,"getCurrentTick"],[1050,86,1110,64],[1050,87,1110,65],[1051,24,1111,22],[1051,25,1111,23],[1052,22,1112,20],[1052,23,1112,21],[1052,29,1112,27],[1053,24,1113,22],[1053,31,1113,29],[1054,26,1114,24],[1054,29,1114,27,"enemy"],[1054,34,1114,32],[1055,26,1115,24,"health"],[1055,32,1115,30],[1055,34,1115,32,"newHealth"],[1055,43,1115,41],[1056,26,1116,24,"lastDamaged"],[1056,37,1116,35],[1056,39,1116,37,"combatEngine"],[1056,58,1116,49],[1056,59,1116,49,"combatEngine"],[1056,71,1116,49],[1056,72,1116,50,"getCurrentTick"],[1056,86,1116,64],[1056,87,1116,65],[1057,24,1117,22],[1057,25,1117,23],[1058,22,1118,20],[1059,20,1119,18],[1060,20,1121,18],[1060,27,1121,25,"enemy"],[1060,32,1121,30],[1060,33,1121,31],[1060,34,1121,32],[1061,18,1122,16],[1061,19,1122,17],[1061,20,1122,18],[1063,18,1124,16],[1064,18,1125,16],[1064,22,1125,20,"enemiesKilled"],[1064,35,1125,33],[1064,36,1125,34,"length"],[1064,42,1125,40],[1064,45,1125,43],[1064,46,1125,44],[1064,48,1125,46],[1065,20,1126,18,"console"],[1065,27,1126,25],[1065,28,1126,26,"log"],[1065,31,1126,29],[1065,32,1126,30],[1065,52,1126,50,"enemiesKilled"],[1065,65,1126,63],[1065,66,1126,64,"length"],[1065,72,1126,70],[1065,94,1126,92,"projectile"],[1065,104,1126,102],[1065,105,1126,103,"abilityName"],[1065,116,1126,114],[1065,118,1126,116],[1065,119,1126,117],[1066,20,1127,18],[1067,20,1128,18,"enemiesKilled"],[1067,33,1128,31],[1067,34,1128,32,"forEach"],[1067,41,1128,39],[1067,42,1128,40,"enemy"],[1067,47,1128,45],[1067,51,1128,49,"handleEnemyKill"],[1067,66,1128,64],[1067,67,1128,65,"enemy"],[1067,72,1128,70],[1067,73,1128,71],[1067,74,1128,72],[1068,18,1129,16],[1069,16,1131,14],[1069,17,1131,15],[1069,23,1131,21],[1070,18,1132,16],[1071,18,1133,16],[1071,22,1133,22,"enemyIndex"],[1071,32,1133,32],[1071,35,1133,35,"newState"],[1071,43,1133,43],[1071,44,1133,44,"enemies"],[1071,51,1133,51],[1071,52,1133,52,"findIndex"],[1071,61,1133,61],[1071,62,1133,62,"e"],[1071,63,1133,63],[1071,67,1133,67,"e"],[1071,68,1133,68],[1071,69,1133,69,"id"],[1071,71,1133,71],[1071,76,1133,76,"projectile"],[1071,86,1133,86],[1071,87,1133,87,"targetEnemyId"],[1071,100,1133,100],[1071,101,1133,101],[1072,18,1135,16],[1072,22,1135,20,"enemyIndex"],[1072,32,1135,30],[1072,36,1135,34],[1072,37,1135,35],[1072,41,1135,39,"newState"],[1072,49,1135,47],[1072,50,1135,48,"enemies"],[1072,57,1135,55],[1072,58,1135,56,"enemyIndex"],[1072,68,1135,66],[1072,69,1135,67],[1072,70,1135,68,"health"],[1072,76,1135,74],[1072,79,1135,77],[1072,80,1135,78],[1072,84,1135,82],[1072,85,1135,83,"newState"],[1072,93,1135,91],[1072,94,1135,92,"enemies"],[1072,101,1135,99],[1072,102,1135,100,"enemyIndex"],[1072,112,1135,110],[1072,113,1135,111],[1072,114,1135,112,"markedForDeath"],[1072,128,1135,126],[1072,130,1135,128],[1073,20,1136,18,"newState"],[1073,28,1136,26],[1073,29,1136,27,"enemies"],[1073,36,1136,34],[1073,39,1136,37],[1073,40,1136,38],[1073,43,1136,41,"newState"],[1073,51,1136,49],[1073,52,1136,50,"enemies"],[1073,59,1136,57],[1073,60,1136,58],[1074,20,1137,18],[1074,24,1137,24,"enemy"],[1074,29,1137,29],[1074,32,1137,32,"newState"],[1074,40,1137,40],[1074,41,1137,41,"enemies"],[1074,48,1137,48],[1074,49,1137,49,"enemyIndex"],[1074,59,1137,59],[1074,60,1137,60],[1075,20,1138,18],[1075,24,1138,24,"newHealth"],[1075,33,1138,33],[1075,36,1138,36,"Math"],[1075,40,1138,40],[1075,41,1138,41,"max"],[1075,44,1138,44],[1075,45,1138,45],[1075,46,1138,46],[1075,48,1138,48,"enemy"],[1075,53,1138,53],[1075,54,1138,54,"health"],[1075,60,1138,60],[1075,63,1138,63,"projectile"],[1075,73,1138,73],[1075,74,1138,74,"damage"],[1075,80,1138,80],[1075,81,1138,81],[1076,20,1140,18,"newState"],[1076,28,1140,26],[1076,29,1140,27,"enemies"],[1076,36,1140,34],[1076,37,1140,35,"enemyIndex"],[1076,47,1140,45],[1076,48,1140,46],[1076,51,1140,49],[1077,22,1141,20],[1077,25,1141,23,"enemy"],[1077,30,1141,28],[1078,22,1142,20,"health"],[1078,28,1142,26],[1078,30,1142,28,"newHealth"],[1078,39,1142,37],[1079,22,1143,20,"lastDamaged"],[1079,33,1143,31],[1079,35,1143,33,"combatEngine"],[1079,54,1143,45],[1079,55,1143,45,"combatEngine"],[1079,67,1143,45],[1079,68,1143,46,"getCurrentTick"],[1079,82,1143,60],[1079,83,1143,61],[1080,20,1144,18],[1080,21,1144,19],[1081,20,1146,18,"console"],[1081,27,1146,25],[1081,28,1146,26,"log"],[1081,31,1146,29],[1081,32,1146,30],[1081,60,1146,58,"enemy"],[1081,65,1146,63],[1081,66,1146,64,"name"],[1081,70,1146,68],[1081,82,1146,80,"newHealth"],[1081,91,1146,89],[1081,95,1146,93,"enemy"],[1081,100,1146,98],[1081,101,1146,99,"maxHealth"],[1081,110,1146,108],[1081,112,1146,110],[1081,113,1146,111],[1083,20,1148,18],[1084,20,1149,18],[1084,24,1149,22,"newHealth"],[1084,33,1149,31],[1084,37,1149,35],[1084,38,1149,36],[1084,42,1149,40,"enemy"],[1084,47,1149,45],[1084,48,1149,46,"health"],[1084,54,1149,52],[1084,57,1149,55],[1084,58,1149,56],[1084,60,1149,58],[1085,22,1150,20,"console"],[1085,29,1150,27],[1085,30,1150,28,"log"],[1085,33,1150,31],[1085,34,1150,32],[1085,54,1150,52,"enemy"],[1085,59,1150,57],[1085,60,1150,58,"name"],[1085,64,1150,62],[1085,78,1150,76,"projectile"],[1085,88,1150,86],[1085,89,1150,87,"abilityName"],[1085,100,1150,98],[1085,136,1150,134],[1085,137,1150,135],[1087,22,1152,20],[1088,22,1153,20,"newState"],[1088,30,1153,28],[1088,31,1153,29,"enemies"],[1088,38,1153,36],[1088,39,1153,37,"enemyIndex"],[1088,49,1153,47],[1088,50,1153,48],[1088,53,1153,51],[1089,24,1154,22],[1089,27,1154,25,"newState"],[1089,35,1154,33],[1089,36,1154,34,"enemies"],[1089,43,1154,41],[1089,44,1154,42,"enemyIndex"],[1089,54,1154,52],[1089,55,1154,53],[1090,24,1155,22,"health"],[1090,30,1155,28],[1090,32,1155,30],[1090,33,1155,31],[1091,24,1156,22,"isDying"],[1091,31,1156,29],[1091,33,1156,31],[1091,37,1156,35],[1092,24,1157,22,"deathStartTime"],[1092,38,1157,36],[1092,40,1157,38,"Date"],[1092,44,1157,42],[1092,45,1157,43,"now"],[1092,48,1157,46],[1092,49,1157,47],[1093,22,1158,20],[1093,23,1158,21],[1094,20,1159,18],[1094,21,1159,19],[1094,27,1159,25],[1094,31,1159,29,"enemy"],[1094,36,1159,34],[1094,37,1159,35,"health"],[1094,43,1159,41],[1094,46,1159,44],[1094,47,1159,45],[1094,49,1159,47],[1095,22,1160,20,"console"],[1095,29,1160,27],[1095,30,1160,28,"log"],[1095,33,1160,31],[1095,34,1160,32],[1095,48,1160,46,"enemy"],[1095,53,1160,51],[1095,54,1160,52,"name"],[1095,58,1160,56],[1095,70,1160,68,"projectile"],[1095,80,1160,78],[1095,81,1160,79,"damage"],[1095,87,1160,85],[1095,99,1160,97,"enemy"],[1095,104,1160,102],[1095,105,1160,103,"health"],[1095,111,1160,109],[1095,117,1160,115,"newHealth"],[1095,126,1160,124],[1095,129,1160,127],[1095,130,1160,128],[1096,20,1161,18],[1097,18,1162,16],[1098,16,1163,14],[1099,16,1165,14],[1099,23,1165,21,"newState"],[1099,31,1165,29],[1100,14,1166,12],[1100,15,1166,13],[1100,16,1166,14],[1102,14,1168,12],[1103,14,1169,12],[1104,12,1170,10],[1106,12,1172,10],[1107,12,1173,10],[1108,12,1174,10],[1108,16,1174,16,"timeBasedCleanup"],[1108,32,1174,32],[1108,35,1174,35,"elapsedTime"],[1108,46,1174,46],[1108,49,1174,49],[1108,53,1174,53],[1108,54,1174,54],[1108,55,1174,55],[1109,12,1175,10],[1109,16,1175,14,"progress"],[1109,24,1175,22],[1109,28,1175,26],[1109,31,1175,29],[1109,35,1175,33,"timeBasedCleanup"],[1109,51,1175,49],[1109,53,1175,51],[1110,14,1176,12],[1110,18,1176,16,"timeBasedCleanup"],[1110,34,1176,32],[1110,36,1176,34],[1111,16,1177,14,"console"],[1111,23,1177,21],[1111,24,1177,22,"log"],[1111,27,1177,25],[1111,28,1177,26],[1111,63,1177,61,"projectile"],[1111,73,1177,71],[1111,74,1177,72,"id"],[1111,76,1177,74],[1111,105,1177,103],[1111,106,1177,104],[1112,14,1178,12],[1113,14,1179,12],[1113,21,1179,19],[1113,25,1179,23],[1114,12,1180,10],[1115,12,1182,10],[1115,19,1182,17,"projectile"],[1115,29,1182,27],[1116,10,1183,8],[1116,11,1183,9],[1116,12,1183,10],[1116,13,1183,11,"filter"],[1116,19,1183,17],[1116,20,1183,18,"Boolean"],[1116,27,1183,25],[1116,28,1183,26],[1117,8,1184,6],[1117,9,1184,7],[1117,10,1184,8],[1118,6,1185,4],[1118,7,1185,5],[1120,6,1187,4],[1121,6,1188,4],[1121,10,1188,10,"impactInterval"],[1121,24,1188,24],[1121,27,1188,27,"setInterval"],[1121,38,1188,38],[1121,39,1188,39,"processProjectileImpacts"],[1121,63,1188,63],[1121,65,1188,65],[1121,67,1188,67],[1121,68,1188,68],[1122,6,1189,4],[1122,13,1189,11],[1122,19,1189,17,"clearInterval"],[1122,32,1189,30],[1122,33,1189,31,"impactInterval"],[1122,47,1189,45],[1122,48,1189,46],[1123,4,1190,2],[1123,5,1190,3],[1123,7,1190,5],[1123,9,1190,7],[1123,10,1190,8],[1123,11,1190,9],[1123,12,1190,10],[1125,4,1192,2],[1126,4,1193,2],[1126,8,1193,8,"saveAbilityData"],[1126,23,1193,23],[1126,26,1193,26],[1126,30,1193,26,"useCallback"],[1126,36,1193,37],[1126,37,1193,37,"useCallback"],[1126,48,1193,37],[1126,50,1193,38],[1126,56,1193,44],[1127,6,1194,4],[1127,10,1194,8,"combatState"],[1127,21,1194,19],[1127,22,1194,20,"abilityManager"],[1127,36,1194,34],[1127,38,1194,36],[1128,8,1195,6],[1128,12,1195,12,"abilityData"],[1128,23,1195,23],[1128,26,1195,26,"combatState"],[1128,37,1195,37],[1128,38,1195,38,"abilityManager"],[1128,52,1195,52],[1128,53,1195,53,"getSaveData"],[1128,64,1195,64],[1128,65,1195,65],[1128,66,1195,66],[1129,8,1196,6,"console"],[1129,15,1196,13],[1129,16,1196,14,"log"],[1129,19,1196,17],[1129,20,1196,18],[1129,70,1196,68],[1129,72,1196,70,"abilityData"],[1129,83,1196,81],[1129,84,1196,82],[1130,8,1197,6,"game"],[1130,12,1197,10],[1130,13,1197,11,"updateAbilityData"],[1130,30,1197,28],[1130,31,1197,29,"abilityData"],[1130,42,1197,40],[1130,43,1197,41],[1131,6,1198,4],[1132,4,1199,2],[1132,5,1199,3],[1132,7,1199,5],[1132,8,1199,6,"combatState"],[1132,19,1199,17],[1132,20,1199,18,"abilityManager"],[1132,34,1199,32],[1132,36,1199,34,"game"],[1132,40,1199,38],[1132,41,1199,39,"updateAbilityData"],[1132,58,1199,56],[1132,59,1199,57],[1132,60,1199,58],[1133,4,1201,2],[1133,8,1201,8,"contextValue"],[1133,20,1201,39],[1133,23,1201,42,"React"],[1133,28,1201,47],[1133,29,1201,47,"default"],[1133,36,1201,47],[1133,37,1201,48,"useMemo"],[1133,44,1201,55],[1133,45,1201,56],[1133,52,1201,63],[1134,6,1202,4,"combatState"],[1134,17,1202,15],[1135,6,1203,4,"projectiles"],[1135,17,1203,15],[1136,6,1204,4,"startCombat"],[1136,17,1204,15],[1137,6,1205,4,"stopCombat"],[1137,16,1205,14],[1138,6,1206,4,"equipAbility"],[1138,18,1206,16],[1139,6,1207,4,"handleEnemyKill"],[1139,21,1207,19],[1140,6,1208,4,"getDeck"],[1140,13,1208,11],[1141,6,1209,4,"getAvailableAbilities"],[1141,27,1209,25],[1142,6,1210,4,"upgradeAbility"],[1142,20,1210,18],[1143,6,1211,4,"spawnEnemy"],[1143,16,1211,14],[1144,6,1212,4,"spawnBoss"],[1144,15,1212,13],[1145,6,1213,4,"clearAllEnemies"],[1145,21,1213,19],[1146,6,1214,4,"clearSpecificEnemy"],[1146,24,1214,22],[1147,6,1215,4],[1148,6,1216,4,"findClosestEnemy"],[1148,22,1216,20],[1149,6,1217,4,"updateNinjaPosition"],[1149,25,1217,23],[1150,6,1218,4,"setManualControlActive"],[1150,28,1218,26],[1151,6,1219,4,"lastExplosionTime"],[1151,23,1219,21],[1152,6,1220,4,"useAbilityManually"],[1152,24,1220,22],[1153,6,1220,24],[1154,6,1221,4,"saveAbilityData"],[1154,21,1221,19],[1155,6,1221,21],[1156,6,1222,4,"shadowClone"],[1156,17,1222,15],[1156,19,1222,17,"combatState"],[1156,30,1222,28],[1156,31,1222,29,"shadowClone"],[1156,42,1222,40],[1156,43,1222,42],[1157,4,1223,2],[1157,5,1223,3],[1157,6,1223,4],[1157,8,1223,6],[1158,4,1224,4],[1159,4,1225,4],[1160,4,1226,4,"combatState"],[1160,15,1226,15],[1160,17,1227,4,"projectiles"],[1160,28,1227,15],[1160,30,1228,4,"lastExplosionTime"],[1160,47,1228,21],[1161,4,1229,4],[1162,4,1230,4,"combatState"],[1162,15,1230,15],[1162,16,1230,16,"abilityManager"],[1162,30,1230,30],[1162,32,1231,4,"combatState"],[1162,43,1231,15],[1162,44,1231,16,"enemies"],[1162,51,1231,23],[1162,53,1232,4,"combatState"],[1162,64,1232,15],[1162,65,1232,16,"shadowClone"],[1162,76,1232,27],[1163,4,1232,29],[1164,4,1233,4,"useAbilityManually"],[1164,22,1233,22],[1165,4,1233,24],[1166,4,1234,4,"saveAbilityData"],[1166,19,1234,19],[1166,20,1234,21],[1167,4,1234,21],[1167,5,1235,3],[1167,6,1235,4],[1168,4,1237,2],[1168,24,1238,4],[1168,28,1238,4,"_reactJsxDevRuntime"],[1168,47,1238,4],[1168,48,1238,4,"jsxDEV"],[1168,54,1238,4],[1168,56,1238,5,"CombatContext"],[1168,69,1238,18],[1168,70,1238,19,"Provider"],[1168,78,1238,27],[1169,6,1238,28,"value"],[1169,11,1238,33],[1169,13,1238,35,"contextValue"],[1169,25,1238,48],[1170,6,1238,48,"children"],[1170,14,1238,48],[1170,16,1239,7,"children"],[1171,4,1239,15],[1172,6,1239,15,"fileName"],[1172,14,1239,15],[1172,16,1239,15,"_jsxFileName"],[1172,28,1239,15],[1173,6,1239,15,"lineNumber"],[1173,16,1239,15],[1174,6,1239,15,"columnNumber"],[1174,18,1239,15],[1175,4,1239,15],[1175,11,1240,28],[1175,12,1240,29],[1176,2,1242,0],[1176,3,1242,1],[1177,2,1242,2,"_s4"],[1177,5,1242,2],[1177,6,106,13,"CombatProvider"],[1177,20,106,27],[1178,4,106,27],[1178,12,107,15,"useGame"],[1178,24,107,22],[1178,25,107,22,"useGame"],[1178,32,107,22],[1178,34,108,77,"useZone"],[1178,46,108,84],[1178,47,108,84,"useZone"],[1178,54,108,84],[1179,2,108,84],[1180,2,108,84,"_c"],[1180,4,108,84],[1180,7,106,13,"CombatProvider"],[1180,21,106,27],[1181,2,106,27],[1181,6,106,27,"_c"],[1181,8,106,27],[1182,2,106,27,"$RefreshReg$"],[1182,14,106,27],[1182,15,106,27,"_c"],[1182,17,106,27],[1183,0,106,27],[1183,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","deadEnemiesToProcess.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMO;mBJI;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;8FSU,uDT;mCUY;SVkB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}