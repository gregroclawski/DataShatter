{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - integrates with zone progression and awards XP/gold\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      console.log(`🔍 XP DEBUG: handleEnemyKill called for ${enemy.name} (ID: ${enemy.id})`);\n      console.log(`🗡️  MOBILE DEBUG - handleEnemyKill CALLED for enemy:`, enemy.id);\n\n      // Use zone-based XP system instead of base XP to avoid conflicts\n      const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n      const dropMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n\n      // Use zone XP if available, otherwise fallback to ultra boosted base XP\n      const baseXpReward = enemy.zoneXP || 5000; // Use zone XP system, fallback to 5000 for non-zone enemies\n      const xpReward = Math.floor(baseXpReward * xpMultiplier);\n      const goldReward = Math.floor(10000 * dropMultiplier); // 1000X GOLD BOOST (was 10, now 10000) - matches XP scaling\n\n      console.log(`💰 MOBILE DEBUG - Awarding ${xpReward} XP and ${goldReward} gold for kill`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - XP Multiplier: ${xpMultiplier}, Drop Multiplier: ${dropMultiplier}`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - Base XP: ${baseXpReward}, Final XP: ${xpReward}`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - Full benefits:`, JSON.stringify(game.gameState.subscriptionBenefits));\n      console.log(`📱 MOBILE DEBUG - Platform: ${Platform.default.OS}, Time: ${Date.now()}`);\n\n      // IMMEDIATE XP AWARD - No setTimeout delays for instant feedback\n      console.log(`🥷 MOBILE DEBUG - About to call updateNinja with rewards IMMEDIATELY`);\n\n      // Award XP and gold using GameContext - SYNCHRONOUS for instant feedback\n      game.updateNinja(prev => {\n        console.log(`📊 MOBILE DEBUG - XP before: ${prev.experience}, after: ${prev.experience + xpReward}`);\n        console.log(`💰 MOBILE DEBUG - Gold before: ${prev.gold}, after: ${prev.gold + goldReward}`);\n        return {\n          experience: prev.experience + xpReward,\n          gold: prev.gold + goldReward\n        };\n      });\n\n      // Convert CombatEnemy to CurrentEnemy format for zone progression\n      const zoneEnemy = {\n        id: enemy.id,\n        typeId: enemy.zoneTypeId || 'test_orc',\n        // Use zone type ID if available, fallback to test\n        name: enemy.name,\n        icon: '🧌',\n        // Default icon for test enemies\n        hp: 0,\n        // Dead enemy\n        maxHP: enemy.maxHealth,\n        attack: enemy.stats.attack,\n        xp: enemy.zoneXP || 20,\n        // Use zone XP if available, fallback to base reward\n        position: enemy.position\n      };\n\n      // Record the zone kill for progression (if in a zone) - IMMEDIATE\n      recordEnemyKill(zoneEnemy);\n    }, [game.updateNinja, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    const handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      let enemiesToKill = []; // Track enemies to kill outside of setState\n\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal\n                      setTimeout(() => {\n                        // Set isAlive to false to trigger revival system\n                        game.updateGameState({\n                          isAlive: false\n                        });\n                      }, 100);\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        const dyingEnemies = newState.enemies.filter(enemy => enemy.isDying && enemy.health <= 0);\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0 && !enemy.isDying);\n\n        // Process ALL dead and dying enemies for XP (with 20 TPS = 50ms response time)\n        enemiesToKill = [...deadEnemies, ...dyingEnemies]; // Process all killed enemies for XP\n\n        // Remove enemies that have finished their death animation (750ms)\n        const currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            const animationDuration = 750; // 750ms death fade\n            const isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (deadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${deadEnemies.length} dead enemies:`, deadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // HANDLE ENEMY KILLS OUTSIDE OF setCombatState TO AVOID CROSS-COMPONENT ISSUES\n      console.log(`⚔️ MOBILE DEBUG - Processing ${enemiesToKill.length} enemy kills outside setState`);\n      enemiesToKill.forEach((enemy, index) => {\n        console.log(`💀 MOBILE DEBUG - Processing kill ${index + 1}/${enemiesToKill.length} for enemy ${enemy.id}`);\n        handleEnemyKill(enemy);\n      });\n    }, [handleEnemyKill]); // Only depend on handleEnemyKill, not combatEngine\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 0,\n      y: 0\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // Handle projectile hit - deals damage to target enemy\n    const handleProjectileHit = projectile => {\n      console.log(`💥 Projectile ${projectile.id} hit enemy ${projectile.targetEnemyId} for ${projectile.damage} damage`);\n      setCombatState(prev => {\n        const newState = {\n          ...prev\n        };\n\n        // Find the target enemy and deal damage\n        const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n        if (enemyIndex >= 0) {\n          newState.enemies = [...newState.enemies];\n          newState.enemies[enemyIndex] = {\n            ...newState.enemies[enemyIndex],\n            health: newState.enemies[enemyIndex].health - projectile.damage,\n            lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n          };\n          console.log(`🎯 Enemy ${projectile.targetEnemyId} health: ${newState.enemies[enemyIndex].health}/${newState.enemies[enemyIndex].maxHealth}`);\n        }\n        return newState;\n      });\n\n      // Remove projectile after hit\n      setProjectiles(prev => prev.filter(p => p.id !== projectile.id));\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        const ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        const ninjaY = currentNinjaPosition.y + 20;\n        const aoeRadius = ability.stats.aoeRadius;\n        const enemiesInRange = state.enemies.filter(enemy => {\n          const enemyX = enemy.position.x + 17.5; // Center of enemy\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // Schedule projectile hit\n      setTimeout(() => {\n        handleProjectileHit(projectile);\n      }, 500);\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              projectile.hasHit = true;\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      const newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    setTimeout(() => {\n                      enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                    }, 0);\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n            }\n\n            // Clean up completed projectiles\n            if (progress >= 1.5) {\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, [handleEnemyKill]);\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1191,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"Ef87VgEx3VhPv5l6GrayJ3/PL7k=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1121,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1,0],[27,6,1,0,"_react"],[27,12,1,0],[27,15,1,0,"require"],[27,22,1,0],[27,23,1,0,"_dependencyMap"],[27,37,1,0],[28,2,1,0],[28,6,1,0,"React"],[28,11,1,0],[28,14,1,0,"_interopDefault"],[28,29,1,0],[28,30,1,0,"_react"],[28,36,1,0],[29,2,1,110],[29,6,1,110,"_reactNativeWebDistExportsPlatform"],[29,40,1,110],[29,43,1,110,"require"],[29,50,1,110],[29,51,1,110,"_dependencyMap"],[29,65,1,110],[30,2,1,110],[30,6,1,110,"Platform"],[30,14,1,110],[30,17,1,110,"_interopDefault"],[30,32,1,110],[30,33,1,110,"_reactNativeWebDistExportsPlatform"],[30,67,1,110],[31,2,3,0],[31,6,3,0,"_engineCombatEngine"],[31,25,3,0],[31,28,3,0,"require"],[31,35,3,0],[31,36,3,0,"_dependencyMap"],[31,50,3,0],[32,2,4,0],[32,6,4,0,"_typesAbilityTypes"],[32,24,4,0],[32,27,4,0,"require"],[32,34,4,0],[32,35,4,0,"_dependencyMap"],[32,49,4,0],[33,2,5,0],[33,6,5,0,"_GameContext"],[33,18,5,0],[33,21,5,0,"require"],[33,28,5,0],[33,29,5,0,"_dependencyMap"],[33,43,5,0],[34,2,6,0],[34,6,6,0,"_ZoneContext"],[34,18,6,0],[34,21,6,0,"require"],[34,28,6,0],[34,29,6,0,"_dependencyMap"],[34,43,6,0],[35,2,6,40],[35,6,6,40,"_reactJsxDevRuntime"],[35,25,6,40],[35,28,6,40,"require"],[35,35,6,40],[35,36,6,40,"_dependencyMap"],[35,50,6,40],[36,2,94,0],[36,8,94,6,"CombatContext"],[36,21,94,19],[36,37,94,22],[36,41,94,22,"createContext"],[36,47,94,35],[36,48,94,35,"createContext"],[36,61,94,35],[36,63,94,67,"undefined"],[36,72,94,76],[36,73,94,77],[37,2,96,7],[37,8,96,13,"useCombat"],[37,17,96,22],[37,20,96,25,"useCombat"],[37,21,96,25],[37,26,96,50],[38,4,96,50,"_s"],[38,6,96,50],[39,4,97,2],[39,10,97,8,"context"],[39,17,97,15],[39,20,97,18],[39,24,97,18,"useContext"],[39,30,97,28],[39,31,97,28,"useContext"],[39,41,97,28],[39,43,97,29,"CombatContext"],[39,56,97,42],[39,57,97,43],[40,4,98,2],[40,8,98,6],[40,9,98,7,"context"],[40,16,98,14],[40,18,98,16],[41,6,99,4],[41,12,99,10],[41,16,99,14,"Error"],[41,21,99,19],[41,22,99,20],[41,70,99,68],[41,71,99,69],[42,4,100,2],[43,4,101,2],[43,11,101,9,"context"],[43,18,101,16],[44,2,102,0],[44,3,102,1],[45,2,102,2,"_s"],[45,4,102,2],[45,5,96,13,"useCombat"],[45,14,96,22],[46,2,104,0],[46,6,104,4,"enemyCounter"],[46,18,104,16],[46,21,104,19],[46,22,104,20],[46,23,104,21],[46,24,104,22],[48,2,106,7],[48,8,106,13,"CombatProvider"],[48,22,106,27],[48,25,106,30,"CombatProvider"],[48,26,106,31],[49,4,106,33,"children"],[50,2,106,67],[50,3,106,68],[50,8,106,73],[51,4,106,73,"_s4"],[51,7,106,73],[52,4,106,73],[52,8,106,73,"_s3"],[52,11,106,73],[52,14,106,73,"$RefreshSig$"],[52,26,106,73],[53,4,107,2],[53,10,107,8,"game"],[53,14,107,12],[53,17,107,15],[53,21,107,15,"useGame"],[53,33,107,22],[53,34,107,22,"useGame"],[53,41,107,22],[53,43,107,23],[53,44,107,24],[54,4,108,2],[54,10,108,8],[55,6,108,10,"currentZone"],[55,17,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[58,6,108,58,"spawnZoneEnemy"],[59,4,108,73],[59,5,108,74],[59,8,108,77],[59,12,108,77,"useZone"],[59,24,108,84],[59,25,108,84,"useZone"],[59,32,108,84],[59,34,108,85],[59,35,108,86],[61,4,110,2],[62,4,111,2],[62,10,111,8,"initialCombatState"],[62,28,111,39],[62,31,111,42],[63,6,112,4,"isInCombat"],[63,16,112,14],[63,18,112,16],[63,23,112,21],[64,6,113,4,"currentTick"],[64,17,113,15],[64,19,113,17],[64,20,113,18],[65,6,114,4,"enemies"],[65,13,114,11],[65,15,114,13],[65,17,114,15],[66,6,115,4,"abilityManager"],[66,20,115,18],[66,22,115,20],[66,26,115,24,"AbilityManager"],[66,44,115,38],[66,45,115,38,"AbilityManager"],[66,59,115,38],[66,60,115,39],[66,61,115,40],[67,6,116,4,"statusEffects"],[67,19,116,17],[67,21,116,19],[67,25,116,23,"StatusEffectManager"],[67,44,116,42],[67,45,116,42,"StatusEffectManager"],[67,64,116,42],[67,65,116,43],[67,66,116,44],[68,6,117,4,"playerStats"],[68,17,117,15],[68,19,117,17],[69,8,118,6,"attack"],[69,14,118,12],[69,16,118,14],[69,18,118,16],[70,8,118,18],[71,8,119,6,"defense"],[71,15,119,13],[71,17,119,15],[71,18,119,16],[72,8,120,6,"health"],[72,14,120,12],[72,16,120,14],[72,19,120,17],[73,8,121,6,"maxHealth"],[73,17,121,15],[73,19,121,17],[73,22,121,20],[74,8,122,6,"critChance"],[74,18,122,16],[74,20,122,18],[74,21,122,19],[75,8,123,6,"critDamage"],[75,18,123,16],[75,20,123,18],[75,23,123,21],[76,8,124,6,"cooldownReduction"],[76,25,124,23],[76,27,124,25],[77,6,125,4],[78,4,126,2],[78,5,126,3],[79,4,128,2],[79,10,128,8],[79,11,128,9,"combatState"],[79,22,128,20],[79,24,128,22,"setCombatState"],[79,38,128,36],[79,39,128,37],[79,42,128,40],[79,46,128,40,"useState"],[79,52,128,48],[79,53,128,48,"useState"],[79,61,128,48],[79,63,128,62,"initialCombatState"],[79,81,128,80],[79,82,128,81],[81,4,130,2],[82,4,131,2],[82,8,131,2,"useEffect"],[82,14,131,11],[82,15,131,11,"useEffect"],[82,24,131,11],[82,26,131,12],[82,32,131,18],[83,6,132,4],[83,10,132,8,"game"],[83,14,132,12],[83,15,132,13,"gameState"],[83,24,132,22],[83,25,132,23,"abilityData"],[83,36,132,34],[83,40,132,38,"combatState"],[83,51,132,49],[83,52,132,50,"abilityManager"],[83,66,132,64],[83,68,132,66],[84,8,133,6,"console"],[84,15,133,13],[84,16,133,14,"log"],[84,19,133,17],[84,20,133,18],[84,68,133,66],[84,70,133,68,"game"],[84,74,133,72],[84,75,133,73,"gameState"],[84,84,133,82],[84,85,133,83,"abilityData"],[84,96,133,94],[84,97,133,95],[85,8,134,6,"combatState"],[85,19,134,17],[85,20,134,18,"abilityManager"],[85,34,134,32],[85,35,134,33,"restoreFromSaveData"],[85,54,134,52],[85,55,134,53,"game"],[85,59,134,57],[85,60,134,58,"gameState"],[85,69,134,67],[85,70,134,68,"abilityData"],[85,81,134,79],[85,82,134,80],[87,8,136,6],[88,8,137,6,"setCombatState"],[88,22,137,20],[88,23,137,21,"prev"],[88,27,137,25],[88,32,137,30],[89,10,137,32],[89,13,137,35,"prev"],[90,8,137,40],[90,9,137,41],[90,10,137,42],[90,11,137,43],[91,6,138,4],[92,4,139,2],[92,5,139,3],[92,7,139,5],[92,8,139,6,"game"],[92,12,139,10],[92,13,139,11,"gameState"],[92,22,139,20],[92,23,139,21,"abilityData"],[92,34,139,32],[92,36,139,34,"combatState"],[92,47,139,45],[92,48,139,46,"abilityManager"],[92,62,139,60],[92,63,139,61],[92,64,139,62],[94,4,141,2],[95,4,142,2],[95,8,142,2,"useEffect"],[95,14,142,11],[95,15,142,11,"useEffect"],[95,24,142,11],[95,26,142,12],[95,32,142,18],[96,6,143,4],[96,10,143,8,"game"],[96,14,143,12],[96,15,143,13,"gameState"],[96,24,143,22],[96,25,143,23,"ninja"],[96,30,143,28],[96,32,143,30],[97,8,144,6],[97,14,144,12,"effectiveStats"],[97,28,144,26],[97,31,144,29,"game"],[97,35,144,33],[97,36,144,34,"getEffectiveStats"],[97,53,144,51],[97,54,144,52],[97,55,144,53],[98,8,146,6,"setCombatState"],[98,22,146,20],[98,23,146,21,"prev"],[98,27,146,25],[98,31,146,29],[99,10,147,8],[100,10,148,8],[100,14,148,12,"prev"],[100,18,148,16],[100,19,148,17,"playerStats"],[100,30,148,28],[100,31,148,29,"maxHealth"],[100,40,148,38],[100,45,148,43],[100,48,148,46],[100,52,148,50,"prev"],[100,56,148,54],[100,57,148,55,"playerStats"],[100,68,148,66],[100,69,148,67,"attack"],[100,75,148,73],[100,80,148,78],[100,82,148,80],[100,84,148,82],[101,12,149,10,"console"],[101,19,149,17],[101,20,149,18,"log"],[101,23,149,21],[101,24,149,22],[101,60,149,58,"effectiveStats"],[101,74,149,72],[101,75,149,73,"health"],[101,81,149,79],[101,93,149,91,"effectiveStats"],[101,107,149,105],[101,108,149,106,"attack"],[101,114,149,112],[101,127,149,125,"effectiveStats"],[101,141,149,139],[101,142,149,140,"defense"],[101,149,149,147],[101,151,149,149],[101,152,149,150],[102,12,151,10],[102,19,151,17],[103,14,152,12],[103,17,152,15,"prev"],[103,21,152,19],[104,14,153,12,"playerStats"],[104,25,153,23],[104,27,153,25],[105,16,154,14,"attack"],[105,22,154,20],[105,24,154,22,"effectiveStats"],[105,38,154,36],[105,39,154,37,"attack"],[105,45,154,43],[106,16,155,14,"defense"],[106,23,155,21],[106,25,155,23,"effectiveStats"],[106,39,155,37],[106,40,155,38,"defense"],[106,47,155,45],[107,16,156,14,"health"],[107,22,156,20],[107,24,156,22,"effectiveStats"],[107,38,156,36],[107,39,156,37,"health"],[107,45,156,43],[108,16,156,45],[109,16,157,14,"maxHealth"],[109,25,157,23],[109,27,157,25,"effectiveStats"],[109,41,157,39],[109,42,157,40,"health"],[109,48,157,46],[110,16,158,14,"critChance"],[110,26,158,24],[110,28,158,26,"effectiveStats"],[110,42,158,40],[110,43,158,41,"critChance"],[110,53,158,51],[110,57,158,55],[110,58,158,56],[111,16,159,14,"critDamage"],[111,26,159,24],[111,28,159,26,"effectiveStats"],[111,42,159,40],[111,43,159,41,"critDamage"],[111,53,159,51],[111,57,159,55],[111,60,159,58],[112,16,160,14,"cooldownReduction"],[112,33,160,31],[112,35,160,33,"effectiveStats"],[112,49,160,47],[112,50,160,48,"cooldownReduction"],[112,67,160,65],[112,71,160,69],[113,14,161,12],[114,12,162,10],[114,13,162,11],[115,10,163,8],[116,10,164,8],[116,17,164,15,"prev"],[116,21,164,19],[117,8,165,6],[117,9,165,7],[117,10,165,8],[118,6,166,4],[119,4,167,2],[119,5,167,3],[119,7,167,5],[119,8,167,6,"game"],[119,12,167,10],[119,13,167,11,"gameState"],[119,22,167,20],[119,23,167,21,"ninja"],[119,28,167,26],[119,29,167,27],[119,30,167,28],[120,4,169,2],[120,10,169,8],[120,11,169,9,"projectiles"],[120,22,169,20],[120,24,169,22,"setProjectiles"],[120,38,169,36],[120,39,169,37],[120,42,169,40],[120,46,169,40,"useState"],[120,52,169,48],[120,53,169,48,"useState"],[120,61,169,48],[120,63,169,69],[120,65,169,71],[120,66,169,72],[121,4,170,2],[121,10,170,8],[121,11,170,9,"lastExplosionTime"],[121,28,170,26],[121,30,170,28,"setLastExplosionTime"],[121,50,170,48],[121,51,170,49],[121,54,170,52],[121,58,170,52,"useState"],[121,64,170,60],[121,65,170,60,"useState"],[121,73,170,60],[121,75,170,69],[121,76,170,70],[121,77,170,71],[122,4,171,2],[123,4,172,2],[125,4,174,2],[126,4,175,2],[126,10,175,8,"handleEnemyKill"],[126,25,175,23],[126,28,175,26],[126,32,175,26,"useCallback"],[126,38,175,37],[126,39,175,37,"useCallback"],[126,50,175,37],[126,52,175,39,"enemy"],[126,57,175,57],[126,61,175,62],[127,6,176,4,"console"],[127,13,176,11],[127,14,176,12,"log"],[127,17,176,15],[127,18,176,16],[127,61,176,59,"enemy"],[127,66,176,64],[127,67,176,65,"name"],[127,71,176,69],[127,80,176,78,"enemy"],[127,85,176,83],[127,86,176,84,"id"],[127,88,176,86],[127,91,176,89],[127,92,176,90],[128,6,177,4,"console"],[128,13,177,11],[128,14,177,12,"log"],[128,17,177,15],[128,18,177,16],[128,73,177,71],[128,75,177,73,"enemy"],[128,80,177,78],[128,81,177,79,"id"],[128,83,177,81],[128,84,177,82],[130,6,179,4],[131,6,180,4],[131,12,180,10,"xpMultiplier"],[131,24,180,22],[131,27,180,25,"game"],[131,31,180,29],[131,32,180,30,"gameState"],[131,41,180,39],[131,42,180,40,"subscriptionBenefits"],[131,62,180,60],[131,64,180,62,"xp_multiplier"],[131,77,180,75],[131,81,180,79],[131,84,180,82],[132,6,181,4],[132,12,181,10,"dropMultiplier"],[132,26,181,24],[132,29,181,27,"game"],[132,33,181,31],[132,34,181,32,"gameState"],[132,43,181,41],[132,44,181,42,"subscriptionBenefits"],[132,64,181,62],[132,66,181,64,"drop_multiplier"],[132,81,181,79],[132,85,181,83],[132,88,181,86],[134,6,183,4],[135,6,184,4],[135,12,184,10,"baseXpReward"],[135,24,184,22],[135,27,184,25,"enemy"],[135,32,184,30],[135,33,184,31,"zoneXP"],[135,39,184,37],[135,43,184,41],[135,47,184,45],[135,48,184,46],[135,49,184,47],[136,6,185,4],[136,12,185,10,"xpReward"],[136,20,185,18],[136,23,185,21,"Math"],[136,27,185,25],[136,28,185,26,"floor"],[136,33,185,31],[136,34,185,32,"baseXpReward"],[136,46,185,44],[136,49,185,47,"xpMultiplier"],[136,61,185,59],[136,62,185,60],[137,6,186,4],[137,12,186,10,"goldReward"],[137,22,186,20],[137,25,186,23,"Math"],[137,29,186,27],[137,30,186,28,"floor"],[137,35,186,33],[137,36,186,34],[137,41,186,39],[137,44,186,42,"dropMultiplier"],[137,58,186,56],[137,59,186,57],[137,60,186,58],[137,61,186,59],[139,6,188,4,"console"],[139,13,188,11],[139,14,188,12,"log"],[139,17,188,15],[139,18,188,16],[139,48,188,46,"xpReward"],[139,56,188,54],[139,67,188,65,"goldReward"],[139,77,188,75],[139,93,188,91],[139,94,188,92],[140,6,189,4,"console"],[140,13,189,11],[140,14,189,12,"log"],[140,17,189,15],[140,18,189,16],[140,60,189,58,"xpMultiplier"],[140,72,189,70],[140,94,189,92,"dropMultiplier"],[140,108,189,106],[140,110,189,108],[140,111,189,109],[141,6,190,4,"console"],[141,13,190,11],[141,14,190,12,"log"],[141,17,190,15],[141,18,190,16],[141,54,190,52,"baseXpReward"],[141,66,190,64],[141,81,190,79,"xpReward"],[141,89,190,87],[141,91,190,89],[141,92,190,90],[142,6,191,4,"console"],[142,13,191,11],[142,14,191,12,"log"],[142,17,191,15],[142,18,191,16],[142,58,191,56],[142,60,191,58,"JSON"],[142,64,191,62],[142,65,191,63,"stringify"],[142,74,191,72],[142,75,191,73,"game"],[142,79,191,77],[142,80,191,78,"gameState"],[142,89,191,87],[142,90,191,88,"subscriptionBenefits"],[142,110,191,108],[142,111,191,109],[142,112,191,110],[143,6,192,4,"console"],[143,13,192,11],[143,14,192,12,"log"],[143,17,192,15],[143,18,192,16],[143,49,192,47,"Platform"],[143,57,192,55],[143,58,192,55,"default"],[143,65,192,55],[143,66,192,56,"OS"],[143,68,192,58],[143,79,192,69,"Date"],[143,83,192,73],[143,84,192,74,"now"],[143,87,192,77],[143,88,192,78],[143,89,192,79],[143,91,192,81],[143,92,192,82],[145,6,194,4],[146,6,195,4,"console"],[146,13,195,11],[146,14,195,12,"log"],[146,17,195,15],[146,18,195,16],[146,88,195,86],[146,89,195,87],[148,6,197,4],[149,6,198,4,"game"],[149,10,198,8],[149,11,198,9,"updateNinja"],[149,22,198,20],[149,23,198,22,"prev"],[149,27,198,26],[149,31,198,31],[150,8,199,6,"console"],[150,15,199,13],[150,16,199,14,"log"],[150,19,199,17],[150,20,199,18],[150,52,199,50,"prev"],[150,56,199,54],[150,57,199,55,"experience"],[150,67,199,65],[150,79,199,77,"prev"],[150,83,199,81],[150,84,199,82,"experience"],[150,94,199,92],[150,97,199,95,"xpReward"],[150,105,199,103],[150,107,199,105],[150,108,199,106],[151,8,200,6,"console"],[151,15,200,13],[151,16,200,14,"log"],[151,19,200,17],[151,20,200,18],[151,54,200,52,"prev"],[151,58,200,56],[151,59,200,57,"gold"],[151,63,200,61],[151,75,200,73,"prev"],[151,79,200,77],[151,80,200,78,"gold"],[151,84,200,82],[151,87,200,85,"goldReward"],[151,97,200,95],[151,99,200,97],[151,100,200,98],[152,8,201,6],[152,15,201,13],[153,10,202,8,"experience"],[153,20,202,18],[153,22,202,20,"prev"],[153,26,202,24],[153,27,202,25,"experience"],[153,37,202,35],[153,40,202,38,"xpReward"],[153,48,202,46],[154,10,203,8,"gold"],[154,14,203,12],[154,16,203,14,"prev"],[154,20,203,18],[154,21,203,19,"gold"],[154,25,203,23],[154,28,203,26,"goldReward"],[155,8,204,6],[155,9,204,7],[156,6,205,4],[156,7,205,5],[156,8,205,6],[158,6,207,4],[159,6,208,4],[159,12,208,10,"zoneEnemy"],[159,21,208,19],[159,24,208,22],[160,8,209,6,"id"],[160,10,209,8],[160,12,209,10,"enemy"],[160,17,209,15],[160,18,209,16,"id"],[160,20,209,18],[161,8,210,6,"typeId"],[161,14,210,12],[161,16,210,14,"enemy"],[161,21,210,19],[161,22,210,20,"zoneTypeId"],[161,32,210,30],[161,36,210,34],[161,46,210,44],[162,8,210,46],[163,8,211,6,"name"],[163,12,211,10],[163,14,211,12,"enemy"],[163,19,211,17],[163,20,211,18,"name"],[163,24,211,22],[164,8,212,6,"icon"],[164,12,212,10],[164,14,212,12],[164,18,212,16],[165,8,212,18],[166,8,213,6,"hp"],[166,10,213,8],[166,12,213,10],[166,13,213,11],[167,8,213,13],[168,8,214,6,"maxHP"],[168,13,214,11],[168,15,214,13,"enemy"],[168,20,214,18],[168,21,214,19,"maxHealth"],[168,30,214,28],[169,8,215,6,"attack"],[169,14,215,12],[169,16,215,14,"enemy"],[169,21,215,19],[169,22,215,20,"stats"],[169,27,215,25],[169,28,215,26,"attack"],[169,34,215,32],[170,8,216,6,"xp"],[170,10,216,8],[170,12,216,10,"enemy"],[170,17,216,15],[170,18,216,16,"zoneXP"],[170,24,216,22],[170,28,216,26],[170,30,216,28],[171,8,216,30],[172,8,217,6,"position"],[172,16,217,14],[172,18,217,16,"enemy"],[172,23,217,21],[172,24,217,22,"position"],[173,6,218,4],[173,7,218,5],[175,6,220,2],[176,6,221,2,"recordEnemyKill"],[176,21,221,17],[176,22,221,18,"zoneEnemy"],[176,31,221,27],[176,32,221,28],[177,4,222,2],[177,5,222,3],[177,7,222,5],[177,8,222,6,"game"],[177,12,222,10],[177,13,222,11,"updateNinja"],[177,24,222,22],[177,26,222,24,"recordEnemyKill"],[177,41,222,39],[177,42,222,40],[177,43,222,41],[179,4,224,2],[180,4,225,2],[180,10,225,8,"handleCombatTick"],[180,26,225,24],[180,29,225,27,"React"],[180,34,225,32],[180,35,225,32,"default"],[180,42,225,32],[180,43,225,33,"useCallback"],[180,54,225,44],[180,55,225,45],[180,61,225,51],[181,6,225,51],[181,10,225,51,"_s2"],[181,13,225,51],[181,16,225,51,"$RefreshSig$"],[181,28,225,51],[182,6,226,4,"console"],[182,13,226,11],[182,14,226,12,"log"],[182,17,226,15],[182,18,226,16],[182,87,226,85],[182,88,226,86],[183,6,227,4,"console"],[183,13,227,11],[183,14,227,12,"log"],[183,17,227,15],[183,18,227,16],[183,65,227,63,"isManualControlActive"],[183,86,227,84],[183,99,227,97,"game"],[183,103,227,101],[183,104,227,102,"gameState"],[183,113,227,111],[183,114,227,112,"isAlive"],[183,121,227,119],[183,123,227,121],[183,124,227,122],[184,6,229,4],[184,10,229,8,"enemiesToKill"],[184,23,229,36],[184,26,229,39],[184,28,229,41],[184,29,229,42],[184,30,229,43],[186,6,231,4,"_s2"],[186,9,231,4],[186,10,231,4,"setCombatState"],[186,24,231,18],[186,25,231,18,"_s2"],[186,28,231,18],[186,29,231,19,"prev"],[186,33,231,23],[186,37,231,27],[187,8,231,27,"_s2"],[187,11,231,27],[188,8,232,6],[188,14,232,12,"newTick"],[188,21,232,19],[188,24,232,22,"combatEngine"],[188,43,232,34],[188,44,232,34,"combatEngine"],[188,56,232,34],[188,57,232,35,"getCurrentTick"],[188,71,232,49],[188,72,232,50],[188,73,232,51],[189,8,233,6],[189,14,233,12,"newState"],[189,22,233,20],[189,25,233,23],[190,10,233,25],[190,13,233,28,"prev"],[190,17,233,32],[191,10,233,34,"currentTick"],[191,21,233,45],[191,23,233,47,"newTick"],[192,8,233,55],[192,9,233,56],[193,8,235,6],[193,12,235,10],[193,13,235,11,"newState"],[193,21,235,19],[193,22,235,20,"isInCombat"],[193,32,235,30],[193,34,235,32],[193,41,235,39,"newState"],[193,49,235,47],[195,8,237,6],[196,8,238,6,"newState"],[196,16,238,14],[196,17,238,15,"abilityManager"],[196,31,238,29],[196,32,238,30,"updateCooldowns"],[196,47,238,45],[196,48,238,46,"newTick"],[196,55,238,53],[196,56,238,54],[198,8,240,6],[199,8,241,6],[199,14,241,12,"effectResults"],[199,27,241,25],[199,30,241,28,"newState"],[199,38,241,36],[199,39,241,37,"statusEffects"],[199,52,241,50],[199,53,241,51,"processTick"],[199,64,241,62],[199,65,241,63,"newTick"],[199,72,241,70],[199,73,241,71],[201,8,243,6],[202,8,244,6,"effectResults"],[202,21,244,19],[202,22,244,20,"forEach"],[202,29,244,27],[202,30,244,28],[202,31,244,29,"results"],[202,38,244,36],[202,40,244,38,"entityId"],[202,48,244,46],[202,53,244,51],[203,10,245,8],[203,16,245,14,"enemyIndex"],[203,26,245,24],[203,29,245,27,"newState"],[203,37,245,35],[203,38,245,36,"enemies"],[203,45,245,43],[203,46,245,44,"findIndex"],[203,55,245,53],[203,56,245,54,"e"],[203,57,245,55],[203,61,245,59,"e"],[203,62,245,60],[203,63,245,61,"id"],[203,65,245,63],[203,70,245,68,"entityId"],[203,78,245,76],[203,79,245,77],[204,10,246,8],[204,14,246,12,"enemyIndex"],[204,24,246,22],[204,28,246,26],[204,29,246,27],[204,31,246,29],[205,12,247,10,"results"],[205,19,247,17],[205,20,247,18,"forEach"],[205,27,247,25],[205,28,247,26,"result"],[205,34,247,32],[205,38,247,36],[206,14,248,12,"newState"],[206,22,248,20],[206,23,248,21,"enemies"],[206,30,248,28],[206,31,248,29,"enemyIndex"],[206,41,248,39],[206,42,248,40],[206,43,248,41,"health"],[206,49,248,47],[206,53,248,51,"result"],[206,59,248,57],[206,60,248,58,"damage"],[206,66,248,64],[207,14,249,12,"newState"],[207,22,249,20],[207,23,249,21,"enemies"],[207,30,249,28],[207,31,249,29,"enemyIndex"],[207,41,249,39],[207,42,249,40],[207,43,249,41,"lastDamaged"],[207,54,249,52],[207,57,249,55,"newTick"],[207,64,249,62],[208,12,250,10],[208,13,250,11],[208,14,250,12],[209,10,251,8],[210,8,252,6],[210,9,252,7],[210,10,252,8],[212,8,254,6],[213,8,255,6],[214,8,256,6],[214,12,256,10,"newState"],[214,20,256,18],[214,21,256,19,"playerStats"],[214,32,256,30],[214,36,256,34,"game"],[214,40,256,38],[214,41,256,39,"gameState"],[214,50,256,48],[214,51,256,49,"ninja"],[214,56,256,54],[214,58,256,56],[215,10,257,8],[215,16,257,14,"effectiveStats"],[215,30,257,28],[215,33,257,31,"game"],[215,37,257,35],[215,38,257,36,"getEffectiveStats"],[215,55,257,53],[215,56,257,54],[215,57,257,55],[217,10,259,8],[218,10,260,8],[218,14,260,12,"newState"],[218,22,260,20],[218,23,260,21,"playerStats"],[218,34,260,32],[218,35,260,33,"attack"],[218,41,260,39],[218,46,260,44,"effectiveStats"],[218,60,260,58],[218,61,260,59,"attack"],[218,67,260,65],[218,71,261,12,"newState"],[218,79,261,20],[218,80,261,21,"playerStats"],[218,91,261,32],[218,92,261,33,"defense"],[218,99,261,40],[218,104,261,45,"effectiveStats"],[218,118,261,59],[218,119,261,60,"defense"],[218,126,261,67],[218,130,262,12,"newState"],[218,138,262,20],[218,139,262,21,"playerStats"],[218,150,262,32],[218,151,262,33,"maxHealth"],[218,160,262,42],[218,165,262,47,"effectiveStats"],[218,179,262,61],[218,180,262,62,"maxHealth"],[218,189,262,71],[218,191,262,73],[219,12,264,10,"console"],[219,19,264,17],[219,20,264,18,"log"],[219,23,264,21],[219,24,264,22],[219,58,264,56,"newState"],[219,66,264,64],[219,67,264,65,"playerStats"],[219,78,264,76],[219,79,264,77,"attack"],[219,85,264,83],[219,91,264,89,"effectiveStats"],[219,105,264,103],[219,106,264,104,"attack"],[219,112,264,110],[219,125,264,123,"newState"],[219,133,264,131],[219,134,264,132,"playerStats"],[219,145,264,143],[219,146,264,144,"defense"],[219,153,264,151],[219,159,264,157,"effectiveStats"],[219,173,264,171],[219,174,264,172,"defense"],[219,181,264,179],[219,192,264,190,"newState"],[219,200,264,198],[219,201,264,199,"playerStats"],[219,212,264,210],[219,213,264,211,"maxHealth"],[219,222,264,220],[219,228,264,226,"effectiveStats"],[219,242,264,240],[219,243,264,241,"maxHealth"],[219,252,264,250],[219,254,264,252],[219,255,264,253],[221,12,266,10],[222,12,267,10],[222,16,267,14,"newHealth"],[222,25,267,23],[222,28,267,26,"newState"],[222,36,267,34],[222,37,267,35,"playerStats"],[222,48,267,46],[222,49,267,47,"health"],[222,55,267,53],[223,12,268,10],[223,16,268,14,"newState"],[223,24,268,22],[223,25,268,23,"playerStats"],[223,36,268,34],[223,37,268,35,"maxHealth"],[223,46,268,44],[223,51,268,49,"effectiveStats"],[223,65,268,63],[223,66,268,64,"maxHealth"],[223,75,268,73],[223,77,268,75],[224,14,269,12],[225,14,270,12],[225,18,270,16,"effectiveStats"],[225,32,270,30],[225,33,270,31,"maxHealth"],[225,42,270,40],[225,45,270,43,"newState"],[225,53,270,51],[225,54,270,52,"playerStats"],[225,65,270,63],[225,66,270,64,"maxHealth"],[225,75,270,73],[225,78,270,76],[225,81,270,79],[225,83,270,81],[226,16,271,14],[227,16,272,14],[227,22,272,20,"healthRatio"],[227,33,272,31],[227,36,272,34,"newState"],[227,44,272,42],[227,45,272,43,"playerStats"],[227,56,272,54],[227,57,272,55,"maxHealth"],[227,66,272,64],[227,69,272,67],[227,70,272,68],[227,73,273,16,"newState"],[227,81,273,24],[227,82,273,25,"playerStats"],[227,93,273,36],[227,94,273,37,"health"],[227,100,273,43],[227,103,273,46,"newState"],[227,111,273,54],[227,112,273,55,"playerStats"],[227,123,273,66],[227,124,273,67,"maxHealth"],[227,133,273,76],[227,136,273,79],[227,137,273,80],[228,16,274,14,"newHealth"],[228,25,274,23],[228,28,274,26,"Math"],[228,32,274,30],[228,33,274,31,"floor"],[228,38,274,36],[228,39,274,37,"effectiveStats"],[228,53,274,51],[228,54,274,52,"maxHealth"],[228,63,274,61],[228,66,274,64,"healthRatio"],[228,77,274,75],[228,78,274,76],[229,14,275,12],[229,15,275,13],[229,21,275,19],[229,25,275,23,"newState"],[229,33,275,31],[229,34,275,32,"playerStats"],[229,45,275,43],[229,46,275,44,"health"],[229,52,275,50],[229,55,275,53,"effectiveStats"],[229,69,275,67],[229,70,275,68,"maxHealth"],[229,79,275,77],[229,81,275,79],[230,16,276,14],[231,16,277,14,"newHealth"],[231,25,277,23],[231,28,277,26,"effectiveStats"],[231,42,277,40],[231,43,277,41,"maxHealth"],[231,52,277,50],[232,14,278,12],[233,14,279,12],[234,12,280,10],[235,12,282,10,"newState"],[235,20,282,18],[235,21,282,19,"playerStats"],[235,32,282,30],[235,35,282,33],[236,14,283,12],[236,17,283,15,"newState"],[236,25,283,23],[236,26,283,24,"playerStats"],[236,37,283,35],[237,14,284,12,"attack"],[237,20,284,18],[237,22,284,20,"effectiveStats"],[237,36,284,34],[237,37,284,35,"attack"],[237,43,284,41],[238,14,285,12,"defense"],[238,21,285,19],[238,23,285,21,"effectiveStats"],[238,37,285,35],[238,38,285,36,"defense"],[238,45,285,43],[239,14,286,12,"maxHealth"],[239,23,286,21],[239,25,286,23,"effectiveStats"],[239,39,286,37],[239,40,286,38,"maxHealth"],[239,49,286,47],[240,14,286,49],[241,14,287,12,"health"],[241,20,287,18],[241,22,287,20,"newHealth"],[241,31,287,29],[242,14,287,31],[243,14,288,12,"critChance"],[243,24,288,22],[243,26,288,24,"effectiveStats"],[243,40,288,38],[243,41,288,39,"critChance"],[243,51,288,49],[243,55,288,53,"newState"],[243,63,288,61],[243,64,288,62,"playerStats"],[243,75,288,73],[243,76,288,74,"critChance"],[243,86,288,84],[244,14,289,12,"critDamage"],[244,24,289,22],[244,26,289,24,"effectiveStats"],[244,40,289,38],[244,41,289,39,"critDamage"],[244,51,289,49],[244,55,289,53,"newState"],[244,63,289,61],[244,64,289,62,"playerStats"],[244,75,289,73],[244,76,289,74,"critDamage"],[244,86,289,84],[245,14,290,12,"cooldownReduction"],[245,31,290,29],[245,33,290,31,"effectiveStats"],[245,47,290,45],[245,48,290,46,"cooldownReduction"],[245,65,290,63],[245,69,290,67,"newState"],[245,77,290,75],[245,78,290,76,"playerStats"],[245,89,290,87],[245,90,290,88,"cooldownReduction"],[246,12,291,10],[246,13,291,11],[247,10,292,8],[249,10,294,8],[250,10,295,8],[250,14,295,12,"game"],[250,18,295,16],[250,19,295,17,"gameState"],[250,28,295,26],[250,29,295,27,"isAlive"],[250,36,295,34],[250,40,296,12,"game"],[250,44,296,16],[250,45,296,17,"gameState"],[250,54,296,26],[250,55,296,27,"ninja"],[250,60,296,32],[250,61,296,33,"health"],[250,67,296,39],[250,72,296,44,"effectiveStats"],[250,86,296,58],[250,87,296,59,"maxHealth"],[250,96,296,68],[250,100,297,12,"newState"],[250,108,297,20],[250,109,297,21,"playerStats"],[250,120,297,32],[250,121,297,33,"health"],[250,127,297,39],[250,130,297,42,"effectiveStats"],[250,144,297,56],[250,145,297,57,"maxHealth"],[250,154,297,66],[250,157,297,69],[250,160,297,72],[250,162,297,74],[251,12,298,10,"console"],[251,19,298,17],[251,20,298,18,"log"],[251,23,298,21],[251,24,298,22],[251,58,298,56,"newState"],[251,66,298,64],[251,67,298,65,"playerStats"],[251,78,298,76],[251,79,298,77,"health"],[251,85,298,83],[251,91,298,89,"game"],[251,95,298,93],[251,96,298,94,"gameState"],[251,105,298,103],[251,106,298,104,"ninja"],[251,111,298,109],[251,112,298,110,"health"],[251,118,298,116],[251,139,298,137],[251,140,298,138],[252,12,299,10,"newState"],[252,20,299,18],[252,21,299,19,"playerStats"],[252,32,299,30],[252,33,299,31,"health"],[252,39,299,37],[252,42,299,40,"game"],[252,46,299,44],[252,47,299,45,"gameState"],[252,56,299,54],[252,57,299,55,"ninja"],[252,62,299,60],[252,63,299,61,"health"],[252,69,299,67],[253,10,300,8],[254,8,301,6],[256,8,303,6],[257,8,304,6,"newState"],[257,16,304,14],[257,17,304,15,"enemies"],[257,24,304,22],[257,25,304,23,"forEach"],[257,32,304,30],[257,33,304,31,"enemy"],[257,38,304,36],[257,42,304,40],[258,10,305,8],[258,14,305,12],[258,15,305,13,"enemy"],[258,20,305,18],[258,21,305,19,"isBoss"],[258,27,305,25],[258,29,305,27],[259,12,305,29],[260,12,306,10],[261,12,307,10],[261,18,307,16,"MOVEMENT_SPEED"],[261,32,307,30],[261,35,307,33],[261,39,307,37],[261,40,307,38],[261,41,307,39],[262,12,308,10],[262,18,308,16,"SCREEN_WIDTH"],[262,30,308,28],[262,33,308,31],[262,36,308,34],[263,12,309,10],[263,18,309,16,"GAME_AREA_HEIGHT"],[263,34,309,32],[263,37,309,35],[263,40,309,38],[263,41,309,39],[263,42,309,40],[264,12,310,10],[264,18,310,16,"ENEMY_SIZE"],[264,28,310,26],[264,31,310,29],[264,33,310,31],[266,12,312,10],[267,12,313,10],[267,18,313,16,"playerX"],[267,25,313,23],[267,28,313,26,"currentNinjaPosition"],[267,48,313,46],[267,49,313,47,"x"],[267,50,313,48],[268,12,314,10],[268,18,314,16,"playerY"],[268,25,314,23],[268,28,314,26,"currentNinjaPosition"],[268,48,314,46],[268,49,314,47,"y"],[268,50,314,48],[270,12,316,10],[271,12,317,10],[271,18,317,16,"deltaX"],[271,24,317,22],[271,27,317,25,"playerX"],[271,34,317,32],[271,37,317,35,"enemy"],[271,42,317,40],[271,43,317,41,"position"],[271,51,317,49],[271,52,317,50,"x"],[271,53,317,51],[272,12,318,10],[272,18,318,16,"deltaY"],[272,24,318,22],[272,27,318,25,"playerY"],[272,34,318,32],[272,37,318,35,"enemy"],[272,42,318,40],[272,43,318,41,"position"],[272,51,318,49],[272,52,318,50,"y"],[272,53,318,51],[273,12,319,10],[273,18,319,16,"distance"],[273,26,319,24],[273,29,319,27,"Math"],[273,33,319,31],[273,34,319,32,"sqrt"],[273,38,319,36],[273,39,319,37,"deltaX"],[273,45,319,43],[273,48,319,46,"deltaX"],[273,54,319,52],[273,57,319,55,"deltaY"],[273,63,319,61],[273,66,319,64,"deltaY"],[273,72,319,70],[273,73,319,71],[275,12,321,10],[276,12,322,10],[276,18,322,16,"ATTACK_RANGE"],[276,30,322,28],[276,33,322,31],[276,35,322,33],[276,36,322,34],[276,37,322,35],[277,12,323,10],[277,18,323,16,"ATTACK_COOLDOWN"],[277,33,323,31],[277,36,323,34],[277,38,323,36],[277,39,323,37],[277,40,323,38],[279,12,325,10],[279,16,325,14,"distance"],[279,24,325,22],[279,28,325,26,"ATTACK_RANGE"],[279,40,325,38],[279,42,325,40],[280,14,326,12],[281,14,327,12],[281,18,327,16],[281,19,327,17,"enemy"],[281,24,327,22],[281,25,327,23,"lastAttackTick"],[281,39,327,37],[281,41,327,39,"enemy"],[281,46,327,44],[281,47,327,45,"lastAttackTick"],[281,61,327,59],[281,64,327,62],[281,65,327,63],[282,14,329,12],[282,18,329,16,"newState"],[282,26,329,24],[282,27,329,25,"currentTick"],[282,38,329,36],[282,41,329,39,"enemy"],[282,46,329,44],[282,47,329,45,"lastAttackTick"],[282,61,329,59],[282,65,329,63,"ATTACK_COOLDOWN"],[282,80,329,78],[282,82,329,80],[283,16,330,14],[284,16,331,14],[284,20,331,18],[284,21,331,19,"game"],[284,25,331,23],[284,26,331,24,"gameState"],[284,35,331,33],[284,36,331,34,"isAlive"],[284,43,331,41],[284,45,331,43],[285,18,332,16,"console"],[285,25,332,23],[285,26,332,24,"log"],[285,29,332,27],[285,30,332,28],[285,49,332,47,"enemy"],[285,54,332,52],[285,55,332,53,"name"],[285,59,332,57],[285,93,332,91],[285,94,332,92],[286,18,333,16],[287,18,334,16,"enemy"],[287,23,334,21],[287,24,334,22,"lastAttackTick"],[287,38,334,36],[287,41,334,39,"newState"],[287,49,334,47],[287,50,334,48,"currentTick"],[287,61,334,59],[288,16,335,14],[288,17,335,15],[288,23,335,21],[289,18,336,16],[290,18,337,16],[290,24,337,22,"isPlayerInvincible"],[290,42,337,40],[290,45,337,43,"game"],[290,49,337,47],[290,50,337,48,"gameState"],[290,59,337,57],[290,60,337,58,"isInvincible"],[290,72,337,70],[290,76,338,41,"game"],[290,80,338,45],[290,81,338,46,"gameState"],[290,90,338,55],[290,91,338,56,"invincibilityEndTime"],[290,111,338,76],[290,115,339,41,"Date"],[290,119,339,45],[290,120,339,46,"now"],[290,123,339,49],[290,124,339,50],[290,125,339,51],[290,128,339,54,"game"],[290,132,339,58],[290,133,339,59,"gameState"],[290,142,339,68],[290,143,339,69,"invincibilityEndTime"],[290,163,339,89],[291,18,341,16],[291,22,341,20,"isPlayerInvincible"],[291,40,341,38],[291,42,341,40],[292,20,342,18,"console"],[292,27,342,25],[292,28,342,26,"log"],[292,31,342,29],[292,32,342,30],[292,51,342,49,"enemy"],[292,56,342,54],[292,57,342,55,"name"],[292,61,342,59],[292,101,342,99],[292,102,342,100],[293,20,343,18],[294,20,344,18,"enemy"],[294,25,344,23],[294,26,344,24,"lastAttackTick"],[294,40,344,38],[294,43,344,41,"newState"],[294,51,344,49],[294,52,344,50,"currentTick"],[294,63,344,61],[295,18,345,16],[295,19,345,17],[295,25,345,23],[296,20,346,16],[297,20,347,16],[297,26,347,22,"baseAttack"],[297,36,347,32],[297,39,347,35,"enemy"],[297,44,347,40],[297,45,347,41,"stats"],[297,50,347,46],[297,51,347,47,"attack"],[297,57,347,53],[297,60,347,56],[297,63,347,59],[297,64,347,60],[297,65,347,61],[298,20,348,16],[298,26,348,22,"attackDamage"],[298,38,348,34],[298,41,348,37,"Math"],[298,45,348,41],[298,46,348,42,"floor"],[298,51,348,47],[298,52,348,48,"baseAttack"],[298,62,348,58],[298,66,348,62],[298,69,348,65],[298,72,348,68,"Math"],[298,76,348,72],[298,77,348,73,"random"],[298,83,348,79],[298,84,348,80],[298,85,348,81],[298,88,348,84],[298,91,348,87],[298,92,348,88],[298,93,348,89],[298,94,348,90],[298,95,348,91],[299,20,349,16],[299,26,349,22,"playerDefense"],[299,39,349,35],[299,42,349,38,"newState"],[299,50,349,46],[299,51,349,47,"playerStats"],[299,62,349,58],[299,63,349,59,"defense"],[299,70,349,66],[300,20,350,16],[300,26,350,22,"finalDamage"],[300,37,350,33],[300,40,350,36,"Math"],[300,44,350,40],[300,45,350,41,"max"],[300,48,350,44],[300,49,350,45],[300,50,350,46],[300,52,350,48,"attackDamage"],[300,64,350,60],[300,67,350,63,"Math"],[300,71,350,67],[300,72,350,68,"floor"],[300,77,350,73],[300,78,350,74,"playerDefense"],[300,91,350,87],[300,94,350,90],[300,97,350,93],[300,98,350,94],[300,99,350,95],[300,100,350,96],[300,101,350,97],[302,20,352,16,"console"],[302,27,352,23],[302,28,352,24,"log"],[302,31,352,27],[302,32,352,28],[302,53,352,49,"enemy"],[302,58,352,54],[302,59,352,55,"name"],[302,63,352,59],[302,86,352,82,"finalDamage"],[302,97,352,93],[302,109,352,105,"attackDamage"],[302,121,352,117],[302,132,352,128,"Math"],[302,136,352,132],[302,137,352,133,"floor"],[302,142,352,138],[302,143,352,139,"playerDefense"],[302,156,352,152],[302,159,352,155],[302,162,352,158],[302,163,352,159],[302,184,352,180],[302,185,352,181],[304,20,354,16],[305,20,355,16],[305,26,355,22,"newPlayerHealth"],[305,41,355,37],[305,44,355,40,"Math"],[305,48,355,44],[305,49,355,45,"max"],[305,52,355,48],[305,53,355,49],[305,54,355,50],[305,56,355,52,"newState"],[305,64,355,60],[305,65,355,61,"playerStats"],[305,76,355,72],[305,77,355,73,"health"],[305,83,355,79],[305,86,355,82,"finalDamage"],[305,97,355,93],[305,98,355,94],[306,20,356,16,"newState"],[306,28,356,24],[306,29,356,25,"playerStats"],[306,40,356,36],[306,41,356,37,"health"],[306,47,356,43],[306,50,356,46,"newPlayerHealth"],[306,65,356,61],[307,20,358,16,"console"],[307,27,358,23],[307,28,358,24,"log"],[307,31,358,27],[307,32,358,28],[307,53,358,49,"newState"],[307,61,358,57],[307,62,358,58,"playerStats"],[307,73,358,69],[307,74,358,70,"health"],[307,80,358,76],[307,84,358,80,"newState"],[307,92,358,88],[307,93,358,89,"playerStats"],[307,104,358,100],[307,105,358,101,"maxHealth"],[307,114,358,110],[307,124,358,120,"finalDamage"],[307,135,358,131],[307,145,358,141],[307,146,358,142],[309,20,360,16],[310,20,361,16,"enemy"],[310,25,361,21],[310,26,361,22,"lastAttackTick"],[310,40,361,36],[310,43,361,39,"newState"],[310,51,361,47],[310,52,361,48,"currentTick"],[310,63,361,59],[312,20,363,16],[313,20,364,16],[313,24,364,20,"newPlayerHealth"],[313,39,364,35],[313,43,364,39],[313,44,364,40],[313,46,364,42],[314,22,365,18,"console"],[314,29,365,25],[314,30,365,26,"log"],[314,33,365,29],[314,34,365,30],[314,84,365,80],[314,85,365,81],[315,22,366,18],[316,22,367,18,"setTimeout"],[316,32,367,28],[316,33,367,29],[316,39,367,35],[317,24,368,20],[318,24,369,20,"game"],[318,28,369,24],[318,29,369,25,"updateGameState"],[318,44,369,40],[318,45,369,41],[319,26,369,43,"isAlive"],[319,33,369,50],[319,35,369,52],[320,24,369,58],[320,25,369,59],[320,26,369,60],[321,22,370,18],[321,23,370,19],[321,25,370,21],[321,28,370,24],[321,29,370,25],[322,20,371,16],[323,18,372,16],[324,16,373,14],[325,14,374,12],[326,12,375,10],[326,13,375,11],[326,19,375,17],[327,14,376,12],[328,14,377,12],[329,14,378,12],[329,18,378,16,"distance"],[329,26,378,24],[329,29,378,27],[329,31,378,29],[329,33,378,31],[330,16,379,14],[331,16,380,14],[331,22,380,20,"normalizedX"],[331,33,380,31],[331,36,380,34,"deltaX"],[331,42,380,40],[331,45,380,43,"distance"],[331,53,380,51],[332,16,381,14],[332,22,381,20,"normalizedY"],[332,33,381,31],[332,36,381,34,"deltaY"],[332,42,381,40],[332,45,381,43,"distance"],[332,53,381,51],[334,16,383,14],[335,16,384,14],[335,22,384,20,"randomFactor"],[335,34,384,32],[335,37,384,35],[335,40,384,38],[335,41,384,39],[335,42,384,40],[336,16,385,14],[336,22,385,20,"finalX"],[336,28,385,26],[336,31,385,29,"normalizedX"],[336,42,385,40],[336,45,385,43],[336,46,385,44,"Math"],[336,50,385,48],[336,51,385,49,"random"],[336,57,385,55],[336,58,385,56],[336,59,385,57],[336,62,385,60],[336,65,385,63],[336,69,385,67,"randomFactor"],[336,81,385,79],[337,16,386,14],[337,22,386,20,"finalY"],[337,28,386,26],[337,31,386,29,"normalizedY"],[337,42,386,40],[337,45,386,43],[337,46,386,44,"Math"],[337,50,386,48],[337,51,386,49,"random"],[337,57,386,55],[337,58,386,56],[337,59,386,57],[337,62,386,60],[337,65,386,63],[337,69,386,67,"randomFactor"],[337,81,386,79],[339,16,388,14],[340,16,389,14],[340,20,389,18,"newX"],[340,24,389,22],[340,27,389,25,"enemy"],[340,32,389,30],[340,33,389,31,"position"],[340,41,389,39],[340,42,389,40,"x"],[340,43,389,41],[340,46,389,45,"finalX"],[340,52,389,51],[340,55,389,54,"MOVEMENT_SPEED"],[340,69,389,69],[341,16,390,14],[341,20,390,18,"newY"],[341,24,390,22],[341,27,390,25,"enemy"],[341,32,390,30],[341,33,390,31,"position"],[341,41,390,39],[341,42,390,40,"y"],[341,43,390,41],[341,46,390,45,"finalY"],[341,52,390,51],[341,55,390,54,"MOVEMENT_SPEED"],[341,69,390,69],[343,16,392,14],[344,16,393,14,"newX"],[344,20,393,18],[344,23,393,21,"Math"],[344,27,393,25],[344,28,393,26,"max"],[344,31,393,29],[344,32,393,30],[344,33,393,31],[344,35,393,33,"Math"],[344,39,393,37],[344,40,393,38,"min"],[344,43,393,41],[344,44,393,42,"SCREEN_WIDTH"],[344,56,393,54],[344,59,393,57,"ENEMY_SIZE"],[344,69,393,67],[344,71,393,69,"newX"],[344,75,393,73],[344,76,393,74],[344,77,393,75],[345,16,394,14,"newY"],[345,20,394,18],[345,23,394,21,"Math"],[345,27,394,25],[345,28,394,26,"max"],[345,31,394,29],[345,32,394,30],[345,33,394,31],[345,35,394,33,"Math"],[345,39,394,37],[345,40,394,38,"min"],[345,43,394,41],[345,44,394,42,"GAME_AREA_HEIGHT"],[345,60,394,58],[345,63,394,61,"ENEMY_SIZE"],[345,73,394,71],[345,75,394,73,"newY"],[345,79,394,77],[345,80,394,78],[345,81,394,79],[347,16,396,14],[348,16,397,14,"enemy"],[348,21,397,19],[348,22,397,20,"position"],[348,30,397,28],[348,31,397,29,"x"],[348,32,397,30],[348,35,397,33,"newX"],[348,39,397,37],[349,16,398,14,"enemy"],[349,21,398,19],[349,22,398,20,"position"],[349,30,398,28],[349,31,398,29,"y"],[349,32,398,30],[349,35,398,33,"newY"],[349,39,398,37],[350,14,399,12],[351,14,400,12],[352,12,401,10],[353,10,402,8],[354,8,403,6],[354,9,403,7],[354,10,403,8],[356,8,405,6],[357,8,406,6],[357,12,406,10,"newState"],[357,20,406,18],[357,21,406,19,"shadowClone"],[357,32,406,30],[357,34,406,32],[358,10,407,8],[359,10,408,8,"newState"],[359,18,408,16],[359,19,408,17,"shadowClone"],[359,30,408,28],[359,31,408,29,"remainingTicks"],[359,45,408,43],[359,47,408,45],[361,10,410,8],[362,10,411,8],[362,16,411,14,"cloneOffset"],[362,27,411,25],[362,30,411,28],[362,32,411,30],[362,33,411,31],[362,34,411,32],[363,10,412,8,"newState"],[363,18,412,16],[363,19,412,17,"shadowClone"],[363,30,412,28],[363,31,412,29,"position"],[363,39,412,37],[363,40,412,38,"x"],[363,41,412,39],[363,44,412,42,"currentNinjaPosition"],[363,64,412,62],[363,65,412,63,"x"],[363,66,412,64],[363,69,412,67,"cloneOffset"],[363,80,412,78],[364,10,413,8,"newState"],[364,18,413,16],[364,19,413,17,"shadowClone"],[364,30,413,28],[364,31,413,29,"position"],[364,39,413,37],[364,40,413,38,"y"],[364,41,413,39],[364,44,413,42,"currentNinjaPosition"],[364,64,413,62],[364,65,413,63,"y"],[364,66,413,64],[364,69,413,67],[364,71,413,69],[366,10,415,8],[367,10,416,8],[367,14,416,12,"newState"],[367,22,416,20],[367,23,416,21,"shadowClone"],[367,34,416,32],[367,35,416,33,"remainingTicks"],[367,49,416,47],[367,53,416,51],[367,54,416,52],[367,56,416,54],[368,12,417,10,"console"],[368,19,417,17],[368,20,417,18,"log"],[368,23,417,21],[368,24,417,22],[368,75,417,73],[368,76,417,74],[369,12,418,10,"newState"],[369,20,418,18],[369,21,418,19,"shadowClone"],[369,32,418,30],[369,35,418,33,"undefined"],[369,44,418,42],[370,10,419,8],[370,11,419,9],[370,17,419,15],[371,12,420,10],[372,12,421,10],[373,12,422,10],[373,18,422,16,"CLONE_ATTACK_INTERVAL"],[373,39,422,37],[373,42,422,40],[373,44,422,42],[374,12,423,10],[374,16,423,14,"newState"],[374,24,423,22],[374,25,423,23,"currentTick"],[374,36,423,34],[374,39,423,37,"CLONE_ATTACK_INTERVAL"],[374,60,423,58],[374,65,423,63],[374,66,423,64],[374,70,423,68,"newState"],[374,78,423,76],[374,79,423,77,"enemies"],[374,86,423,84],[374,87,423,85,"length"],[374,93,423,91],[374,96,423,94],[374,97,423,95],[374,99,423,97],[375,14,424,12,"console"],[375,21,424,19],[375,22,424,20,"log"],[375,25,424,23],[375,26,424,24],[375,83,424,81],[375,84,424,82],[377,14,426,12],[378,14,427,12],[378,20,427,18,"target"],[378,26,427,24],[378,29,427,27,"findClosestEnemyInternal"],[378,53,427,51],[378,54,427,52,"newState"],[378,62,427,60],[378,63,427,61,"enemies"],[378,70,427,68],[378,71,427,69],[379,14,428,12],[379,18,428,16,"target"],[379,24,428,22],[379,26,428,24],[380,16,429,14],[381,16,430,14],[381,22,430,20,"cloneDamage"],[381,33,430,31],[381,36,430,34,"Math"],[381,40,430,38],[381,41,430,39,"floor"],[381,46,430,44],[381,47,430,45,"newState"],[381,55,430,53],[381,56,430,54,"playerStats"],[381,67,430,65],[381,68,430,66,"attack"],[381,74,430,72],[381,77,430,75],[381,80,430,78],[381,81,430,79],[383,16,432,14],[384,16,433,14,"createProjectile"],[384,32,433,30],[384,33,433,31,"target"],[384,39,433,37],[384,41,433,39,"cloneDamage"],[384,52,433,50],[384,54,433,52,"newState"],[384,62,433,60],[384,63,433,61,"shadowClone"],[384,74,433,72],[384,75,433,73,"position"],[384,83,433,81],[384,85,433,83],[385,18,434,16,"id"],[385,20,434,18],[385,22,434,20],[385,43,434,41],[386,18,435,16,"name"],[386,22,435,20],[386,24,435,22],[386,45,435,43],[387,18,436,16,"icon"],[387,22,436,20],[387,24,436,22],[388,16,437,14],[388,17,437,15],[388,18,437,16],[389,14,438,12],[390,12,439,10],[391,10,440,8],[392,8,441,6],[394,8,443,6],[395,8,444,6],[396,8,445,6,"console"],[396,15,445,13],[396,16,445,14,"log"],[396,19,445,17],[396,20,445,18],[396,63,445,61,"isManualControlActive"],[396,84,445,82],[396,97,445,95,"game"],[396,101,445,99],[396,102,445,100,"gameState"],[396,111,445,109],[396,112,445,110,"isAlive"],[396,119,445,117],[396,121,445,119],[396,122,445,120],[397,8,446,6],[397,12,446,10],[397,13,446,11,"isManualControlActive"],[397,34,446,32],[397,38,446,36,"game"],[397,42,446,40],[397,43,446,41,"gameState"],[397,52,446,50],[397,53,446,51,"isAlive"],[397,60,446,58],[397,62,446,60],[398,10,447,8],[398,15,447,13],[398,19,447,17,"i"],[398,20,447,18],[398,23,447,21],[398,24,447,22],[398,26,447,24,"i"],[398,27,447,25],[398,30,447,28],[398,31,447,29],[398,33,447,31,"i"],[398,34,447,32],[398,36,447,34],[398,38,447,36],[399,12,448,10],[399,16,448,14,"newState"],[399,24,448,22],[399,25,448,23,"abilityManager"],[399,39,448,37],[399,40,448,38,"isAbilityReady"],[399,54,448,52],[399,55,448,53,"i"],[399,56,448,54],[399,57,448,55],[399,61,448,59,"newState"],[399,69,448,67],[399,70,448,68,"enemies"],[399,77,448,75],[399,78,448,76,"length"],[399,84,448,82],[399,87,448,85],[399,88,448,86],[399,90,448,88],[400,14,449,12],[400,18,449,16,"newState"],[400,26,449,24],[400,27,449,25,"abilityManager"],[400,41,449,39],[400,42,449,40,"useAbility"],[400,52,449,50],[400,53,449,51,"i"],[400,54,449,52],[400,56,449,54,"newTick"],[400,63,449,61],[400,64,449,62],[400,66,449,64],[401,16,450,14,"console"],[401,23,450,21],[401,24,450,22,"log"],[401,27,450,25],[401,28,450,26],[401,73,450,71,"i"],[401,74,450,72],[401,76,450,74],[401,77,450,75],[402,16,451,14,"castAbility"],[402,27,451,25],[402,28,451,26,"newState"],[402,36,451,34],[402,38,451,36,"i"],[402,39,451,37],[402,40,451,38],[403,14,452,12],[404,12,453,10],[405,10,454,8],[406,8,455,6],[408,8,457,6],[409,8,458,6],[409,14,458,12,"dyingEnemies"],[409,26,458,24],[409,29,458,27,"newState"],[409,37,458,35],[409,38,458,36,"enemies"],[409,45,458,43],[409,46,458,44,"filter"],[409,52,458,50],[409,53,458,51,"enemy"],[409,58,458,56],[409,62,458,60,"enemy"],[409,67,458,65],[409,68,458,66,"isDying"],[409,75,458,73],[409,79,458,77,"enemy"],[409,84,458,82],[409,85,458,83,"health"],[409,91,458,89],[409,95,458,93],[409,96,458,94],[409,97,458,95],[410,8,459,6],[410,14,459,12,"deadEnemies"],[410,25,459,23],[410,28,459,26,"newState"],[410,36,459,34],[410,37,459,35,"enemies"],[410,44,459,42],[410,45,459,43,"filter"],[410,51,459,49],[410,52,459,50,"enemy"],[410,57,459,55],[410,61,459,59,"enemy"],[410,66,459,64],[410,67,459,65,"health"],[410,73,459,71],[410,77,459,75],[410,78,459,76],[410,82,459,80],[410,83,459,81,"enemy"],[410,88,459,86],[410,89,459,87,"isDying"],[410,96,459,94],[410,97,459,95],[412,8,461,6],[413,8,462,6,"enemiesToKill"],[413,21,462,19],[413,24,462,22],[413,25,462,23],[413,28,462,26,"deadEnemies"],[413,39,462,37],[413,41,462,39],[413,44,462,42,"dyingEnemies"],[413,56,462,54],[413,57,462,55],[413,58,462,56],[413,59,462,57],[415,8,464,6],[416,8,465,6],[416,14,465,12,"currentTime"],[416,25,465,23],[416,28,465,26,"Date"],[416,32,465,30],[416,33,465,31,"now"],[416,36,465,34],[416,37,465,35],[416,38,465,36],[417,8,466,6,"newState"],[417,16,466,14],[417,17,466,15,"enemies"],[417,24,466,22],[417,27,466,25,"newState"],[417,35,466,33],[417,36,466,34,"enemies"],[417,43,466,41],[417,44,466,42,"filter"],[417,50,466,48],[417,51,466,49,"enemy"],[417,56,466,54],[417,60,466,58],[418,10,467,8],[418,14,467,12,"enemy"],[418,19,467,17],[418,20,467,18,"isDying"],[418,27,467,25],[418,31,467,29,"enemy"],[418,36,467,34],[418,37,467,35,"deathStartTime"],[418,51,467,49],[418,53,467,51],[419,12,468,10],[419,18,468,16,"animationDuration"],[419,35,468,33],[419,38,468,36],[419,41,468,39],[419,42,468,40],[419,43,468,41],[420,12,469,10],[420,18,469,16,"isAnimationComplete"],[420,37,469,35],[420,40,469,38,"currentTime"],[420,51,469,49],[420,54,469,52,"enemy"],[420,59,469,57],[420,60,469,58,"deathStartTime"],[420,74,469,72],[420,78,469,76,"animationDuration"],[420,95,469,93],[421,12,470,10],[421,16,470,14,"isAnimationComplete"],[421,35,470,33],[421,37,470,35],[422,14,471,12,"console"],[422,21,471,19],[422,22,471,20,"log"],[422,25,471,23],[422,26,471,24],[422,58,471,56,"enemy"],[422,63,471,61],[422,64,471,62,"name"],[422,68,471,66],[422,86,471,84,"currentTime"],[422,97,471,95],[422,100,471,98,"enemy"],[422,105,471,103],[422,106,471,104,"deathStartTime"],[422,120,471,118],[422,129,471,127],[422,130,471,128],[423,14,472,12],[423,21,472,19],[423,26,472,24],[423,27,472,25],[423,28,472,26],[424,12,473,10],[425,10,474,8],[426,10,475,8],[426,17,475,15],[426,21,475,19],[426,22,475,20],[426,23,475,21],[427,8,476,6],[427,9,476,7],[427,10,476,8],[429,8,478,6],[430,8,479,6],[430,12,479,10,"deadEnemies"],[430,23,479,21],[430,24,479,22,"length"],[430,30,479,28],[430,33,479,31],[430,34,479,32],[430,36,479,34],[431,10,480,8,"console"],[431,17,480,15],[431,18,480,16,"log"],[431,21,480,19],[431,22,480,20],[431,49,480,47,"deadEnemies"],[431,60,480,58],[431,61,480,59,"length"],[431,67,480,65],[431,83,480,81],[431,85,480,83,"deadEnemies"],[431,96,480,94],[431,97,480,95,"map"],[431,100,480,98],[431,101,480,99,"e"],[431,102,480,100],[431,106,480,104],[431,109,480,107,"e"],[431,110,480,108],[431,111,480,109,"id"],[431,113,480,111],[431,117,480,115,"e"],[431,118,480,116],[431,119,480,117,"health"],[431,125,480,123],[431,130,480,128],[431,131,480,129],[431,132,480,130],[432,8,481,6],[434,8,483,6],[435,8,484,6],[435,14,484,12,"lowHealthEnemies"],[435,30,484,28],[435,33,484,31,"newState"],[435,41,484,39],[435,42,484,40,"enemies"],[435,49,484,47],[435,50,484,48,"filter"],[435,56,484,54],[435,57,484,55,"enemy"],[435,62,484,60],[435,66,484,64,"enemy"],[435,71,484,69],[435,72,484,70,"health"],[435,78,484,76],[435,82,484,80],[435,84,484,82],[435,88,484,86,"enemy"],[435,93,484,91],[435,94,484,92,"health"],[435,100,484,98],[435,103,484,101],[435,104,484,102],[435,105,484,103],[436,8,485,6],[436,12,485,10,"lowHealthEnemies"],[436,28,485,26],[436,29,485,27,"length"],[436,35,485,33],[436,38,485,36],[436,39,485,37],[436,41,485,39],[437,10,486,8,"console"],[437,17,486,15],[437,18,486,16,"log"],[437,21,486,19],[437,22,486,20],[437,61,486,59],[437,63,486,61,"lowHealthEnemies"],[437,79,486,77],[437,80,486,78,"map"],[437,83,486,81],[437,84,486,82,"e"],[437,85,486,83],[437,89,486,87],[437,92,486,90,"e"],[437,93,486,91],[437,94,486,92,"id"],[437,96,486,94],[437,100,486,98,"e"],[437,101,486,99],[437,102,486,100,"health"],[437,108,486,106],[437,112,486,110,"e"],[437,113,486,111],[437,114,486,112,"maxHealth"],[437,123,486,121],[437,128,486,126],[437,129,486,127],[437,130,486,128],[438,8,487,6],[440,8,489,6],[441,8,490,6],[441,14,490,12,"beforeCount"],[441,25,490,23],[441,28,490,26,"newState"],[441,36,490,34],[441,37,490,35,"enemies"],[441,44,490,42],[441,45,490,43,"length"],[441,51,490,49],[442,8,491,6,"newState"],[442,16,491,14],[442,17,491,15,"enemies"],[442,24,491,22],[442,27,491,25,"newState"],[442,35,491,33],[442,36,491,34,"enemies"],[442,43,491,41],[442,44,491,42,"filter"],[442,50,491,48],[442,51,491,49,"enemy"],[442,56,491,54],[442,60,491,58,"enemy"],[442,65,491,63],[442,66,491,64,"health"],[442,72,491,70],[442,75,491,73],[442,76,491,74],[442,77,491,75],[443,8,492,6],[443,14,492,12,"afterCount"],[443,24,492,22],[443,27,492,25,"newState"],[443,35,492,33],[443,36,492,34,"enemies"],[443,43,492,41],[443,44,492,42,"length"],[443,50,492,48],[444,8,494,6],[444,12,494,10,"beforeCount"],[444,23,494,21],[444,28,494,26,"afterCount"],[444,38,494,36],[444,40,494,38],[445,10,495,8,"console"],[445,17,495,15],[445,18,495,16,"log"],[445,21,495,19],[445,22,495,20],[445,52,495,50,"beforeCount"],[445,63,495,61],[445,66,495,64,"afterCount"],[445,76,495,74],[445,102,495,100],[445,103,495,101],[446,8,496,6],[448,8,498,6],[449,8,499,6],[450,8,500,6],[450,14,500,12,"MAX_ENEMIES"],[450,25,500,23],[450,28,500,26],[450,30,500,28],[450,31,500,29],[450,32,500,30],[451,8,501,6],[451,14,501,12,"MIN_SPAWN_DELAY"],[451,29,501,27],[451,32,501,30],[451,35,501,33],[451,36,501,34],[451,37,501,35],[452,8,502,6],[452,14,502,12,"now"],[452,17,502,15],[452,20,502,18,"Date"],[452,24,502,22],[452,25,502,23,"now"],[452,28,502,26],[452,29,502,27],[452,30,502,28],[453,8,503,6],[453,14,503,12,"hasBoss"],[453,21,503,19],[453,24,503,22,"newState"],[453,32,503,30],[453,33,503,31,"enemies"],[453,40,503,38],[453,41,503,39,"some"],[453,45,503,43],[453,46,503,44,"enemy"],[453,51,503,49],[453,55,503,53,"enemy"],[453,60,503,58],[453,61,503,59,"isBoss"],[453,67,503,65],[453,68,503,66],[455,8,505,6],[456,8,506,6],[456,12,506,10],[456,13,506,11,"newState"],[456,21,506,19],[456,22,506,20,"lastSpawnTime"],[456,35,506,33],[456,37,506,35],[457,10,507,8,"newState"],[457,18,507,16],[457,19,507,17,"lastSpawnTime"],[457,32,507,30],[457,35,507,33,"now"],[457,38,507,36],[458,8,508,6],[459,8,510,6,"console"],[459,15,510,13],[459,16,510,14,"log"],[459,19,510,17],[459,20,510,18],[459,53,510,51,"newState"],[459,61,510,59],[459,62,510,60,"enemies"],[459,69,510,67],[459,70,510,68,"length"],[459,76,510,74],[459,85,510,83,"MAX_ENEMIES"],[459,96,510,94],[459,109,510,107,"hasBoss"],[459,116,510,114],[459,118,510,116],[459,119,510,117],[461,8,512,6],[462,8,513,6],[462,12,513,10],[462,13,513,11,"hasBoss"],[462,20,513,18],[462,24,513,22,"newState"],[462,32,513,30],[462,33,513,31,"enemies"],[462,40,513,38],[462,41,513,39,"length"],[462,47,513,45],[462,50,513,48,"MAX_ENEMIES"],[462,61,513,59],[462,65,513,64,"now"],[462,68,513,67],[462,71,513,70,"newState"],[462,79,513,78],[462,80,513,79,"lastSpawnTime"],[462,93,513,92],[462,97,513,97,"MIN_SPAWN_DELAY"],[462,112,513,112],[462,114,513,114],[463,10,514,8,"console"],[463,17,514,15],[463,18,514,16,"log"],[463,21,514,19],[463,22,514,20],[463,43,514,41,"newState"],[463,51,514,49],[463,52,514,50,"enemies"],[463,59,514,57],[463,60,514,58,"length"],[463,66,514,64],[463,69,514,67],[463,70,514,68],[463,74,514,72,"MAX_ENEMIES"],[463,85,514,83],[463,87,514,85],[463,88,514,86],[464,10,515,8,"spawnTestEnemy"],[464,24,515,22],[464,25,515,23,"newState"],[464,33,515,31],[464,34,515,32],[465,10,516,8,"newState"],[465,18,516,16],[465,19,516,17,"lastSpawnTime"],[465,32,516,30],[465,35,516,33,"now"],[465,38,516,36],[466,8,517,6],[467,8,519,6],[467,15,519,13,"newState"],[467,23,519,21],[468,6,520,4],[468,7,520,5],[468,47,520,6],[470,6,522,4],[471,6,523,4,"console"],[471,13,523,11],[471,14,523,12,"log"],[471,17,523,15],[471,18,523,16],[471,50,523,48,"enemiesToKill"],[471,63,523,61],[471,64,523,62,"length"],[471,70,523,68],[471,101,523,99],[471,102,523,100],[472,6,525,4,"enemiesToKill"],[472,19,525,17],[472,20,525,18,"forEach"],[472,27,525,25],[472,28,525,26],[472,29,525,27,"enemy"],[472,34,525,32],[472,36,525,34,"index"],[472,41,525,39],[472,46,525,44],[473,8,526,6,"console"],[473,15,526,13],[473,16,526,14,"log"],[473,19,526,17],[473,20,526,18],[473,57,526,55,"index"],[473,62,526,60],[473,65,526,63],[473,66,526,64],[473,70,526,68,"enemiesToKill"],[473,83,526,81],[473,84,526,82,"length"],[473,90,526,88],[473,104,526,102,"enemy"],[473,109,526,107],[473,110,526,108,"id"],[473,112,526,110],[473,114,526,112],[473,115,526,113],[474,8,527,6,"handleEnemyKill"],[474,23,527,21],[474,24,527,22,"enemy"],[474,29,527,27],[474,30,527,28],[475,6,528,4],[475,7,528,5],[475,8,528,6],[476,4,529,2],[476,5,529,3],[476,7,529,5],[476,8,529,6,"handleEnemyKill"],[476,23,529,21],[476,24,529,22],[476,25,529,23],[476,26,529,24],[476,27,529,25],[478,4,531,2],[479,4,532,2],[479,10,532,8,"findClosestEnemyInternal"],[479,34,532,32],[479,37,532,36,"enemies"],[479,44,532,58],[479,48,532,83],[480,6,533,4],[480,10,533,8,"enemies"],[480,17,533,15],[480,18,533,16,"length"],[480,24,533,22],[480,29,533,27],[480,30,533,28],[480,32,533,30],[480,39,533,37],[480,43,533,41],[482,6,535,4],[483,6,536,4],[483,12,536,10,"SCREEN_WIDTH"],[483,24,536,22],[483,27,536,25],[483,30,536,28],[484,6,537,4],[484,12,537,10,"GAME_AREA_HEIGHT"],[484,28,537,26],[484,31,537,29],[484,34,537,32],[484,37,537,35],[484,40,537,38],[484,41,537,39],[484,42,537,40],[485,6,538,4],[485,12,538,10,"ninjaX"],[485,18,538,16],[485,21,538,19,"SCREEN_WIDTH"],[485,33,538,31],[485,36,538,34],[485,37,538,35],[486,6,539,4],[486,12,539,10,"ninjaY"],[486,18,539,16],[486,21,539,19,"GAME_AREA_HEIGHT"],[486,37,539,35],[486,40,539,38],[486,41,539,39],[487,6,541,4],[487,10,541,8,"closestEnemy"],[487,22,541,20],[487,25,541,23,"enemies"],[487,32,541,30],[487,33,541,31],[487,34,541,32],[487,35,541,33],[488,6,542,4],[488,10,542,8,"closestDistance"],[488,25,542,23],[488,28,542,26,"Infinity"],[488,36,542,34],[489,6,544,4,"enemies"],[489,13,544,11],[489,14,544,12,"forEach"],[489,21,544,19],[489,22,544,20,"enemy"],[489,27,544,25],[489,31,544,29],[490,8,545,6],[490,14,545,12,"distance"],[490,22,545,20],[490,25,545,23,"Math"],[490,29,545,27],[490,30,545,28,"sqrt"],[490,34,545,32],[490,35,546,8,"Math"],[490,39,546,12],[490,40,546,13,"pow"],[490,43,546,16],[490,44,546,17,"enemy"],[490,49,546,22],[490,50,546,23,"position"],[490,58,546,31],[490,59,546,32,"x"],[490,60,546,33],[490,63,546,36,"ninjaX"],[490,69,546,42],[490,71,546,44],[490,72,546,45],[490,73,546,46],[490,76,547,8,"Math"],[490,80,547,12],[490,81,547,13,"pow"],[490,84,547,16],[490,85,547,17,"enemy"],[490,90,547,22],[490,91,547,23,"position"],[490,99,547,31],[490,100,547,32,"y"],[490,101,547,33],[490,104,547,36,"ninjaY"],[490,110,547,42],[490,112,547,44],[490,113,547,45],[490,114,548,6],[490,115,548,7],[491,8,550,6],[491,12,550,10,"distance"],[491,20,550,18],[491,23,550,21,"closestDistance"],[491,38,550,36],[491,40,550,38],[492,10,551,8,"closestDistance"],[492,25,551,23],[492,28,551,26,"distance"],[492,36,551,34],[493,10,552,8,"closestEnemy"],[493,22,552,20],[493,25,552,23,"enemy"],[493,30,552,28],[494,8,553,6],[495,6,554,4],[495,7,554,5],[495,8,554,6],[496,6,556,4,"console"],[496,13,556,11],[496,14,556,12,"log"],[496,17,556,15],[496,18,556,16],[496,60,556,58,"closestDistance"],[496,75,556,73],[496,76,556,74,"toFixed"],[496,83,556,81],[496,84,556,82],[496,85,556,83],[496,86,556,84],[496,88,556,86],[496,89,556,87],[497,6,557,4],[497,13,557,11,"closestEnemy"],[497,25,557,23],[498,4,558,2],[498,5,558,3],[500,4,560,2],[501,4,561,2],[501,10,561,8,"findClosestEnemy"],[501,26,561,24],[501,29,561,27,"findClosestEnemy"],[501,30,561,27],[501,35,561,53],[502,6,562,4],[502,13,562,11,"findClosestEnemyInternal"],[502,37,562,35],[502,38,562,36,"combatState"],[502,49,562,47],[502,50,562,48,"enemies"],[502,57,562,55],[502,58,562,56],[503,4,563,2],[503,5,563,3],[505,4,565,2],[506,4,566,2],[506,10,566,8],[506,11,566,9,"currentNinjaPosition"],[506,31,566,29],[506,33,566,31,"setCurrentNinjaPosition"],[506,56,566,54],[506,57,566,55],[506,60,566,58],[506,64,566,58,"useState"],[506,70,566,66],[506,71,566,66,"useState"],[506,79,566,66],[506,81,566,91],[507,6,566,93,"x"],[507,7,566,94],[507,9,566,96],[507,10,566,97],[508,6,566,99,"y"],[508,7,566,100],[508,9,566,102],[509,4,566,104],[509,5,566,105],[509,6,566,106],[510,4,567,2],[510,10,567,8],[510,11,567,9,"isManualControlActive"],[510,32,567,30],[510,34,567,32,"setIsManualControlActive"],[510,58,567,56],[510,59,567,57],[510,62,567,60],[510,66,567,60,"useState"],[510,72,567,68],[510,73,567,68,"useState"],[510,81,567,68],[510,83,567,69],[510,88,567,74],[510,89,567,75],[512,4,569,2],[513,4,570,2],[513,10,570,8,"updateNinjaPosition"],[513,29,570,27],[513,32,570,30],[513,36,570,30,"useCallback"],[513,42,570,41],[513,43,570,41,"useCallback"],[513,54,570,41],[513,56,570,43,"newPosition"],[513,67,570,78],[513,71,570,83],[514,6,571,4,"setCurrentNinjaPosition"],[514,29,571,27],[514,30,571,28,"newPosition"],[514,41,571,39],[514,42,571,40],[515,4,572,2],[515,5,572,3],[515,7,572,5],[515,9,572,7],[515,10,572,8],[517,4,574,2],[518,4,575,2],[518,10,575,8,"setManualControlActive"],[518,32,575,30],[518,35,575,33],[518,39,575,33,"useCallback"],[518,45,575,44],[518,46,575,44,"useCallback"],[518,57,575,44],[518,59,575,46,"active"],[518,65,575,61],[518,69,575,66],[519,6,576,4,"setIsManualControlActive"],[519,30,576,28],[519,31,576,29,"active"],[519,37,576,35],[519,38,576,36],[520,6,577,4,"console"],[520,13,577,11],[520,14,577,12,"log"],[520,17,577,15],[520,18,577,16],[520,39,577,37,"active"],[520,45,577,43],[520,48,577,46],[520,59,577,57],[520,62,577,60],[520,75,577,73],[520,88,577,86,"active"],[520,94,577,92],[520,97,577,95],[520,105,577,103],[520,108,577,106],[520,117,577,115],[520,119,577,117],[520,120,577,118],[521,4,578,2],[521,5,578,3],[521,7,578,5],[521,9,578,7],[521,10,578,8],[523,4,580,2],[524,4,581,2],[524,10,581,8,"handleProjectileHit"],[524,29,581,27],[524,32,581,31,"projectile"],[524,42,581,59],[524,46,581,64],[525,6,582,4,"console"],[525,13,582,11],[525,14,582,12,"log"],[525,17,582,15],[525,18,582,16],[525,35,582,33,"projectile"],[525,45,582,43],[525,46,582,44,"id"],[525,48,582,46],[525,62,582,60,"projectile"],[525,72,582,70],[525,73,582,71,"targetEnemyId"],[525,86,582,84],[525,94,582,92,"projectile"],[525,104,582,102],[525,105,582,103,"damage"],[525,111,582,109],[525,120,582,118],[525,121,582,119],[526,6,584,4,"setCombatState"],[526,20,584,18],[526,21,584,19,"prev"],[526,25,584,23],[526,29,584,27],[527,8,585,6],[527,14,585,12,"newState"],[527,22,585,20],[527,25,585,23],[528,10,585,25],[528,13,585,28,"prev"],[529,8,585,33],[529,9,585,34],[531,8,587,6],[532,8,588,6],[532,14,588,12,"enemyIndex"],[532,24,588,22],[532,27,588,25,"newState"],[532,35,588,33],[532,36,588,34,"enemies"],[532,43,588,41],[532,44,588,42,"findIndex"],[532,53,588,51],[532,54,588,52,"e"],[532,55,588,53],[532,59,588,57,"e"],[532,60,588,58],[532,61,588,59,"id"],[532,63,588,61],[532,68,588,66,"projectile"],[532,78,588,76],[532,79,588,77,"targetEnemyId"],[532,92,588,90],[532,93,588,91],[533,8,589,6],[533,12,589,10,"enemyIndex"],[533,22,589,20],[533,26,589,24],[533,27,589,25],[533,29,589,27],[534,10,590,8,"newState"],[534,18,590,16],[534,19,590,17,"enemies"],[534,26,590,24],[534,29,590,27],[534,30,590,28],[534,33,590,31,"newState"],[534,41,590,39],[534,42,590,40,"enemies"],[534,49,590,47],[534,50,590,48],[535,10,591,8,"newState"],[535,18,591,16],[535,19,591,17,"enemies"],[535,26,591,24],[535,27,591,25,"enemyIndex"],[535,37,591,35],[535,38,591,36],[535,41,591,39],[536,12,592,10],[536,15,592,13,"newState"],[536,23,592,21],[536,24,592,22,"enemies"],[536,31,592,29],[536,32,592,30,"enemyIndex"],[536,42,592,40],[536,43,592,41],[537,12,593,10,"health"],[537,18,593,16],[537,20,593,18,"newState"],[537,28,593,26],[537,29,593,27,"enemies"],[537,36,593,34],[537,37,593,35,"enemyIndex"],[537,47,593,45],[537,48,593,46],[537,49,593,47,"health"],[537,55,593,53],[537,58,593,56,"projectile"],[537,68,593,66],[537,69,593,67,"damage"],[537,75,593,73],[538,12,594,10,"lastDamaged"],[538,23,594,21],[538,25,594,23,"combatEngine"],[538,44,594,35],[538,45,594,35,"combatEngine"],[538,57,594,35],[538,58,594,36,"getCurrentTick"],[538,72,594,50],[538,73,594,51],[539,10,595,8],[539,11,595,9],[540,10,597,8,"console"],[540,17,597,15],[540,18,597,16,"log"],[540,21,597,19],[540,22,597,20],[540,34,597,32,"projectile"],[540,44,597,42],[540,45,597,43,"targetEnemyId"],[540,58,597,56],[540,70,597,68,"newState"],[540,78,597,76],[540,79,597,77,"enemies"],[540,86,597,84],[540,87,597,85,"enemyIndex"],[540,97,597,95],[540,98,597,96],[540,99,597,97,"health"],[540,105,597,103],[540,109,597,107,"newState"],[540,117,597,115],[540,118,597,116,"enemies"],[540,125,597,123],[540,126,597,124,"enemyIndex"],[540,136,597,134],[540,137,597,135],[540,138,597,136,"maxHealth"],[540,147,597,145],[540,149,597,147],[540,150,597,148],[541,8,598,6],[542,8,600,6],[542,15,600,13,"newState"],[542,23,600,21],[543,6,601,4],[543,7,601,5],[543,8,601,6],[545,6,603,4],[546,6,604,4,"setProjectiles"],[546,20,604,18],[546,21,604,19,"prev"],[546,25,604,23],[546,29,604,27,"prev"],[546,33,604,31],[546,34,604,32,"filter"],[546,40,604,38],[546,41,604,39,"p"],[546,42,604,40],[546,46,604,44,"p"],[546,47,604,45],[546,48,604,46,"id"],[546,50,604,48],[546,55,604,53,"projectile"],[546,65,604,63],[546,66,604,64,"id"],[546,68,604,66],[546,69,604,67],[546,70,604,68],[547,4,605,2],[547,5,605,3],[549,4,607,2],[550,4,608,2],[550,10,608,8,"castAbility"],[550,21,608,19],[550,24,608,22,"castAbility"],[550,25,608,23,"state"],[550,30,608,41],[550,32,608,43,"slotIndex"],[550,41,608,60],[550,46,608,65],[551,6,609,4],[551,12,609,10,"deck"],[551,16,609,14],[551,19,609,17,"state"],[551,24,609,22],[551,25,609,23,"abilityManager"],[551,39,609,37],[551,40,609,38,"getDeck"],[551,47,609,45],[551,48,609,46],[551,49,609,47],[552,6,610,4],[552,12,610,10,"ability"],[552,19,610,17],[552,22,610,20,"deck"],[552,26,610,24],[552,27,610,25,"slots"],[552,32,610,30],[552,33,610,31,"slotIndex"],[552,42,610,40],[552,43,610,41],[553,6,611,4],[553,10,611,8],[553,11,611,9,"ability"],[553,18,611,16],[553,20,611,18],[554,6,613,4,"console"],[554,13,613,11],[554,14,613,12,"log"],[554,17,613,15],[554,18,613,16],[554,43,613,41,"ability"],[554,50,613,48],[554,51,613,49,"id"],[554,53,613,51],[554,67,613,65,"slotIndex"],[554,76,613,74],[554,78,613,76],[554,79,613,77],[556,6,615,4],[557,6,616,4],[557,10,616,8,"damage"],[557,16,616,14],[557,19,616,17,"ability"],[557,26,616,24],[557,27,616,25,"stats"],[557,32,616,30],[557,33,616,31,"baseDamage"],[557,43,616,41],[559,6,618,4],[560,6,619,4,"deck"],[560,10,619,8],[560,11,619,9,"activeSynergies"],[560,26,619,24],[560,27,619,25,"forEach"],[560,34,619,32],[560,35,619,33,"synergy"],[560,42,619,40],[560,46,619,44],[561,8,620,6],[561,12,620,10,"synergy"],[561,19,620,17],[561,20,620,18,"bonus"],[561,25,620,23],[561,26,620,24,"damageBonus"],[561,37,620,35],[561,41,621,10,"synergy"],[561,48,621,17],[561,49,621,18,"requiredTags"],[561,61,621,30],[561,62,621,31,"some"],[561,66,621,35],[561,67,621,36,"tag"],[561,70,621,39],[561,74,621,43,"ability"],[561,81,621,50],[561,82,621,51,"tags"],[561,86,621,55],[561,87,621,56,"includes"],[561,95,621,64],[561,96,621,65,"tag"],[561,99,621,68],[561,100,621,69],[561,101,621,70],[561,103,621,72],[562,10,622,8,"damage"],[562,16,622,14],[562,20,622,19],[562,21,622,20],[562,24,622,23,"synergy"],[562,31,622,30],[562,32,622,31,"bonus"],[562,37,622,36],[562,38,622,37,"damageBonus"],[562,49,622,48],[562,52,622,51],[562,55,622,55],[563,8,623,6],[564,6,624,4],[564,7,624,5],[564,8,624,6],[566,6,626,4],[567,6,627,4],[567,12,627,10,"isAOE"],[567,17,627,15],[567,20,627,18,"ability"],[567,27,627,25],[567,28,627,26,"effects"],[567,35,627,33],[567,36,627,34,"includes"],[567,44,627,42],[567,45,627,43],[567,50,627,48],[567,51,627,49],[567,55,627,53,"ability"],[567,62,627,60],[567,63,627,61,"stats"],[567,68,627,66],[567,69,627,67,"aoeRadius"],[567,78,627,76],[568,6,628,4,"console"],[568,13,628,11],[568,14,628,12,"log"],[568,17,628,15],[568,18,628,16],[568,39,628,37,"ability"],[568,46,628,44],[568,47,628,45,"name"],[568,51,628,49],[568,66,628,64,"JSON"],[568,70,628,68],[568,71,628,69,"stringify"],[568,80,628,78],[568,81,628,79,"ability"],[568,88,628,86],[568,89,628,87,"effects"],[568,96,628,94],[568,97,628,95],[568,113,628,111,"ability"],[568,120,628,118],[568,121,628,119,"stats"],[568,126,628,124],[568,127,628,125,"aoeRadius"],[568,136,628,134],[568,148,628,146,"isAOE"],[568,153,628,151],[568,155,628,153],[568,156,628,154],[569,6,630,4],[569,10,630,8,"isAOE"],[569,15,630,13],[569,17,630,15],[570,8,631,6,"console"],[570,15,631,13],[570,16,631,14,"log"],[570,19,631,17],[570,20,631,18],[570,39,631,37,"ability"],[570,46,631,44],[570,47,631,45,"name"],[570,51,631,49],[570,67,631,65,"ability"],[570,74,631,72],[570,75,631,73,"stats"],[570,80,631,78],[570,81,631,79,"aoeRadius"],[570,90,631,88],[570,92,631,90],[570,93,631,91],[572,8,633,6],[573,8,634,6],[574,8,635,6],[574,14,635,12,"ninjaX"],[574,20,635,18],[574,23,635,21,"currentNinjaPosition"],[574,43,635,41],[574,44,635,42,"x"],[574,45,635,43],[574,48,635,46],[574,50,635,48],[574,51,635,49],[574,52,635,50],[575,8,636,6],[575,14,636,12,"ninjaY"],[575,20,636,18],[575,23,636,21,"currentNinjaPosition"],[575,43,636,41],[575,44,636,42,"y"],[575,45,636,43],[575,48,636,46],[575,50,636,48],[576,8,637,6],[576,14,637,12,"aoeRadius"],[576,23,637,21],[576,26,637,24,"ability"],[576,33,637,31],[576,34,637,32,"stats"],[576,39,637,37],[576,40,637,38,"aoeRadius"],[576,49,637,47],[577,8,639,6],[577,14,639,12,"enemiesInRange"],[577,28,639,26],[577,31,639,29,"state"],[577,36,639,34],[577,37,639,35,"enemies"],[577,44,639,42],[577,45,639,43,"filter"],[577,51,639,49],[577,52,639,50,"enemy"],[577,57,639,55],[577,61,639,59],[578,10,640,8],[578,16,640,14,"enemyX"],[578,22,640,20],[578,25,640,23,"enemy"],[578,30,640,28],[578,31,640,29,"position"],[578,39,640,37],[578,40,640,38,"x"],[578,41,640,39],[578,44,640,42],[578,48,640,46],[578,49,640,47],[578,50,640,48],[579,10,641,8],[579,16,641,14,"enemyY"],[579,22,641,20],[579,25,641,23,"enemy"],[579,30,641,28],[579,31,641,29,"position"],[579,39,641,37],[579,40,641,38,"y"],[579,41,641,39],[579,44,641,42],[579,48,641,46],[580,10,642,8],[580,16,642,14,"distance"],[580,24,642,22],[580,27,642,25,"Math"],[580,31,642,29],[580,32,642,30,"sqrt"],[580,36,642,34],[580,37,642,35,"Math"],[580,41,642,39],[580,42,642,40,"pow"],[580,45,642,43],[580,46,642,44,"enemyX"],[580,52,642,50],[580,55,642,53,"ninjaX"],[580,61,642,59],[580,63,642,61],[580,64,642,62],[580,65,642,63],[580,68,642,66,"Math"],[580,72,642,70],[580,73,642,71,"pow"],[580,76,642,74],[580,77,642,75,"enemyY"],[580,83,642,81],[580,86,642,84,"ninjaY"],[580,92,642,90],[580,94,642,92],[580,95,642,93],[580,96,642,94],[580,97,642,95],[581,10,643,8],[581,17,643,15,"distance"],[581,25,643,23],[581,29,643,27,"aoeRadius"],[581,38,643,36],[582,8,644,6],[582,9,644,7],[582,10,644,8],[583,8,646,6,"console"],[583,15,646,13],[583,16,646,14,"log"],[583,19,646,17],[583,20,646,18],[583,45,646,43,"enemiesInRange"],[583,59,646,57],[583,60,646,58,"length"],[583,66,646,64],[583,88,646,86,"aoeRadius"],[583,97,646,95],[583,107,646,105],[583,108,646,106],[585,8,648,6],[586,8,649,6,"enemiesInRange"],[586,22,649,20],[586,23,649,21,"forEach"],[586,30,649,28],[586,31,649,29,"enemy"],[586,36,649,34],[586,40,649,38],[587,10,650,8],[587,16,650,14,"damageResult"],[587,28,650,26],[587,31,650,29,"DamageCalculator"],[587,50,650,45],[587,51,650,45,"DamageCalculator"],[587,67,650,45],[587,68,650,46,"calculateDamage"],[587,83,650,61],[587,84,650,62,"damage"],[587,90,650,68],[587,92,650,70,"state"],[587,97,650,75],[587,98,650,76,"playerStats"],[587,109,650,87],[587,111,650,89,"enemy"],[587,116,650,94],[587,117,650,95,"stats"],[587,122,650,100],[587,123,650,101],[588,10,651,8,"createProjectile"],[588,26,651,24],[588,27,651,25,"enemy"],[588,32,651,30],[588,34,651,32,"damageResult"],[588,46,651,44],[588,47,651,45,"damage"],[588,53,651,51],[588,55,651,53,"currentNinjaPosition"],[588,75,651,73],[588,77,651,75],[589,12,652,10,"id"],[589,14,652,12],[589,16,652,14,"ability"],[589,23,652,21],[589,24,652,22,"id"],[589,26,652,24],[590,12,653,10,"name"],[590,16,653,14],[590,18,653,16,"ability"],[590,25,653,23],[590,26,653,24,"name"],[590,30,653,28],[591,12,654,10,"icon"],[591,16,654,14],[591,18,654,16,"ability"],[591,25,654,23],[591,26,654,24,"icon"],[592,10,655,8],[592,11,655,9],[592,12,655,10],[593,10,656,8,"console"],[593,17,656,15],[593,18,656,16,"log"],[593,21,656,19],[593,22,656,20],[593,37,656,35,"enemy"],[593,42,656,40],[593,43,656,41,"name"],[593,47,656,45],[593,55,656,53,"damageResult"],[593,67,656,65],[593,68,656,66,"damage"],[593,74,656,72],[593,83,656,81],[593,84,656,82],[595,10,658,8],[596,10,659,8],[596,14,659,12,"damageResult"],[596,26,659,24],[596,27,659,25,"damage"],[596,33,659,31],[596,37,659,35,"enemy"],[596,42,659,40],[596,43,659,41,"health"],[596,49,659,47],[596,51,659,49],[597,12,660,10,"console"],[597,19,660,17],[597,20,660,18,"log"],[597,23,660,21],[597,24,660,22],[597,67,660,65,"enemy"],[597,72,660,70],[597,73,660,71,"name"],[597,77,660,75],[597,90,660,88,"damageResult"],[597,102,660,100],[597,103,660,101,"damage"],[597,109,660,107],[597,124,660,122,"enemy"],[597,129,660,127],[597,130,660,128,"health"],[597,136,660,134],[597,139,660,137],[597,140,660,138],[598,10,661,8],[599,8,662,6],[599,9,662,7],[599,10,662,8],[600,8,664,6,"console"],[600,15,664,13],[600,16,664,14,"log"],[600,19,664,17],[600,20,664,18],[600,26,664,24,"ability"],[600,33,664,31],[600,34,664,32,"name"],[600,38,664,36],[600,56,664,54,"enemiesInRange"],[600,70,664,68],[600,71,664,69,"length"],[600,77,664,75],[600,93,664,91,"damage"],[600,99,664,97],[600,118,664,116],[600,119,664,117],[601,6,666,4],[601,7,666,5],[601,13,666,11],[602,8,667,6],[603,8,668,6],[603,14,668,12,"target"],[603,20,668,18],[603,23,668,21,"findClosestEnemyInternal"],[603,47,668,45],[603,48,668,46,"state"],[603,53,668,51],[603,54,668,52,"enemies"],[603,61,668,59],[603,62,668,60],[604,8,669,6],[604,12,669,10],[604,13,669,11,"target"],[604,19,669,17],[604,21,669,19],[605,8,671,6],[605,14,671,12,"damageResult"],[605,26,671,24],[605,29,671,27,"DamageCalculator"],[605,48,671,43],[605,49,671,43,"DamageCalculator"],[605,65,671,43],[605,66,671,44,"calculateDamage"],[605,81,671,59],[605,82,671,60,"damage"],[605,88,671,66],[605,90,671,68,"state"],[605,95,671,73],[605,96,671,74,"playerStats"],[605,107,671,85],[605,109,671,87,"target"],[605,115,671,93],[605,116,671,94,"stats"],[605,121,671,99],[605,122,671,100],[607,8,673,6],[608,8,674,6,"console"],[608,15,674,13],[608,16,674,14,"log"],[608,19,674,17],[608,20,674,18],[608,71,674,69,"target"],[608,77,674,75],[608,78,674,76,"name"],[608,82,674,80],[608,91,674,89,"damageResult"],[608,103,674,101],[608,104,674,102,"damage"],[608,110,674,108],[608,119,674,117],[608,120,674,118],[609,8,675,6,"createProjectile"],[609,24,675,22],[609,25,675,23,"target"],[609,31,675,29],[609,33,675,31,"damageResult"],[609,45,675,43],[609,46,675,44,"damage"],[609,52,675,50],[609,54,675,52,"currentNinjaPosition"],[609,74,675,72],[609,76,675,74],[610,10,676,8,"id"],[610,12,676,10],[610,14,676,12,"ability"],[610,21,676,19],[610,22,676,20,"id"],[610,24,676,22],[611,10,677,8,"name"],[611,14,677,12],[611,16,677,14,"ability"],[611,23,677,21],[611,24,677,22,"name"],[611,28,677,26],[612,10,678,8,"icon"],[612,14,678,12],[612,16,678,14,"ability"],[612,23,678,21],[612,24,678,22,"icon"],[613,8,679,6],[613,9,679,7],[613,10,679,8],[614,8,681,6,"console"],[614,15,681,13],[614,16,681,14,"log"],[614,19,681,17],[614,20,681,18],[614,26,681,24,"ability"],[614,33,681,31],[614,34,681,32,"name"],[614,38,681,36],[614,66,681,64,"damageResult"],[614,78,681,76],[614,79,681,77,"damage"],[614,85,681,83],[614,95,681,93,"damageResult"],[614,107,681,105],[614,108,681,106,"isCritical"],[614,118,681,116],[614,121,681,119],[614,131,681,129],[614,134,681,132],[614,136,681,134],[614,138,681,136],[614,139,681,137],[616,8,683,6],[617,8,684,6],[617,12,684,10,"damageResult"],[617,24,684,22],[617,25,684,23,"damage"],[617,31,684,29],[617,35,684,33,"target"],[617,41,684,39],[617,42,684,40,"health"],[617,48,684,46],[617,50,684,48],[618,10,685,8,"console"],[618,17,685,15],[618,18,685,16,"log"],[618,21,685,19],[618,22,685,20],[618,75,685,73,"target"],[618,81,685,79],[618,82,685,80,"name"],[618,86,685,84],[618,99,685,97,"damageResult"],[618,111,685,109],[618,112,685,110,"damage"],[618,118,685,116],[618,133,685,131,"target"],[618,139,685,137],[618,140,685,138,"health"],[618,146,685,144],[618,149,685,147],[618,150,685,148],[619,8,686,6],[620,6,687,4],[622,6,689,4],[623,6,690,4],[623,10,690,8,"ability"],[623,17,690,15],[623,18,690,16,"effects"],[623,25,690,23],[623,26,690,24,"includes"],[623,34,690,32],[623,35,690,33],[623,40,690,38],[623,41,690,39],[623,45,690,43,"ability"],[623,52,690,50],[623,53,690,51,"stats"],[623,58,690,56],[623,59,690,57,"duration"],[623,67,690,65],[623,69,690,67],[624,8,691,6],[624,14,691,12,"targets"],[624,21,691,19],[624,24,691,22,"isAOE"],[624,29,691,27],[624,32,692,8,"state"],[624,37,692,13],[624,38,692,14,"enemies"],[624,45,692,21],[624,46,692,22,"filter"],[624,52,692,28],[624,53,692,29,"enemy"],[624,58,692,34],[624,62,692,38],[625,10,693,10],[625,16,693,16,"ninjaX"],[625,22,693,22],[625,25,693,25,"currentNinjaPosition"],[625,45,693,45],[625,46,693,46,"x"],[625,47,693,47],[625,50,693,50],[625,52,693,52],[626,10,694,10],[626,16,694,16,"ninjaY"],[626,22,694,22],[626,25,694,25,"currentNinjaPosition"],[626,45,694,45],[626,46,694,46,"y"],[626,47,694,47],[626,50,694,50],[626,52,694,52],[627,10,695,10],[627,16,695,16,"enemyX"],[627,22,695,22],[627,25,695,25,"enemy"],[627,30,695,30],[627,31,695,31,"position"],[627,39,695,39],[627,40,695,40,"x"],[627,41,695,41],[627,44,695,44],[627,48,695,48],[628,10,696,10],[628,16,696,16,"enemyY"],[628,22,696,22],[628,25,696,25,"enemy"],[628,30,696,30],[628,31,696,31,"position"],[628,39,696,39],[628,40,696,40,"y"],[628,41,696,41],[628,44,696,44],[628,48,696,48],[629,10,697,10],[629,16,697,16,"distance"],[629,24,697,24],[629,27,697,27,"Math"],[629,31,697,31],[629,32,697,32,"sqrt"],[629,36,697,36],[629,37,697,37,"Math"],[629,41,697,41],[629,42,697,42,"pow"],[629,45,697,45],[629,46,697,46,"enemyX"],[629,52,697,52],[629,55,697,55,"ninjaX"],[629,61,697,61],[629,63,697,63],[629,64,697,64],[629,65,697,65],[629,68,697,68,"Math"],[629,72,697,72],[629,73,697,73,"pow"],[629,76,697,76],[629,77,697,77,"enemyY"],[629,83,697,83],[629,86,697,86,"ninjaY"],[629,92,697,92],[629,94,697,94],[629,95,697,95],[629,96,697,96],[629,97,697,97],[630,10,698,10],[630,17,698,17,"distance"],[630,25,698,25],[630,29,698,29,"ability"],[630,36,698,36],[630,37,698,37,"stats"],[630,42,698,42],[630,43,698,43,"aoeRadius"],[630,52,698,52],[631,8,699,8],[631,9,699,9],[631,10,699,10],[631,13,700,8],[631,14,700,9,"findClosestEnemyInternal"],[631,38,700,33],[631,39,700,34,"state"],[631,44,700,39],[631,45,700,40,"enemies"],[631,52,700,47],[631,53,700,48],[631,54,700,49],[631,55,700,50,"filter"],[631,61,700,56],[631,62,700,57,"Boolean"],[631,69,700,64],[631,70,700,65],[632,8,702,6,"targets"],[632,15,702,13],[632,16,702,14,"forEach"],[632,23,702,21],[632,24,702,22,"target"],[632,30,702,28],[632,34,702,32],[633,10,703,8,"state"],[633,15,703,13],[633,16,703,14,"statusEffects"],[633,29,703,27],[633,30,703,28,"addEffect"],[633,39,703,37],[633,40,703,38,"target"],[633,46,703,44],[633,47,703,45,"id"],[633,49,703,47],[633,51,703,49],[634,12,704,10,"id"],[634,14,704,12],[634,16,704,14],[634,19,704,17,"ability"],[634,26,704,24],[634,27,704,25,"id"],[634,29,704,27],[634,35,704,33],[635,12,705,10,"type"],[635,16,705,14],[635,18,705,16],[635,23,705,21],[636,12,706,10,"remainingTicks"],[636,26,706,24],[636,28,706,26,"Math"],[636,32,706,30],[636,33,706,31,"floor"],[636,38,706,36],[636,39,706,37,"ability"],[636,46,706,44],[636,47,706,45,"stats"],[636,52,706,50],[636,53,706,51,"duration"],[636,61,706,59],[636,64,706,62],[636,66,706,64],[636,67,706,65],[637,12,707,10,"tickInterval"],[637,24,707,22],[637,26,707,24],[637,28,707,26],[638,12,708,10,"lastTick"],[638,20,708,18],[638,22,708,20,"state"],[638,27,708,25],[638,28,708,26,"currentTick"],[638,39,708,37],[639,12,709,10,"value"],[639,17,709,15],[639,19,709,17,"Math"],[639,23,709,21],[639,24,709,22,"floor"],[639,29,709,27],[639,30,709,28,"damage"],[639,36,709,34],[639,39,709,37],[639,42,709,40],[639,43,709,41],[640,12,710,10,"stackable"],[640,21,710,19],[640,23,710,21],[641,10,711,8],[641,11,711,9],[641,12,711,10],[642,8,712,6],[642,9,712,7],[642,10,712,8],[643,6,713,4],[645,6,715,4],[646,6,716,4],[646,10,716,8,"ability"],[646,17,716,15],[646,18,716,16,"effects"],[646,25,716,23],[646,26,716,24,"includes"],[646,34,716,32],[646,35,716,33],[646,41,716,39],[646,42,716,40],[646,46,716,44,"ability"],[646,53,716,51],[646,54,716,52,"id"],[646,56,716,54],[646,61,716,59],[646,75,716,73],[646,77,716,75],[647,8,717,6,"console"],[647,15,717,13],[647,16,717,14,"log"],[647,19,717,17],[647,20,717,18],[647,66,717,64,"ability"],[647,73,717,71],[647,74,717,72,"stats"],[647,79,717,77],[647,80,717,78,"duration"],[647,88,717,86],[647,98,717,96],[647,99,717,97],[649,8,719,6],[650,8,720,6],[650,14,720,12,"cloneX"],[650,20,720,18],[650,23,720,21,"currentNinjaPosition"],[650,43,720,41],[650,44,720,42,"x"],[650,45,720,43],[650,48,720,46],[650,50,720,48],[650,51,720,49],[650,52,720,50],[651,8,721,6],[651,14,721,12,"cloneY"],[651,20,721,18],[651,23,721,21,"currentNinjaPosition"],[651,43,721,41],[651,44,721,42,"y"],[651,45,721,43],[651,48,721,46],[651,50,721,48],[651,51,721,49],[651,52,721,50],[653,8,723,6,"state"],[653,13,723,11],[653,14,723,12,"shadowClone"],[653,25,723,23],[653,28,723,26],[654,10,724,8,"id"],[654,12,724,10],[654,14,724,12],[654,30,724,28,"Date"],[654,34,724,32],[654,35,724,33,"now"],[654,38,724,36],[654,39,724,37],[654,40,724,38],[654,42,724,40],[655,10,725,8,"remainingTicks"],[655,24,725,22],[655,26,725,24,"Math"],[655,30,725,28],[655,31,725,29,"floor"],[655,36,725,34],[655,37,725,35,"ability"],[655,44,725,42],[655,45,725,43,"stats"],[655,50,725,48],[655,51,725,49,"duration"],[655,59,725,57],[655,62,725,60],[655,64,725,62],[655,65,725,63],[656,10,725,65],[657,10,726,8,"position"],[657,18,726,16],[657,20,726,18],[658,12,726,20,"x"],[658,13,726,21],[658,15,726,23,"cloneX"],[658,21,726,29],[659,12,726,31,"y"],[659,13,726,32],[659,15,726,34,"cloneY"],[660,10,726,41],[660,11,726,42],[661,10,727,8,"damageMultiplier"],[661,26,727,24],[661,28,727,26],[661,31,727,29],[661,32,727,31],[662,8,728,6],[662,9,728,7],[663,8,730,6,"console"],[663,15,730,13],[663,16,730,14,"log"],[663,19,730,17],[663,20,730,18],[663,63,730,61,"ability"],[663,70,730,68],[663,71,730,69,"stats"],[663,76,730,74],[663,77,730,75,"duration"],[663,85,730,83],[663,108,730,106],[663,109,730,107],[664,6,731,4],[665,4,732,2],[665,5,732,3],[667,4,734,2],[668,4,735,2],[668,10,735,8,"createProjectile"],[668,26,735,24],[668,29,735,27,"createProjectile"],[668,30,735,28,"targetEnemy"],[668,41,735,52],[668,43,735,54,"damage"],[668,49,735,68],[668,51,735,70,"ninjaPos"],[668,59,735,103],[668,61,735,105,"abilityInfo"],[668,72,735,159],[668,74,735,161,"isAOE"],[668,79,735,176],[668,81,735,178,"aoeRadius"],[668,90,735,196],[668,95,735,201],[669,6,736,4],[669,10,736,8],[669,11,736,9,"targetEnemy"],[669,22,736,20],[669,24,736,22],[670,8,737,6,"console"],[670,15,737,13],[670,16,737,14,"log"],[670,19,737,17],[670,20,737,18],[670,65,737,63],[670,66,737,64],[671,8,738,6],[671,15,738,13],[671,19,738,17],[672,6,739,4],[673,6,741,4],[673,12,741,10,"SCREEN_WIDTH"],[673,24,741,22],[673,27,741,25],[673,30,741,28],[674,6,742,4],[674,12,742,10,"GAME_AREA_HEIGHT"],[674,28,742,26],[674,31,742,29],[674,34,742,32],[674,37,742,35],[674,40,742,38],[674,41,742,39],[674,42,742,40],[675,6,743,4],[675,12,743,10,"NINJA_SIZE"],[675,22,743,20],[675,25,743,23],[675,27,743,25],[677,6,745,4],[678,6,746,4],[678,12,746,10,"ninjaX"],[678,18,746,16],[678,21,746,19,"ninjaPos"],[678,29,746,27],[678,32,746,30,"ninjaPos"],[678,40,746,38],[678,41,746,39,"x"],[678,42,746,40],[678,45,746,43,"NINJA_SIZE"],[678,55,746,53],[678,58,746,56],[678,59,746,57],[678,62,746,60,"SCREEN_WIDTH"],[678,74,746,72],[678,77,746,75],[678,78,746,76],[679,6,747,4],[679,12,747,10,"ninjaY"],[679,18,747,16],[679,21,747,19,"ninjaPos"],[679,29,747,27],[679,32,747,30,"ninjaPos"],[679,40,747,38],[679,41,747,39,"y"],[679,42,747,40],[679,45,747,43,"NINJA_SIZE"],[679,55,747,53],[679,58,747,56],[679,59,747,57],[679,62,747,60,"GAME_AREA_HEIGHT"],[679,78,747,76],[679,81,747,79],[679,82,747,80],[680,6,748,4],[680,12,748,10,"ENEMY_SIZE"],[680,22,748,20],[680,25,748,23],[680,27,748,25],[681,6,750,4],[681,12,750,10,"projectileId"],[681,24,750,22],[681,27,750,25],[681,35,750,33,"Date"],[681,39,750,37],[681,40,750,38,"now"],[681,43,750,41],[681,44,750,42],[681,45,750,43],[681,49,750,47,"Math"],[681,53,750,51],[681,54,750,52,"random"],[681,60,750,58],[681,61,750,59],[681,62,750,60],[681,64,750,62],[682,6,752,4],[682,12,752,10,"projectile"],[682,22,752,38],[682,25,752,41],[683,8,753,6,"id"],[683,10,753,8],[683,12,753,10,"projectileId"],[683,24,753,22],[684,8,754,6,"x"],[684,9,754,7],[684,11,754,9,"ninjaX"],[684,17,754,15],[685,8,755,6,"y"],[685,9,755,7],[685,11,755,9,"ninjaY"],[685,17,755,15],[686,8,756,6,"targetX"],[686,15,756,13],[686,17,756,15,"targetEnemy"],[686,28,756,26],[686,29,756,27,"position"],[686,37,756,35],[686,38,756,36,"x"],[686,39,756,37],[686,42,756,40,"ENEMY_SIZE"],[686,52,756,50],[686,55,756,53],[686,56,756,54],[687,8,757,6,"targetY"],[687,15,757,13],[687,17,757,15,"targetEnemy"],[687,28,757,26],[687,29,757,27,"position"],[687,37,757,35],[687,38,757,36,"y"],[687,39,757,37],[687,42,757,40,"ENEMY_SIZE"],[687,52,757,50],[687,55,757,53],[687,56,757,54],[688,8,758,6,"targetEnemyId"],[688,21,758,19],[688,23,758,21,"targetEnemy"],[688,34,758,32],[688,35,758,33,"id"],[688,37,758,35],[689,8,759,6,"damage"],[689,14,759,12],[689,16,759,14,"damage"],[689,22,759,20],[690,8,760,6,"startTime"],[690,17,760,15],[690,19,760,17,"Date"],[690,23,760,21],[690,24,760,22,"now"],[690,27,760,25],[690,28,760,26],[690,29,760,27],[691,8,761,6,"duration"],[691,16,761,14],[691,18,761,16],[691,21,761,19],[692,8,761,21],[693,8,762,6],[694,8,763,6,"abilityId"],[694,17,763,15],[694,19,763,17,"abilityInfo"],[694,30,763,28],[694,32,763,30,"id"],[694,34,763,32],[694,38,763,36],[694,54,763,52],[695,8,764,6,"abilityName"],[695,19,764,17],[695,21,764,19,"abilityInfo"],[695,32,764,30],[695,34,764,32,"name"],[695,38,764,36],[695,42,764,40],[695,58,764,56],[696,8,765,6,"abilityIcon"],[696,19,765,17],[696,21,765,19,"abilityInfo"],[696,32,765,30],[696,34,765,32,"icon"],[696,38,765,36],[696,42,765,40],[696,46,765,44],[697,8,765,46],[698,8,766,6],[699,8,767,6,"isAOE"],[699,13,767,11],[699,15,767,13,"isAOE"],[699,20,767,18],[699,24,767,22],[699,29,767,27],[700,8,768,6,"aoeRadius"],[700,17,768,15],[700,19,768,17,"aoeRadius"],[700,28,768,26],[700,32,768,30],[701,6,769,4],[701,7,769,5],[702,6,771,4,"console"],[702,13,771,11],[702,14,771,12,"log"],[702,17,771,15],[702,18,771,16],[702,44,771,42,"abilityInfo"],[702,55,771,53],[702,57,771,55,"name"],[702,61,771,59],[702,65,771,63],[702,81,771,79],[702,101,771,99,"projectileId"],[702,113,771,111],[702,128,771,126,"targetEnemy"],[702,139,771,137],[702,140,771,138,"name"],[702,144,771,142],[702,152,771,150,"damage"],[702,158,771,156],[702,167,771,165],[702,168,771,166],[703,6,772,4,"console"],[703,13,772,11],[703,14,772,12,"log"],[703,17,772,15],[703,18,772,16],[703,48,772,46,"isAOE"],[703,53,772,51],[703,68,772,66,"aoeRadius"],[703,77,772,75],[703,89,772,87,"damage"],[703,95,772,93],[703,97,772,95],[703,98,772,96],[704,6,774,4,"console"],[704,13,774,11],[704,14,774,12,"log"],[704,17,774,15],[704,18,774,16],[704,53,774,51,"targetEnemy"],[704,64,774,62],[704,65,774,63,"id"],[704,67,774,65],[704,75,774,73,"damage"],[704,81,774,79],[704,90,774,88],[704,91,774,89],[705,6,775,4,"console"],[705,13,775,11],[705,14,775,12,"log"],[705,17,775,15],[705,18,775,16],[705,53,775,51,"ninjaX"],[705,59,775,57],[705,64,775,62,"ninjaY"],[705,70,775,68],[705,87,775,85,"projectile"],[705,97,775,95],[705,98,775,96,"targetX"],[705,105,775,103],[705,110,775,108,"projectile"],[705,120,775,118],[705,121,775,119,"targetY"],[705,128,775,126],[705,131,775,129],[705,132,775,130],[706,6,777,4,"setProjectiles"],[706,20,777,18],[706,21,777,19,"prev"],[706,25,777,23],[706,29,777,27],[706,30,777,28],[706,33,777,31,"prev"],[706,37,777,35],[706,39,777,37,"projectile"],[706,49,777,47],[706,50,777,48],[706,51,777,49],[708,6,779,4],[709,6,780,4,"setTimeout"],[709,16,780,14],[709,17,780,15],[709,23,780,21],[710,8,781,6,"handleProjectileHit"],[710,27,781,25],[710,28,781,26,"projectile"],[710,38,781,36],[710,39,781,37],[711,6,782,4],[711,7,782,5],[711,9,782,7],[711,12,782,10],[711,13,782,11],[712,6,784,4],[712,13,784,11,"projectile"],[712,23,784,21],[713,4,785,2],[713,5,785,3],[715,4,787,2],[716,4,788,2],[716,10,788,8,"spawnTestEnemy"],[716,24,788,22],[716,27,788,26,"state"],[716,32,788,44],[716,36,788,49],[717,6,789,4,"console"],[717,13,789,11],[717,14,789,12,"log"],[717,17,789,15],[717,18,789,16],[717,83,789,81],[717,84,789,82],[719,6,791,4],[720,6,792,4],[720,12,792,10,"zoneEnemy"],[720,21,792,19],[720,24,792,22,"spawnZoneEnemy"],[720,38,792,36],[720,39,792,37],[720,40,792,38],[721,6,793,4],[721,10,793,8],[721,11,793,9,"zoneEnemy"],[721,20,793,18],[721,22,793,20],[722,8,794,6,"console"],[722,15,794,13],[722,16,794,14,"log"],[722,19,794,17],[722,20,794,18],[722,76,794,74],[722,77,794,75],[723,8,795,6],[724,8,796,6,"spawnBasicTestEnemy"],[724,27,796,25],[724,28,796,26,"state"],[724,33,796,31],[724,34,796,32],[725,8,797,6],[726,6,798,4],[727,6,800,4,"console"],[727,13,800,11],[727,14,800,12,"log"],[727,17,800,15],[727,18,800,16],[727,44,800,42,"zoneEnemy"],[727,53,800,51],[727,54,800,52,"name"],[727,58,800,56],[727,63,800,61,"zoneEnemy"],[727,72,800,70],[727,73,800,71,"typeId"],[727,79,800,77],[727,94,800,92,"currentZone"],[727,105,800,103],[727,107,800,105,"id"],[727,109,800,107],[727,119,800,117,"currentZoneLevel"],[727,135,800,133],[727,137,800,135,"level"],[727,142,800,140],[727,144,800,142],[727,145,800,143],[729,6,802,4],[730,6,803,4],[730,12,803,10,"combatEnemy"],[730,23,803,34],[730,26,803,37],[731,8,804,6,"id"],[731,10,804,8],[731,12,804,10,"zoneEnemy"],[731,21,804,19],[731,22,804,20,"id"],[731,24,804,22],[732,8,805,6,"name"],[732,12,805,10],[732,14,805,12,"zoneEnemy"],[732,23,805,21],[732,24,805,22,"name"],[732,28,805,26],[733,8,806,6,"health"],[733,14,806,12],[733,16,806,14,"zoneEnemy"],[733,25,806,23],[733,26,806,24,"hp"],[733,28,806,26],[734,8,807,6,"maxHealth"],[734,17,807,15],[734,19,807,17,"zoneEnemy"],[734,28,807,26],[734,29,807,27,"maxHP"],[734,34,807,32],[735,8,808,6,"stats"],[735,13,808,11],[735,15,808,13],[736,10,809,8,"attack"],[736,16,809,14],[736,18,809,16,"zoneEnemy"],[736,27,809,25],[736,28,809,26,"attack"],[736,34,809,32],[737,10,810,8,"defense"],[737,17,810,15],[737,19,810,17],[737,21,810,19],[738,10,810,21],[739,10,811,8,"health"],[739,16,811,14],[739,18,811,16,"zoneEnemy"],[739,27,811,25],[739,28,811,26,"hp"],[739,30,811,28],[740,10,812,8,"maxHealth"],[740,19,812,17],[740,21,812,19,"zoneEnemy"],[740,30,812,28],[740,31,812,29,"maxHP"],[740,36,812,34],[741,10,813,8,"critChance"],[741,20,813,18],[741,22,813,20],[741,23,813,21],[742,10,814,8,"critDamage"],[742,20,814,18],[742,22,814,20],[742,25,814,23],[743,10,815,8,"cooldownReduction"],[743,27,815,25],[743,29,815,27],[744,8,816,6],[744,9,816,7],[745,8,817,6,"position"],[745,16,817,14],[745,18,817,16,"zoneEnemy"],[745,27,817,25],[745,28,817,26,"position"],[745,36,817,34],[746,8,818,6,"lastDamaged"],[746,19,818,17],[746,21,818,19],[746,22,818,20],[747,8,819,6],[748,8,820,6,"zoneTypeId"],[748,18,820,16],[748,20,820,18,"zoneEnemy"],[748,29,820,27],[748,30,820,28,"typeId"],[748,36,820,34],[749,8,821,6,"zoneXP"],[749,14,821,12],[749,16,821,14,"zoneEnemy"],[749,25,821,23],[749,26,821,24,"xp"],[750,6,822,4],[750,7,822,5],[751,6,824,4,"console"],[751,13,824,11],[751,14,824,12,"log"],[751,17,824,15],[751,18,824,16],[751,42,824,40,"combatEnemy"],[751,53,824,51],[751,54,824,52,"name"],[751,58,824,56],[751,67,824,65,"combatEnemy"],[751,78,824,76],[751,79,824,77,"health"],[751,85,824,83],[751,100,824,98,"currentZone"],[751,111,824,109],[751,113,824,111,"id"],[751,115,824,113],[751,125,824,123,"currentZoneLevel"],[751,141,824,139],[751,143,824,141,"level"],[751,148,824,146],[751,150,824,148],[751,151,824,149],[752,6,825,4,"state"],[752,11,825,9],[752,12,825,10,"enemies"],[752,19,825,17],[752,20,825,18,"push"],[752,24,825,22],[752,25,825,23,"combatEnemy"],[752,36,825,34],[752,37,825,35],[753,4,826,2],[753,5,826,3],[755,4,828,2],[756,4,829,2],[756,10,829,8,"spawnBasicTestEnemy"],[756,29,829,27],[756,32,829,31,"state"],[756,37,829,49],[756,41,829,54],[757,6,830,4],[757,12,830,10,"SCREEN_WIDTH"],[757,24,830,22],[757,27,830,25],[757,30,830,28],[758,6,831,4],[758,12,831,10,"GAME_AREA_HEIGHT"],[758,28,831,26],[758,31,831,29],[758,34,831,32],[758,37,831,35],[758,40,831,38],[759,6,832,4],[759,12,832,10,"ENEMY_SIZE"],[759,22,832,20],[759,25,832,23],[759,27,832,25],[760,6,834,4],[760,12,834,10,"x"],[760,13,834,11],[760,16,834,14,"Math"],[760,20,834,18],[760,21,834,19,"random"],[760,27,834,25],[760,28,834,26],[760,29,834,27],[760,33,834,31,"SCREEN_WIDTH"],[760,45,834,43],[760,48,834,46,"ENEMY_SIZE"],[760,58,834,56],[760,61,834,59],[760,62,834,60],[760,63,834,61],[760,66,834,64,"ENEMY_SIZE"],[760,76,834,74],[761,6,835,4],[761,12,835,10,"y"],[761,13,835,11],[761,16,835,14,"Math"],[761,20,835,18],[761,21,835,19,"random"],[761,27,835,25],[761,28,835,26],[761,29,835,27],[761,33,835,31,"GAME_AREA_HEIGHT"],[761,49,835,47],[761,52,835,50,"ENEMY_SIZE"],[761,62,835,60],[761,65,835,63],[761,66,835,64],[761,67,835,65],[761,70,835,68,"ENEMY_SIZE"],[761,80,835,78],[762,6,837,4],[762,12,837,10,"enemy"],[762,17,837,28],[762,20,837,31],[763,8,838,6,"id"],[763,10,838,8],[763,12,838,10],[763,30,838,28,"Date"],[763,34,838,32],[763,35,838,33,"now"],[763,38,838,36],[763,39,838,37],[763,40,838,38],[763,44,838,42,"Math"],[763,48,838,46],[763,49,838,47,"random"],[763,55,838,53],[763,56,838,54],[763,57,838,55],[763,59,838,57],[764,8,839,6,"name"],[764,12,839,10],[764,14,839,12],[764,26,839,24,"Math"],[764,30,839,28],[764,31,839,29,"floor"],[764,36,839,34],[764,37,839,35,"Math"],[764,41,839,39],[764,42,839,40,"random"],[764,48,839,46],[764,49,839,47],[764,50,839,48],[764,53,839,51],[764,56,839,54],[764,57,839,55],[764,59,839,57],[765,8,840,6,"health"],[765,14,840,12],[765,16,840,14],[765,18,840,16],[766,8,841,6,"maxHealth"],[766,17,841,15],[766,19,841,17],[766,21,841,19],[767,8,842,6,"stats"],[767,13,842,11],[767,15,842,13],[768,10,843,8,"attack"],[768,16,843,14],[768,18,843,16],[768,20,843,18],[769,10,844,8,"defense"],[769,17,844,15],[769,19,844,17],[769,21,844,19],[770,10,845,8,"health"],[770,16,845,14],[770,18,845,16],[770,20,845,18],[771,10,846,8,"maxHealth"],[771,19,846,17],[771,21,846,19],[771,23,846,21],[772,10,847,8,"critChance"],[772,20,847,18],[772,22,847,20],[772,23,847,21],[773,10,848,8,"critDamage"],[773,20,848,18],[773,22,848,20],[773,25,848,23],[774,10,849,8,"cooldownReduction"],[774,27,849,25],[774,29,849,27],[775,8,850,6],[775,9,850,7],[776,8,851,6,"position"],[776,16,851,14],[776,18,851,16],[777,10,851,18,"x"],[777,11,851,19],[778,10,851,21,"y"],[779,8,851,23],[779,9,851,24],[780,8,852,6,"lastDamaged"],[780,19,852,17],[780,21,852,19],[781,6,853,4],[781,7,853,5],[782,6,855,4,"console"],[782,13,855,11],[782,14,855,12,"log"],[782,17,855,15],[782,18,855,16],[782,42,855,40,"enemy"],[782,47,855,45],[782,48,855,46,"name"],[782,52,855,50],[782,60,855,58,"Math"],[782,64,855,62],[782,65,855,63,"round"],[782,70,855,68],[782,71,855,69,"x"],[782,72,855,70],[782,73,855,71],[782,78,855,76,"Math"],[782,82,855,80],[782,83,855,81,"round"],[782,88,855,86],[782,89,855,87,"y"],[782,90,855,88],[782,91,855,89],[782,94,855,92],[782,95,855,93],[783,6,856,4,"state"],[783,11,856,9],[783,12,856,10,"enemies"],[783,19,856,17],[783,20,856,18,"push"],[783,24,856,22],[783,25,856,23,"enemy"],[783,30,856,28],[783,31,856,29],[784,4,857,2],[784,5,857,3],[786,4,859,2],[787,4,860,2],[787,10,860,8,"startCombat"],[787,21,860,19],[787,24,860,22,"React"],[787,29,860,27],[787,30,860,27,"default"],[787,37,860,27],[787,38,860,28,"useCallback"],[787,49,860,39],[787,50,860,40],[787,56,860,46],[788,6,861,4,"console"],[788,13,861,11],[788,14,861,12,"log"],[788,17,861,15],[788,18,861,16],[788,63,861,61],[788,64,861,62],[789,6,862,4,"setCombatState"],[789,20,862,18],[789,21,862,19,"prev"],[789,25,862,23],[789,30,862,28],[790,8,862,30],[790,11,862,33,"prev"],[790,15,862,37],[791,8,862,39,"isInCombat"],[791,18,862,49],[791,20,862,51],[792,6,862,56],[792,7,862,57],[792,8,862,58],[792,9,862,59],[794,6,864,4],[795,6,865,4,"combatEngine"],[795,25,865,16],[795,26,865,16,"combatEngine"],[795,38,865,16],[795,39,865,17,"addTickCallback"],[795,54,865,32],[795,55,865,33,"handleCombatTick"],[795,71,865,49],[795,72,865,50],[796,6,866,4,"console"],[796,13,866,11],[796,14,866,12,"log"],[796,17,866,15],[796,18,866,16],[796,62,866,60],[796,63,866,61],[798,6,868,4],[799,6,869,4,"combatEngine"],[799,25,869,16],[799,26,869,16,"combatEngine"],[799,38,869,16],[799,39,869,17,"start"],[799,44,869,22],[799,45,869,23],[799,46,869,24],[800,4,870,2],[800,5,870,3],[800,7,870,5],[800,8,870,6,"combatEngine"],[800,27,870,18],[800,28,870,18,"combatEngine"],[800,40,870,18],[800,42,870,20,"handleCombatTick"],[800,58,870,36],[800,59,870,37],[800,60,870,38],[802,4,872,2],[803,4,873,2],[803,10,873,8,"stopCombat"],[803,20,873,18],[803,23,873,21,"React"],[803,28,873,26],[803,29,873,26,"default"],[803,36,873,26],[803,37,873,27,"useCallback"],[803,48,873,38],[803,49,873,39],[803,55,873,45],[804,6,874,4,"setCombatState"],[804,20,874,18],[804,21,874,19,"prev"],[804,25,874,23],[804,30,874,28],[805,8,874,30],[805,11,874,33,"prev"],[805,15,874,37],[806,8,874,39,"isInCombat"],[806,18,874,49],[806,20,874,51],[807,6,874,57],[807,7,874,58],[807,8,874,59],[807,9,874,60],[808,6,875,4,"combatEngine"],[808,25,875,16],[808,26,875,16,"combatEngine"],[808,38,875,16],[808,39,875,17,"removeTickCallback"],[808,57,875,35],[808,58,875,36,"handleCombatTick"],[808,74,875,52],[808,75,875,53],[809,4,876,2],[809,5,876,3],[809,7,876,5],[809,8,876,6,"combatEngine"],[809,27,876,18],[809,28,876,18,"combatEngine"],[809,40,876,18],[809,42,876,20,"handleCombatTick"],[809,58,876,36],[809,59,876,37],[809,60,876,38],[811,4,878,2],[812,4,879,2],[812,10,879,8,"equipAbility"],[812,22,879,20],[812,25,879,23,"equipAbility"],[812,26,879,24,"abilityId"],[812,35,879,41],[812,37,879,43,"slotIndex"],[812,46,879,60],[812,51,879,74],[813,6,880,4],[813,13,880,11,"combatState"],[813,24,880,22],[813,25,880,23,"abilityManager"],[813,39,880,37],[813,40,880,38,"equipAbility"],[813,52,880,50],[813,53,880,51,"abilityId"],[813,62,880,60],[813,64,880,62,"slotIndex"],[813,73,880,71],[813,74,880,72],[814,4,881,2],[814,5,881,3],[815,4,883,2],[815,10,883,8,"getDeck"],[815,17,883,15],[815,20,883,18,"getDeck"],[815,21,883,18],[815,26,883,24],[816,6,884,4],[816,13,884,11,"combatState"],[816,24,884,22],[816,25,884,23,"abilityManager"],[816,39,884,37],[816,40,884,38,"getDeck"],[816,47,884,45],[816,48,884,46],[816,49,884,47],[817,4,885,2],[817,5,885,3],[818,4,887,2],[818,10,887,8,"getAvailableAbilities"],[818,31,887,29],[818,34,887,32,"getAvailableAbilities"],[818,35,887,32],[818,40,887,38],[819,6,888,4],[819,13,888,11,"combatState"],[819,24,888,22],[819,25,888,23,"abilityManager"],[819,39,888,37],[819,40,888,38,"getAvailableAbilities"],[819,61,888,59],[819,62,888,60],[819,63,888,61],[820,4,889,2],[820,5,889,3],[821,4,891,2],[821,10,891,8,"upgradeAbility"],[821,24,891,22],[821,27,891,26,"abilityId"],[821,36,891,43],[821,40,891,57],[822,6,892,4],[822,13,892,11,"combatState"],[822,24,892,22],[822,25,892,23,"abilityManager"],[822,39,892,37],[822,40,892,38,"upgradeAbility"],[822,54,892,52],[822,55,892,53,"abilityId"],[822,64,892,62],[822,65,892,63],[823,4,893,2],[823,5,893,3],[825,4,895,2],[826,4,896,2],[826,10,896,8,"clearAllEnemies"],[826,25,896,23],[826,28,896,26,"clearAllEnemies"],[826,29,896,26],[826,34,896,32],[827,6,897,4,"console"],[827,13,897,11],[827,14,897,12,"log"],[827,17,897,15],[827,18,897,16],[827,67,897,65],[827,68,897,66],[828,6,898,4,"setCombatState"],[828,20,898,18],[828,21,898,19,"prev"],[828,25,898,23],[828,30,898,28],[829,8,899,6],[829,11,899,9,"prev"],[829,15,899,13],[830,8,900,6,"enemies"],[830,15,900,13],[830,17,900,15],[831,6,901,4],[831,7,901,5],[831,8,901,6],[831,9,901,7],[832,4,902,2],[832,5,902,3],[834,4,904,2],[835,4,905,2],[837,4,907,2],[838,4,908,2],[838,10,908,8,"spawnEnemy"],[838,20,908,18],[838,23,908,22,"position"],[838,31,908,57],[838,35,908,75],[839,6,909,4],[839,12,909,10,"SCREEN_WIDTH"],[839,24,909,22],[839,27,909,25],[839,30,909,28],[840,6,910,4],[840,12,910,10,"GAME_AREA_HEIGHT"],[840,28,910,26],[840,31,910,29],[840,34,910,32],[840,37,910,35],[840,40,910,38],[840,41,910,39],[840,42,910,40],[841,6,911,4],[841,12,911,10,"ENEMY_SIZE"],[841,22,911,20],[841,25,911,23],[841,27,911,25],[843,6,913,4],[844,6,914,4],[844,12,914,10,"x"],[844,13,914,11],[844,16,914,14,"position"],[844,24,914,22],[844,26,914,24,"x"],[844,27,914,25],[844,31,914,29,"Math"],[844,35,914,33],[844,36,914,34,"random"],[844,42,914,40],[844,43,914,41],[844,44,914,42],[844,48,914,46,"SCREEN_WIDTH"],[844,60,914,58],[844,63,914,61,"ENEMY_SIZE"],[844,73,914,71],[844,76,914,74],[844,77,914,75],[844,78,914,76],[844,81,914,79,"ENEMY_SIZE"],[844,91,914,89],[845,6,915,4],[845,12,915,10,"y"],[845,13,915,11],[845,16,915,14,"position"],[845,24,915,22],[845,26,915,24,"y"],[845,27,915,25],[845,31,915,29,"Math"],[845,35,915,33],[845,36,915,34,"random"],[845,42,915,40],[845,43,915,41],[845,44,915,42],[845,48,915,46,"GAME_AREA_HEIGHT"],[845,64,915,62],[845,67,915,65,"ENEMY_SIZE"],[845,77,915,75],[845,80,915,78],[845,81,915,79],[845,82,915,80],[845,85,915,83,"ENEMY_SIZE"],[845,95,915,93],[846,6,917,4],[846,12,917,10,"enemy"],[846,17,917,28],[846,20,917,31],[847,8,918,6,"id"],[847,10,918,8],[847,12,918,10],[847,21,918,19],[847,23,918,21,"enemyCounter"],[847,35,918,33],[847,37,918,35],[848,8,919,6,"name"],[848,12,919,10],[848,14,919,12],[848,24,919,22],[849,8,920,6,"health"],[849,14,920,12],[849,16,920,14],[849,19,920,17],[850,8,921,6,"maxHealth"],[850,17,921,15],[850,19,921,17],[850,22,921,20],[851,8,922,6,"stats"],[851,13,922,11],[851,15,922,13],[852,10,923,8,"attack"],[852,16,923,14],[852,18,923,16],[852,20,923,18],[853,10,924,8,"defense"],[853,17,924,15],[853,19,924,17],[853,21,924,19],[854,10,925,8,"health"],[854,16,925,14],[854,18,925,16],[854,21,925,19],[855,10,926,8,"maxHealth"],[855,19,926,17],[855,21,926,19],[855,24,926,22],[856,10,927,8,"critChance"],[856,20,927,18],[856,22,927,20],[856,23,927,21],[857,10,928,8,"critDamage"],[857,20,928,18],[857,22,928,20],[857,25,928,23],[858,10,929,8,"cooldownReduction"],[858,27,929,25],[858,29,929,27],[859,8,930,6],[859,9,930,7],[860,8,931,6,"position"],[860,16,931,14],[860,18,931,16],[861,10,931,18,"x"],[861,11,931,19],[862,10,931,21,"y"],[863,8,931,23],[863,9,931,24],[864,8,932,6,"lastDamaged"],[864,19,932,17],[864,21,932,19],[865,6,933,4],[865,7,933,5],[866,6,935,4,"setCombatState"],[866,20,935,18],[866,21,935,19,"prev"],[866,25,935,23],[866,30,935,28],[867,8,936,6],[867,11,936,9,"prev"],[867,15,936,13],[868,8,937,6,"enemies"],[868,15,937,13],[868,17,937,15],[868,18,937,16],[868,21,937,19,"prev"],[868,25,937,23],[868,26,937,24,"enemies"],[868,33,937,31],[868,35,937,33,"enemy"],[868,40,937,38],[869,6,938,4],[869,7,938,5],[869,8,938,6],[869,9,938,7],[870,6,940,4],[870,13,940,11,"enemy"],[870,18,940,16],[871,4,941,2],[871,5,941,3],[873,4,943,2],[874,4,944,2],[874,10,944,8,"spawnBoss"],[874,19,944,17],[874,22,944,21,"bossEnemy"],[874,31,944,43],[874,35,944,48],[875,6,945,4,"console"],[875,13,945,11],[875,14,945,12,"log"],[875,17,945,15],[875,18,945,16],[875,39,945,37,"bossEnemy"],[875,48,945,46],[875,49,945,47,"name"],[875,53,945,51],[875,90,945,88],[875,91,945,89],[876,6,946,4,"setCombatState"],[876,20,946,18],[876,21,946,19,"prev"],[876,25,946,23],[876,30,946,28],[877,8,947,6],[877,11,947,9,"prev"],[877,15,947,13],[878,8,948,6,"enemies"],[878,15,948,13],[878,17,948,15],[878,18,948,16,"bossEnemy"],[878,27,948,25],[878,28,948,26],[878,29,948,27],[879,6,949,4],[879,7,949,5],[879,8,949,6],[879,9,949,7],[880,4,950,2],[880,5,950,3],[882,4,952,2],[883,4,953,2],[883,10,953,8,"clearSpecificEnemy"],[883,28,953,26],[883,31,953,30,"enemyId"],[883,38,953,45],[883,42,953,50],[884,6,954,4,"setCombatState"],[884,20,954,18],[884,21,954,19,"prev"],[884,25,954,23],[884,30,954,28],[885,8,955,6],[885,11,955,9,"prev"],[885,15,955,13],[886,8,956,6,"enemies"],[886,15,956,13],[886,17,956,15,"prev"],[886,21,956,19],[886,22,956,20,"enemies"],[886,29,956,27],[886,30,956,28,"filter"],[886,36,956,34],[886,37,956,35,"enemy"],[886,42,956,40],[886,46,956,44,"enemy"],[886,51,956,49],[886,52,956,50,"id"],[886,54,956,52],[886,59,956,57,"enemyId"],[886,66,956,64],[887,6,957,4],[887,7,957,5],[887,8,957,6],[887,9,957,7],[888,4,958,2],[888,5,958,3],[890,4,960,2],[891,4,961,2],[891,10,961,8,"useAbilityManually"],[891,28,961,26],[891,31,961,26,"_s3"],[891,34,961,26],[891,35,961,29],[891,39,961,29,"useCallback"],[891,45,961,40],[891,46,961,40,"useCallback"],[891,57,961,40],[891,59,961,40,"_s3"],[891,62,961,40],[891,63,961,42,"slotIndex"],[891,72,961,59],[891,76,961,73],[892,6,961,73,"_s3"],[892,9,961,73],[893,6,962,4,"console"],[893,13,962,11],[893,14,962,12,"log"],[893,17,962,15],[893,18,962,16],[893,64,962,62,"slotIndex"],[893,73,962,71],[893,82,962,80],[893,83,962,81],[894,6,963,4,"console"],[894,13,963,11],[894,14,963,12,"log"],[894,17,963,15],[894,18,963,16],[894,65,963,63,"slotIndex"],[894,74,963,72],[894,76,963,74],[894,77,963,75],[895,6,964,4,"console"],[895,13,964,11],[895,14,964,12,"log"],[895,17,964,15],[895,18,964,16],[895,53,964,51,"slotIndex"],[895,62,964,60],[895,64,964,62],[895,65,964,63],[897,6,966,4],[898,6,967,4],[898,10,967,8],[898,11,967,9,"game"],[898,15,967,13],[898,16,967,14,"gameState"],[898,25,967,23],[898,26,967,24,"isAlive"],[898,33,967,31],[898,35,967,33],[899,8,968,6,"console"],[899,15,968,13],[899,16,968,14,"log"],[899,19,968,17],[899,20,968,18],[899,70,968,68],[899,71,968,69],[900,8,969,6],[900,15,969,13],[900,20,969,18],[901,6,970,4],[903,6,972,4],[904,6,973,4],[904,12,973,10,"isReady"],[904,19,973,17],[904,22,973,20,"combatState"],[904,33,973,31],[904,34,973,32,"abilityManager"],[904,48,973,46],[904,49,973,47,"isAbilityReady"],[904,63,973,61],[904,64,973,62,"slotIndex"],[904,73,973,71],[904,74,973,72],[905,6,974,4],[905,10,974,8],[905,11,974,9,"isReady"],[905,18,974,16],[905,20,974,18],[906,8,975,6,"console"],[906,15,975,13],[906,16,975,14,"log"],[906,19,975,17],[906,20,975,18],[906,41,975,39,"slotIndex"],[906,50,975,48],[906,85,975,83],[906,86,975,84],[907,8,976,6],[907,15,976,13],[907,20,976,18],[908,6,977,4],[910,6,979,4],[911,6,980,4],[911,10,980,8,"combatState"],[911,21,980,19],[911,22,980,20,"enemies"],[911,29,980,27],[911,30,980,28,"length"],[911,36,980,34],[911,41,980,39],[911,42,980,40],[911,44,980,42],[912,8,981,6,"console"],[912,15,981,13],[912,16,981,14,"log"],[912,19,981,17],[912,20,981,18],[912,69,981,67],[912,70,981,68],[913,8,982,6],[913,15,982,13],[913,20,982,18],[914,6,983,4],[916,6,985,4],[917,6,986,4],[917,12,986,10,"currentTick"],[917,23,986,21],[917,26,986,24,"combatEngine"],[917,45,986,36],[917,46,986,36,"combatEngine"],[917,58,986,36],[917,59,986,37,"getCurrentTick"],[917,73,986,51],[917,74,986,52],[917,75,986,53],[918,6,987,4],[918,12,987,10,"success"],[918,19,987,17],[918,22,987,20,"combatState"],[918,33,987,31],[918,34,987,32,"abilityManager"],[918,48,987,46],[918,49,987,47,"useAbility"],[918,59,987,57],[918,60,987,58,"slotIndex"],[918,69,987,67],[918,71,987,69,"currentTick"],[918,82,987,80],[918,83,987,81],[919,6,989,4],[919,10,989,8,"success"],[919,17,989,15],[919,19,989,17],[920,8,990,6],[921,8,991,6,"setCombatState"],[921,22,991,20],[921,23,991,21,"prev"],[921,27,991,25],[921,31,991,29],[922,10,992,8],[922,16,992,14,"newState"],[922,24,992,22],[922,27,992,25],[923,12,992,27],[923,15,992,30,"prev"],[924,10,992,35],[924,11,992,36],[925,10,993,8,"castAbility"],[925,21,993,19],[925,22,993,20,"newState"],[925,30,993,28],[925,32,993,30,"slotIndex"],[925,41,993,39],[925,42,993,40],[926,10,994,8],[926,17,994,15,"newState"],[926,25,994,23],[927,8,995,6],[927,9,995,7],[927,10,995,8],[928,8,997,6,"console"],[928,15,997,13],[928,16,997,14,"log"],[928,19,997,17],[928,20,997,18],[928,65,997,63,"slotIndex"],[928,74,997,72],[928,76,997,74],[928,77,997,75],[929,8,998,6],[929,15,998,13],[929,19,998,17],[930,6,999,4],[930,7,999,5],[930,13,999,11],[931,8,1000,6,"console"],[931,15,1000,13],[931,16,1000,14,"log"],[931,19,1000,17],[931,20,1000,18],[931,61,1000,59,"slotIndex"],[931,70,1000,68],[931,72,1000,70],[931,73,1000,71],[932,8,1001,6],[932,15,1001,13],[932,20,1001,18],[933,6,1002,4],[934,4,1003,2],[934,5,1003,3],[934,46,1003,5],[934,47,1003,6,"combatState"],[934,58,1003,17],[934,59,1003,18,"abilityManager"],[934,73,1003,32],[934,75,1003,34,"combatState"],[934,86,1003,45],[934,87,1003,46,"enemies"],[934,94,1003,53],[934,95,1003,54],[934,96,1003,55],[935,4,1004,2],[935,8,1004,2,"useEffect"],[935,14,1004,11],[935,15,1004,11,"useEffect"],[935,24,1004,11],[935,26,1004,12],[935,32,1004,18],[936,6,1005,4,"combatEngine"],[936,25,1005,16],[936,26,1005,16,"combatEngine"],[936,38,1005,16],[936,39,1005,17,"start"],[936,44,1005,22],[936,45,1005,23],[936,46,1005,24],[938,6,1007,4],[939,6,1008,4],[940,6,1009,4,"console"],[940,13,1009,11],[940,14,1009,12,"log"],[940,17,1009,15],[940,18,1009,16],[940,97,1009,95],[940,98,1009,96],[941,6,1011,4],[941,13,1011,11],[941,19,1011,17],[942,8,1012,6,"combatEngine"],[942,27,1012,18],[942,28,1012,18,"combatEngine"],[942,40,1012,18],[942,41,1012,19,"stop"],[942,45,1012,23],[942,46,1012,24],[942,47,1012,25],[943,6,1013,4],[943,7,1013,5],[944,4,1014,2],[944,5,1014,3],[944,7,1014,5],[944,9,1014,7],[944,10,1014,8],[946,4,1016,2],[947,4,1017,2],[947,8,1017,2,"useEffect"],[947,14,1017,11],[947,15,1017,11,"useEffect"],[947,24,1017,11],[947,26,1017,12],[947,32,1017,18],[948,6,1018,4],[948,12,1018,10,"processProjectileImpacts"],[948,36,1018,34],[948,39,1018,37,"processProjectileImpacts"],[948,40,1018,37],[948,45,1018,43],[949,8,1019,6,"setProjectiles"],[949,22,1019,20],[949,23,1019,21,"currentProjectiles"],[949,41,1019,39],[949,45,1019,43],[950,10,1020,8],[950,17,1020,15,"currentProjectiles"],[950,35,1020,33],[950,36,1020,34,"map"],[950,39,1020,37],[950,40,1020,38,"projectile"],[950,50,1020,48],[950,54,1020,52],[951,12,1021,10],[951,16,1021,14],[951,17,1021,15,"projectile"],[951,27,1021,25],[951,29,1021,27],[951,36,1021,34],[951,40,1021,38],[953,12,1023,10],[954,12,1024,10],[954,18,1024,16,"currentTime"],[954,29,1024,27],[954,32,1024,30,"Date"],[954,36,1024,34],[954,37,1024,35,"now"],[954,40,1024,38],[954,41,1024,39],[954,42,1024,40],[955,12,1025,10],[955,18,1025,16,"startTime"],[955,27,1025,25],[955,30,1025,28,"projectile"],[955,40,1025,38],[955,41,1025,39,"startTime"],[955,50,1025,48],[955,54,1025,52,"currentTime"],[955,65,1025,63],[956,12,1026,10],[956,18,1026,16,"elapsedTime"],[956,29,1026,27],[956,32,1026,30,"currentTime"],[956,43,1026,41],[956,46,1026,44,"startTime"],[956,55,1026,53],[957,12,1027,10],[957,18,1027,16,"progress"],[957,26,1027,24],[957,29,1027,27,"Math"],[957,33,1027,31],[957,34,1027,32,"min"],[957,37,1027,35],[957,38,1027,36,"elapsedTime"],[957,49,1027,47],[957,53,1027,51,"projectile"],[957,63,1027,61],[957,64,1027,62,"duration"],[957,72,1027,70],[957,76,1027,74],[957,79,1027,77],[957,80,1027,78],[957,82,1027,80],[957,83,1027,81],[957,84,1027,82],[959,12,1029,10],[960,12,1030,10],[960,16,1030,14,"progress"],[960,24,1030,22],[960,28,1030,26],[960,29,1030,27],[960,33,1030,31],[960,34,1030,32,"projectile"],[960,44,1030,42],[960,45,1030,43,"hasHit"],[960,51,1030,49],[960,53,1030,51],[961,14,1031,12,"projectile"],[961,24,1031,22],[961,25,1031,23,"hasHit"],[961,31,1031,29],[961,34,1031,32],[961,38,1031,36],[962,14,1033,12,"console"],[962,21,1033,19],[962,22,1033,20,"log"],[962,25,1033,23],[962,26,1033,24],[962,51,1033,49,"projectile"],[962,61,1033,59],[962,62,1033,60,"abilityName"],[962,73,1033,71],[962,97,1033,95],[962,98,1033,96],[963,14,1034,12,"setCombatState"],[963,28,1034,26],[963,29,1034,27,"prev"],[963,33,1034,31],[963,37,1034,35],[964,16,1035,14],[964,22,1035,20,"newState"],[964,30,1035,28],[964,33,1035,31],[965,18,1035,33],[965,21,1035,36,"prev"],[966,16,1035,41],[966,17,1035,42],[967,16,1037,14],[967,20,1037,18,"projectile"],[967,30,1037,28],[967,31,1037,29,"isAOE"],[967,36,1037,34],[967,40,1037,38,"projectile"],[967,50,1037,48],[967,51,1037,49,"aoeRadius"],[967,60,1037,58],[967,64,1037,62,"projectile"],[967,74,1037,72],[967,75,1037,73,"aoeRadius"],[967,84,1037,82],[967,87,1037,85],[967,88,1037,86],[967,90,1037,88],[968,18,1038,16],[969,18,1039,16,"console"],[969,25,1039,23],[969,26,1039,24,"log"],[969,29,1039,27],[969,30,1039,28],[969,59,1039,57,"projectile"],[969,69,1039,67],[969,70,1039,68,"abilityName"],[969,81,1039,79],[969,97,1039,95,"projectile"],[969,107,1039,105],[969,108,1039,106,"aoeRadius"],[969,117,1039,115],[969,119,1039,117],[969,120,1039,118],[970,18,1041,16],[970,24,1041,22,"impactX"],[970,31,1041,29],[970,34,1041,32,"projectile"],[970,44,1041,42],[970,45,1041,43,"targetX"],[970,52,1041,50],[971,18,1042,16],[971,24,1042,22,"impactY"],[971,31,1042,29],[971,34,1042,32,"projectile"],[971,44,1042,42],[971,45,1042,43,"targetY"],[971,52,1042,50],[972,18,1043,16],[972,24,1043,22,"enemiesKilled"],[972,37,1043,50],[972,40,1043,53],[972,42,1043,55],[974,18,1045,16],[975,18,1046,16,"newState"],[975,26,1046,24],[975,27,1046,25,"enemies"],[975,34,1046,32],[975,37,1046,35,"newState"],[975,45,1046,43],[975,46,1046,44,"enemies"],[975,53,1046,51],[975,54,1046,52,"map"],[975,57,1046,55],[975,58,1046,56,"enemy"],[975,63,1046,61],[975,67,1046,65],[976,20,1047,18],[976,24,1047,22,"enemy"],[976,29,1047,27],[976,30,1047,28,"health"],[976,36,1047,34],[976,40,1047,38],[976,41,1047,39],[976,45,1047,43,"enemy"],[976,50,1047,48],[976,51,1047,49,"markedForDeath"],[976,65,1047,63],[976,67,1047,65],[976,74,1047,72,"enemy"],[976,79,1047,77],[977,20,1049,18],[977,26,1049,24,"enemyX"],[977,32,1049,30],[977,35,1049,33,"enemy"],[977,40,1049,38],[977,41,1049,39,"position"],[977,49,1049,47],[977,50,1049,48,"x"],[977,51,1049,49],[977,54,1049,52],[977,58,1049,56],[977,59,1049,57],[977,60,1049,58],[978,20,1050,18],[978,26,1050,24,"enemyY"],[978,32,1050,30],[978,35,1050,33,"enemy"],[978,40,1050,38],[978,41,1050,39,"position"],[978,49,1050,47],[978,50,1050,48,"y"],[978,51,1050,49],[978,54,1050,52],[978,58,1050,56],[979,20,1051,18],[979,26,1051,24,"distance"],[979,34,1051,32],[979,37,1051,35,"Math"],[979,41,1051,39],[979,42,1051,40,"sqrt"],[979,46,1051,44],[979,47,1051,45,"Math"],[979,51,1051,49],[979,52,1051,50,"pow"],[979,55,1051,53],[979,56,1051,54,"enemyX"],[979,62,1051,60],[979,65,1051,63,"impactX"],[979,72,1051,70],[979,74,1051,72],[979,75,1051,73],[979,76,1051,74],[979,79,1051,77,"Math"],[979,83,1051,81],[979,84,1051,82,"pow"],[979,87,1051,85],[979,88,1051,86,"enemyY"],[979,94,1051,92],[979,97,1051,95,"impactY"],[979,104,1051,102],[979,106,1051,104],[979,107,1051,105],[979,108,1051,106],[979,109,1051,107],[980,20,1053,18,"console"],[980,27,1053,25],[980,28,1053,26,"log"],[980,31,1053,29],[980,32,1053,30],[980,58,1053,56,"enemy"],[980,63,1053,61],[980,64,1053,62,"name"],[980,68,1053,66],[980,76,1053,74,"enemyX"],[980,82,1053,80],[980,87,1053,85,"enemyY"],[980,93,1053,91],[980,109,1053,107,"impactX"],[980,116,1053,114],[980,121,1053,119,"impactY"],[980,128,1053,126],[980,135,1053,133,"distance"],[980,143,1053,141],[980,144,1053,142,"toFixed"],[980,151,1053,149],[980,152,1053,150],[980,153,1053,151],[980,154,1053,152],[980,169,1053,167,"projectile"],[980,179,1053,177],[980,180,1053,178,"aoeRadius"],[980,189,1053,187],[980,194,1053,192],[980,195,1053,193],[981,20,1055,18],[981,24,1055,22,"distance"],[981,32,1055,30],[981,36,1055,34,"projectile"],[981,46,1055,44],[981,47,1055,45,"aoeRadius"],[981,56,1055,54],[981,58,1055,56],[982,22,1056,20],[983,22,1057,20],[983,28,1057,26,"newHealth"],[983,37,1057,35],[983,40,1057,38,"Math"],[983,44,1057,42],[983,45,1057,43,"max"],[983,48,1057,46],[983,49,1057,47],[983,50,1057,48],[983,52,1057,50,"enemy"],[983,57,1057,55],[983,58,1057,56,"health"],[983,64,1057,62],[983,67,1057,65,"projectile"],[983,77,1057,75],[983,78,1057,76,"damage"],[983,84,1057,82],[983,85,1057,83],[984,22,1059,20,"console"],[984,29,1059,27],[984,30,1059,28,"log"],[984,33,1059,31],[984,34,1059,32],[984,52,1059,50,"enemy"],[984,57,1059,55],[984,58,1059,56,"name"],[984,62,1059,60],[984,74,1059,72,"projectile"],[984,84,1059,82],[984,85,1059,83,"damage"],[984,91,1059,89],[984,103,1059,101,"enemy"],[984,108,1059,106],[984,109,1059,107,"health"],[984,115,1059,113],[984,122,1059,120,"newHealth"],[984,131,1059,129],[984,134,1059,132],[984,135,1059,133],[986,22,1061,20],[987,22,1062,20],[987,26,1062,24,"newHealth"],[987,35,1062,33],[987,39,1062,37],[987,40,1062,38],[987,44,1062,42,"enemy"],[987,49,1062,47],[987,50,1062,48,"health"],[987,56,1062,54],[987,59,1062,57],[987,60,1062,58],[987,62,1062,60],[988,24,1063,22,"console"],[988,31,1063,29],[988,32,1063,30,"log"],[988,35,1063,33],[988,36,1063,34],[988,52,1063,50,"enemy"],[988,57,1063,55],[988,58,1063,56,"name"],[988,62,1063,60],[988,76,1063,74,"projectile"],[988,86,1063,84],[988,87,1063,85,"abilityName"],[988,98,1063,96],[988,101,1063,99],[988,102,1063,100],[989,24,1064,22,"enemiesKilled"],[989,37,1064,35],[989,38,1064,36,"push"],[989,42,1064,40],[989,43,1064,41,"enemy"],[989,48,1064,46],[989,49,1064,47],[989,50,1064,48],[989,51,1064,49],[991,24,1066,22],[991,31,1066,29],[992,26,1067,24],[992,29,1067,27,"enemy"],[992,34,1067,32],[993,26,1068,24,"health"],[993,32,1068,30],[993,34,1068,32],[993,35,1068,33],[994,26,1069,24,"markedForDeath"],[994,40,1069,38],[994,42,1069,40],[994,46,1069,44],[995,26,1070,24,"lastDamaged"],[995,37,1070,35],[995,39,1070,37,"combatEngine"],[995,58,1070,49],[995,59,1070,49,"combatEngine"],[995,71,1070,49],[995,72,1070,50,"getCurrentTick"],[995,86,1070,64],[995,87,1070,65],[996,24,1071,22],[996,25,1071,23],[997,22,1072,20],[997,23,1072,21],[997,29,1072,27],[998,24,1073,22],[998,31,1073,29],[999,26,1074,24],[999,29,1074,27,"enemy"],[999,34,1074,32],[1000,26,1075,24,"health"],[1000,32,1075,30],[1000,34,1075,32,"newHealth"],[1000,43,1075,41],[1001,26,1076,24,"lastDamaged"],[1001,37,1076,35],[1001,39,1076,37,"combatEngine"],[1001,58,1076,49],[1001,59,1076,49,"combatEngine"],[1001,71,1076,49],[1001,72,1076,50,"getCurrentTick"],[1001,86,1076,64],[1001,87,1076,65],[1002,24,1077,22],[1002,25,1077,23],[1003,22,1078,20],[1004,20,1079,18],[1005,20,1081,18],[1005,27,1081,25,"enemy"],[1005,32,1081,30],[1005,33,1081,31],[1005,34,1081,32],[1006,18,1082,16],[1006,19,1082,17],[1006,20,1082,18],[1008,18,1084,16],[1009,18,1085,16],[1009,22,1085,20,"enemiesKilled"],[1009,35,1085,33],[1009,36,1085,34,"length"],[1009,42,1085,40],[1009,45,1085,43],[1009,46,1085,44],[1009,48,1085,46],[1010,20,1086,18,"console"],[1010,27,1086,25],[1010,28,1086,26,"log"],[1010,31,1086,29],[1010,32,1086,30],[1010,52,1086,50,"enemiesKilled"],[1010,65,1086,63],[1010,66,1086,64,"length"],[1010,72,1086,70],[1010,94,1086,92,"projectile"],[1010,104,1086,102],[1010,105,1086,103,"abilityName"],[1010,116,1086,114],[1010,118,1086,116],[1010,119,1086,117],[1011,20,1087,18,"setTimeout"],[1011,30,1087,28],[1011,31,1087,29],[1011,37,1087,35],[1012,22,1088,20,"enemiesKilled"],[1012,35,1088,33],[1012,36,1088,34,"forEach"],[1012,43,1088,41],[1012,44,1088,42,"enemy"],[1012,49,1088,47],[1012,53,1088,51,"handleEnemyKill"],[1012,68,1088,66],[1012,69,1088,67,"enemy"],[1012,74,1088,72],[1012,75,1088,73],[1012,76,1088,74],[1013,20,1089,18],[1013,21,1089,19],[1013,23,1089,21],[1013,24,1089,22],[1013,25,1089,23],[1014,18,1090,16],[1015,16,1092,14],[1015,17,1092,15],[1015,23,1092,21],[1016,18,1093,16],[1017,18,1094,16],[1017,24,1094,22,"enemyIndex"],[1017,34,1094,32],[1017,37,1094,35,"newState"],[1017,45,1094,43],[1017,46,1094,44,"enemies"],[1017,53,1094,51],[1017,54,1094,52,"findIndex"],[1017,63,1094,61],[1017,64,1094,62,"e"],[1017,65,1094,63],[1017,69,1094,67,"e"],[1017,70,1094,68],[1017,71,1094,69,"id"],[1017,73,1094,71],[1017,78,1094,76,"projectile"],[1017,88,1094,86],[1017,89,1094,87,"targetEnemyId"],[1017,102,1094,100],[1017,103,1094,101],[1018,18,1096,16],[1018,22,1096,20,"enemyIndex"],[1018,32,1096,30],[1018,36,1096,34],[1018,37,1096,35],[1018,41,1096,39,"newState"],[1018,49,1096,47],[1018,50,1096,48,"enemies"],[1018,57,1096,55],[1018,58,1096,56,"enemyIndex"],[1018,68,1096,66],[1018,69,1096,67],[1018,70,1096,68,"health"],[1018,76,1096,74],[1018,79,1096,77],[1018,80,1096,78],[1018,84,1096,82],[1018,85,1096,83,"newState"],[1018,93,1096,91],[1018,94,1096,92,"enemies"],[1018,101,1096,99],[1018,102,1096,100,"enemyIndex"],[1018,112,1096,110],[1018,113,1096,111],[1018,114,1096,112,"markedForDeath"],[1018,128,1096,126],[1018,130,1096,128],[1019,20,1097,18,"newState"],[1019,28,1097,26],[1019,29,1097,27,"enemies"],[1019,36,1097,34],[1019,39,1097,37],[1019,40,1097,38],[1019,43,1097,41,"newState"],[1019,51,1097,49],[1019,52,1097,50,"enemies"],[1019,59,1097,57],[1019,60,1097,58],[1020,20,1098,18],[1020,26,1098,24,"enemy"],[1020,31,1098,29],[1020,34,1098,32,"newState"],[1020,42,1098,40],[1020,43,1098,41,"enemies"],[1020,50,1098,48],[1020,51,1098,49,"enemyIndex"],[1020,61,1098,59],[1020,62,1098,60],[1021,20,1099,18],[1021,26,1099,24,"newHealth"],[1021,35,1099,33],[1021,38,1099,36,"Math"],[1021,42,1099,40],[1021,43,1099,41,"max"],[1021,46,1099,44],[1021,47,1099,45],[1021,48,1099,46],[1021,50,1099,48,"enemy"],[1021,55,1099,53],[1021,56,1099,54,"health"],[1021,62,1099,60],[1021,65,1099,63,"projectile"],[1021,75,1099,73],[1021,76,1099,74,"damage"],[1021,82,1099,80],[1021,83,1099,81],[1022,20,1101,18,"newState"],[1022,28,1101,26],[1022,29,1101,27,"enemies"],[1022,36,1101,34],[1022,37,1101,35,"enemyIndex"],[1022,47,1101,45],[1022,48,1101,46],[1022,51,1101,49],[1023,22,1102,20],[1023,25,1102,23,"enemy"],[1023,30,1102,28],[1024,22,1103,20,"health"],[1024,28,1103,26],[1024,30,1103,28,"newHealth"],[1024,39,1103,37],[1025,22,1104,20,"lastDamaged"],[1025,33,1104,31],[1025,35,1104,33,"combatEngine"],[1025,54,1104,45],[1025,55,1104,45,"combatEngine"],[1025,67,1104,45],[1025,68,1104,46,"getCurrentTick"],[1025,82,1104,60],[1025,83,1104,61],[1026,20,1105,18],[1026,21,1105,19],[1027,20,1107,18,"console"],[1027,27,1107,25],[1027,28,1107,26,"log"],[1027,31,1107,29],[1027,32,1107,30],[1027,60,1107,58,"enemy"],[1027,65,1107,63],[1027,66,1107,64,"name"],[1027,70,1107,68],[1027,82,1107,80,"newHealth"],[1027,91,1107,89],[1027,95,1107,93,"enemy"],[1027,100,1107,98],[1027,101,1107,99,"maxHealth"],[1027,110,1107,108],[1027,112,1107,110],[1027,113,1107,111],[1029,20,1109,18],[1030,20,1110,18],[1030,24,1110,22,"newHealth"],[1030,33,1110,31],[1030,37,1110,35],[1030,38,1110,36],[1030,42,1110,40,"enemy"],[1030,47,1110,45],[1030,48,1110,46,"health"],[1030,54,1110,52],[1030,57,1110,55],[1030,58,1110,56],[1030,60,1110,58],[1031,22,1111,20,"console"],[1031,29,1111,27],[1031,30,1111,28,"log"],[1031,33,1111,31],[1031,34,1111,32],[1031,54,1111,52,"enemy"],[1031,59,1111,57],[1031,60,1111,58,"name"],[1031,64,1111,62],[1031,78,1111,76,"projectile"],[1031,88,1111,86],[1031,89,1111,87,"abilityName"],[1031,100,1111,98],[1031,136,1111,134],[1031,137,1111,135],[1033,22,1113,20],[1034,22,1114,20,"newState"],[1034,30,1114,28],[1034,31,1114,29,"enemies"],[1034,38,1114,36],[1034,39,1114,37,"enemyIndex"],[1034,49,1114,47],[1034,50,1114,48],[1034,53,1114,51],[1035,24,1115,22],[1035,27,1115,25,"newState"],[1035,35,1115,33],[1035,36,1115,34,"enemies"],[1035,43,1115,41],[1035,44,1115,42,"enemyIndex"],[1035,54,1115,52],[1035,55,1115,53],[1036,24,1116,22,"health"],[1036,30,1116,28],[1036,32,1116,30],[1036,33,1116,31],[1037,24,1117,22,"isDying"],[1037,31,1117,29],[1037,33,1117,31],[1037,37,1117,35],[1038,24,1118,22,"deathStartTime"],[1038,38,1118,36],[1038,40,1118,38,"Date"],[1038,44,1118,42],[1038,45,1118,43,"now"],[1038,48,1118,46],[1038,49,1118,47],[1039,22,1119,20],[1039,23,1119,21],[1040,20,1120,18],[1040,21,1120,19],[1040,27,1120,25],[1040,31,1120,29,"enemy"],[1040,36,1120,34],[1040,37,1120,35,"health"],[1040,43,1120,41],[1040,46,1120,44],[1040,47,1120,45],[1040,49,1120,47],[1041,22,1121,20,"console"],[1041,29,1121,27],[1041,30,1121,28,"log"],[1041,33,1121,31],[1041,34,1121,32],[1041,48,1121,46,"enemy"],[1041,53,1121,51],[1041,54,1121,52,"name"],[1041,58,1121,56],[1041,70,1121,68,"projectile"],[1041,80,1121,78],[1041,81,1121,79,"damage"],[1041,87,1121,85],[1041,99,1121,97,"enemy"],[1041,104,1121,102],[1041,105,1121,103,"health"],[1041,111,1121,109],[1041,117,1121,115,"newHealth"],[1041,126,1121,124],[1041,129,1121,127],[1041,130,1121,128],[1042,20,1122,18],[1043,18,1123,16],[1044,16,1124,14],[1045,16,1126,14],[1045,23,1126,21,"newState"],[1045,31,1126,29],[1046,14,1127,12],[1046,15,1127,13],[1046,16,1127,14],[1047,12,1128,10],[1049,12,1130,10],[1050,12,1131,10],[1050,16,1131,14,"progress"],[1050,24,1131,22],[1050,28,1131,26],[1050,31,1131,29],[1050,33,1131,31],[1051,14,1132,12],[1051,21,1132,19],[1051,25,1132,23],[1052,12,1133,10],[1053,12,1135,10],[1053,19,1135,17,"projectile"],[1053,29,1135,27],[1054,10,1136,8],[1054,11,1136,9],[1054,12,1136,10],[1054,13,1136,11,"filter"],[1054,19,1136,17],[1054,20,1136,18,"Boolean"],[1054,27,1136,25],[1054,28,1136,26],[1055,8,1137,6],[1055,9,1137,7],[1055,10,1137,8],[1056,6,1138,4],[1056,7,1138,5],[1058,6,1140,4],[1059,6,1141,4],[1059,12,1141,10,"impactInterval"],[1059,26,1141,24],[1059,29,1141,27,"setInterval"],[1059,40,1141,38],[1059,41,1141,39,"processProjectileImpacts"],[1059,65,1141,63],[1059,67,1141,65],[1059,69,1141,67],[1059,70,1141,68],[1060,6,1142,4],[1060,13,1142,11],[1060,19,1142,17,"clearInterval"],[1060,32,1142,30],[1060,33,1142,31,"impactInterval"],[1060,47,1142,45],[1060,48,1142,46],[1061,4,1143,2],[1061,5,1143,3],[1061,7,1143,5],[1061,8,1143,6,"handleEnemyKill"],[1061,23,1143,21],[1061,24,1143,22],[1061,25,1143,23],[1063,4,1145,2],[1064,4,1146,2],[1064,10,1146,8,"saveAbilityData"],[1064,25,1146,23],[1064,28,1146,26],[1064,32,1146,26,"useCallback"],[1064,38,1146,37],[1064,39,1146,37,"useCallback"],[1064,50,1146,37],[1064,52,1146,38],[1064,58,1146,44],[1065,6,1147,4],[1065,10,1147,8,"combatState"],[1065,21,1147,19],[1065,22,1147,20,"abilityManager"],[1065,36,1147,34],[1065,38,1147,36],[1066,8,1148,6],[1066,14,1148,12,"abilityData"],[1066,25,1148,23],[1066,28,1148,26,"combatState"],[1066,39,1148,37],[1066,40,1148,38,"abilityManager"],[1066,54,1148,52],[1066,55,1148,53,"getSaveData"],[1066,66,1148,64],[1066,67,1148,65],[1066,68,1148,66],[1067,8,1149,6,"console"],[1067,15,1149,13],[1067,16,1149,14,"log"],[1067,19,1149,17],[1067,20,1149,18],[1067,70,1149,68],[1067,72,1149,70,"abilityData"],[1067,83,1149,81],[1067,84,1149,82],[1068,8,1150,6,"game"],[1068,12,1150,10],[1068,13,1150,11,"updateAbilityData"],[1068,30,1150,28],[1068,31,1150,29,"abilityData"],[1068,42,1150,40],[1068,43,1150,41],[1069,6,1151,4],[1070,4,1152,2],[1070,5,1152,3],[1070,7,1152,5],[1070,8,1152,6,"combatState"],[1070,19,1152,17],[1070,20,1152,18,"abilityManager"],[1070,34,1152,32],[1070,36,1152,34,"game"],[1070,40,1152,38],[1070,41,1152,39,"updateAbilityData"],[1070,58,1152,56],[1070,59,1152,57],[1070,60,1152,58],[1071,4,1154,2],[1071,10,1154,8,"contextValue"],[1071,22,1154,39],[1071,25,1154,42,"React"],[1071,30,1154,47],[1071,31,1154,47,"default"],[1071,38,1154,47],[1071,39,1154,48,"useMemo"],[1071,46,1154,55],[1071,47,1154,56],[1071,54,1154,63],[1072,6,1155,4,"combatState"],[1072,17,1155,15],[1073,6,1156,4,"projectiles"],[1073,17,1156,15],[1074,6,1157,4,"startCombat"],[1074,17,1157,15],[1075,6,1158,4,"stopCombat"],[1075,16,1158,14],[1076,6,1159,4,"equipAbility"],[1076,18,1159,16],[1077,6,1160,4,"handleEnemyKill"],[1077,21,1160,19],[1078,6,1161,4,"getDeck"],[1078,13,1161,11],[1079,6,1162,4,"getAvailableAbilities"],[1079,27,1162,25],[1080,6,1163,4,"upgradeAbility"],[1080,20,1163,18],[1081,6,1164,4,"spawnEnemy"],[1081,16,1164,14],[1082,6,1165,4,"spawnBoss"],[1082,15,1165,13],[1083,6,1166,4,"clearAllEnemies"],[1083,21,1166,19],[1084,6,1167,4,"clearSpecificEnemy"],[1084,24,1167,22],[1085,6,1168,4],[1086,6,1169,4,"findClosestEnemy"],[1086,22,1169,20],[1087,6,1170,4,"updateNinjaPosition"],[1087,25,1170,23],[1088,6,1171,4,"setManualControlActive"],[1088,28,1171,26],[1089,6,1172,4,"lastExplosionTime"],[1089,23,1172,21],[1090,6,1173,4,"useAbilityManually"],[1090,24,1173,22],[1091,6,1173,24],[1092,6,1174,4,"saveAbilityData"],[1092,21,1174,19],[1093,6,1174,21],[1094,6,1175,4,"shadowClone"],[1094,17,1175,15],[1094,19,1175,17,"combatState"],[1094,30,1175,28],[1094,31,1175,29,"shadowClone"],[1094,42,1175,40],[1094,43,1175,42],[1095,4,1176,2],[1095,5,1176,3],[1095,6,1176,4],[1095,8,1176,6],[1096,4,1177,4],[1097,4,1178,4],[1098,4,1179,4,"combatState"],[1098,15,1179,15],[1098,17,1180,4,"projectiles"],[1098,28,1180,15],[1098,30,1181,4,"lastExplosionTime"],[1098,47,1181,21],[1099,4,1182,4],[1100,4,1183,4,"combatState"],[1100,15,1183,15],[1100,16,1183,16,"abilityManager"],[1100,30,1183,30],[1100,32,1184,4,"combatState"],[1100,43,1184,15],[1100,44,1184,16,"enemies"],[1100,51,1184,23],[1100,53,1185,4,"combatState"],[1100,64,1185,15],[1100,65,1185,16,"shadowClone"],[1100,76,1185,27],[1101,4,1185,29],[1102,4,1186,4,"useAbilityManually"],[1102,22,1186,22],[1103,4,1186,24],[1104,4,1187,4,"saveAbilityData"],[1104,19,1187,19],[1104,20,1187,21],[1105,4,1187,21],[1105,5,1188,3],[1105,6,1188,4],[1106,4,1190,2],[1106,24,1191,4],[1106,28,1191,4,"_reactJsxDevRuntime"],[1106,47,1191,4],[1106,48,1191,4,"jsxDEV"],[1106,54,1191,4],[1106,56,1191,5,"CombatContext"],[1106,69,1191,18],[1106,70,1191,19,"Provider"],[1106,78,1191,27],[1107,6,1191,28,"value"],[1107,11,1191,33],[1107,13,1191,35,"contextValue"],[1107,25,1191,48],[1108,6,1191,48,"children"],[1108,14,1191,48],[1108,16,1192,7,"children"],[1109,4,1192,15],[1110,6,1192,15,"fileName"],[1110,14,1192,15],[1110,16,1192,15,"_jsxFileName"],[1110,28,1192,15],[1111,6,1192,15,"lineNumber"],[1111,16,1192,15],[1112,6,1192,15,"columnNumber"],[1112,18,1192,15],[1113,4,1192,15],[1113,11,1193,28],[1113,12,1193,29],[1114,2,1195,0],[1114,3,1195,1],[1115,2,1195,2,"_s4"],[1115,5,1195,2],[1115,6,106,13,"CombatProvider"],[1115,20,106,27],[1116,4,106,27],[1116,12,107,15,"useGame"],[1116,24,107,22],[1116,25,107,22,"useGame"],[1116,32,107,22],[1116,34,108,77,"useZone"],[1116,46,108,84],[1116,47,108,84,"useZone"],[1116,54,108,84],[1117,2,108,84],[1118,2,108,84,"_c"],[1118,4,108,84],[1118,7,106,13,"CombatProvider"],[1118,21,106,27],[1119,2,106,27],[1119,6,106,27,"_c"],[1119,8,106,27],[1120,2,106,27,"$RefreshReg$"],[1120,14,106,27],[1120,15,106,27,"_c"],[1120,17,106,27],[1121,0,106,27],[1121,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","setTimeout$argument_0","newState.enemies.filter$argument_0","deadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","enemiesToKill.forEach$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","handleProjectileHit","setProjectiles$argument_0","prev.filter$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCuB;KDO;GHiB;6CKG;mBHM;4BIa;sDCC,sBD;0BEE;WFG;OJE;+BOoD;6BC+D;mBDG;OPiC;mDSuD,2CT;kDSC,4CT;iDSO;OTU;mGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KGiB;0BUK;KVG;GLC;mCgBG;oBCY;KDU;GhBI;2BkBG;GlBE;0CmBO;GnBE;6CoBG;GpBG;8BqBG;mBnBG;oDKI,sCL;KmBa;mBCG,oBC,2BD,CD;GrBC;sBwBG;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GxBoB;2B8BG;mBR0C,6BQ;epBG;KoBE;G9BG;yB+BG;G/BsC;8BgCG;GhC4B;wCiCG;mB/BE,uC+B;GjCQ;uCkCG;mBhCC,wCgC;GlCE;uBmCG;GnCE;kBoCE;GpCE;gCqCE;GrCE;yBsCE;GtCE;0BuCG;mBrCE;MqCG;GvCC;qBwCM;mBtC2B;MsCG;GxCG;oByCG;mBvCE;MuCG;GzCC;6B0CG;mBxCC;mCyCE,6BzC;MwCC;G1CC;yC4CG;qB1C8B;O0CI;G5CQ;YCC;W4CO;K5CE;GDC;YCG;qC6CC;qBxBC;sCyBC;2B7Cc;wD8CY;iB9CoC;6BQK;0CuCC,+BvC;mBRC;8DKK,sCL;a6CiC;SzBS;OwBC;K7CC;W4CI,mC5C;GDC;sCkDG;GlDM;wDmDE;InDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}