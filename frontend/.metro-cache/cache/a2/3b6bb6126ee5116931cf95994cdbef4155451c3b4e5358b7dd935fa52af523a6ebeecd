{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - integrates with zone progression and awards XP/gold\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      console.log(`🗡️  MOBILE DEBUG - handleEnemyKill CALLED for enemy:`, enemy.id);\n\n      // Award XP and gold directly using useGame hook with subscription multipliers\n      const baseXpReward = 500; // 25X Base XP reward per kill (massively boosted for faster progression)\n      const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n      const dropMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n      const xpReward = Math.floor(baseXpReward * xpMultiplier);\n      const goldReward = Math.floor(1000 * dropMultiplier); // 100X GOLD BOOST (was 10, now 1000)\n\n      console.log(`💰 MOBILE DEBUG - Awarding ${xpReward} XP and ${goldReward} gold for kill`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - XP Multiplier: ${xpMultiplier}, Drop Multiplier: ${dropMultiplier}`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - Base XP: ${baseXpReward}, Final XP: ${xpReward}`);\n      console.log(`🔍 SUBSCRIPTION DEBUG - Full benefits:`, JSON.stringify(game.gameState.subscriptionBenefits));\n      console.log(`📱 MOBILE DEBUG - Platform: ${Platform.default.OS}, Time: ${Date.now()}`);\n\n      // MOBILE FIX: Defer ALL cross-context state updates to prevent render-phase violations\n      // Use setTimeout to break the synchronous chain and prevent React Native bridge overload\n      setTimeout(() => {\n        console.log(`🥷 MOBILE DEBUG - About to call updateNinja with rewards`);\n\n        // Award XP and gold using GameContext\n        game.updateNinja(prev => {\n          console.log(`📊 MOBILE DEBUG - XP before: ${prev.experience}, after: ${prev.experience + xpReward}`);\n          console.log(`💰 MOBILE DEBUG - Gold before: ${prev.gold}, after: ${prev.gold + goldReward}`);\n          return {\n            experience: prev.experience + xpReward,\n            gold: prev.gold + goldReward\n          };\n        });\n\n        // Convert CombatEnemy to CurrentEnemy format for zone progression\n        const zoneEnemy = {\n          id: enemy.id,\n          typeId: enemy.zoneTypeId || 'test_orc',\n          // Use zone type ID if available, fallback to test\n          name: enemy.name,\n          icon: '🧌',\n          // Default icon for test enemies\n          hp: 0,\n          // Dead enemy\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 20,\n          // Use zone XP if available, fallback to base reward\n          position: enemy.position\n        };\n        console.log(`🎯 ENEMY KILLED: ${zoneEnemy.name} (${zoneEnemy.typeId}) - Recording kill for selected zone`);\n        recordEnemyKill(zoneEnemy);\n      }, 0); // 0ms delay to defer to next event loop\n    }, [game.updateNinja, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    const handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      let enemiesToKill = []; // Track enemies to kill outside of setState\n\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal\n                      setTimeout(() => {\n                        // Set isAlive to false to trigger revival system\n                        game.updateGameState({\n                          isAlive: false\n                        });\n                      }, 100);\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Identify dead enemies but DON'T handle kills inside setState\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        enemiesToKill = [...deadEnemies]; // Store for processing outside setState\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (deadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${deadEnemies.length} dead enemies:`, deadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // HANDLE ENEMY KILLS OUTSIDE OF setCombatState TO AVOID CROSS-COMPONENT ISSUES\n      console.log(`⚔️ MOBILE DEBUG - Processing ${enemiesToKill.length} enemy kills outside setState`);\n      enemiesToKill.forEach((enemy, index) => {\n        console.log(`💀 MOBILE DEBUG - Processing kill ${index + 1}/${enemiesToKill.length} for enemy ${enemy.id}`);\n        handleEnemyKill(enemy);\n      });\n    }, [handleEnemyKill]); // Only depend on handleEnemyKill, not combatEngine\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 0,\n      y: 0\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // Handle projectile hit - deals damage to target enemy\n    const handleProjectileHit = projectile => {\n      console.log(`💥 Projectile ${projectile.id} hit enemy ${projectile.targetEnemyId} for ${projectile.damage} damage`);\n      setCombatState(prev => {\n        const newState = {\n          ...prev\n        };\n\n        // Find the target enemy and deal damage\n        const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n        if (enemyIndex >= 0) {\n          newState.enemies = [...newState.enemies];\n          newState.enemies[enemyIndex] = {\n            ...newState.enemies[enemyIndex],\n            health: newState.enemies[enemyIndex].health - projectile.damage,\n            lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n          };\n          console.log(`🎯 Enemy ${projectile.targetEnemyId} health: ${newState.enemies[enemyIndex].health}/${newState.enemies[enemyIndex].maxHealth}`);\n        }\n        return newState;\n      });\n\n      // Remove projectile after hit\n      setProjectiles(prev => prev.filter(p => p.id !== projectile.id));\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // For AOE abilities, create a SINGLE projectile targeting the closest enemy\n        // When it hits, it will damage ALL enemies in the AOE radius\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n\n        // Create single AOE projectile\n        createProjectile(target, damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        }, true, ability.stats.aoeRadius); // Pass AOE flags\n\n        console.log(`🎯 ${ability.name} AOE projectile created targeting ${target.name} with ${ability.stats.aoeRadius} radius`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // Schedule projectile hit\n      setTimeout(() => {\n        handleProjectileHit(projectile);\n      }, 500);\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // Trigger level-up explosion that actually damages enemies\n    const triggerLevelUpExplosion = () => {\n      console.log('💥 LEVEL UP EXPLOSION TRIGGERED IN COMBAT CONTEXT!');\n      const explosionTime = Date.now();\n      setLastExplosionTime(explosionTime);\n      setCombatState(prev => {\n        // Calculate rewards for all current enemies\n        const enemyCount = prev.enemies.length;\n        const explosionXP = enemyCount * 500; // SAME AS REGULAR KILL XP (500 XP per enemy in explosion)\n        const explosionGold = enemyCount * 500; // 100X GOLD BOOST (was 5, now 500)\n\n        console.log(`💥 Explosion killing ${enemyCount} enemies, awarding ${explosionXP} XP and ${explosionGold} gold`);\n\n        // Award XP using updateNinja if there are enemies to kill - MOBILE FIX: defer to prevent render-phase violation\n        if (explosionXP > 0) {\n          setTimeout(() => {\n            game.updateNinja(ninja => ({\n              experience: ninja.experience + explosionXP,\n              gold: ninja.gold + explosionGold\n            }));\n          }, 0); // Defer to next event loop to prevent cross-context update during render\n        }\n\n        // Actually damage all enemies to 0 health instead of just clearing them\n        // This will trigger the normal kill processing in the next tick\n        const damagedEnemies = prev.enemies.map(enemy => ({\n          ...enemy,\n          health: 0,\n          // Set health to 0 to trigger normal kill processing\n          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n        }));\n        return {\n          ...prev,\n          enemies: damagedEnemies\n        };\n      });\n    };\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              projectile.hasHit = true;\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    if (distance <= projectile.aoeRadius) {\n                      // Calculate damage for this enemy\n                      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(projectile.damage, prev.playerStats, enemy.stats);\n                      const newHealth = Math.max(0, enemy.health - damageResult.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${damageResult.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    setTimeout(() => {\n                      enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                    }, 0);\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // Award XP when enemy dies\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 SINGLE TARGET KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n\n                      // Mark enemy as killed immediately to prevent duplicate processing\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        markedForDeath: true\n                      };\n\n                      // Call handleEnemyKill with original enemy stats before damage\n                      setTimeout(() => handleEnemyKill(enemy), 0);\n                    }\n                  }\n                }\n                return newState;\n              });\n            }\n\n            // Clean up completed projectiles\n            if (progress >= 1.5) {\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, [handleEnemyKill]);\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      triggerLevelUpExplosion,\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1173,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"Ef87VgEx3VhPv5l6GrayJ3/PL7k=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1107,"map":[[15,2,93,0,"Object"],[15,8,93,0],[15,9,93,0,"defineProperty"],[15,23,93,0],[15,24,93,0,"exports"],[15,31,93,0],[16,4,93,0,"enumerable"],[16,14,93,0],[17,4,93,0,"get"],[17,7,93,0],[17,18,93,0,"get"],[17,19,93,0],[18,6,93,0],[18,13,93,0,"useCombat"],[18,22,93,0],[19,4,93,0],[20,2,93,0],[21,2,103,0,"Object"],[21,8,103,0],[21,9,103,0,"defineProperty"],[21,23,103,0],[21,24,103,0,"exports"],[21,31,103,0],[22,4,103,0,"enumerable"],[22,14,103,0],[23,4,103,0,"get"],[23,7,103,0],[23,18,103,0,"get"],[23,19,103,0],[24,6,103,0],[24,13,103,0,"CombatProvider"],[24,27,103,0],[25,4,103,0],[26,2,103,0],[27,2,1,0],[27,6,1,0,"_react"],[27,12,1,0],[27,15,1,0,"require"],[27,22,1,0],[27,23,1,0,"_dependencyMap"],[27,37,1,0],[28,2,1,0],[28,6,1,0,"React"],[28,11,1,0],[28,14,1,0,"_interopDefault"],[28,29,1,0],[28,30,1,0,"_react"],[28,36,1,0],[29,2,1,110],[29,6,1,110,"_reactNativeWebDistExportsPlatform"],[29,40,1,110],[29,43,1,110,"require"],[29,50,1,110],[29,51,1,110,"_dependencyMap"],[29,65,1,110],[30,2,1,110],[30,6,1,110,"Platform"],[30,14,1,110],[30,17,1,110,"_interopDefault"],[30,32,1,110],[30,33,1,110,"_reactNativeWebDistExportsPlatform"],[30,67,1,110],[31,2,3,0],[31,6,3,0,"_engineCombatEngine"],[31,25,3,0],[31,28,3,0,"require"],[31,35,3,0],[31,36,3,0,"_dependencyMap"],[31,50,3,0],[32,2,4,0],[32,6,4,0,"_typesAbilityTypes"],[32,24,4,0],[32,27,4,0,"require"],[32,34,4,0],[32,35,4,0,"_dependencyMap"],[32,49,4,0],[33,2,5,0],[33,6,5,0,"_GameContext"],[33,18,5,0],[33,21,5,0,"require"],[33,28,5,0],[33,29,5,0,"_dependencyMap"],[33,43,5,0],[34,2,6,0],[34,6,6,0,"_ZoneContext"],[34,18,6,0],[34,21,6,0,"require"],[34,28,6,0],[34,29,6,0,"_dependencyMap"],[34,43,6,0],[35,2,6,40],[35,6,6,40,"_reactJsxDevRuntime"],[35,25,6,40],[35,28,6,40,"require"],[35,35,6,40],[35,36,6,40,"_dependencyMap"],[35,50,6,40],[36,2,91,0],[36,8,91,6,"CombatContext"],[36,21,91,19],[36,37,91,22],[36,41,91,22,"createContext"],[36,47,91,35],[36,48,91,35,"createContext"],[36,61,91,35],[36,63,91,67,"undefined"],[36,72,91,76],[36,73,91,77],[37,2,93,7],[37,8,93,13,"useCombat"],[37,17,93,22],[37,20,93,25,"useCombat"],[37,21,93,25],[37,26,93,50],[38,4,93,50,"_s"],[38,6,93,50],[39,4,94,2],[39,10,94,8,"context"],[39,17,94,15],[39,20,94,18],[39,24,94,18,"useContext"],[39,30,94,28],[39,31,94,28,"useContext"],[39,41,94,28],[39,43,94,29,"CombatContext"],[39,56,94,42],[39,57,94,43],[40,4,95,2],[40,8,95,6],[40,9,95,7,"context"],[40,16,95,14],[40,18,95,16],[41,6,96,4],[41,12,96,10],[41,16,96,14,"Error"],[41,21,96,19],[41,22,96,20],[41,70,96,68],[41,71,96,69],[42,4,97,2],[43,4,98,2],[43,11,98,9,"context"],[43,18,98,16],[44,2,99,0],[44,3,99,1],[45,2,99,2,"_s"],[45,4,99,2],[45,5,93,13,"useCombat"],[45,14,93,22],[46,2,101,0],[46,6,101,4,"enemyCounter"],[46,18,101,16],[46,21,101,19],[46,22,101,20],[46,23,101,21],[46,24,101,22],[48,2,103,7],[48,8,103,13,"CombatProvider"],[48,22,103,27],[48,25,103,30,"CombatProvider"],[48,26,103,31],[49,4,103,33,"children"],[50,2,103,67],[50,3,103,68],[50,8,103,73],[51,4,103,73,"_s4"],[51,7,103,73],[52,4,103,73],[52,8,103,73,"_s3"],[52,11,103,73],[52,14,103,73,"$RefreshSig$"],[52,26,103,73],[53,4,104,2],[53,10,104,8,"game"],[53,14,104,12],[53,17,104,15],[53,21,104,15,"useGame"],[53,33,104,22],[53,34,104,22,"useGame"],[53,41,104,22],[53,43,104,23],[53,44,104,24],[54,4,105,2],[54,10,105,8],[55,6,105,10,"currentZone"],[55,17,105,21],[56,6,105,23,"currentZoneLevel"],[56,22,105,39],[57,6,105,41,"recordEnemyKill"],[57,21,105,56],[58,6,105,58,"spawnZoneEnemy"],[59,4,105,73],[59,5,105,74],[59,8,105,77],[59,12,105,77,"useZone"],[59,24,105,84],[59,25,105,84,"useZone"],[59,32,105,84],[59,34,105,85],[59,35,105,86],[61,4,107,2],[62,4,108,2],[62,10,108,8,"initialCombatState"],[62,28,108,39],[62,31,108,42],[63,6,109,4,"isInCombat"],[63,16,109,14],[63,18,109,16],[63,23,109,21],[64,6,110,4,"currentTick"],[64,17,110,15],[64,19,110,17],[64,20,110,18],[65,6,111,4,"enemies"],[65,13,111,11],[65,15,111,13],[65,17,111,15],[66,6,112,4,"abilityManager"],[66,20,112,18],[66,22,112,20],[66,26,112,24,"AbilityManager"],[66,44,112,38],[66,45,112,38,"AbilityManager"],[66,59,112,38],[66,60,112,39],[66,61,112,40],[67,6,113,4,"statusEffects"],[67,19,113,17],[67,21,113,19],[67,25,113,23,"StatusEffectManager"],[67,44,113,42],[67,45,113,42,"StatusEffectManager"],[67,64,113,42],[67,65,113,43],[67,66,113,44],[68,6,114,4,"playerStats"],[68,17,114,15],[68,19,114,17],[69,8,115,6,"attack"],[69,14,115,12],[69,16,115,14],[69,18,115,16],[70,8,115,18],[71,8,116,6,"defense"],[71,15,116,13],[71,17,116,15],[71,18,116,16],[72,8,117,6,"health"],[72,14,117,12],[72,16,117,14],[72,19,117,17],[73,8,118,6,"maxHealth"],[73,17,118,15],[73,19,118,17],[73,22,118,20],[74,8,119,6,"critChance"],[74,18,119,16],[74,20,119,18],[74,21,119,19],[75,8,120,6,"critDamage"],[75,18,120,16],[75,20,120,18],[75,23,120,21],[76,8,121,6,"cooldownReduction"],[76,25,121,23],[76,27,121,25],[77,6,122,4],[78,4,123,2],[78,5,123,3],[79,4,125,2],[79,10,125,8],[79,11,125,9,"combatState"],[79,22,125,20],[79,24,125,22,"setCombatState"],[79,38,125,36],[79,39,125,37],[79,42,125,40],[79,46,125,40,"useState"],[79,52,125,48],[79,53,125,48,"useState"],[79,61,125,48],[79,63,125,62,"initialCombatState"],[79,81,125,80],[79,82,125,81],[81,4,127,2],[82,4,128,2],[82,8,128,2,"useEffect"],[82,14,128,11],[82,15,128,11,"useEffect"],[82,24,128,11],[82,26,128,12],[82,32,128,18],[83,6,129,4],[83,10,129,8,"game"],[83,14,129,12],[83,15,129,13,"gameState"],[83,24,129,22],[83,25,129,23,"abilityData"],[83,36,129,34],[83,40,129,38,"combatState"],[83,51,129,49],[83,52,129,50,"abilityManager"],[83,66,129,64],[83,68,129,66],[84,8,130,6,"console"],[84,15,130,13],[84,16,130,14,"log"],[84,19,130,17],[84,20,130,18],[84,68,130,66],[84,70,130,68,"game"],[84,74,130,72],[84,75,130,73,"gameState"],[84,84,130,82],[84,85,130,83,"abilityData"],[84,96,130,94],[84,97,130,95],[85,8,131,6,"combatState"],[85,19,131,17],[85,20,131,18,"abilityManager"],[85,34,131,32],[85,35,131,33,"restoreFromSaveData"],[85,54,131,52],[85,55,131,53,"game"],[85,59,131,57],[85,60,131,58,"gameState"],[85,69,131,67],[85,70,131,68,"abilityData"],[85,81,131,79],[85,82,131,80],[87,8,133,6],[88,8,134,6,"setCombatState"],[88,22,134,20],[88,23,134,21,"prev"],[88,27,134,25],[88,32,134,30],[89,10,134,32],[89,13,134,35,"prev"],[90,8,134,40],[90,9,134,41],[90,10,134,42],[90,11,134,43],[91,6,135,4],[92,4,136,2],[92,5,136,3],[92,7,136,5],[92,8,136,6,"game"],[92,12,136,10],[92,13,136,11,"gameState"],[92,22,136,20],[92,23,136,21,"abilityData"],[92,34,136,32],[92,36,136,34,"combatState"],[92,47,136,45],[92,48,136,46,"abilityManager"],[92,62,136,60],[92,63,136,61],[92,64,136,62],[94,4,138,2],[95,4,139,2],[95,8,139,2,"useEffect"],[95,14,139,11],[95,15,139,11,"useEffect"],[95,24,139,11],[95,26,139,12],[95,32,139,18],[96,6,140,4],[96,10,140,8,"game"],[96,14,140,12],[96,15,140,13,"gameState"],[96,24,140,22],[96,25,140,23,"ninja"],[96,30,140,28],[96,32,140,30],[97,8,141,6],[97,14,141,12,"effectiveStats"],[97,28,141,26],[97,31,141,29,"game"],[97,35,141,33],[97,36,141,34,"getEffectiveStats"],[97,53,141,51],[97,54,141,52],[97,55,141,53],[98,8,143,6,"setCombatState"],[98,22,143,20],[98,23,143,21,"prev"],[98,27,143,25],[98,31,143,29],[99,10,144,8],[100,10,145,8],[100,14,145,12,"prev"],[100,18,145,16],[100,19,145,17,"playerStats"],[100,30,145,28],[100,31,145,29,"maxHealth"],[100,40,145,38],[100,45,145,43],[100,48,145,46],[100,52,145,50,"prev"],[100,56,145,54],[100,57,145,55,"playerStats"],[100,68,145,66],[100,69,145,67,"attack"],[100,75,145,73],[100,80,145,78],[100,82,145,80],[100,84,145,82],[101,12,146,10,"console"],[101,19,146,17],[101,20,146,18,"log"],[101,23,146,21],[101,24,146,22],[101,60,146,58,"effectiveStats"],[101,74,146,72],[101,75,146,73,"health"],[101,81,146,79],[101,93,146,91,"effectiveStats"],[101,107,146,105],[101,108,146,106,"attack"],[101,114,146,112],[101,127,146,125,"effectiveStats"],[101,141,146,139],[101,142,146,140,"defense"],[101,149,146,147],[101,151,146,149],[101,152,146,150],[102,12,148,10],[102,19,148,17],[103,14,149,12],[103,17,149,15,"prev"],[103,21,149,19],[104,14,150,12,"playerStats"],[104,25,150,23],[104,27,150,25],[105,16,151,14,"attack"],[105,22,151,20],[105,24,151,22,"effectiveStats"],[105,38,151,36],[105,39,151,37,"attack"],[105,45,151,43],[106,16,152,14,"defense"],[106,23,152,21],[106,25,152,23,"effectiveStats"],[106,39,152,37],[106,40,152,38,"defense"],[106,47,152,45],[107,16,153,14,"health"],[107,22,153,20],[107,24,153,22,"effectiveStats"],[107,38,153,36],[107,39,153,37,"health"],[107,45,153,43],[108,16,153,45],[109,16,154,14,"maxHealth"],[109,25,154,23],[109,27,154,25,"effectiveStats"],[109,41,154,39],[109,42,154,40,"health"],[109,48,154,46],[110,16,155,14,"critChance"],[110,26,155,24],[110,28,155,26,"effectiveStats"],[110,42,155,40],[110,43,155,41,"critChance"],[110,53,155,51],[110,57,155,55],[110,58,155,56],[111,16,156,14,"critDamage"],[111,26,156,24],[111,28,156,26,"effectiveStats"],[111,42,156,40],[111,43,156,41,"critDamage"],[111,53,156,51],[111,57,156,55],[111,60,156,58],[112,16,157,14,"cooldownReduction"],[112,33,157,31],[112,35,157,33,"effectiveStats"],[112,49,157,47],[112,50,157,48,"cooldownReduction"],[112,67,157,65],[112,71,157,69],[113,14,158,12],[114,12,159,10],[114,13,159,11],[115,10,160,8],[116,10,161,8],[116,17,161,15,"prev"],[116,21,161,19],[117,8,162,6],[117,9,162,7],[117,10,162,8],[118,6,163,4],[119,4,164,2],[119,5,164,3],[119,7,164,5],[119,8,164,6,"game"],[119,12,164,10],[119,13,164,11,"gameState"],[119,22,164,20],[119,23,164,21,"ninja"],[119,28,164,26],[119,29,164,27],[119,30,164,28],[120,4,166,2],[120,10,166,8],[120,11,166,9,"projectiles"],[120,22,166,20],[120,24,166,22,"setProjectiles"],[120,38,166,36],[120,39,166,37],[120,42,166,40],[120,46,166,40,"useState"],[120,52,166,48],[120,53,166,48,"useState"],[120,61,166,48],[120,63,166,69],[120,65,166,71],[120,66,166,72],[121,4,167,2],[121,10,167,8],[121,11,167,9,"lastExplosionTime"],[121,28,167,26],[121,30,167,28,"setLastExplosionTime"],[121,50,167,48],[121,51,167,49],[121,54,167,52],[121,58,167,52,"useState"],[121,64,167,60],[121,65,167,60,"useState"],[121,73,167,60],[121,75,167,69],[121,76,167,70],[121,77,167,71],[122,4,168,2],[123,4,169,2],[125,4,171,2],[126,4,172,2],[126,10,172,8,"handleEnemyKill"],[126,25,172,23],[126,28,172,26],[126,32,172,26,"useCallback"],[126,38,172,37],[126,39,172,37,"useCallback"],[126,50,172,37],[126,52,172,39,"enemy"],[126,57,172,57],[126,61,172,62],[127,6,173,4,"console"],[127,13,173,11],[127,14,173,12,"log"],[127,17,173,15],[127,18,173,16],[127,73,173,71],[127,75,173,73,"enemy"],[127,80,173,78],[127,81,173,79,"id"],[127,83,173,81],[127,84,173,82],[129,6,175,4],[130,6,176,4],[130,12,176,10,"baseXpReward"],[130,24,176,22],[130,27,176,25],[130,30,176,28],[130,31,176,29],[130,32,176,30],[131,6,177,4],[131,12,177,10,"xpMultiplier"],[131,24,177,22],[131,27,177,25,"game"],[131,31,177,29],[131,32,177,30,"gameState"],[131,41,177,39],[131,42,177,40,"subscriptionBenefits"],[131,62,177,60],[131,64,177,62,"xp_multiplier"],[131,77,177,75],[131,81,177,79],[131,84,177,82],[132,6,178,4],[132,12,178,10,"dropMultiplier"],[132,26,178,24],[132,29,178,27,"game"],[132,33,178,31],[132,34,178,32,"gameState"],[132,43,178,41],[132,44,178,42,"subscriptionBenefits"],[132,64,178,62],[132,66,178,64,"drop_multiplier"],[132,81,178,79],[132,85,178,83],[132,88,178,86],[133,6,180,4],[133,12,180,10,"xpReward"],[133,20,180,18],[133,23,180,21,"Math"],[133,27,180,25],[133,28,180,26,"floor"],[133,33,180,31],[133,34,180,32,"baseXpReward"],[133,46,180,44],[133,49,180,47,"xpMultiplier"],[133,61,180,59],[133,62,180,60],[134,6,181,4],[134,12,181,10,"goldReward"],[134,22,181,20],[134,25,181,23,"Math"],[134,29,181,27],[134,30,181,28,"floor"],[134,35,181,33],[134,36,181,34],[134,40,181,38],[134,43,181,41,"dropMultiplier"],[134,57,181,55],[134,58,181,56],[134,59,181,57],[134,60,181,58],[136,6,183,4,"console"],[136,13,183,11],[136,14,183,12,"log"],[136,17,183,15],[136,18,183,16],[136,48,183,46,"xpReward"],[136,56,183,54],[136,67,183,65,"goldReward"],[136,77,183,75],[136,93,183,91],[136,94,183,92],[137,6,184,4,"console"],[137,13,184,11],[137,14,184,12,"log"],[137,17,184,15],[137,18,184,16],[137,60,184,58,"xpMultiplier"],[137,72,184,70],[137,94,184,92,"dropMultiplier"],[137,108,184,106],[137,110,184,108],[137,111,184,109],[138,6,185,4,"console"],[138,13,185,11],[138,14,185,12,"log"],[138,17,185,15],[138,18,185,16],[138,54,185,52,"baseXpReward"],[138,66,185,64],[138,81,185,79,"xpReward"],[138,89,185,87],[138,91,185,89],[138,92,185,90],[139,6,186,4,"console"],[139,13,186,11],[139,14,186,12,"log"],[139,17,186,15],[139,18,186,16],[139,58,186,56],[139,60,186,58,"JSON"],[139,64,186,62],[139,65,186,63,"stringify"],[139,74,186,72],[139,75,186,73,"game"],[139,79,186,77],[139,80,186,78,"gameState"],[139,89,186,87],[139,90,186,88,"subscriptionBenefits"],[139,110,186,108],[139,111,186,109],[139,112,186,110],[140,6,187,4,"console"],[140,13,187,11],[140,14,187,12,"log"],[140,17,187,15],[140,18,187,16],[140,49,187,47,"Platform"],[140,57,187,55],[140,58,187,55,"default"],[140,65,187,55],[140,66,187,56,"OS"],[140,68,187,58],[140,79,187,69,"Date"],[140,83,187,73],[140,84,187,74,"now"],[140,87,187,77],[140,88,187,78],[140,89,187,79],[140,91,187,81],[140,92,187,82],[142,6,189,4],[143,6,190,4],[144,6,191,4,"setTimeout"],[144,16,191,14],[144,17,191,15],[144,23,191,21],[145,8,192,6,"console"],[145,15,192,13],[145,16,192,14,"log"],[145,19,192,17],[145,20,192,18],[145,78,192,76],[145,79,192,77],[147,8,194,6],[148,8,195,6,"game"],[148,12,195,10],[148,13,195,11,"updateNinja"],[148,24,195,22],[148,25,195,24,"prev"],[148,29,195,28],[148,33,195,33],[149,10,196,8,"console"],[149,17,196,15],[149,18,196,16,"log"],[149,21,196,19],[149,22,196,20],[149,54,196,52,"prev"],[149,58,196,56],[149,59,196,57,"experience"],[149,69,196,67],[149,81,196,79,"prev"],[149,85,196,83],[149,86,196,84,"experience"],[149,96,196,94],[149,99,196,97,"xpReward"],[149,107,196,105],[149,109,196,107],[149,110,196,108],[150,10,197,8,"console"],[150,17,197,15],[150,18,197,16,"log"],[150,21,197,19],[150,22,197,20],[150,56,197,54,"prev"],[150,60,197,58],[150,61,197,59,"gold"],[150,65,197,63],[150,77,197,75,"prev"],[150,81,197,79],[150,82,197,80,"gold"],[150,86,197,84],[150,89,197,87,"goldReward"],[150,99,197,97],[150,101,197,99],[150,102,197,100],[151,10,198,8],[151,17,198,15],[152,12,199,10,"experience"],[152,22,199,20],[152,24,199,22,"prev"],[152,28,199,26],[152,29,199,27,"experience"],[152,39,199,37],[152,42,199,40,"xpReward"],[152,50,199,48],[153,12,200,10,"gold"],[153,16,200,14],[153,18,200,16,"prev"],[153,22,200,20],[153,23,200,21,"gold"],[153,27,200,25],[153,30,200,28,"goldReward"],[154,10,201,8],[154,11,201,9],[155,8,202,6],[155,9,202,7],[155,10,202,8],[157,8,204,6],[158,8,205,6],[158,14,205,12,"zoneEnemy"],[158,23,205,21],[158,26,205,24],[159,10,206,8,"id"],[159,12,206,10],[159,14,206,12,"enemy"],[159,19,206,17],[159,20,206,18,"id"],[159,22,206,20],[160,10,207,8,"typeId"],[160,16,207,14],[160,18,207,16,"enemy"],[160,23,207,21],[160,24,207,22,"zoneTypeId"],[160,34,207,32],[160,38,207,36],[160,48,207,46],[161,10,207,48],[162,10,208,8,"name"],[162,14,208,12],[162,16,208,14,"enemy"],[162,21,208,19],[162,22,208,20,"name"],[162,26,208,24],[163,10,209,8,"icon"],[163,14,209,12],[163,16,209,14],[163,20,209,18],[164,10,209,20],[165,10,210,8,"hp"],[165,12,210,10],[165,14,210,12],[165,15,210,13],[166,10,210,15],[167,10,211,8,"maxHP"],[167,15,211,13],[167,17,211,15,"enemy"],[167,22,211,20],[167,23,211,21,"maxHealth"],[167,32,211,30],[168,10,212,8,"attack"],[168,16,212,14],[168,18,212,16,"enemy"],[168,23,212,21],[168,24,212,22,"stats"],[168,29,212,27],[168,30,212,28,"attack"],[168,36,212,34],[169,10,213,8,"xp"],[169,12,213,10],[169,14,213,12,"enemy"],[169,19,213,17],[169,20,213,18,"zoneXP"],[169,26,213,24],[169,30,213,28],[169,32,213,30],[170,10,213,32],[171,10,214,8,"position"],[171,18,214,16],[171,20,214,18,"enemy"],[171,25,214,23],[171,26,214,24,"position"],[172,8,215,6],[172,9,215,7],[173,8,217,6,"console"],[173,15,217,13],[173,16,217,14,"log"],[173,19,217,17],[173,20,217,18],[173,40,217,38,"zoneEnemy"],[173,49,217,47],[173,50,217,48,"name"],[173,54,217,52],[173,59,217,57,"zoneEnemy"],[173,68,217,66],[173,69,217,67,"typeId"],[173,75,217,73],[173,113,217,111],[173,114,217,112],[174,8,218,6,"recordEnemyKill"],[174,23,218,21],[174,24,218,22,"zoneEnemy"],[174,33,218,31],[174,34,218,32],[175,6,219,4],[175,7,219,5],[175,9,219,7],[175,10,219,8],[175,11,219,9],[175,12,219,10],[175,13,219,11],[176,4,220,2],[176,5,220,3],[176,7,220,5],[176,8,220,6,"game"],[176,12,220,10],[176,13,220,11,"updateNinja"],[176,24,220,22],[176,26,220,24,"recordEnemyKill"],[176,41,220,39],[176,42,220,40],[176,43,220,41],[178,4,222,2],[179,4,223,2],[179,10,223,8,"handleCombatTick"],[179,26,223,24],[179,29,223,27,"React"],[179,34,223,32],[179,35,223,32,"default"],[179,42,223,32],[179,43,223,33,"useCallback"],[179,54,223,44],[179,55,223,45],[179,61,223,51],[180,6,223,51],[180,10,223,51,"_s2"],[180,13,223,51],[180,16,223,51,"$RefreshSig$"],[180,28,223,51],[181,6,224,4,"console"],[181,13,224,11],[181,14,224,12,"log"],[181,17,224,15],[181,18,224,16],[181,87,224,85],[181,88,224,86],[182,6,226,4],[182,10,226,8,"enemiesToKill"],[182,23,226,36],[182,26,226,39],[182,28,226,41],[182,29,226,42],[182,30,226,43],[184,6,228,4,"_s2"],[184,9,228,4],[184,10,228,4,"setCombatState"],[184,24,228,18],[184,25,228,18,"_s2"],[184,28,228,18],[184,29,228,19,"prev"],[184,33,228,23],[184,37,228,27],[185,8,228,27,"_s2"],[185,11,228,27],[186,8,229,6],[186,14,229,12,"newTick"],[186,21,229,19],[186,24,229,22,"combatEngine"],[186,43,229,34],[186,44,229,34,"combatEngine"],[186,56,229,34],[186,57,229,35,"getCurrentTick"],[186,71,229,49],[186,72,229,50],[186,73,229,51],[187,8,230,6],[187,14,230,12,"newState"],[187,22,230,20],[187,25,230,23],[188,10,230,25],[188,13,230,28,"prev"],[188,17,230,32],[189,10,230,34,"currentTick"],[189,21,230,45],[189,23,230,47,"newTick"],[190,8,230,55],[190,9,230,56],[191,8,232,6],[191,12,232,10],[191,13,232,11,"newState"],[191,21,232,19],[191,22,232,20,"isInCombat"],[191,32,232,30],[191,34,232,32],[191,41,232,39,"newState"],[191,49,232,47],[193,8,234,6],[194,8,235,6,"newState"],[194,16,235,14],[194,17,235,15,"abilityManager"],[194,31,235,29],[194,32,235,30,"updateCooldowns"],[194,47,235,45],[194,48,235,46,"newTick"],[194,55,235,53],[194,56,235,54],[196,8,237,6],[197,8,238,6],[197,14,238,12,"effectResults"],[197,27,238,25],[197,30,238,28,"newState"],[197,38,238,36],[197,39,238,37,"statusEffects"],[197,52,238,50],[197,53,238,51,"processTick"],[197,64,238,62],[197,65,238,63,"newTick"],[197,72,238,70],[197,73,238,71],[199,8,240,6],[200,8,241,6,"effectResults"],[200,21,241,19],[200,22,241,20,"forEach"],[200,29,241,27],[200,30,241,28],[200,31,241,29,"results"],[200,38,241,36],[200,40,241,38,"entityId"],[200,48,241,46],[200,53,241,51],[201,10,242,8],[201,16,242,14,"enemyIndex"],[201,26,242,24],[201,29,242,27,"newState"],[201,37,242,35],[201,38,242,36,"enemies"],[201,45,242,43],[201,46,242,44,"findIndex"],[201,55,242,53],[201,56,242,54,"e"],[201,57,242,55],[201,61,242,59,"e"],[201,62,242,60],[201,63,242,61,"id"],[201,65,242,63],[201,70,242,68,"entityId"],[201,78,242,76],[201,79,242,77],[202,10,243,8],[202,14,243,12,"enemyIndex"],[202,24,243,22],[202,28,243,26],[202,29,243,27],[202,31,243,29],[203,12,244,10,"results"],[203,19,244,17],[203,20,244,18,"forEach"],[203,27,244,25],[203,28,244,26,"result"],[203,34,244,32],[203,38,244,36],[204,14,245,12,"newState"],[204,22,245,20],[204,23,245,21,"enemies"],[204,30,245,28],[204,31,245,29,"enemyIndex"],[204,41,245,39],[204,42,245,40],[204,43,245,41,"health"],[204,49,245,47],[204,53,245,51,"result"],[204,59,245,57],[204,60,245,58,"damage"],[204,66,245,64],[205,14,246,12,"newState"],[205,22,246,20],[205,23,246,21,"enemies"],[205,30,246,28],[205,31,246,29,"enemyIndex"],[205,41,246,39],[205,42,246,40],[205,43,246,41,"lastDamaged"],[205,54,246,52],[205,57,246,55,"newTick"],[205,64,246,62],[206,12,247,10],[206,13,247,11],[206,14,247,12],[207,10,248,8],[208,8,249,6],[208,9,249,7],[208,10,249,8],[210,8,251,6],[211,8,252,6],[212,8,253,6],[212,12,253,10,"newState"],[212,20,253,18],[212,21,253,19,"playerStats"],[212,32,253,30],[212,36,253,34,"game"],[212,40,253,38],[212,41,253,39,"gameState"],[212,50,253,48],[212,51,253,49,"ninja"],[212,56,253,54],[212,58,253,56],[213,10,254,8],[213,16,254,14,"effectiveStats"],[213,30,254,28],[213,33,254,31,"game"],[213,37,254,35],[213,38,254,36,"getEffectiveStats"],[213,55,254,53],[213,56,254,54],[213,57,254,55],[215,10,256,8],[216,10,257,8],[216,14,257,12,"newState"],[216,22,257,20],[216,23,257,21,"playerStats"],[216,34,257,32],[216,35,257,33,"attack"],[216,41,257,39],[216,46,257,44,"effectiveStats"],[216,60,257,58],[216,61,257,59,"attack"],[216,67,257,65],[216,71,258,12,"newState"],[216,79,258,20],[216,80,258,21,"playerStats"],[216,91,258,32],[216,92,258,33,"defense"],[216,99,258,40],[216,104,258,45,"effectiveStats"],[216,118,258,59],[216,119,258,60,"defense"],[216,126,258,67],[216,130,259,12,"newState"],[216,138,259,20],[216,139,259,21,"playerStats"],[216,150,259,32],[216,151,259,33,"maxHealth"],[216,160,259,42],[216,165,259,47,"effectiveStats"],[216,179,259,61],[216,180,259,62,"maxHealth"],[216,189,259,71],[216,191,259,73],[217,12,261,10,"console"],[217,19,261,17],[217,20,261,18,"log"],[217,23,261,21],[217,24,261,22],[217,58,261,56,"newState"],[217,66,261,64],[217,67,261,65,"playerStats"],[217,78,261,76],[217,79,261,77,"attack"],[217,85,261,83],[217,91,261,89,"effectiveStats"],[217,105,261,103],[217,106,261,104,"attack"],[217,112,261,110],[217,125,261,123,"newState"],[217,133,261,131],[217,134,261,132,"playerStats"],[217,145,261,143],[217,146,261,144,"defense"],[217,153,261,151],[217,159,261,157,"effectiveStats"],[217,173,261,171],[217,174,261,172,"defense"],[217,181,261,179],[217,192,261,190,"newState"],[217,200,261,198],[217,201,261,199,"playerStats"],[217,212,261,210],[217,213,261,211,"maxHealth"],[217,222,261,220],[217,228,261,226,"effectiveStats"],[217,242,261,240],[217,243,261,241,"maxHealth"],[217,252,261,250],[217,254,261,252],[217,255,261,253],[219,12,263,10],[220,12,264,10],[220,16,264,14,"newHealth"],[220,25,264,23],[220,28,264,26,"newState"],[220,36,264,34],[220,37,264,35,"playerStats"],[220,48,264,46],[220,49,264,47,"health"],[220,55,264,53],[221,12,265,10],[221,16,265,14,"newState"],[221,24,265,22],[221,25,265,23,"playerStats"],[221,36,265,34],[221,37,265,35,"maxHealth"],[221,46,265,44],[221,51,265,49,"effectiveStats"],[221,65,265,63],[221,66,265,64,"maxHealth"],[221,75,265,73],[221,77,265,75],[222,14,266,12],[223,14,267,12],[223,18,267,16,"effectiveStats"],[223,32,267,30],[223,33,267,31,"maxHealth"],[223,42,267,40],[223,45,267,43,"newState"],[223,53,267,51],[223,54,267,52,"playerStats"],[223,65,267,63],[223,66,267,64,"maxHealth"],[223,75,267,73],[223,78,267,76],[223,81,267,79],[223,83,267,81],[224,16,268,14],[225,16,269,14],[225,22,269,20,"healthRatio"],[225,33,269,31],[225,36,269,34,"newState"],[225,44,269,42],[225,45,269,43,"playerStats"],[225,56,269,54],[225,57,269,55,"maxHealth"],[225,66,269,64],[225,69,269,67],[225,70,269,68],[225,73,270,16,"newState"],[225,81,270,24],[225,82,270,25,"playerStats"],[225,93,270,36],[225,94,270,37,"health"],[225,100,270,43],[225,103,270,46,"newState"],[225,111,270,54],[225,112,270,55,"playerStats"],[225,123,270,66],[225,124,270,67,"maxHealth"],[225,133,270,76],[225,136,270,79],[225,137,270,80],[226,16,271,14,"newHealth"],[226,25,271,23],[226,28,271,26,"Math"],[226,32,271,30],[226,33,271,31,"floor"],[226,38,271,36],[226,39,271,37,"effectiveStats"],[226,53,271,51],[226,54,271,52,"maxHealth"],[226,63,271,61],[226,66,271,64,"healthRatio"],[226,77,271,75],[226,78,271,76],[227,14,272,12],[227,15,272,13],[227,21,272,19],[227,25,272,23,"newState"],[227,33,272,31],[227,34,272,32,"playerStats"],[227,45,272,43],[227,46,272,44,"health"],[227,52,272,50],[227,55,272,53,"effectiveStats"],[227,69,272,67],[227,70,272,68,"maxHealth"],[227,79,272,77],[227,81,272,79],[228,16,273,14],[229,16,274,14,"newHealth"],[229,25,274,23],[229,28,274,26,"effectiveStats"],[229,42,274,40],[229,43,274,41,"maxHealth"],[229,52,274,50],[230,14,275,12],[231,14,276,12],[232,12,277,10],[233,12,279,10,"newState"],[233,20,279,18],[233,21,279,19,"playerStats"],[233,32,279,30],[233,35,279,33],[234,14,280,12],[234,17,280,15,"newState"],[234,25,280,23],[234,26,280,24,"playerStats"],[234,37,280,35],[235,14,281,12,"attack"],[235,20,281,18],[235,22,281,20,"effectiveStats"],[235,36,281,34],[235,37,281,35,"attack"],[235,43,281,41],[236,14,282,12,"defense"],[236,21,282,19],[236,23,282,21,"effectiveStats"],[236,37,282,35],[236,38,282,36,"defense"],[236,45,282,43],[237,14,283,12,"maxHealth"],[237,23,283,21],[237,25,283,23,"effectiveStats"],[237,39,283,37],[237,40,283,38,"maxHealth"],[237,49,283,47],[238,14,283,49],[239,14,284,12,"health"],[239,20,284,18],[239,22,284,20,"newHealth"],[239,31,284,29],[240,14,284,31],[241,14,285,12,"critChance"],[241,24,285,22],[241,26,285,24,"effectiveStats"],[241,40,285,38],[241,41,285,39,"critChance"],[241,51,285,49],[241,55,285,53,"newState"],[241,63,285,61],[241,64,285,62,"playerStats"],[241,75,285,73],[241,76,285,74,"critChance"],[241,86,285,84],[242,14,286,12,"critDamage"],[242,24,286,22],[242,26,286,24,"effectiveStats"],[242,40,286,38],[242,41,286,39,"critDamage"],[242,51,286,49],[242,55,286,53,"newState"],[242,63,286,61],[242,64,286,62,"playerStats"],[242,75,286,73],[242,76,286,74,"critDamage"],[242,86,286,84],[243,14,287,12,"cooldownReduction"],[243,31,287,29],[243,33,287,31,"effectiveStats"],[243,47,287,45],[243,48,287,46,"cooldownReduction"],[243,65,287,63],[243,69,287,67,"newState"],[243,77,287,75],[243,78,287,76,"playerStats"],[243,89,287,87],[243,90,287,88,"cooldownReduction"],[244,12,288,10],[244,13,288,11],[245,10,289,8],[247,10,291,8],[248,10,292,8],[248,14,292,12,"game"],[248,18,292,16],[248,19,292,17,"gameState"],[248,28,292,26],[248,29,292,27,"isAlive"],[248,36,292,34],[248,40,293,12,"game"],[248,44,293,16],[248,45,293,17,"gameState"],[248,54,293,26],[248,55,293,27,"ninja"],[248,60,293,32],[248,61,293,33,"health"],[248,67,293,39],[248,72,293,44,"effectiveStats"],[248,86,293,58],[248,87,293,59,"maxHealth"],[248,96,293,68],[248,100,294,12,"newState"],[248,108,294,20],[248,109,294,21,"playerStats"],[248,120,294,32],[248,121,294,33,"health"],[248,127,294,39],[248,130,294,42,"effectiveStats"],[248,144,294,56],[248,145,294,57,"maxHealth"],[248,154,294,66],[248,157,294,69],[248,160,294,72],[248,162,294,74],[249,12,295,10,"console"],[249,19,295,17],[249,20,295,18,"log"],[249,23,295,21],[249,24,295,22],[249,58,295,56,"newState"],[249,66,295,64],[249,67,295,65,"playerStats"],[249,78,295,76],[249,79,295,77,"health"],[249,85,295,83],[249,91,295,89,"game"],[249,95,295,93],[249,96,295,94,"gameState"],[249,105,295,103],[249,106,295,104,"ninja"],[249,111,295,109],[249,112,295,110,"health"],[249,118,295,116],[249,139,295,137],[249,140,295,138],[250,12,296,10,"newState"],[250,20,296,18],[250,21,296,19,"playerStats"],[250,32,296,30],[250,33,296,31,"health"],[250,39,296,37],[250,42,296,40,"game"],[250,46,296,44],[250,47,296,45,"gameState"],[250,56,296,54],[250,57,296,55,"ninja"],[250,62,296,60],[250,63,296,61,"health"],[250,69,296,67],[251,10,297,8],[252,8,298,6],[254,8,300,6],[255,8,301,6,"newState"],[255,16,301,14],[255,17,301,15,"enemies"],[255,24,301,22],[255,25,301,23,"forEach"],[255,32,301,30],[255,33,301,31,"enemy"],[255,38,301,36],[255,42,301,40],[256,10,302,8],[256,14,302,12],[256,15,302,13,"enemy"],[256,20,302,18],[256,21,302,19,"isBoss"],[256,27,302,25],[256,29,302,27],[257,12,302,29],[258,12,303,10],[259,12,304,10],[259,18,304,16,"MOVEMENT_SPEED"],[259,32,304,30],[259,35,304,33],[259,39,304,37],[259,40,304,38],[259,41,304,39],[260,12,305,10],[260,18,305,16,"SCREEN_WIDTH"],[260,30,305,28],[260,33,305,31],[260,36,305,34],[261,12,306,10],[261,18,306,16,"GAME_AREA_HEIGHT"],[261,34,306,32],[261,37,306,35],[261,40,306,38],[261,41,306,39],[261,42,306,40],[262,12,307,10],[262,18,307,16,"ENEMY_SIZE"],[262,28,307,26],[262,31,307,29],[262,33,307,31],[264,12,309,10],[265,12,310,10],[265,18,310,16,"playerX"],[265,25,310,23],[265,28,310,26,"currentNinjaPosition"],[265,48,310,46],[265,49,310,47,"x"],[265,50,310,48],[266,12,311,10],[266,18,311,16,"playerY"],[266,25,311,23],[266,28,311,26,"currentNinjaPosition"],[266,48,311,46],[266,49,311,47,"y"],[266,50,311,48],[268,12,313,10],[269,12,314,10],[269,18,314,16,"deltaX"],[269,24,314,22],[269,27,314,25,"playerX"],[269,34,314,32],[269,37,314,35,"enemy"],[269,42,314,40],[269,43,314,41,"position"],[269,51,314,49],[269,52,314,50,"x"],[269,53,314,51],[270,12,315,10],[270,18,315,16,"deltaY"],[270,24,315,22],[270,27,315,25,"playerY"],[270,34,315,32],[270,37,315,35,"enemy"],[270,42,315,40],[270,43,315,41,"position"],[270,51,315,49],[270,52,315,50,"y"],[270,53,315,51],[271,12,316,10],[271,18,316,16,"distance"],[271,26,316,24],[271,29,316,27,"Math"],[271,33,316,31],[271,34,316,32,"sqrt"],[271,38,316,36],[271,39,316,37,"deltaX"],[271,45,316,43],[271,48,316,46,"deltaX"],[271,54,316,52],[271,57,316,55,"deltaY"],[271,63,316,61],[271,66,316,64,"deltaY"],[271,72,316,70],[271,73,316,71],[273,12,318,10],[274,12,319,10],[274,18,319,16,"ATTACK_RANGE"],[274,30,319,28],[274,33,319,31],[274,35,319,33],[274,36,319,34],[274,37,319,35],[275,12,320,10],[275,18,320,16,"ATTACK_COOLDOWN"],[275,33,320,31],[275,36,320,34],[275,38,320,36],[275,39,320,37],[275,40,320,38],[277,12,322,10],[277,16,322,14,"distance"],[277,24,322,22],[277,28,322,26,"ATTACK_RANGE"],[277,40,322,38],[277,42,322,40],[278,14,323,12],[279,14,324,12],[279,18,324,16],[279,19,324,17,"enemy"],[279,24,324,22],[279,25,324,23,"lastAttackTick"],[279,39,324,37],[279,41,324,39,"enemy"],[279,46,324,44],[279,47,324,45,"lastAttackTick"],[279,61,324,59],[279,64,324,62],[279,65,324,63],[280,14,326,12],[280,18,326,16,"newState"],[280,26,326,24],[280,27,326,25,"currentTick"],[280,38,326,36],[280,41,326,39,"enemy"],[280,46,326,44],[280,47,326,45,"lastAttackTick"],[280,61,326,59],[280,65,326,63,"ATTACK_COOLDOWN"],[280,80,326,78],[280,82,326,80],[281,16,327,14],[282,16,328,14],[282,20,328,18],[282,21,328,19,"game"],[282,25,328,23],[282,26,328,24,"gameState"],[282,35,328,33],[282,36,328,34,"isAlive"],[282,43,328,41],[282,45,328,43],[283,18,329,16,"console"],[283,25,329,23],[283,26,329,24,"log"],[283,29,329,27],[283,30,329,28],[283,49,329,47,"enemy"],[283,54,329,52],[283,55,329,53,"name"],[283,59,329,57],[283,93,329,91],[283,94,329,92],[284,18,330,16],[285,18,331,16,"enemy"],[285,23,331,21],[285,24,331,22,"lastAttackTick"],[285,38,331,36],[285,41,331,39,"newState"],[285,49,331,47],[285,50,331,48,"currentTick"],[285,61,331,59],[286,16,332,14],[286,17,332,15],[286,23,332,21],[287,18,333,16],[288,18,334,16],[288,24,334,22,"isPlayerInvincible"],[288,42,334,40],[288,45,334,43,"game"],[288,49,334,47],[288,50,334,48,"gameState"],[288,59,334,57],[288,60,334,58,"isInvincible"],[288,72,334,70],[288,76,335,41,"game"],[288,80,335,45],[288,81,335,46,"gameState"],[288,90,335,55],[288,91,335,56,"invincibilityEndTime"],[288,111,335,76],[288,115,336,41,"Date"],[288,119,336,45],[288,120,336,46,"now"],[288,123,336,49],[288,124,336,50],[288,125,336,51],[288,128,336,54,"game"],[288,132,336,58],[288,133,336,59,"gameState"],[288,142,336,68],[288,143,336,69,"invincibilityEndTime"],[288,163,336,89],[289,18,338,16],[289,22,338,20,"isPlayerInvincible"],[289,40,338,38],[289,42,338,40],[290,20,339,18,"console"],[290,27,339,25],[290,28,339,26,"log"],[290,31,339,29],[290,32,339,30],[290,51,339,49,"enemy"],[290,56,339,54],[290,57,339,55,"name"],[290,61,339,59],[290,101,339,99],[290,102,339,100],[291,20,340,18],[292,20,341,18,"enemy"],[292,25,341,23],[292,26,341,24,"lastAttackTick"],[292,40,341,38],[292,43,341,41,"newState"],[292,51,341,49],[292,52,341,50,"currentTick"],[292,63,341,61],[293,18,342,16],[293,19,342,17],[293,25,342,23],[294,20,343,16],[295,20,344,16],[295,26,344,22,"baseAttack"],[295,36,344,32],[295,39,344,35,"enemy"],[295,44,344,40],[295,45,344,41,"stats"],[295,50,344,46],[295,51,344,47,"attack"],[295,57,344,53],[295,60,344,56],[295,63,344,59],[295,64,344,60],[295,65,344,61],[296,20,345,16],[296,26,345,22,"attackDamage"],[296,38,345,34],[296,41,345,37,"Math"],[296,45,345,41],[296,46,345,42,"floor"],[296,51,345,47],[296,52,345,48,"baseAttack"],[296,62,345,58],[296,66,345,62],[296,69,345,65],[296,72,345,68,"Math"],[296,76,345,72],[296,77,345,73,"random"],[296,83,345,79],[296,84,345,80],[296,85,345,81],[296,88,345,84],[296,91,345,87],[296,92,345,88],[296,93,345,89],[296,94,345,90],[296,95,345,91],[297,20,346,16],[297,26,346,22,"playerDefense"],[297,39,346,35],[297,42,346,38,"newState"],[297,50,346,46],[297,51,346,47,"playerStats"],[297,62,346,58],[297,63,346,59,"defense"],[297,70,346,66],[298,20,347,16],[298,26,347,22,"finalDamage"],[298,37,347,33],[298,40,347,36,"Math"],[298,44,347,40],[298,45,347,41,"max"],[298,48,347,44],[298,49,347,45],[298,50,347,46],[298,52,347,48,"attackDamage"],[298,64,347,60],[298,67,347,63,"Math"],[298,71,347,67],[298,72,347,68,"floor"],[298,77,347,73],[298,78,347,74,"playerDefense"],[298,91,347,87],[298,94,347,90],[298,97,347,93],[298,98,347,94],[298,99,347,95],[298,100,347,96],[298,101,347,97],[300,20,349,16,"console"],[300,27,349,23],[300,28,349,24,"log"],[300,31,349,27],[300,32,349,28],[300,53,349,49,"enemy"],[300,58,349,54],[300,59,349,55,"name"],[300,63,349,59],[300,86,349,82,"finalDamage"],[300,97,349,93],[300,109,349,105,"attackDamage"],[300,121,349,117],[300,132,349,128,"Math"],[300,136,349,132],[300,137,349,133,"floor"],[300,142,349,138],[300,143,349,139,"playerDefense"],[300,156,349,152],[300,159,349,155],[300,162,349,158],[300,163,349,159],[300,184,349,180],[300,185,349,181],[302,20,351,16],[303,20,352,16],[303,26,352,22,"newPlayerHealth"],[303,41,352,37],[303,44,352,40,"Math"],[303,48,352,44],[303,49,352,45,"max"],[303,52,352,48],[303,53,352,49],[303,54,352,50],[303,56,352,52,"newState"],[303,64,352,60],[303,65,352,61,"playerStats"],[303,76,352,72],[303,77,352,73,"health"],[303,83,352,79],[303,86,352,82,"finalDamage"],[303,97,352,93],[303,98,352,94],[304,20,353,16,"newState"],[304,28,353,24],[304,29,353,25,"playerStats"],[304,40,353,36],[304,41,353,37,"health"],[304,47,353,43],[304,50,353,46,"newPlayerHealth"],[304,65,353,61],[305,20,355,16,"console"],[305,27,355,23],[305,28,355,24,"log"],[305,31,355,27],[305,32,355,28],[305,53,355,49,"newState"],[305,61,355,57],[305,62,355,58,"playerStats"],[305,73,355,69],[305,74,355,70,"health"],[305,80,355,76],[305,84,355,80,"newState"],[305,92,355,88],[305,93,355,89,"playerStats"],[305,104,355,100],[305,105,355,101,"maxHealth"],[305,114,355,110],[305,124,355,120,"finalDamage"],[305,135,355,131],[305,145,355,141],[305,146,355,142],[307,20,357,16],[308,20,358,16,"enemy"],[308,25,358,21],[308,26,358,22,"lastAttackTick"],[308,40,358,36],[308,43,358,39,"newState"],[308,51,358,47],[308,52,358,48,"currentTick"],[308,63,358,59],[310,20,360,16],[311,20,361,16],[311,24,361,20,"newPlayerHealth"],[311,39,361,35],[311,43,361,39],[311,44,361,40],[311,46,361,42],[312,22,362,18,"console"],[312,29,362,25],[312,30,362,26,"log"],[312,33,362,29],[312,34,362,30],[312,84,362,80],[312,85,362,81],[313,22,363,18],[314,22,364,18,"setTimeout"],[314,32,364,28],[314,33,364,29],[314,39,364,35],[315,24,365,20],[316,24,366,20,"game"],[316,28,366,24],[316,29,366,25,"updateGameState"],[316,44,366,40],[316,45,366,41],[317,26,366,43,"isAlive"],[317,33,366,50],[317,35,366,52],[318,24,366,58],[318,25,366,59],[318,26,366,60],[319,22,367,18],[319,23,367,19],[319,25,367,21],[319,28,367,24],[319,29,367,25],[320,20,368,16],[321,18,369,16],[322,16,370,14],[323,14,371,12],[324,12,372,10],[324,13,372,11],[324,19,372,17],[325,14,373,12],[326,14,374,12],[327,14,375,12],[327,18,375,16,"distance"],[327,26,375,24],[327,29,375,27],[327,31,375,29],[327,33,375,31],[328,16,376,14],[329,16,377,14],[329,22,377,20,"normalizedX"],[329,33,377,31],[329,36,377,34,"deltaX"],[329,42,377,40],[329,45,377,43,"distance"],[329,53,377,51],[330,16,378,14],[330,22,378,20,"normalizedY"],[330,33,378,31],[330,36,378,34,"deltaY"],[330,42,378,40],[330,45,378,43,"distance"],[330,53,378,51],[332,16,380,14],[333,16,381,14],[333,22,381,20,"randomFactor"],[333,34,381,32],[333,37,381,35],[333,40,381,38],[333,41,381,39],[333,42,381,40],[334,16,382,14],[334,22,382,20,"finalX"],[334,28,382,26],[334,31,382,29,"normalizedX"],[334,42,382,40],[334,45,382,43],[334,46,382,44,"Math"],[334,50,382,48],[334,51,382,49,"random"],[334,57,382,55],[334,58,382,56],[334,59,382,57],[334,62,382,60],[334,65,382,63],[334,69,382,67,"randomFactor"],[334,81,382,79],[335,16,383,14],[335,22,383,20,"finalY"],[335,28,383,26],[335,31,383,29,"normalizedY"],[335,42,383,40],[335,45,383,43],[335,46,383,44,"Math"],[335,50,383,48],[335,51,383,49,"random"],[335,57,383,55],[335,58,383,56],[335,59,383,57],[335,62,383,60],[335,65,383,63],[335,69,383,67,"randomFactor"],[335,81,383,79],[337,16,385,14],[338,16,386,14],[338,20,386,18,"newX"],[338,24,386,22],[338,27,386,25,"enemy"],[338,32,386,30],[338,33,386,31,"position"],[338,41,386,39],[338,42,386,40,"x"],[338,43,386,41],[338,46,386,45,"finalX"],[338,52,386,51],[338,55,386,54,"MOVEMENT_SPEED"],[338,69,386,69],[339,16,387,14],[339,20,387,18,"newY"],[339,24,387,22],[339,27,387,25,"enemy"],[339,32,387,30],[339,33,387,31,"position"],[339,41,387,39],[339,42,387,40,"y"],[339,43,387,41],[339,46,387,45,"finalY"],[339,52,387,51],[339,55,387,54,"MOVEMENT_SPEED"],[339,69,387,69],[341,16,389,14],[342,16,390,14,"newX"],[342,20,390,18],[342,23,390,21,"Math"],[342,27,390,25],[342,28,390,26,"max"],[342,31,390,29],[342,32,390,30],[342,33,390,31],[342,35,390,33,"Math"],[342,39,390,37],[342,40,390,38,"min"],[342,43,390,41],[342,44,390,42,"SCREEN_WIDTH"],[342,56,390,54],[342,59,390,57,"ENEMY_SIZE"],[342,69,390,67],[342,71,390,69,"newX"],[342,75,390,73],[342,76,390,74],[342,77,390,75],[343,16,391,14,"newY"],[343,20,391,18],[343,23,391,21,"Math"],[343,27,391,25],[343,28,391,26,"max"],[343,31,391,29],[343,32,391,30],[343,33,391,31],[343,35,391,33,"Math"],[343,39,391,37],[343,40,391,38,"min"],[343,43,391,41],[343,44,391,42,"GAME_AREA_HEIGHT"],[343,60,391,58],[343,63,391,61,"ENEMY_SIZE"],[343,73,391,71],[343,75,391,73,"newY"],[343,79,391,77],[343,80,391,78],[343,81,391,79],[345,16,393,14],[346,16,394,14,"enemy"],[346,21,394,19],[346,22,394,20,"position"],[346,30,394,28],[346,31,394,29,"x"],[346,32,394,30],[346,35,394,33,"newX"],[346,39,394,37],[347,16,395,14,"enemy"],[347,21,395,19],[347,22,395,20,"position"],[347,30,395,28],[347,31,395,29,"y"],[347,32,395,30],[347,35,395,33,"newY"],[347,39,395,37],[348,14,396,12],[349,14,397,12],[350,12,398,10],[351,10,399,8],[352,8,400,6],[352,9,400,7],[352,10,400,8],[354,8,402,6],[355,8,403,6],[355,12,403,10,"newState"],[355,20,403,18],[355,21,403,19,"shadowClone"],[355,32,403,30],[355,34,403,32],[356,10,404,8],[357,10,405,8,"newState"],[357,18,405,16],[357,19,405,17,"shadowClone"],[357,30,405,28],[357,31,405,29,"remainingTicks"],[357,45,405,43],[357,47,405,45],[359,10,407,8],[360,10,408,8],[360,16,408,14,"cloneOffset"],[360,27,408,25],[360,30,408,28],[360,32,408,30],[360,33,408,31],[360,34,408,32],[361,10,409,8,"newState"],[361,18,409,16],[361,19,409,17,"shadowClone"],[361,30,409,28],[361,31,409,29,"position"],[361,39,409,37],[361,40,409,38,"x"],[361,41,409,39],[361,44,409,42,"currentNinjaPosition"],[361,64,409,62],[361,65,409,63,"x"],[361,66,409,64],[361,69,409,67,"cloneOffset"],[361,80,409,78],[362,10,410,8,"newState"],[362,18,410,16],[362,19,410,17,"shadowClone"],[362,30,410,28],[362,31,410,29,"position"],[362,39,410,37],[362,40,410,38,"y"],[362,41,410,39],[362,44,410,42,"currentNinjaPosition"],[362,64,410,62],[362,65,410,63,"y"],[362,66,410,64],[362,69,410,67],[362,71,410,69],[364,10,412,8],[365,10,413,8],[365,14,413,12,"newState"],[365,22,413,20],[365,23,413,21,"shadowClone"],[365,34,413,32],[365,35,413,33,"remainingTicks"],[365,49,413,47],[365,53,413,51],[365,54,413,52],[365,56,413,54],[366,12,414,10,"console"],[366,19,414,17],[366,20,414,18,"log"],[366,23,414,21],[366,24,414,22],[366,75,414,73],[366,76,414,74],[367,12,415,10,"newState"],[367,20,415,18],[367,21,415,19,"shadowClone"],[367,32,415,30],[367,35,415,33,"undefined"],[367,44,415,42],[368,10,416,8],[368,11,416,9],[368,17,416,15],[369,12,417,10],[370,12,418,10],[371,12,419,10],[371,18,419,16,"CLONE_ATTACK_INTERVAL"],[371,39,419,37],[371,42,419,40],[371,44,419,42],[372,12,420,10],[372,16,420,14,"newState"],[372,24,420,22],[372,25,420,23,"currentTick"],[372,36,420,34],[372,39,420,37,"CLONE_ATTACK_INTERVAL"],[372,60,420,58],[372,65,420,63],[372,66,420,64],[372,70,420,68,"newState"],[372,78,420,76],[372,79,420,77,"enemies"],[372,86,420,84],[372,87,420,85,"length"],[372,93,420,91],[372,96,420,94],[372,97,420,95],[372,99,420,97],[373,14,421,12,"console"],[373,21,421,19],[373,22,421,20,"log"],[373,25,421,23],[373,26,421,24],[373,83,421,81],[373,84,421,82],[375,14,423,12],[376,14,424,12],[376,20,424,18,"target"],[376,26,424,24],[376,29,424,27,"findClosestEnemyInternal"],[376,53,424,51],[376,54,424,52,"newState"],[376,62,424,60],[376,63,424,61,"enemies"],[376,70,424,68],[376,71,424,69],[377,14,425,12],[377,18,425,16,"target"],[377,24,425,22],[377,26,425,24],[378,16,426,14],[379,16,427,14],[379,22,427,20,"cloneDamage"],[379,33,427,31],[379,36,427,34,"Math"],[379,40,427,38],[379,41,427,39,"floor"],[379,46,427,44],[379,47,427,45,"newState"],[379,55,427,53],[379,56,427,54,"playerStats"],[379,67,427,65],[379,68,427,66,"attack"],[379,74,427,72],[379,77,427,75],[379,80,427,78],[379,81,427,79],[381,16,429,14],[382,16,430,14,"createProjectile"],[382,32,430,30],[382,33,430,31,"target"],[382,39,430,37],[382,41,430,39,"cloneDamage"],[382,52,430,50],[382,54,430,52,"newState"],[382,62,430,60],[382,63,430,61,"shadowClone"],[382,74,430,72],[382,75,430,73,"position"],[382,83,430,81],[382,85,430,83],[383,18,431,16,"id"],[383,20,431,18],[383,22,431,20],[383,43,431,41],[384,18,432,16,"name"],[384,22,432,20],[384,24,432,22],[384,45,432,43],[385,18,433,16,"icon"],[385,22,433,20],[385,24,433,22],[386,16,434,14],[386,17,434,15],[386,18,434,16],[387,14,435,12],[388,12,436,10],[389,10,437,8],[390,8,438,6],[392,8,440,6],[393,8,441,6],[394,8,442,6],[394,12,442,10],[394,13,442,11,"isManualControlActive"],[394,34,442,32],[394,38,442,36,"game"],[394,42,442,40],[394,43,442,41,"gameState"],[394,52,442,50],[394,53,442,51,"isAlive"],[394,60,442,58],[394,62,442,60],[395,10,443,8],[395,15,443,13],[395,19,443,17,"i"],[395,20,443,18],[395,23,443,21],[395,24,443,22],[395,26,443,24,"i"],[395,27,443,25],[395,30,443,28],[395,31,443,29],[395,33,443,31,"i"],[395,34,443,32],[395,36,443,34],[395,38,443,36],[396,12,444,10],[396,16,444,14,"newState"],[396,24,444,22],[396,25,444,23,"abilityManager"],[396,39,444,37],[396,40,444,38,"isAbilityReady"],[396,54,444,52],[396,55,444,53,"i"],[396,56,444,54],[396,57,444,55],[396,61,444,59,"newState"],[396,69,444,67],[396,70,444,68,"enemies"],[396,77,444,75],[396,78,444,76,"length"],[396,84,444,82],[396,87,444,85],[396,88,444,86],[396,90,444,88],[397,14,445,12],[397,18,445,16,"newState"],[397,26,445,24],[397,27,445,25,"abilityManager"],[397,41,445,39],[397,42,445,40,"useAbility"],[397,52,445,50],[397,53,445,51,"i"],[397,54,445,52],[397,56,445,54,"newTick"],[397,63,445,61],[397,64,445,62],[397,66,445,64],[398,16,446,14,"castAbility"],[398,27,446,25],[398,28,446,26,"newState"],[398,36,446,34],[398,38,446,36,"i"],[398,39,446,37],[398,40,446,38],[399,14,447,12],[400,12,448,10],[401,10,449,8],[402,8,450,6],[404,8,452,6],[405,8,453,6],[405,14,453,12,"deadEnemies"],[405,25,453,23],[405,28,453,26,"newState"],[405,36,453,34],[405,37,453,35,"enemies"],[405,44,453,42],[405,45,453,43,"filter"],[405,51,453,49],[405,52,453,50,"enemy"],[405,57,453,55],[405,61,453,59,"enemy"],[405,66,453,64],[405,67,453,65,"health"],[405,73,453,71],[405,77,453,75],[405,78,453,76],[405,79,453,77],[406,8,454,6,"enemiesToKill"],[406,21,454,19],[406,24,454,22],[406,25,454,23],[406,28,454,26,"deadEnemies"],[406,39,454,37],[406,40,454,38],[406,41,454,39],[406,42,454,40],[408,8,456,6],[409,8,457,6],[409,12,457,10,"deadEnemies"],[409,23,457,21],[409,24,457,22,"length"],[409,30,457,28],[409,33,457,31],[409,34,457,32],[409,36,457,34],[410,10,458,8,"console"],[410,17,458,15],[410,18,458,16,"log"],[410,21,458,19],[410,22,458,20],[410,49,458,47,"deadEnemies"],[410,60,458,58],[410,61,458,59,"length"],[410,67,458,65],[410,83,458,81],[410,85,458,83,"deadEnemies"],[410,96,458,94],[410,97,458,95,"map"],[410,100,458,98],[410,101,458,99,"e"],[410,102,458,100],[410,106,458,104],[410,109,458,107,"e"],[410,110,458,108],[410,111,458,109,"id"],[410,113,458,111],[410,117,458,115,"e"],[410,118,458,116],[410,119,458,117,"health"],[410,125,458,123],[410,130,458,128],[410,131,458,129],[410,132,458,130],[411,8,459,6],[413,8,461,6],[414,8,462,6],[414,14,462,12,"lowHealthEnemies"],[414,30,462,28],[414,33,462,31,"newState"],[414,41,462,39],[414,42,462,40,"enemies"],[414,49,462,47],[414,50,462,48,"filter"],[414,56,462,54],[414,57,462,55,"enemy"],[414,62,462,60],[414,66,462,64,"enemy"],[414,71,462,69],[414,72,462,70,"health"],[414,78,462,76],[414,82,462,80],[414,84,462,82],[414,88,462,86,"enemy"],[414,93,462,91],[414,94,462,92,"health"],[414,100,462,98],[414,103,462,101],[414,104,462,102],[414,105,462,103],[415,8,463,6],[415,12,463,10,"lowHealthEnemies"],[415,28,463,26],[415,29,463,27,"length"],[415,35,463,33],[415,38,463,36],[415,39,463,37],[415,41,463,39],[416,10,464,8,"console"],[416,17,464,15],[416,18,464,16,"log"],[416,21,464,19],[416,22,464,20],[416,61,464,59],[416,63,464,61,"lowHealthEnemies"],[416,79,464,77],[416,80,464,78,"map"],[416,83,464,81],[416,84,464,82,"e"],[416,85,464,83],[416,89,464,87],[416,92,464,90,"e"],[416,93,464,91],[416,94,464,92,"id"],[416,96,464,94],[416,100,464,98,"e"],[416,101,464,99],[416,102,464,100,"health"],[416,108,464,106],[416,112,464,110,"e"],[416,113,464,111],[416,114,464,112,"maxHealth"],[416,123,464,121],[416,128,464,126],[416,129,464,127],[416,130,464,128],[417,8,465,6],[419,8,467,6],[420,8,468,6],[420,14,468,12,"beforeCount"],[420,25,468,23],[420,28,468,26,"newState"],[420,36,468,34],[420,37,468,35,"enemies"],[420,44,468,42],[420,45,468,43,"length"],[420,51,468,49],[421,8,469,6,"newState"],[421,16,469,14],[421,17,469,15,"enemies"],[421,24,469,22],[421,27,469,25,"newState"],[421,35,469,33],[421,36,469,34,"enemies"],[421,43,469,41],[421,44,469,42,"filter"],[421,50,469,48],[421,51,469,49,"enemy"],[421,56,469,54],[421,60,469,58,"enemy"],[421,65,469,63],[421,66,469,64,"health"],[421,72,469,70],[421,75,469,73],[421,76,469,74],[421,77,469,75],[422,8,470,6],[422,14,470,12,"afterCount"],[422,24,470,22],[422,27,470,25,"newState"],[422,35,470,33],[422,36,470,34,"enemies"],[422,43,470,41],[422,44,470,42,"length"],[422,50,470,48],[423,8,472,6],[423,12,472,10,"beforeCount"],[423,23,472,21],[423,28,472,26,"afterCount"],[423,38,472,36],[423,40,472,38],[424,10,473,8,"console"],[424,17,473,15],[424,18,473,16,"log"],[424,21,473,19],[424,22,473,20],[424,52,473,50,"beforeCount"],[424,63,473,61],[424,66,473,64,"afterCount"],[424,76,473,74],[424,102,473,100],[424,103,473,101],[425,8,474,6],[427,8,476,6],[428,8,477,6],[429,8,478,6],[429,14,478,12,"MAX_ENEMIES"],[429,25,478,23],[429,28,478,26],[429,30,478,28],[429,31,478,29],[429,32,478,30],[430,8,479,6],[430,14,479,12,"MIN_SPAWN_DELAY"],[430,29,479,27],[430,32,479,30],[430,35,479,33],[430,36,479,34],[430,37,479,35],[431,8,480,6],[431,14,480,12,"now"],[431,17,480,15],[431,20,480,18,"Date"],[431,24,480,22],[431,25,480,23,"now"],[431,28,480,26],[431,29,480,27],[431,30,480,28],[432,8,481,6],[432,14,481,12,"hasBoss"],[432,21,481,19],[432,24,481,22,"newState"],[432,32,481,30],[432,33,481,31,"enemies"],[432,40,481,38],[432,41,481,39,"some"],[432,45,481,43],[432,46,481,44,"enemy"],[432,51,481,49],[432,55,481,53,"enemy"],[432,60,481,58],[432,61,481,59,"isBoss"],[432,67,481,65],[432,68,481,66],[434,8,483,6],[435,8,484,6],[435,12,484,10],[435,13,484,11,"newState"],[435,21,484,19],[435,22,484,20,"lastSpawnTime"],[435,35,484,33],[435,37,484,35],[436,10,485,8,"newState"],[436,18,485,16],[436,19,485,17,"lastSpawnTime"],[436,32,485,30],[436,35,485,33,"now"],[436,38,485,36],[437,8,486,6],[438,8,488,6,"console"],[438,15,488,13],[438,16,488,14,"log"],[438,19,488,17],[438,20,488,18],[438,53,488,51,"newState"],[438,61,488,59],[438,62,488,60,"enemies"],[438,69,488,67],[438,70,488,68,"length"],[438,76,488,74],[438,85,488,83,"MAX_ENEMIES"],[438,96,488,94],[438,109,488,107,"hasBoss"],[438,116,488,114],[438,118,488,116],[438,119,488,117],[440,8,490,6],[441,8,491,6],[441,12,491,10],[441,13,491,11,"hasBoss"],[441,20,491,18],[441,24,491,22,"newState"],[441,32,491,30],[441,33,491,31,"enemies"],[441,40,491,38],[441,41,491,39,"length"],[441,47,491,45],[441,50,491,48,"MAX_ENEMIES"],[441,61,491,59],[441,65,491,64,"now"],[441,68,491,67],[441,71,491,70,"newState"],[441,79,491,78],[441,80,491,79,"lastSpawnTime"],[441,93,491,92],[441,97,491,97,"MIN_SPAWN_DELAY"],[441,112,491,112],[441,114,491,114],[442,10,492,8,"console"],[442,17,492,15],[442,18,492,16,"log"],[442,21,492,19],[442,22,492,20],[442,43,492,41,"newState"],[442,51,492,49],[442,52,492,50,"enemies"],[442,59,492,57],[442,60,492,58,"length"],[442,66,492,64],[442,69,492,67],[442,70,492,68],[442,74,492,72,"MAX_ENEMIES"],[442,85,492,83],[442,87,492,85],[442,88,492,86],[443,10,493,8,"spawnTestEnemy"],[443,24,493,22],[443,25,493,23,"newState"],[443,33,493,31],[443,34,493,32],[444,10,494,8,"newState"],[444,18,494,16],[444,19,494,17,"lastSpawnTime"],[444,32,494,30],[444,35,494,33,"now"],[444,38,494,36],[445,8,495,6],[446,8,497,6],[446,15,497,13,"newState"],[446,23,497,21],[447,6,498,4],[447,7,498,5],[447,47,498,6],[449,6,500,4],[450,6,501,4,"console"],[450,13,501,11],[450,14,501,12,"log"],[450,17,501,15],[450,18,501,16],[450,50,501,48,"enemiesToKill"],[450,63,501,61],[450,64,501,62,"length"],[450,70,501,68],[450,101,501,99],[450,102,501,100],[451,6,503,4,"enemiesToKill"],[451,19,503,17],[451,20,503,18,"forEach"],[451,27,503,25],[451,28,503,26],[451,29,503,27,"enemy"],[451,34,503,32],[451,36,503,34,"index"],[451,41,503,39],[451,46,503,44],[452,8,504,6,"console"],[452,15,504,13],[452,16,504,14,"log"],[452,19,504,17],[452,20,504,18],[452,57,504,55,"index"],[452,62,504,60],[452,65,504,63],[452,66,504,64],[452,70,504,68,"enemiesToKill"],[452,83,504,81],[452,84,504,82,"length"],[452,90,504,88],[452,104,504,102,"enemy"],[452,109,504,107],[452,110,504,108,"id"],[452,112,504,110],[452,114,504,112],[452,115,504,113],[453,8,505,6,"handleEnemyKill"],[453,23,505,21],[453,24,505,22,"enemy"],[453,29,505,27],[453,30,505,28],[454,6,506,4],[454,7,506,5],[454,8,506,6],[455,4,507,2],[455,5,507,3],[455,7,507,5],[455,8,507,6,"handleEnemyKill"],[455,23,507,21],[455,24,507,22],[455,25,507,23],[455,26,507,24],[455,27,507,25],[457,4,509,2],[458,4,510,2],[458,10,510,8,"findClosestEnemyInternal"],[458,34,510,32],[458,37,510,36,"enemies"],[458,44,510,58],[458,48,510,83],[459,6,511,4],[459,10,511,8,"enemies"],[459,17,511,15],[459,18,511,16,"length"],[459,24,511,22],[459,29,511,27],[459,30,511,28],[459,32,511,30],[459,39,511,37],[459,43,511,41],[461,6,513,4],[462,6,514,4],[462,12,514,10,"SCREEN_WIDTH"],[462,24,514,22],[462,27,514,25],[462,30,514,28],[463,6,515,4],[463,12,515,10,"GAME_AREA_HEIGHT"],[463,28,515,26],[463,31,515,29],[463,34,515,32],[463,37,515,35],[463,40,515,38],[463,41,515,39],[463,42,515,40],[464,6,516,4],[464,12,516,10,"ninjaX"],[464,18,516,16],[464,21,516,19,"SCREEN_WIDTH"],[464,33,516,31],[464,36,516,34],[464,37,516,35],[465,6,517,4],[465,12,517,10,"ninjaY"],[465,18,517,16],[465,21,517,19,"GAME_AREA_HEIGHT"],[465,37,517,35],[465,40,517,38],[465,41,517,39],[466,6,519,4],[466,10,519,8,"closestEnemy"],[466,22,519,20],[466,25,519,23,"enemies"],[466,32,519,30],[466,33,519,31],[466,34,519,32],[466,35,519,33],[467,6,520,4],[467,10,520,8,"closestDistance"],[467,25,520,23],[467,28,520,26,"Infinity"],[467,36,520,34],[468,6,522,4,"enemies"],[468,13,522,11],[468,14,522,12,"forEach"],[468,21,522,19],[468,22,522,20,"enemy"],[468,27,522,25],[468,31,522,29],[469,8,523,6],[469,14,523,12,"distance"],[469,22,523,20],[469,25,523,23,"Math"],[469,29,523,27],[469,30,523,28,"sqrt"],[469,34,523,32],[469,35,524,8,"Math"],[469,39,524,12],[469,40,524,13,"pow"],[469,43,524,16],[469,44,524,17,"enemy"],[469,49,524,22],[469,50,524,23,"position"],[469,58,524,31],[469,59,524,32,"x"],[469,60,524,33],[469,63,524,36,"ninjaX"],[469,69,524,42],[469,71,524,44],[469,72,524,45],[469,73,524,46],[469,76,525,8,"Math"],[469,80,525,12],[469,81,525,13,"pow"],[469,84,525,16],[469,85,525,17,"enemy"],[469,90,525,22],[469,91,525,23,"position"],[469,99,525,31],[469,100,525,32,"y"],[469,101,525,33],[469,104,525,36,"ninjaY"],[469,110,525,42],[469,112,525,44],[469,113,525,45],[469,114,526,6],[469,115,526,7],[470,8,528,6],[470,12,528,10,"distance"],[470,20,528,18],[470,23,528,21,"closestDistance"],[470,38,528,36],[470,40,528,38],[471,10,529,8,"closestDistance"],[471,25,529,23],[471,28,529,26,"distance"],[471,36,529,34],[472,10,530,8,"closestEnemy"],[472,22,530,20],[472,25,530,23,"enemy"],[472,30,530,28],[473,8,531,6],[474,6,532,4],[474,7,532,5],[474,8,532,6],[475,6,534,4,"console"],[475,13,534,11],[475,14,534,12,"log"],[475,17,534,15],[475,18,534,16],[475,60,534,58,"closestDistance"],[475,75,534,73],[475,76,534,74,"toFixed"],[475,83,534,81],[475,84,534,82],[475,85,534,83],[475,86,534,84],[475,88,534,86],[475,89,534,87],[476,6,535,4],[476,13,535,11,"closestEnemy"],[476,25,535,23],[477,4,536,2],[477,5,536,3],[479,4,538,2],[480,4,539,2],[480,10,539,8,"findClosestEnemy"],[480,26,539,24],[480,29,539,27,"findClosestEnemy"],[480,30,539,27],[480,35,539,53],[481,6,540,4],[481,13,540,11,"findClosestEnemyInternal"],[481,37,540,35],[481,38,540,36,"combatState"],[481,49,540,47],[481,50,540,48,"enemies"],[481,57,540,55],[481,58,540,56],[482,4,541,2],[482,5,541,3],[484,4,543,2],[485,4,544,2],[485,10,544,8],[485,11,544,9,"currentNinjaPosition"],[485,31,544,29],[485,33,544,31,"setCurrentNinjaPosition"],[485,56,544,54],[485,57,544,55],[485,60,544,58],[485,64,544,58,"useState"],[485,70,544,66],[485,71,544,66,"useState"],[485,79,544,66],[485,81,544,91],[486,6,544,93,"x"],[486,7,544,94],[486,9,544,96],[486,10,544,97],[487,6,544,99,"y"],[487,7,544,100],[487,9,544,102],[488,4,544,104],[488,5,544,105],[488,6,544,106],[489,4,545,2],[489,10,545,8],[489,11,545,9,"isManualControlActive"],[489,32,545,30],[489,34,545,32,"setIsManualControlActive"],[489,58,545,56],[489,59,545,57],[489,62,545,60],[489,66,545,60,"useState"],[489,72,545,68],[489,73,545,68,"useState"],[489,81,545,68],[489,83,545,69],[489,88,545,74],[489,89,545,75],[491,4,547,2],[492,4,548,2],[492,10,548,8,"updateNinjaPosition"],[492,29,548,27],[492,32,548,30],[492,36,548,30,"useCallback"],[492,42,548,41],[492,43,548,41,"useCallback"],[492,54,548,41],[492,56,548,43,"newPosition"],[492,67,548,78],[492,71,548,83],[493,6,549,4,"setCurrentNinjaPosition"],[493,29,549,27],[493,30,549,28,"newPosition"],[493,41,549,39],[493,42,549,40],[494,4,550,2],[494,5,550,3],[494,7,550,5],[494,9,550,7],[494,10,550,8],[496,4,552,2],[497,4,553,2],[497,10,553,8,"setManualControlActive"],[497,32,553,30],[497,35,553,33],[497,39,553,33,"useCallback"],[497,45,553,44],[497,46,553,44,"useCallback"],[497,57,553,44],[497,59,553,46,"active"],[497,65,553,61],[497,69,553,66],[498,6,554,4,"setIsManualControlActive"],[498,30,554,28],[498,31,554,29,"active"],[498,37,554,35],[498,38,554,36],[499,6,555,4,"console"],[499,13,555,11],[499,14,555,12,"log"],[499,17,555,15],[499,18,555,16],[499,39,555,37,"active"],[499,45,555,43],[499,48,555,46],[499,59,555,57],[499,62,555,60],[499,75,555,73],[499,88,555,86,"active"],[499,94,555,92],[499,97,555,95],[499,105,555,103],[499,108,555,106],[499,117,555,115],[499,119,555,117],[499,120,555,118],[500,4,556,2],[500,5,556,3],[500,7,556,5],[500,9,556,7],[500,10,556,8],[502,4,558,2],[503,4,559,2],[503,10,559,8,"handleProjectileHit"],[503,29,559,27],[503,32,559,31,"projectile"],[503,42,559,59],[503,46,559,64],[504,6,560,4,"console"],[504,13,560,11],[504,14,560,12,"log"],[504,17,560,15],[504,18,560,16],[504,35,560,33,"projectile"],[504,45,560,43],[504,46,560,44,"id"],[504,48,560,46],[504,62,560,60,"projectile"],[504,72,560,70],[504,73,560,71,"targetEnemyId"],[504,86,560,84],[504,94,560,92,"projectile"],[504,104,560,102],[504,105,560,103,"damage"],[504,111,560,109],[504,120,560,118],[504,121,560,119],[505,6,562,4,"setCombatState"],[505,20,562,18],[505,21,562,19,"prev"],[505,25,562,23],[505,29,562,27],[506,8,563,6],[506,14,563,12,"newState"],[506,22,563,20],[506,25,563,23],[507,10,563,25],[507,13,563,28,"prev"],[508,8,563,33],[508,9,563,34],[510,8,565,6],[511,8,566,6],[511,14,566,12,"enemyIndex"],[511,24,566,22],[511,27,566,25,"newState"],[511,35,566,33],[511,36,566,34,"enemies"],[511,43,566,41],[511,44,566,42,"findIndex"],[511,53,566,51],[511,54,566,52,"e"],[511,55,566,53],[511,59,566,57,"e"],[511,60,566,58],[511,61,566,59,"id"],[511,63,566,61],[511,68,566,66,"projectile"],[511,78,566,76],[511,79,566,77,"targetEnemyId"],[511,92,566,90],[511,93,566,91],[512,8,567,6],[512,12,567,10,"enemyIndex"],[512,22,567,20],[512,26,567,24],[512,27,567,25],[512,29,567,27],[513,10,568,8,"newState"],[513,18,568,16],[513,19,568,17,"enemies"],[513,26,568,24],[513,29,568,27],[513,30,568,28],[513,33,568,31,"newState"],[513,41,568,39],[513,42,568,40,"enemies"],[513,49,568,47],[513,50,568,48],[514,10,569,8,"newState"],[514,18,569,16],[514,19,569,17,"enemies"],[514,26,569,24],[514,27,569,25,"enemyIndex"],[514,37,569,35],[514,38,569,36],[514,41,569,39],[515,12,570,10],[515,15,570,13,"newState"],[515,23,570,21],[515,24,570,22,"enemies"],[515,31,570,29],[515,32,570,30,"enemyIndex"],[515,42,570,40],[515,43,570,41],[516,12,571,10,"health"],[516,18,571,16],[516,20,571,18,"newState"],[516,28,571,26],[516,29,571,27,"enemies"],[516,36,571,34],[516,37,571,35,"enemyIndex"],[516,47,571,45],[516,48,571,46],[516,49,571,47,"health"],[516,55,571,53],[516,58,571,56,"projectile"],[516,68,571,66],[516,69,571,67,"damage"],[516,75,571,73],[517,12,572,10,"lastDamaged"],[517,23,572,21],[517,25,572,23,"combatEngine"],[517,44,572,35],[517,45,572,35,"combatEngine"],[517,57,572,35],[517,58,572,36,"getCurrentTick"],[517,72,572,50],[517,73,572,51],[518,10,573,8],[518,11,573,9],[519,10,575,8,"console"],[519,17,575,15],[519,18,575,16,"log"],[519,21,575,19],[519,22,575,20],[519,34,575,32,"projectile"],[519,44,575,42],[519,45,575,43,"targetEnemyId"],[519,58,575,56],[519,70,575,68,"newState"],[519,78,575,76],[519,79,575,77,"enemies"],[519,86,575,84],[519,87,575,85,"enemyIndex"],[519,97,575,95],[519,98,575,96],[519,99,575,97,"health"],[519,105,575,103],[519,109,575,107,"newState"],[519,117,575,115],[519,118,575,116,"enemies"],[519,125,575,123],[519,126,575,124,"enemyIndex"],[519,136,575,134],[519,137,575,135],[519,138,575,136,"maxHealth"],[519,147,575,145],[519,149,575,147],[519,150,575,148],[520,8,576,6],[521,8,578,6],[521,15,578,13,"newState"],[521,23,578,21],[522,6,579,4],[522,7,579,5],[522,8,579,6],[524,6,581,4],[525,6,582,4,"setProjectiles"],[525,20,582,18],[525,21,582,19,"prev"],[525,25,582,23],[525,29,582,27,"prev"],[525,33,582,31],[525,34,582,32,"filter"],[525,40,582,38],[525,41,582,39,"p"],[525,42,582,40],[525,46,582,44,"p"],[525,47,582,45],[525,48,582,46,"id"],[525,50,582,48],[525,55,582,53,"projectile"],[525,65,582,63],[525,66,582,64,"id"],[525,68,582,66],[525,69,582,67],[525,70,582,68],[526,4,583,2],[526,5,583,3],[528,4,585,2],[529,4,586,2],[529,10,586,8,"castAbility"],[529,21,586,19],[529,24,586,22,"castAbility"],[529,25,586,23,"state"],[529,30,586,41],[529,32,586,43,"slotIndex"],[529,41,586,60],[529,46,586,65],[530,6,587,4],[530,12,587,10,"deck"],[530,16,587,14],[530,19,587,17,"state"],[530,24,587,22],[530,25,587,23,"abilityManager"],[530,39,587,37],[530,40,587,38,"getDeck"],[530,47,587,45],[530,48,587,46],[530,49,587,47],[531,6,588,4],[531,12,588,10,"ability"],[531,19,588,17],[531,22,588,20,"deck"],[531,26,588,24],[531,27,588,25,"slots"],[531,32,588,30],[531,33,588,31,"slotIndex"],[531,42,588,40],[531,43,588,41],[532,6,589,4],[532,10,589,8],[532,11,589,9,"ability"],[532,18,589,16],[532,20,589,18],[534,6,591,4],[535,6,592,4],[535,10,592,8,"damage"],[535,16,592,14],[535,19,592,17,"ability"],[535,26,592,24],[535,27,592,25,"stats"],[535,32,592,30],[535,33,592,31,"baseDamage"],[535,43,592,41],[537,6,594,4],[538,6,595,4,"deck"],[538,10,595,8],[538,11,595,9,"activeSynergies"],[538,26,595,24],[538,27,595,25,"forEach"],[538,34,595,32],[538,35,595,33,"synergy"],[538,42,595,40],[538,46,595,44],[539,8,596,6],[539,12,596,10,"synergy"],[539,19,596,17],[539,20,596,18,"bonus"],[539,25,596,23],[539,26,596,24,"damageBonus"],[539,37,596,35],[539,41,597,10,"synergy"],[539,48,597,17],[539,49,597,18,"requiredTags"],[539,61,597,30],[539,62,597,31,"some"],[539,66,597,35],[539,67,597,36,"tag"],[539,70,597,39],[539,74,597,43,"ability"],[539,81,597,50],[539,82,597,51,"tags"],[539,86,597,55],[539,87,597,56,"includes"],[539,95,597,64],[539,96,597,65,"tag"],[539,99,597,68],[539,100,597,69],[539,101,597,70],[539,103,597,72],[540,10,598,8,"damage"],[540,16,598,14],[540,20,598,19],[540,21,598,20],[540,24,598,23,"synergy"],[540,31,598,30],[540,32,598,31,"bonus"],[540,37,598,36],[540,38,598,37,"damageBonus"],[540,49,598,48],[540,52,598,51],[540,55,598,55],[541,8,599,6],[542,6,600,4],[542,7,600,5],[542,8,600,6],[544,6,602,4],[545,6,603,4],[545,12,603,10,"isAOE"],[545,17,603,15],[545,20,603,18,"ability"],[545,27,603,25],[545,28,603,26,"effects"],[545,35,603,33],[545,36,603,34,"includes"],[545,44,603,42],[545,45,603,43],[545,50,603,48],[545,51,603,49],[545,55,603,53,"ability"],[545,62,603,60],[545,63,603,61,"stats"],[545,68,603,66],[545,69,603,67,"aoeRadius"],[545,78,603,76],[546,6,605,4],[546,10,605,8,"isAOE"],[546,15,605,13],[546,17,605,15],[547,8,606,6,"console"],[547,15,606,13],[547,16,606,14,"log"],[547,19,606,17],[547,20,606,18],[547,39,606,37,"ability"],[547,46,606,44],[547,47,606,45,"name"],[547,51,606,49],[547,67,606,65,"ability"],[547,74,606,72],[547,75,606,73,"stats"],[547,80,606,78],[547,81,606,79,"aoeRadius"],[547,90,606,88],[547,92,606,90],[547,93,606,91],[549,8,608,6],[550,8,609,6],[551,8,610,6],[551,14,610,12,"target"],[551,20,610,18],[551,23,610,21,"findClosestEnemyInternal"],[551,47,610,45],[551,48,610,46,"state"],[551,53,610,51],[551,54,610,52,"enemies"],[551,61,610,59],[551,62,610,60],[552,8,611,6],[552,12,611,10],[552,13,611,11,"target"],[552,19,611,17],[552,21,611,19],[554,8,613,6],[555,8,614,6,"createProjectile"],[555,24,614,22],[555,25,614,23,"target"],[555,31,614,29],[555,33,614,31,"damage"],[555,39,614,37],[555,41,614,39,"currentNinjaPosition"],[555,61,614,59],[555,63,614,61],[556,10,615,8,"id"],[556,12,615,10],[556,14,615,12,"ability"],[556,21,615,19],[556,22,615,20,"id"],[556,24,615,22],[557,10,616,8,"name"],[557,14,616,12],[557,16,616,14,"ability"],[557,23,616,21],[557,24,616,22,"name"],[557,28,616,26],[558,10,617,8,"icon"],[558,14,617,12],[558,16,617,14,"ability"],[558,23,617,21],[558,24,617,22,"icon"],[559,8,618,6],[559,9,618,7],[559,11,618,9],[559,15,618,13],[559,17,618,15,"ability"],[559,24,618,22],[559,25,618,23,"stats"],[559,30,618,28],[559,31,618,29,"aoeRadius"],[559,40,618,38],[559,41,618,39],[559,42,618,40],[559,43,618,41],[561,8,620,6,"console"],[561,15,620,13],[561,16,620,14,"log"],[561,19,620,17],[561,20,620,18],[561,26,620,24,"ability"],[561,33,620,31],[561,34,620,32,"name"],[561,38,620,36],[561,75,620,73,"target"],[561,81,620,79],[561,82,620,80,"name"],[561,86,620,84],[561,95,620,93,"ability"],[561,102,620,100],[561,103,620,101,"stats"],[561,108,620,106],[561,109,620,107,"aoeRadius"],[561,118,620,116],[561,127,620,125],[561,128,620,126],[562,6,622,4],[562,7,622,5],[562,13,622,11],[563,8,623,6],[564,8,624,6],[564,14,624,12,"target"],[564,20,624,18],[564,23,624,21,"findClosestEnemyInternal"],[564,47,624,45],[564,48,624,46,"state"],[564,53,624,51],[564,54,624,52,"enemies"],[564,61,624,59],[564,62,624,60],[565,8,625,6],[565,12,625,10],[565,13,625,11,"target"],[565,19,625,17],[565,21,625,19],[566,8,627,6],[566,14,627,12,"damageResult"],[566,26,627,24],[566,29,627,27,"DamageCalculator"],[566,48,627,43],[566,49,627,43,"DamageCalculator"],[566,65,627,43],[566,66,627,44,"calculateDamage"],[566,81,627,59],[566,82,627,60,"damage"],[566,88,627,66],[566,90,627,68,"state"],[566,95,627,73],[566,96,627,74,"playerStats"],[566,107,627,85],[566,109,627,87,"target"],[566,115,627,93],[566,116,627,94,"stats"],[566,121,627,99],[566,122,627,100],[568,8,629,6],[569,8,630,6,"createProjectile"],[569,24,630,22],[569,25,630,23,"target"],[569,31,630,29],[569,33,630,31,"damageResult"],[569,45,630,43],[569,46,630,44,"damage"],[569,52,630,50],[569,54,630,52,"currentNinjaPosition"],[569,74,630,72],[569,76,630,74],[570,10,631,8,"id"],[570,12,631,10],[570,14,631,12,"ability"],[570,21,631,19],[570,22,631,20,"id"],[570,24,631,22],[571,10,632,8,"name"],[571,14,632,12],[571,16,632,14,"ability"],[571,23,632,21],[571,24,632,22,"name"],[571,28,632,26],[572,10,633,8,"icon"],[572,14,633,12],[572,16,633,14,"ability"],[572,23,633,21],[572,24,633,22,"icon"],[573,8,634,6],[573,9,634,7],[573,10,634,8],[574,8,636,6,"console"],[574,15,636,13],[574,16,636,14,"log"],[574,19,636,17],[574,20,636,18],[574,26,636,24,"ability"],[574,33,636,31],[574,34,636,32,"name"],[574,38,636,36],[574,66,636,64,"damageResult"],[574,78,636,76],[574,79,636,77,"damage"],[574,85,636,83],[574,95,636,93,"damageResult"],[574,107,636,105],[574,108,636,106,"isCritical"],[574,118,636,116],[574,121,636,119],[574,131,636,129],[574,134,636,132],[574,136,636,134],[574,138,636,136],[574,139,636,137],[575,6,637,4],[577,6,639,4],[578,6,640,4],[578,10,640,8,"ability"],[578,17,640,15],[578,18,640,16,"effects"],[578,25,640,23],[578,26,640,24,"includes"],[578,34,640,32],[578,35,640,33],[578,40,640,38],[578,41,640,39],[578,45,640,43,"ability"],[578,52,640,50],[578,53,640,51,"stats"],[578,58,640,56],[578,59,640,57,"duration"],[578,67,640,65],[578,69,640,67],[579,8,641,6],[579,14,641,12,"targets"],[579,21,641,19],[579,24,641,22,"isAOE"],[579,29,641,27],[579,32,642,8,"state"],[579,37,642,13],[579,38,642,14,"enemies"],[579,45,642,21],[579,46,642,22,"filter"],[579,52,642,28],[579,53,642,29,"enemy"],[579,58,642,34],[579,62,642,38],[580,10,643,10],[580,16,643,16,"ninjaX"],[580,22,643,22],[580,25,643,25,"currentNinjaPosition"],[580,45,643,45],[580,46,643,46,"x"],[580,47,643,47],[580,50,643,50],[580,52,643,52],[581,10,644,10],[581,16,644,16,"ninjaY"],[581,22,644,22],[581,25,644,25,"currentNinjaPosition"],[581,45,644,45],[581,46,644,46,"y"],[581,47,644,47],[581,50,644,50],[581,52,644,52],[582,10,645,10],[582,16,645,16,"enemyX"],[582,22,645,22],[582,25,645,25,"enemy"],[582,30,645,30],[582,31,645,31,"position"],[582,39,645,39],[582,40,645,40,"x"],[582,41,645,41],[582,44,645,44],[582,48,645,48],[583,10,646,10],[583,16,646,16,"enemyY"],[583,22,646,22],[583,25,646,25,"enemy"],[583,30,646,30],[583,31,646,31,"position"],[583,39,646,39],[583,40,646,40,"y"],[583,41,646,41],[583,44,646,44],[583,48,646,48],[584,10,647,10],[584,16,647,16,"distance"],[584,24,647,24],[584,27,647,27,"Math"],[584,31,647,31],[584,32,647,32,"sqrt"],[584,36,647,36],[584,37,647,37,"Math"],[584,41,647,41],[584,42,647,42,"pow"],[584,45,647,45],[584,46,647,46,"enemyX"],[584,52,647,52],[584,55,647,55,"ninjaX"],[584,61,647,61],[584,63,647,63],[584,64,647,64],[584,65,647,65],[584,68,647,68,"Math"],[584,72,647,72],[584,73,647,73,"pow"],[584,76,647,76],[584,77,647,77,"enemyY"],[584,83,647,83],[584,86,647,86,"ninjaY"],[584,92,647,92],[584,94,647,94],[584,95,647,95],[584,96,647,96],[584,97,647,97],[585,10,648,10],[585,17,648,17,"distance"],[585,25,648,25],[585,29,648,29,"ability"],[585,36,648,36],[585,37,648,37,"stats"],[585,42,648,42],[585,43,648,43,"aoeRadius"],[585,52,648,52],[586,8,649,8],[586,9,649,9],[586,10,649,10],[586,13,650,8],[586,14,650,9,"findClosestEnemyInternal"],[586,38,650,33],[586,39,650,34,"state"],[586,44,650,39],[586,45,650,40,"enemies"],[586,52,650,47],[586,53,650,48],[586,54,650,49],[586,55,650,50,"filter"],[586,61,650,56],[586,62,650,57,"Boolean"],[586,69,650,64],[586,70,650,65],[587,8,652,6,"targets"],[587,15,652,13],[587,16,652,14,"forEach"],[587,23,652,21],[587,24,652,22,"target"],[587,30,652,28],[587,34,652,32],[588,10,653,8,"state"],[588,15,653,13],[588,16,653,14,"statusEffects"],[588,29,653,27],[588,30,653,28,"addEffect"],[588,39,653,37],[588,40,653,38,"target"],[588,46,653,44],[588,47,653,45,"id"],[588,49,653,47],[588,51,653,49],[589,12,654,10,"id"],[589,14,654,12],[589,16,654,14],[589,19,654,17,"ability"],[589,26,654,24],[589,27,654,25,"id"],[589,29,654,27],[589,35,654,33],[590,12,655,10,"type"],[590,16,655,14],[590,18,655,16],[590,23,655,21],[591,12,656,10,"remainingTicks"],[591,26,656,24],[591,28,656,26,"Math"],[591,32,656,30],[591,33,656,31,"floor"],[591,38,656,36],[591,39,656,37,"ability"],[591,46,656,44],[591,47,656,45,"stats"],[591,52,656,50],[591,53,656,51,"duration"],[591,61,656,59],[591,64,656,62],[591,66,656,64],[591,67,656,65],[592,12,657,10,"tickInterval"],[592,24,657,22],[592,26,657,24],[592,28,657,26],[593,12,658,10,"lastTick"],[593,20,658,18],[593,22,658,20,"state"],[593,27,658,25],[593,28,658,26,"currentTick"],[593,39,658,37],[594,12,659,10,"value"],[594,17,659,15],[594,19,659,17,"Math"],[594,23,659,21],[594,24,659,22,"floor"],[594,29,659,27],[594,30,659,28,"damage"],[594,36,659,34],[594,39,659,37],[594,42,659,40],[594,43,659,41],[595,12,660,10,"stackable"],[595,21,660,19],[595,23,660,21],[596,10,661,8],[596,11,661,9],[596,12,661,10],[597,8,662,6],[597,9,662,7],[597,10,662,8],[598,6,663,4],[600,6,665,4],[601,6,666,4],[601,10,666,8,"ability"],[601,17,666,15],[601,18,666,16,"effects"],[601,25,666,23],[601,26,666,24,"includes"],[601,34,666,32],[601,35,666,33],[601,41,666,39],[601,42,666,40],[601,46,666,44,"ability"],[601,53,666,51],[601,54,666,52,"id"],[601,56,666,54],[601,61,666,59],[601,75,666,73],[601,77,666,75],[602,8,667,6,"console"],[602,15,667,13],[602,16,667,14,"log"],[602,19,667,17],[602,20,667,18],[602,66,667,64,"ability"],[602,73,667,71],[602,74,667,72,"stats"],[602,79,667,77],[602,80,667,78,"duration"],[602,88,667,86],[602,98,667,96],[602,99,667,97],[604,8,669,6],[605,8,670,6],[605,14,670,12,"cloneX"],[605,20,670,18],[605,23,670,21,"currentNinjaPosition"],[605,43,670,41],[605,44,670,42,"x"],[605,45,670,43],[605,48,670,46],[605,50,670,48],[605,51,670,49],[605,52,670,50],[606,8,671,6],[606,14,671,12,"cloneY"],[606,20,671,18],[606,23,671,21,"currentNinjaPosition"],[606,43,671,41],[606,44,671,42,"y"],[606,45,671,43],[606,48,671,46],[606,50,671,48],[606,51,671,49],[606,52,671,50],[608,8,673,6,"state"],[608,13,673,11],[608,14,673,12,"shadowClone"],[608,25,673,23],[608,28,673,26],[609,10,674,8,"id"],[609,12,674,10],[609,14,674,12],[609,30,674,28,"Date"],[609,34,674,32],[609,35,674,33,"now"],[609,38,674,36],[609,39,674,37],[609,40,674,38],[609,42,674,40],[610,10,675,8,"remainingTicks"],[610,24,675,22],[610,26,675,24,"Math"],[610,30,675,28],[610,31,675,29,"floor"],[610,36,675,34],[610,37,675,35,"ability"],[610,44,675,42],[610,45,675,43,"stats"],[610,50,675,48],[610,51,675,49,"duration"],[610,59,675,57],[610,62,675,60],[610,64,675,62],[610,65,675,63],[611,10,675,65],[612,10,676,8,"position"],[612,18,676,16],[612,20,676,18],[613,12,676,20,"x"],[613,13,676,21],[613,15,676,23,"cloneX"],[613,21,676,29],[614,12,676,31,"y"],[614,13,676,32],[614,15,676,34,"cloneY"],[615,10,676,41],[615,11,676,42],[616,10,677,8,"damageMultiplier"],[616,26,677,24],[616,28,677,26],[616,31,677,29],[616,32,677,31],[617,8,678,6],[617,9,678,7],[618,8,680,6,"console"],[618,15,680,13],[618,16,680,14,"log"],[618,19,680,17],[618,20,680,18],[618,63,680,61,"ability"],[618,70,680,68],[618,71,680,69,"stats"],[618,76,680,74],[618,77,680,75,"duration"],[618,85,680,83],[618,108,680,106],[618,109,680,107],[619,6,681,4],[620,4,682,2],[620,5,682,3],[622,4,684,2],[623,4,685,2],[623,10,685,8,"createProjectile"],[623,26,685,24],[623,29,685,27,"createProjectile"],[623,30,685,28,"targetEnemy"],[623,41,685,52],[623,43,685,54,"damage"],[623,49,685,68],[623,51,685,70,"ninjaPos"],[623,59,685,103],[623,61,685,105,"abilityInfo"],[623,72,685,159],[623,74,685,161,"isAOE"],[623,79,685,176],[623,81,685,178,"aoeRadius"],[623,90,685,196],[623,95,685,201],[624,6,686,4],[624,10,686,8],[624,11,686,9,"targetEnemy"],[624,22,686,20],[624,24,686,22],[625,8,687,6,"console"],[625,15,687,13],[625,16,687,14,"log"],[625,19,687,17],[625,20,687,18],[625,65,687,63],[625,66,687,64],[626,8,688,6],[626,15,688,13],[626,19,688,17],[627,6,689,4],[628,6,691,4],[628,12,691,10,"SCREEN_WIDTH"],[628,24,691,22],[628,27,691,25],[628,30,691,28],[629,6,692,4],[629,12,692,10,"GAME_AREA_HEIGHT"],[629,28,692,26],[629,31,692,29],[629,34,692,32],[629,37,692,35],[629,40,692,38],[629,41,692,39],[629,42,692,40],[630,6,693,4],[630,12,693,10,"NINJA_SIZE"],[630,22,693,20],[630,25,693,23],[630,27,693,25],[632,6,695,4],[633,6,696,4],[633,12,696,10,"ninjaX"],[633,18,696,16],[633,21,696,19,"ninjaPos"],[633,29,696,27],[633,32,696,30,"ninjaPos"],[633,40,696,38],[633,41,696,39,"x"],[633,42,696,40],[633,45,696,43,"NINJA_SIZE"],[633,55,696,53],[633,58,696,56],[633,59,696,57],[633,62,696,60,"SCREEN_WIDTH"],[633,74,696,72],[633,77,696,75],[633,78,696,76],[634,6,697,4],[634,12,697,10,"ninjaY"],[634,18,697,16],[634,21,697,19,"ninjaPos"],[634,29,697,27],[634,32,697,30,"ninjaPos"],[634,40,697,38],[634,41,697,39,"y"],[634,42,697,40],[634,45,697,43,"NINJA_SIZE"],[634,55,697,53],[634,58,697,56],[634,59,697,57],[634,62,697,60,"GAME_AREA_HEIGHT"],[634,78,697,76],[634,81,697,79],[634,82,697,80],[635,6,698,4],[635,12,698,10,"ENEMY_SIZE"],[635,22,698,20],[635,25,698,23],[635,27,698,25],[636,6,700,4],[636,12,700,10,"projectileId"],[636,24,700,22],[636,27,700,25],[636,35,700,33,"Date"],[636,39,700,37],[636,40,700,38,"now"],[636,43,700,41],[636,44,700,42],[636,45,700,43],[636,49,700,47,"Math"],[636,53,700,51],[636,54,700,52,"random"],[636,60,700,58],[636,61,700,59],[636,62,700,60],[636,64,700,62],[637,6,702,4],[637,12,702,10,"projectile"],[637,22,702,38],[637,25,702,41],[638,8,703,6,"id"],[638,10,703,8],[638,12,703,10,"projectileId"],[638,24,703,22],[639,8,704,6,"x"],[639,9,704,7],[639,11,704,9,"ninjaX"],[639,17,704,15],[640,8,705,6,"y"],[640,9,705,7],[640,11,705,9,"ninjaY"],[640,17,705,15],[641,8,706,6,"targetX"],[641,15,706,13],[641,17,706,15,"targetEnemy"],[641,28,706,26],[641,29,706,27,"position"],[641,37,706,35],[641,38,706,36,"x"],[641,39,706,37],[641,42,706,40,"ENEMY_SIZE"],[641,52,706,50],[641,55,706,53],[641,56,706,54],[642,8,707,6,"targetY"],[642,15,707,13],[642,17,707,15,"targetEnemy"],[642,28,707,26],[642,29,707,27,"position"],[642,37,707,35],[642,38,707,36,"y"],[642,39,707,37],[642,42,707,40,"ENEMY_SIZE"],[642,52,707,50],[642,55,707,53],[642,56,707,54],[643,8,708,6,"targetEnemyId"],[643,21,708,19],[643,23,708,21,"targetEnemy"],[643,34,708,32],[643,35,708,33,"id"],[643,37,708,35],[644,8,709,6,"damage"],[644,14,709,12],[644,16,709,14,"damage"],[644,22,709,20],[645,8,710,6,"startTime"],[645,17,710,15],[645,19,710,17,"Date"],[645,23,710,21],[645,24,710,22,"now"],[645,27,710,25],[645,28,710,26],[645,29,710,27],[646,8,711,6,"duration"],[646,16,711,14],[646,18,711,16],[646,21,711,19],[647,8,711,21],[648,8,712,6],[649,8,713,6,"abilityId"],[649,17,713,15],[649,19,713,17,"abilityInfo"],[649,30,713,28],[649,32,713,30,"id"],[649,34,713,32],[649,38,713,36],[649,54,713,52],[650,8,714,6,"abilityName"],[650,19,714,17],[650,21,714,19,"abilityInfo"],[650,32,714,30],[650,34,714,32,"name"],[650,38,714,36],[650,42,714,40],[650,58,714,56],[651,8,715,6,"abilityIcon"],[651,19,715,17],[651,21,715,19,"abilityInfo"],[651,32,715,30],[651,34,715,32,"icon"],[651,38,715,36],[651,42,715,40],[651,46,715,44],[652,8,715,46],[653,8,716,6],[654,8,717,6,"isAOE"],[654,13,717,11],[654,15,717,13,"isAOE"],[654,20,717,18],[654,24,717,22],[654,29,717,27],[655,8,718,6,"aoeRadius"],[655,17,718,15],[655,19,718,17,"aoeRadius"],[655,28,718,26],[655,32,718,30],[656,6,719,4],[656,7,719,5],[657,6,721,4,"console"],[657,13,721,11],[657,14,721,12,"log"],[657,17,721,15],[657,18,721,16],[657,44,721,42,"abilityInfo"],[657,55,721,53],[657,57,721,55,"name"],[657,61,721,59],[657,65,721,63],[657,81,721,79],[657,101,721,99,"projectileId"],[657,113,721,111],[657,128,721,126,"targetEnemy"],[657,139,721,137],[657,140,721,138,"name"],[657,144,721,142],[657,152,721,150,"damage"],[657,158,721,156],[657,167,721,165],[657,168,721,166],[658,6,723,4,"console"],[658,13,723,11],[658,14,723,12,"log"],[658,17,723,15],[658,18,723,16],[658,53,723,51,"targetEnemy"],[658,64,723,62],[658,65,723,63,"id"],[658,67,723,65],[658,75,723,73,"damage"],[658,81,723,79],[658,90,723,88],[658,91,723,89],[659,6,724,4,"console"],[659,13,724,11],[659,14,724,12,"log"],[659,17,724,15],[659,18,724,16],[659,53,724,51,"ninjaX"],[659,59,724,57],[659,64,724,62,"ninjaY"],[659,70,724,68],[659,87,724,85,"projectile"],[659,97,724,95],[659,98,724,96,"targetX"],[659,105,724,103],[659,110,724,108,"projectile"],[659,120,724,118],[659,121,724,119,"targetY"],[659,128,724,126],[659,131,724,129],[659,132,724,130],[660,6,726,4,"setProjectiles"],[660,20,726,18],[660,21,726,19,"prev"],[660,25,726,23],[660,29,726,27],[660,30,726,28],[660,33,726,31,"prev"],[660,37,726,35],[660,39,726,37,"projectile"],[660,49,726,47],[660,50,726,48],[660,51,726,49],[662,6,728,4],[663,6,729,4,"setTimeout"],[663,16,729,14],[663,17,729,15],[663,23,729,21],[664,8,730,6,"handleProjectileHit"],[664,27,730,25],[664,28,730,26,"projectile"],[664,38,730,36],[664,39,730,37],[665,6,731,4],[665,7,731,5],[665,9,731,7],[665,12,731,10],[665,13,731,11],[666,6,733,4],[666,13,733,11,"projectile"],[666,23,733,21],[667,4,734,2],[667,5,734,3],[669,4,736,2],[670,4,737,2],[670,10,737,8,"spawnTestEnemy"],[670,24,737,22],[670,27,737,26,"state"],[670,32,737,44],[670,36,737,49],[671,6,738,4,"console"],[671,13,738,11],[671,14,738,12,"log"],[671,17,738,15],[671,18,738,16],[671,83,738,81],[671,84,738,82],[673,6,740,4],[674,6,741,4],[674,12,741,10,"zoneEnemy"],[674,21,741,19],[674,24,741,22,"spawnZoneEnemy"],[674,38,741,36],[674,39,741,37],[674,40,741,38],[675,6,742,4],[675,10,742,8],[675,11,742,9,"zoneEnemy"],[675,20,742,18],[675,22,742,20],[676,8,743,6,"console"],[676,15,743,13],[676,16,743,14,"log"],[676,19,743,17],[676,20,743,18],[676,76,743,74],[676,77,743,75],[677,8,744,6],[678,8,745,6,"spawnBasicTestEnemy"],[678,27,745,25],[678,28,745,26,"state"],[678,33,745,31],[678,34,745,32],[679,8,746,6],[680,6,747,4],[681,6,749,4,"console"],[681,13,749,11],[681,14,749,12,"log"],[681,17,749,15],[681,18,749,16],[681,44,749,42,"zoneEnemy"],[681,53,749,51],[681,54,749,52,"name"],[681,58,749,56],[681,63,749,61,"zoneEnemy"],[681,72,749,70],[681,73,749,71,"typeId"],[681,79,749,77],[681,94,749,92,"currentZone"],[681,105,749,103],[681,107,749,105,"id"],[681,109,749,107],[681,119,749,117,"currentZoneLevel"],[681,135,749,133],[681,137,749,135,"level"],[681,142,749,140],[681,144,749,142],[681,145,749,143],[683,6,751,4],[684,6,752,4],[684,12,752,10,"combatEnemy"],[684,23,752,34],[684,26,752,37],[685,8,753,6,"id"],[685,10,753,8],[685,12,753,10,"zoneEnemy"],[685,21,753,19],[685,22,753,20,"id"],[685,24,753,22],[686,8,754,6,"name"],[686,12,754,10],[686,14,754,12,"zoneEnemy"],[686,23,754,21],[686,24,754,22,"name"],[686,28,754,26],[687,8,755,6,"health"],[687,14,755,12],[687,16,755,14,"zoneEnemy"],[687,25,755,23],[687,26,755,24,"hp"],[687,28,755,26],[688,8,756,6,"maxHealth"],[688,17,756,15],[688,19,756,17,"zoneEnemy"],[688,28,756,26],[688,29,756,27,"maxHP"],[688,34,756,32],[689,8,757,6,"stats"],[689,13,757,11],[689,15,757,13],[690,10,758,8,"attack"],[690,16,758,14],[690,18,758,16,"zoneEnemy"],[690,27,758,25],[690,28,758,26,"attack"],[690,34,758,32],[691,10,759,8,"defense"],[691,17,759,15],[691,19,759,17],[691,21,759,19],[692,10,759,21],[693,10,760,8,"health"],[693,16,760,14],[693,18,760,16,"zoneEnemy"],[693,27,760,25],[693,28,760,26,"hp"],[693,30,760,28],[694,10,761,8,"maxHealth"],[694,19,761,17],[694,21,761,19,"zoneEnemy"],[694,30,761,28],[694,31,761,29,"maxHP"],[694,36,761,34],[695,10,762,8,"critChance"],[695,20,762,18],[695,22,762,20],[695,23,762,21],[696,10,763,8,"critDamage"],[696,20,763,18],[696,22,763,20],[696,25,763,23],[697,10,764,8,"cooldownReduction"],[697,27,764,25],[697,29,764,27],[698,8,765,6],[698,9,765,7],[699,8,766,6,"position"],[699,16,766,14],[699,18,766,16,"zoneEnemy"],[699,27,766,25],[699,28,766,26,"position"],[699,36,766,34],[700,8,767,6,"lastDamaged"],[700,19,767,17],[700,21,767,19],[700,22,767,20],[701,8,768,6],[702,8,769,6,"zoneTypeId"],[702,18,769,16],[702,20,769,18,"zoneEnemy"],[702,29,769,27],[702,30,769,28,"typeId"],[702,36,769,34],[703,8,770,6,"zoneXP"],[703,14,770,12],[703,16,770,14,"zoneEnemy"],[703,25,770,23],[703,26,770,24,"xp"],[704,6,771,4],[704,7,771,5],[705,6,773,4,"console"],[705,13,773,11],[705,14,773,12,"log"],[705,17,773,15],[705,18,773,16],[705,42,773,40,"combatEnemy"],[705,53,773,51],[705,54,773,52,"name"],[705,58,773,56],[705,67,773,65,"combatEnemy"],[705,78,773,76],[705,79,773,77,"health"],[705,85,773,83],[705,100,773,98,"currentZone"],[705,111,773,109],[705,113,773,111,"id"],[705,115,773,113],[705,125,773,123,"currentZoneLevel"],[705,141,773,139],[705,143,773,141,"level"],[705,148,773,146],[705,150,773,148],[705,151,773,149],[706,6,774,4,"state"],[706,11,774,9],[706,12,774,10,"enemies"],[706,19,774,17],[706,20,774,18,"push"],[706,24,774,22],[706,25,774,23,"combatEnemy"],[706,36,774,34],[706,37,774,35],[707,4,775,2],[707,5,775,3],[709,4,777,2],[710,4,778,2],[710,10,778,8,"spawnBasicTestEnemy"],[710,29,778,27],[710,32,778,31,"state"],[710,37,778,49],[710,41,778,54],[711,6,779,4],[711,12,779,10,"SCREEN_WIDTH"],[711,24,779,22],[711,27,779,25],[711,30,779,28],[712,6,780,4],[712,12,780,10,"GAME_AREA_HEIGHT"],[712,28,780,26],[712,31,780,29],[712,34,780,32],[712,37,780,35],[712,40,780,38],[713,6,781,4],[713,12,781,10,"ENEMY_SIZE"],[713,22,781,20],[713,25,781,23],[713,27,781,25],[714,6,783,4],[714,12,783,10,"x"],[714,13,783,11],[714,16,783,14,"Math"],[714,20,783,18],[714,21,783,19,"random"],[714,27,783,25],[714,28,783,26],[714,29,783,27],[714,33,783,31,"SCREEN_WIDTH"],[714,45,783,43],[714,48,783,46,"ENEMY_SIZE"],[714,58,783,56],[714,61,783,59],[714,62,783,60],[714,63,783,61],[714,66,783,64,"ENEMY_SIZE"],[714,76,783,74],[715,6,784,4],[715,12,784,10,"y"],[715,13,784,11],[715,16,784,14,"Math"],[715,20,784,18],[715,21,784,19,"random"],[715,27,784,25],[715,28,784,26],[715,29,784,27],[715,33,784,31,"GAME_AREA_HEIGHT"],[715,49,784,47],[715,52,784,50,"ENEMY_SIZE"],[715,62,784,60],[715,65,784,63],[715,66,784,64],[715,67,784,65],[715,70,784,68,"ENEMY_SIZE"],[715,80,784,78],[716,6,786,4],[716,12,786,10,"enemy"],[716,17,786,28],[716,20,786,31],[717,8,787,6,"id"],[717,10,787,8],[717,12,787,10],[717,30,787,28,"Date"],[717,34,787,32],[717,35,787,33,"now"],[717,38,787,36],[717,39,787,37],[717,40,787,38],[717,44,787,42,"Math"],[717,48,787,46],[717,49,787,47,"random"],[717,55,787,53],[717,56,787,54],[717,57,787,55],[717,59,787,57],[718,8,788,6,"name"],[718,12,788,10],[718,14,788,12],[718,26,788,24,"Math"],[718,30,788,28],[718,31,788,29,"floor"],[718,36,788,34],[718,37,788,35,"Math"],[718,41,788,39],[718,42,788,40,"random"],[718,48,788,46],[718,49,788,47],[718,50,788,48],[718,53,788,51],[718,56,788,54],[718,57,788,55],[718,59,788,57],[719,8,789,6,"health"],[719,14,789,12],[719,16,789,14],[719,18,789,16],[720,8,790,6,"maxHealth"],[720,17,790,15],[720,19,790,17],[720,21,790,19],[721,8,791,6,"stats"],[721,13,791,11],[721,15,791,13],[722,10,792,8,"attack"],[722,16,792,14],[722,18,792,16],[722,20,792,18],[723,10,793,8,"defense"],[723,17,793,15],[723,19,793,17],[723,21,793,19],[724,10,794,8,"health"],[724,16,794,14],[724,18,794,16],[724,20,794,18],[725,10,795,8,"maxHealth"],[725,19,795,17],[725,21,795,19],[725,23,795,21],[726,10,796,8,"critChance"],[726,20,796,18],[726,22,796,20],[726,23,796,21],[727,10,797,8,"critDamage"],[727,20,797,18],[727,22,797,20],[727,25,797,23],[728,10,798,8,"cooldownReduction"],[728,27,798,25],[728,29,798,27],[729,8,799,6],[729,9,799,7],[730,8,800,6,"position"],[730,16,800,14],[730,18,800,16],[731,10,800,18,"x"],[731,11,800,19],[732,10,800,21,"y"],[733,8,800,23],[733,9,800,24],[734,8,801,6,"lastDamaged"],[734,19,801,17],[734,21,801,19],[735,6,802,4],[735,7,802,5],[736,6,804,4,"console"],[736,13,804,11],[736,14,804,12,"log"],[736,17,804,15],[736,18,804,16],[736,42,804,40,"enemy"],[736,47,804,45],[736,48,804,46,"name"],[736,52,804,50],[736,60,804,58,"Math"],[736,64,804,62],[736,65,804,63,"round"],[736,70,804,68],[736,71,804,69,"x"],[736,72,804,70],[736,73,804,71],[736,78,804,76,"Math"],[736,82,804,80],[736,83,804,81,"round"],[736,88,804,86],[736,89,804,87,"y"],[736,90,804,88],[736,91,804,89],[736,94,804,92],[736,95,804,93],[737,6,805,4,"state"],[737,11,805,9],[737,12,805,10,"enemies"],[737,19,805,17],[737,20,805,18,"push"],[737,24,805,22],[737,25,805,23,"enemy"],[737,30,805,28],[737,31,805,29],[738,4,806,2],[738,5,806,3],[740,4,808,2],[741,4,809,2],[741,10,809,8,"startCombat"],[741,21,809,19],[741,24,809,22,"React"],[741,29,809,27],[741,30,809,27,"default"],[741,37,809,27],[741,38,809,28,"useCallback"],[741,49,809,39],[741,50,809,40],[741,56,809,46],[742,6,810,4,"console"],[742,13,810,11],[742,14,810,12,"log"],[742,17,810,15],[742,18,810,16],[742,63,810,61],[742,64,810,62],[743,6,811,4,"setCombatState"],[743,20,811,18],[743,21,811,19,"prev"],[743,25,811,23],[743,30,811,28],[744,8,811,30],[744,11,811,33,"prev"],[744,15,811,37],[745,8,811,39,"isInCombat"],[745,18,811,49],[745,20,811,51],[746,6,811,56],[746,7,811,57],[746,8,811,58],[746,9,811,59],[748,6,813,4],[749,6,814,4,"combatEngine"],[749,25,814,16],[749,26,814,16,"combatEngine"],[749,38,814,16],[749,39,814,17,"addTickCallback"],[749,54,814,32],[749,55,814,33,"handleCombatTick"],[749,71,814,49],[749,72,814,50],[750,6,815,4,"console"],[750,13,815,11],[750,14,815,12,"log"],[750,17,815,15],[750,18,815,16],[750,62,815,60],[750,63,815,61],[752,6,817,4],[753,6,818,4,"combatEngine"],[753,25,818,16],[753,26,818,16,"combatEngine"],[753,38,818,16],[753,39,818,17,"start"],[753,44,818,22],[753,45,818,23],[753,46,818,24],[754,4,819,2],[754,5,819,3],[754,7,819,5],[754,8,819,6,"combatEngine"],[754,27,819,18],[754,28,819,18,"combatEngine"],[754,40,819,18],[754,42,819,20,"handleCombatTick"],[754,58,819,36],[754,59,819,37],[754,60,819,38],[756,4,821,2],[757,4,822,2],[757,10,822,8,"stopCombat"],[757,20,822,18],[757,23,822,21,"React"],[757,28,822,26],[757,29,822,26,"default"],[757,36,822,26],[757,37,822,27,"useCallback"],[757,48,822,38],[757,49,822,39],[757,55,822,45],[758,6,823,4,"setCombatState"],[758,20,823,18],[758,21,823,19,"prev"],[758,25,823,23],[758,30,823,28],[759,8,823,30],[759,11,823,33,"prev"],[759,15,823,37],[760,8,823,39,"isInCombat"],[760,18,823,49],[760,20,823,51],[761,6,823,57],[761,7,823,58],[761,8,823,59],[761,9,823,60],[762,6,824,4,"combatEngine"],[762,25,824,16],[762,26,824,16,"combatEngine"],[762,38,824,16],[762,39,824,17,"removeTickCallback"],[762,57,824,35],[762,58,824,36,"handleCombatTick"],[762,74,824,52],[762,75,824,53],[763,4,825,2],[763,5,825,3],[763,7,825,5],[763,8,825,6,"combatEngine"],[763,27,825,18],[763,28,825,18,"combatEngine"],[763,40,825,18],[763,42,825,20,"handleCombatTick"],[763,58,825,36],[763,59,825,37],[763,60,825,38],[765,4,827,2],[766,4,828,2],[766,10,828,8,"equipAbility"],[766,22,828,20],[766,25,828,23,"equipAbility"],[766,26,828,24,"abilityId"],[766,35,828,41],[766,37,828,43,"slotIndex"],[766,46,828,60],[766,51,828,74],[767,6,829,4],[767,13,829,11,"combatState"],[767,24,829,22],[767,25,829,23,"abilityManager"],[767,39,829,37],[767,40,829,38,"equipAbility"],[767,52,829,50],[767,53,829,51,"abilityId"],[767,62,829,60],[767,64,829,62,"slotIndex"],[767,73,829,71],[767,74,829,72],[768,4,830,2],[768,5,830,3],[769,4,832,2],[769,10,832,8,"getDeck"],[769,17,832,15],[769,20,832,18,"getDeck"],[769,21,832,18],[769,26,832,24],[770,6,833,4],[770,13,833,11,"combatState"],[770,24,833,22],[770,25,833,23,"abilityManager"],[770,39,833,37],[770,40,833,38,"getDeck"],[770,47,833,45],[770,48,833,46],[770,49,833,47],[771,4,834,2],[771,5,834,3],[772,4,836,2],[772,10,836,8,"getAvailableAbilities"],[772,31,836,29],[772,34,836,32,"getAvailableAbilities"],[772,35,836,32],[772,40,836,38],[773,6,837,4],[773,13,837,11,"combatState"],[773,24,837,22],[773,25,837,23,"abilityManager"],[773,39,837,37],[773,40,837,38,"getAvailableAbilities"],[773,61,837,59],[773,62,837,60],[773,63,837,61],[774,4,838,2],[774,5,838,3],[775,4,840,2],[775,10,840,8,"upgradeAbility"],[775,24,840,22],[775,27,840,26,"abilityId"],[775,36,840,43],[775,40,840,57],[776,6,841,4],[776,13,841,11,"combatState"],[776,24,841,22],[776,25,841,23,"abilityManager"],[776,39,841,37],[776,40,841,38,"upgradeAbility"],[776,54,841,52],[776,55,841,53,"abilityId"],[776,64,841,62],[776,65,841,63],[777,4,842,2],[777,5,842,3],[779,4,844,2],[780,4,845,2],[780,10,845,8,"clearAllEnemies"],[780,25,845,23],[780,28,845,26,"clearAllEnemies"],[780,29,845,26],[780,34,845,32],[781,6,846,4,"console"],[781,13,846,11],[781,14,846,12,"log"],[781,17,846,15],[781,18,846,16],[781,67,846,65],[781,68,846,66],[782,6,847,4,"setCombatState"],[782,20,847,18],[782,21,847,19,"prev"],[782,25,847,23],[782,30,847,28],[783,8,848,6],[783,11,848,9,"prev"],[783,15,848,13],[784,8,849,6,"enemies"],[784,15,849,13],[784,17,849,15],[785,6,850,4],[785,7,850,5],[785,8,850,6],[785,9,850,7],[786,4,851,2],[786,5,851,3],[788,4,853,2],[789,4,854,2],[789,10,854,8,"triggerLevelUpExplosion"],[789,33,854,31],[789,36,854,34,"triggerLevelUpExplosion"],[789,37,854,34],[789,42,854,40],[790,6,855,4,"console"],[790,13,855,11],[790,14,855,12,"log"],[790,17,855,15],[790,18,855,16],[790,70,855,68],[790,71,855,69],[791,6,857,4],[791,12,857,10,"explosionTime"],[791,25,857,23],[791,28,857,26,"Date"],[791,32,857,30],[791,33,857,31,"now"],[791,36,857,34],[791,37,857,35],[791,38,857,36],[792,6,858,4,"setLastExplosionTime"],[792,26,858,24],[792,27,858,25,"explosionTime"],[792,40,858,38],[792,41,858,39],[793,6,860,4,"setCombatState"],[793,20,860,18],[793,21,860,19,"prev"],[793,25,860,23],[793,29,860,27],[794,8,861,6],[795,8,862,6],[795,14,862,12,"enemyCount"],[795,24,862,22],[795,27,862,25,"prev"],[795,31,862,29],[795,32,862,30,"enemies"],[795,39,862,37],[795,40,862,38,"length"],[795,46,862,44],[796,8,863,6],[796,14,863,12,"explosionXP"],[796,25,863,23],[796,28,863,26,"enemyCount"],[796,38,863,36],[796,41,863,39],[796,44,863,42],[796,45,863,43],[796,46,863,44],[797,8,864,6],[797,14,864,12,"explosionGold"],[797,27,864,25],[797,30,864,28,"enemyCount"],[797,40,864,38],[797,43,864,41],[797,46,864,44],[797,47,864,45],[797,48,864,46],[799,8,866,6,"console"],[799,15,866,13],[799,16,866,14,"log"],[799,19,866,17],[799,20,866,18],[799,44,866,42,"enemyCount"],[799,54,866,52],[799,76,866,74,"explosionXP"],[799,87,866,85],[799,98,866,96,"explosionGold"],[799,111,866,109],[799,118,866,116],[799,119,866,117],[801,8,868,6],[802,8,869,6],[802,12,869,10,"explosionXP"],[802,23,869,21],[802,26,869,24],[802,27,869,25],[802,29,869,27],[803,10,870,8,"setTimeout"],[803,20,870,18],[803,21,870,19],[803,27,870,25],[804,12,871,10,"game"],[804,16,871,14],[804,17,871,15,"updateNinja"],[804,28,871,26],[804,29,871,28,"ninja"],[804,34,871,33],[804,39,871,39],[805,14,872,12,"experience"],[805,24,872,22],[805,26,872,24,"ninja"],[805,31,872,29],[805,32,872,30,"experience"],[805,42,872,40],[805,45,872,43,"explosionXP"],[805,56,872,54],[806,14,873,12,"gold"],[806,18,873,16],[806,20,873,18,"ninja"],[806,25,873,23],[806,26,873,24,"gold"],[806,30,873,28],[806,33,873,31,"explosionGold"],[807,12,874,10],[807,13,874,11],[807,14,874,12],[807,15,874,13],[808,10,875,8],[808,11,875,9],[808,13,875,11],[808,14,875,12],[808,15,875,13],[808,16,875,14],[808,17,875,15],[809,8,876,6],[811,8,878,6],[812,8,879,6],[813,8,880,6],[813,14,880,12,"damagedEnemies"],[813,28,880,26],[813,31,880,29,"prev"],[813,35,880,33],[813,36,880,34,"enemies"],[813,43,880,41],[813,44,880,42,"map"],[813,47,880,45],[813,48,880,46,"enemy"],[813,53,880,51],[813,58,880,56],[814,10,881,8],[814,13,881,11,"enemy"],[814,18,881,16],[815,10,882,8,"health"],[815,16,882,14],[815,18,882,16],[815,19,882,17],[816,10,882,19],[817,10,883,8,"lastDamaged"],[817,21,883,19],[817,23,883,21,"combatEngine"],[817,42,883,33],[817,43,883,33,"combatEngine"],[817,55,883,33],[817,56,883,34,"getCurrentTick"],[817,70,883,48],[817,71,883,49],[818,8,884,6],[818,9,884,7],[818,10,884,8],[818,11,884,9],[819,8,886,6],[819,15,886,13],[820,10,887,8],[820,13,887,11,"prev"],[820,17,887,15],[821,10,888,8,"enemies"],[821,17,888,15],[821,19,888,17,"damagedEnemies"],[822,8,889,6],[822,9,889,7],[823,6,890,4],[823,7,890,5],[823,8,890,6],[824,4,891,2],[824,5,891,3],[826,4,893,2],[827,4,894,2],[827,10,894,8,"spawnEnemy"],[827,20,894,18],[827,23,894,22,"position"],[827,31,894,57],[827,35,894,75],[828,6,895,4],[828,12,895,10,"SCREEN_WIDTH"],[828,24,895,22],[828,27,895,25],[828,30,895,28],[829,6,896,4],[829,12,896,10,"GAME_AREA_HEIGHT"],[829,28,896,26],[829,31,896,29],[829,34,896,32],[829,37,896,35],[829,40,896,38],[829,41,896,39],[829,42,896,40],[830,6,897,4],[830,12,897,10,"ENEMY_SIZE"],[830,22,897,20],[830,25,897,23],[830,27,897,25],[832,6,899,4],[833,6,900,4],[833,12,900,10,"x"],[833,13,900,11],[833,16,900,14,"position"],[833,24,900,22],[833,26,900,24,"x"],[833,27,900,25],[833,31,900,29,"Math"],[833,35,900,33],[833,36,900,34,"random"],[833,42,900,40],[833,43,900,41],[833,44,900,42],[833,48,900,46,"SCREEN_WIDTH"],[833,60,900,58],[833,63,900,61,"ENEMY_SIZE"],[833,73,900,71],[833,76,900,74],[833,77,900,75],[833,78,900,76],[833,81,900,79,"ENEMY_SIZE"],[833,91,900,89],[834,6,901,4],[834,12,901,10,"y"],[834,13,901,11],[834,16,901,14,"position"],[834,24,901,22],[834,26,901,24,"y"],[834,27,901,25],[834,31,901,29,"Math"],[834,35,901,33],[834,36,901,34,"random"],[834,42,901,40],[834,43,901,41],[834,44,901,42],[834,48,901,46,"GAME_AREA_HEIGHT"],[834,64,901,62],[834,67,901,65,"ENEMY_SIZE"],[834,77,901,75],[834,80,901,78],[834,81,901,79],[834,82,901,80],[834,85,901,83,"ENEMY_SIZE"],[834,95,901,93],[835,6,903,4],[835,12,903,10,"enemy"],[835,17,903,28],[835,20,903,31],[836,8,904,6,"id"],[836,10,904,8],[836,12,904,10],[836,21,904,19],[836,23,904,21,"enemyCounter"],[836,35,904,33],[836,37,904,35],[837,8,905,6,"name"],[837,12,905,10],[837,14,905,12],[837,24,905,22],[838,8,906,6,"health"],[838,14,906,12],[838,16,906,14],[838,19,906,17],[839,8,907,6,"maxHealth"],[839,17,907,15],[839,19,907,17],[839,22,907,20],[840,8,908,6,"stats"],[840,13,908,11],[840,15,908,13],[841,10,909,8,"attack"],[841,16,909,14],[841,18,909,16],[841,20,909,18],[842,10,910,8,"defense"],[842,17,910,15],[842,19,910,17],[842,21,910,19],[843,10,911,8,"health"],[843,16,911,14],[843,18,911,16],[843,21,911,19],[844,10,912,8,"maxHealth"],[844,19,912,17],[844,21,912,19],[844,24,912,22],[845,10,913,8,"critChance"],[845,20,913,18],[845,22,913,20],[845,23,913,21],[846,10,914,8,"critDamage"],[846,20,914,18],[846,22,914,20],[846,25,914,23],[847,10,915,8,"cooldownReduction"],[847,27,915,25],[847,29,915,27],[848,8,916,6],[848,9,916,7],[849,8,917,6,"position"],[849,16,917,14],[849,18,917,16],[850,10,917,18,"x"],[850,11,917,19],[851,10,917,21,"y"],[852,8,917,23],[852,9,917,24],[853,8,918,6,"lastDamaged"],[853,19,918,17],[853,21,918,19],[854,6,919,4],[854,7,919,5],[855,6,921,4,"setCombatState"],[855,20,921,18],[855,21,921,19,"prev"],[855,25,921,23],[855,30,921,28],[856,8,922,6],[856,11,922,9,"prev"],[856,15,922,13],[857,8,923,6,"enemies"],[857,15,923,13],[857,17,923,15],[857,18,923,16],[857,21,923,19,"prev"],[857,25,923,23],[857,26,923,24,"enemies"],[857,33,923,31],[857,35,923,33,"enemy"],[857,40,923,38],[858,6,924,4],[858,7,924,5],[858,8,924,6],[858,9,924,7],[859,6,926,4],[859,13,926,11,"enemy"],[859,18,926,16],[860,4,927,2],[860,5,927,3],[862,4,929,2],[863,4,930,2],[863,10,930,8,"spawnBoss"],[863,19,930,17],[863,22,930,21,"bossEnemy"],[863,31,930,43],[863,35,930,48],[864,6,931,4,"console"],[864,13,931,11],[864,14,931,12,"log"],[864,17,931,15],[864,18,931,16],[864,39,931,37,"bossEnemy"],[864,48,931,46],[864,49,931,47,"name"],[864,53,931,51],[864,90,931,88],[864,91,931,89],[865,6,932,4,"setCombatState"],[865,20,932,18],[865,21,932,19,"prev"],[865,25,932,23],[865,30,932,28],[866,8,933,6],[866,11,933,9,"prev"],[866,15,933,13],[867,8,934,6,"enemies"],[867,15,934,13],[867,17,934,15],[867,18,934,16,"bossEnemy"],[867,27,934,25],[867,28,934,26],[867,29,934,27],[868,6,935,4],[868,7,935,5],[868,8,935,6],[868,9,935,7],[869,4,936,2],[869,5,936,3],[871,4,938,2],[872,4,939,2],[872,10,939,8,"clearSpecificEnemy"],[872,28,939,26],[872,31,939,30,"enemyId"],[872,38,939,45],[872,42,939,50],[873,6,940,4,"setCombatState"],[873,20,940,18],[873,21,940,19,"prev"],[873,25,940,23],[873,30,940,28],[874,8,941,6],[874,11,941,9,"prev"],[874,15,941,13],[875,8,942,6,"enemies"],[875,15,942,13],[875,17,942,15,"prev"],[875,21,942,19],[875,22,942,20,"enemies"],[875,29,942,27],[875,30,942,28,"filter"],[875,36,942,34],[875,37,942,35,"enemy"],[875,42,942,40],[875,46,942,44,"enemy"],[875,51,942,49],[875,52,942,50,"id"],[875,54,942,52],[875,59,942,57,"enemyId"],[875,66,942,64],[876,6,943,4],[876,7,943,5],[876,8,943,6],[876,9,943,7],[877,4,944,2],[877,5,944,3],[879,4,946,2],[880,4,947,2],[880,10,947,8,"useAbilityManually"],[880,28,947,26],[880,31,947,26,"_s3"],[880,34,947,26],[880,35,947,29],[880,39,947,29,"useCallback"],[880,45,947,40],[880,46,947,40,"useCallback"],[880,57,947,40],[880,59,947,40,"_s3"],[880,62,947,40],[880,63,947,42,"slotIndex"],[880,72,947,59],[880,76,947,73],[881,6,947,73,"_s3"],[881,9,947,73],[882,6,948,4,"console"],[882,13,948,11],[882,14,948,12,"log"],[882,17,948,15],[882,18,948,16],[882,53,948,51,"slotIndex"],[882,62,948,60],[882,64,948,62],[882,65,948,63],[884,6,950,4],[885,6,951,4],[885,10,951,8],[885,11,951,9,"game"],[885,15,951,13],[885,16,951,14,"gameState"],[885,25,951,23],[885,26,951,24,"isAlive"],[885,33,951,31],[885,35,951,33],[886,8,952,6,"console"],[886,15,952,13],[886,16,952,14,"log"],[886,19,952,17],[886,20,952,18],[886,70,952,68],[886,71,952,69],[887,8,953,6],[887,15,953,13],[887,20,953,18],[888,6,954,4],[890,6,956,4],[891,6,957,4],[891,12,957,10,"isReady"],[891,19,957,17],[891,22,957,20,"combatState"],[891,33,957,31],[891,34,957,32,"abilityManager"],[891,48,957,46],[891,49,957,47,"isAbilityReady"],[891,63,957,61],[891,64,957,62,"slotIndex"],[891,73,957,71],[891,74,957,72],[892,6,958,4],[892,10,958,8],[892,11,958,9,"isReady"],[892,18,958,16],[892,20,958,18],[893,8,959,6,"console"],[893,15,959,13],[893,16,959,14,"log"],[893,19,959,17],[893,20,959,18],[893,41,959,39,"slotIndex"],[893,50,959,48],[893,85,959,83],[893,86,959,84],[894,8,960,6],[894,15,960,13],[894,20,960,18],[895,6,961,4],[897,6,963,4],[898,6,964,4],[898,10,964,8,"combatState"],[898,21,964,19],[898,22,964,20,"enemies"],[898,29,964,27],[898,30,964,28,"length"],[898,36,964,34],[898,41,964,39],[898,42,964,40],[898,44,964,42],[899,8,965,6,"console"],[899,15,965,13],[899,16,965,14,"log"],[899,19,965,17],[899,20,965,18],[899,69,965,67],[899,70,965,68],[900,8,966,6],[900,15,966,13],[900,20,966,18],[901,6,967,4],[903,6,969,4],[904,6,970,4],[904,12,970,10,"currentTick"],[904,23,970,21],[904,26,970,24,"combatEngine"],[904,45,970,36],[904,46,970,36,"combatEngine"],[904,58,970,36],[904,59,970,37,"getCurrentTick"],[904,73,970,51],[904,74,970,52],[904,75,970,53],[905,6,971,4],[905,12,971,10,"success"],[905,19,971,17],[905,22,971,20,"combatState"],[905,33,971,31],[905,34,971,32,"abilityManager"],[905,48,971,46],[905,49,971,47,"useAbility"],[905,59,971,57],[905,60,971,58,"slotIndex"],[905,69,971,67],[905,71,971,69,"currentTick"],[905,82,971,80],[905,83,971,81],[906,6,973,4],[906,10,973,8,"success"],[906,17,973,15],[906,19,973,17],[907,8,974,6],[908,8,975,6,"setCombatState"],[908,22,975,20],[908,23,975,21,"prev"],[908,27,975,25],[908,31,975,29],[909,10,976,8],[909,16,976,14,"newState"],[909,24,976,22],[909,27,976,25],[910,12,976,27],[910,15,976,30,"prev"],[911,10,976,35],[911,11,976,36],[912,10,977,8,"castAbility"],[912,21,977,19],[912,22,977,20,"newState"],[912,30,977,28],[912,32,977,30,"slotIndex"],[912,41,977,39],[912,42,977,40],[913,10,978,8],[913,17,978,15,"newState"],[913,25,978,23],[914,8,979,6],[914,9,979,7],[914,10,979,8],[915,8,981,6,"console"],[915,15,981,13],[915,16,981,14,"log"],[915,19,981,17],[915,20,981,18],[915,65,981,63,"slotIndex"],[915,74,981,72],[915,76,981,74],[915,77,981,75],[916,8,982,6],[916,15,982,13],[916,19,982,17],[917,6,983,4],[917,7,983,5],[917,13,983,11],[918,8,984,6,"console"],[918,15,984,13],[918,16,984,14,"log"],[918,19,984,17],[918,20,984,18],[918,61,984,59,"slotIndex"],[918,70,984,68],[918,72,984,70],[918,73,984,71],[919,8,985,6],[919,15,985,13],[919,20,985,18],[920,6,986,4],[921,4,987,2],[921,5,987,3],[921,46,987,5],[921,47,987,6,"combatState"],[921,58,987,17],[921,59,987,18,"abilityManager"],[921,73,987,32],[921,75,987,34,"combatState"],[921,86,987,45],[921,87,987,46,"enemies"],[921,94,987,53],[921,95,987,54],[921,96,987,55],[922,4,988,2],[922,8,988,2,"useEffect"],[922,14,988,11],[922,15,988,11,"useEffect"],[922,24,988,11],[922,26,988,12],[922,32,988,18],[923,6,989,4,"combatEngine"],[923,25,989,16],[923,26,989,16,"combatEngine"],[923,38,989,16],[923,39,989,17,"start"],[923,44,989,22],[923,45,989,23],[923,46,989,24],[925,6,991,4],[926,6,992,4],[927,6,993,4,"console"],[927,13,993,11],[927,14,993,12,"log"],[927,17,993,15],[927,18,993,16],[927,97,993,95],[927,98,993,96],[928,6,995,4],[928,13,995,11],[928,19,995,17],[929,8,996,6,"combatEngine"],[929,27,996,18],[929,28,996,18,"combatEngine"],[929,40,996,18],[929,41,996,19,"stop"],[929,45,996,23],[929,46,996,24],[929,47,996,25],[930,6,997,4],[930,7,997,5],[931,4,998,2],[931,5,998,3],[931,7,998,5],[931,9,998,7],[931,10,998,8],[933,4,1000,2],[934,4,1001,2],[934,8,1001,2,"useEffect"],[934,14,1001,11],[934,15,1001,11,"useEffect"],[934,24,1001,11],[934,26,1001,12],[934,32,1001,18],[935,6,1002,4],[935,12,1002,10,"processProjectileImpacts"],[935,36,1002,34],[935,39,1002,37,"processProjectileImpacts"],[935,40,1002,37],[935,45,1002,43],[936,8,1003,6,"setProjectiles"],[936,22,1003,20],[936,23,1003,21,"currentProjectiles"],[936,41,1003,39],[936,45,1003,43],[937,10,1004,8],[937,17,1004,15,"currentProjectiles"],[937,35,1004,33],[937,36,1004,34,"map"],[937,39,1004,37],[937,40,1004,38,"projectile"],[937,50,1004,48],[937,54,1004,52],[938,12,1005,10],[938,16,1005,14],[938,17,1005,15,"projectile"],[938,27,1005,25],[938,29,1005,27],[938,36,1005,34],[938,40,1005,38],[940,12,1007,10],[941,12,1008,10],[941,18,1008,16,"currentTime"],[941,29,1008,27],[941,32,1008,30,"Date"],[941,36,1008,34],[941,37,1008,35,"now"],[941,40,1008,38],[941,41,1008,39],[941,42,1008,40],[942,12,1009,10],[942,18,1009,16,"startTime"],[942,27,1009,25],[942,30,1009,28,"projectile"],[942,40,1009,38],[942,41,1009,39,"startTime"],[942,50,1009,48],[942,54,1009,52,"currentTime"],[942,65,1009,63],[943,12,1010,10],[943,18,1010,16,"elapsedTime"],[943,29,1010,27],[943,32,1010,30,"currentTime"],[943,43,1010,41],[943,46,1010,44,"startTime"],[943,55,1010,53],[944,12,1011,10],[944,18,1011,16,"progress"],[944,26,1011,24],[944,29,1011,27,"Math"],[944,33,1011,31],[944,34,1011,32,"min"],[944,37,1011,35],[944,38,1011,36,"elapsedTime"],[944,49,1011,47],[944,53,1011,51,"projectile"],[944,63,1011,61],[944,64,1011,62,"duration"],[944,72,1011,70],[944,76,1011,74],[944,79,1011,77],[944,80,1011,78],[944,82,1011,80],[944,83,1011,81],[944,84,1011,82],[946,12,1013,10],[947,12,1014,10],[947,16,1014,14,"progress"],[947,24,1014,22],[947,28,1014,26],[947,29,1014,27],[947,33,1014,31],[947,34,1014,32,"projectile"],[947,44,1014,42],[947,45,1014,43,"hasHit"],[947,51,1014,49],[947,53,1014,51],[948,14,1015,12,"projectile"],[948,24,1015,22],[948,25,1015,23,"hasHit"],[948,31,1015,29],[948,34,1015,32],[948,38,1015,36],[949,14,1017,12,"setCombatState"],[949,28,1017,26],[949,29,1017,27,"prev"],[949,33,1017,31],[949,37,1017,35],[950,16,1018,14],[950,22,1018,20,"newState"],[950,30,1018,28],[950,33,1018,31],[951,18,1018,33],[951,21,1018,36,"prev"],[952,16,1018,41],[952,17,1018,42],[953,16,1020,14],[953,20,1020,18,"projectile"],[953,30,1020,28],[953,31,1020,29,"isAOE"],[953,36,1020,34],[953,40,1020,38,"projectile"],[953,50,1020,48],[953,51,1020,49,"aoeRadius"],[953,60,1020,58],[953,64,1020,62,"projectile"],[953,74,1020,72],[953,75,1020,73,"aoeRadius"],[953,84,1020,82],[953,87,1020,85],[953,88,1020,86],[953,90,1020,88],[954,18,1021,16],[955,18,1022,16,"console"],[955,25,1022,23],[955,26,1022,24,"log"],[955,29,1022,27],[955,30,1022,28],[955,59,1022,57,"projectile"],[955,69,1022,67],[955,70,1022,68,"abilityName"],[955,81,1022,79],[955,97,1022,95,"projectile"],[955,107,1022,105],[955,108,1022,106,"aoeRadius"],[955,117,1022,115],[955,119,1022,117],[955,120,1022,118],[956,18,1024,16],[956,24,1024,22,"impactX"],[956,31,1024,29],[956,34,1024,32,"projectile"],[956,44,1024,42],[956,45,1024,43,"targetX"],[956,52,1024,50],[957,18,1025,16],[957,24,1025,22,"impactY"],[957,31,1025,29],[957,34,1025,32,"projectile"],[957,44,1025,42],[957,45,1025,43,"targetY"],[957,52,1025,50],[958,18,1026,16],[958,24,1026,22,"enemiesKilled"],[958,37,1026,50],[958,40,1026,53],[958,42,1026,55],[960,18,1028,16],[961,18,1029,16,"newState"],[961,26,1029,24],[961,27,1029,25,"enemies"],[961,34,1029,32],[961,37,1029,35,"newState"],[961,45,1029,43],[961,46,1029,44,"enemies"],[961,53,1029,51],[961,54,1029,52,"map"],[961,57,1029,55],[961,58,1029,56,"enemy"],[961,63,1029,61],[961,67,1029,65],[962,20,1030,18],[962,24,1030,22,"enemy"],[962,29,1030,27],[962,30,1030,28,"health"],[962,36,1030,34],[962,40,1030,38],[962,41,1030,39],[962,45,1030,43,"enemy"],[962,50,1030,48],[962,51,1030,49,"markedForDeath"],[962,65,1030,63],[962,67,1030,65],[962,74,1030,72,"enemy"],[962,79,1030,77],[963,20,1032,18],[963,26,1032,24,"enemyX"],[963,32,1032,30],[963,35,1032,33,"enemy"],[963,40,1032,38],[963,41,1032,39,"position"],[963,49,1032,47],[963,50,1032,48,"x"],[963,51,1032,49],[963,54,1032,52],[963,58,1032,56],[963,59,1032,57],[963,60,1032,58],[964,20,1033,18],[964,26,1033,24,"enemyY"],[964,32,1033,30],[964,35,1033,33,"enemy"],[964,40,1033,38],[964,41,1033,39,"position"],[964,49,1033,47],[964,50,1033,48,"y"],[964,51,1033,49],[964,54,1033,52],[964,58,1033,56],[965,20,1034,18],[965,26,1034,24,"distance"],[965,34,1034,32],[965,37,1034,35,"Math"],[965,41,1034,39],[965,42,1034,40,"sqrt"],[965,46,1034,44],[965,47,1034,45,"Math"],[965,51,1034,49],[965,52,1034,50,"pow"],[965,55,1034,53],[965,56,1034,54,"enemyX"],[965,62,1034,60],[965,65,1034,63,"impactX"],[965,72,1034,70],[965,74,1034,72],[965,75,1034,73],[965,76,1034,74],[965,79,1034,77,"Math"],[965,83,1034,81],[965,84,1034,82,"pow"],[965,87,1034,85],[965,88,1034,86,"enemyY"],[965,94,1034,92],[965,97,1034,95,"impactY"],[965,104,1034,102],[965,106,1034,104],[965,107,1034,105],[965,108,1034,106],[965,109,1034,107],[966,20,1036,18],[966,24,1036,22,"distance"],[966,32,1036,30],[966,36,1036,34,"projectile"],[966,46,1036,44],[966,47,1036,45,"aoeRadius"],[966,56,1036,54],[966,58,1036,56],[967,22,1037,20],[968,22,1038,20],[968,28,1038,26,"damageResult"],[968,40,1038,38],[968,43,1038,41,"DamageCalculator"],[968,62,1038,57],[968,63,1038,57,"DamageCalculator"],[968,79,1038,57],[968,80,1038,58,"calculateDamage"],[968,95,1038,73],[968,96,1038,74,"projectile"],[968,106,1038,84],[968,107,1038,85,"damage"],[968,113,1038,91],[968,115,1038,93,"prev"],[968,119,1038,97],[968,120,1038,98,"playerStats"],[968,131,1038,109],[968,133,1038,111,"enemy"],[968,138,1038,116],[968,139,1038,117,"stats"],[968,144,1038,122],[968,145,1038,123],[969,22,1039,20],[969,28,1039,26,"newHealth"],[969,37,1039,35],[969,40,1039,38,"Math"],[969,44,1039,42],[969,45,1039,43,"max"],[969,48,1039,46],[969,49,1039,47],[969,50,1039,48],[969,52,1039,50,"enemy"],[969,57,1039,55],[969,58,1039,56,"health"],[969,64,1039,62],[969,67,1039,65,"damageResult"],[969,79,1039,77],[969,80,1039,78,"damage"],[969,86,1039,84],[969,87,1039,85],[970,22,1041,20,"console"],[970,29,1041,27],[970,30,1041,28,"log"],[970,33,1041,31],[970,34,1041,32],[970,52,1041,50,"enemy"],[970,57,1041,55],[970,58,1041,56,"name"],[970,62,1041,60],[970,74,1041,72,"damageResult"],[970,86,1041,84],[970,87,1041,85,"damage"],[970,93,1041,91],[970,105,1041,103,"enemy"],[970,110,1041,108],[970,111,1041,109,"health"],[970,117,1041,115],[970,124,1041,122,"newHealth"],[970,133,1041,131],[970,136,1041,134],[970,137,1041,135],[972,22,1043,20],[973,22,1044,20],[973,26,1044,24,"newHealth"],[973,35,1044,33],[973,39,1044,37],[973,40,1044,38],[973,44,1044,42,"enemy"],[973,49,1044,47],[973,50,1044,48,"health"],[973,56,1044,54],[973,59,1044,57],[973,60,1044,58],[973,62,1044,60],[974,24,1045,22,"console"],[974,31,1045,29],[974,32,1045,30,"log"],[974,35,1045,33],[974,36,1045,34],[974,52,1045,50,"enemy"],[974,57,1045,55],[974,58,1045,56,"name"],[974,62,1045,60],[974,76,1045,74,"projectile"],[974,86,1045,84],[974,87,1045,85,"abilityName"],[974,98,1045,96],[974,101,1045,99],[974,102,1045,100],[975,24,1046,22,"enemiesKilled"],[975,37,1046,35],[975,38,1046,36,"push"],[975,42,1046,40],[975,43,1046,41,"enemy"],[975,48,1046,46],[975,49,1046,47],[975,50,1046,48],[975,51,1046,49],[977,24,1048,22],[977,31,1048,29],[978,26,1049,24],[978,29,1049,27,"enemy"],[978,34,1049,32],[979,26,1050,24,"health"],[979,32,1050,30],[979,34,1050,32],[979,35,1050,33],[980,26,1051,24,"markedForDeath"],[980,40,1051,38],[980,42,1051,40],[980,46,1051,44],[981,26,1052,24,"lastDamaged"],[981,37,1052,35],[981,39,1052,37,"combatEngine"],[981,58,1052,49],[981,59,1052,49,"combatEngine"],[981,71,1052,49],[981,72,1052,50,"getCurrentTick"],[981,86,1052,64],[981,87,1052,65],[982,24,1053,22],[982,25,1053,23],[983,22,1054,20],[983,23,1054,21],[983,29,1054,27],[984,24,1055,22],[984,31,1055,29],[985,26,1056,24],[985,29,1056,27,"enemy"],[985,34,1056,32],[986,26,1057,24,"health"],[986,32,1057,30],[986,34,1057,32,"newHealth"],[986,43,1057,41],[987,26,1058,24,"lastDamaged"],[987,37,1058,35],[987,39,1058,37,"combatEngine"],[987,58,1058,49],[987,59,1058,49,"combatEngine"],[987,71,1058,49],[987,72,1058,50,"getCurrentTick"],[987,86,1058,64],[987,87,1058,65],[988,24,1059,22],[988,25,1059,23],[989,22,1060,20],[990,20,1061,18],[991,20,1063,18],[991,27,1063,25,"enemy"],[991,32,1063,30],[991,33,1063,31],[991,34,1063,32],[992,18,1064,16],[992,19,1064,17],[992,20,1064,18],[994,18,1066,16],[995,18,1067,16],[995,22,1067,20,"enemiesKilled"],[995,35,1067,33],[995,36,1067,34,"length"],[995,42,1067,40],[995,45,1067,43],[995,46,1067,44],[995,48,1067,46],[996,20,1068,18,"console"],[996,27,1068,25],[996,28,1068,26,"log"],[996,31,1068,29],[996,32,1068,30],[996,52,1068,50,"enemiesKilled"],[996,65,1068,63],[996,66,1068,64,"length"],[996,72,1068,70],[996,94,1068,92,"projectile"],[996,104,1068,102],[996,105,1068,103,"abilityName"],[996,116,1068,114],[996,118,1068,116],[996,119,1068,117],[997,20,1069,18,"setTimeout"],[997,30,1069,28],[997,31,1069,29],[997,37,1069,35],[998,22,1070,20,"enemiesKilled"],[998,35,1070,33],[998,36,1070,34,"forEach"],[998,43,1070,41],[998,44,1070,42,"enemy"],[998,49,1070,47],[998,53,1070,51,"handleEnemyKill"],[998,68,1070,66],[998,69,1070,67,"enemy"],[998,74,1070,72],[998,75,1070,73],[998,76,1070,74],[999,20,1071,18],[999,21,1071,19],[999,23,1071,21],[999,24,1071,22],[999,25,1071,23],[1000,18,1072,16],[1001,16,1074,14],[1001,17,1074,15],[1001,23,1074,21],[1002,18,1075,16],[1003,18,1076,16],[1003,24,1076,22,"enemyIndex"],[1003,34,1076,32],[1003,37,1076,35,"newState"],[1003,45,1076,43],[1003,46,1076,44,"enemies"],[1003,53,1076,51],[1003,54,1076,52,"findIndex"],[1003,63,1076,61],[1003,64,1076,62,"e"],[1003,65,1076,63],[1003,69,1076,67,"e"],[1003,70,1076,68],[1003,71,1076,69,"id"],[1003,73,1076,71],[1003,78,1076,76,"projectile"],[1003,88,1076,86],[1003,89,1076,87,"targetEnemyId"],[1003,102,1076,100],[1003,103,1076,101],[1004,18,1078,16],[1004,22,1078,20,"enemyIndex"],[1004,32,1078,30],[1004,36,1078,34],[1004,37,1078,35],[1004,41,1078,39,"newState"],[1004,49,1078,47],[1004,50,1078,48,"enemies"],[1004,57,1078,55],[1004,58,1078,56,"enemyIndex"],[1004,68,1078,66],[1004,69,1078,67],[1004,70,1078,68,"health"],[1004,76,1078,74],[1004,79,1078,77],[1004,80,1078,78],[1004,84,1078,82],[1004,85,1078,83,"newState"],[1004,93,1078,91],[1004,94,1078,92,"enemies"],[1004,101,1078,99],[1004,102,1078,100,"enemyIndex"],[1004,112,1078,110],[1004,113,1078,111],[1004,114,1078,112,"markedForDeath"],[1004,128,1078,126],[1004,130,1078,128],[1005,20,1079,18,"newState"],[1005,28,1079,26],[1005,29,1079,27,"enemies"],[1005,36,1079,34],[1005,39,1079,37],[1005,40,1079,38],[1005,43,1079,41,"newState"],[1005,51,1079,49],[1005,52,1079,50,"enemies"],[1005,59,1079,57],[1005,60,1079,58],[1006,20,1080,18],[1006,26,1080,24,"enemy"],[1006,31,1080,29],[1006,34,1080,32,"newState"],[1006,42,1080,40],[1006,43,1080,41,"enemies"],[1006,50,1080,48],[1006,51,1080,49,"enemyIndex"],[1006,61,1080,59],[1006,62,1080,60],[1007,20,1081,18],[1007,26,1081,24,"newHealth"],[1007,35,1081,33],[1007,38,1081,36,"Math"],[1007,42,1081,40],[1007,43,1081,41,"max"],[1007,46,1081,44],[1007,47,1081,45],[1007,48,1081,46],[1007,50,1081,48,"enemy"],[1007,55,1081,53],[1007,56,1081,54,"health"],[1007,62,1081,60],[1007,65,1081,63,"projectile"],[1007,75,1081,73],[1007,76,1081,74,"damage"],[1007,82,1081,80],[1007,83,1081,81],[1008,20,1083,18,"newState"],[1008,28,1083,26],[1008,29,1083,27,"enemies"],[1008,36,1083,34],[1008,37,1083,35,"enemyIndex"],[1008,47,1083,45],[1008,48,1083,46],[1008,51,1083,49],[1009,22,1084,20],[1009,25,1084,23,"enemy"],[1009,30,1084,28],[1010,22,1085,20,"health"],[1010,28,1085,26],[1010,30,1085,28,"newHealth"],[1010,39,1085,37],[1011,22,1086,20,"lastDamaged"],[1011,33,1086,31],[1011,35,1086,33,"combatEngine"],[1011,54,1086,45],[1011,55,1086,45,"combatEngine"],[1011,67,1086,45],[1011,68,1086,46,"getCurrentTick"],[1011,82,1086,60],[1011,83,1086,61],[1012,20,1087,18],[1012,21,1087,19],[1013,20,1089,18,"console"],[1013,27,1089,25],[1013,28,1089,26,"log"],[1013,31,1089,29],[1013,32,1089,30],[1013,60,1089,58,"enemy"],[1013,65,1089,63],[1013,66,1089,64,"name"],[1013,70,1089,68],[1013,82,1089,80,"newHealth"],[1013,91,1089,89],[1013,95,1089,93,"enemy"],[1013,100,1089,98],[1013,101,1089,99,"maxHealth"],[1013,110,1089,108],[1013,112,1089,110],[1013,113,1089,111],[1015,20,1091,18],[1016,20,1092,18],[1016,24,1092,22,"newHealth"],[1016,33,1092,31],[1016,37,1092,35],[1016,38,1092,36],[1016,42,1092,40,"enemy"],[1016,47,1092,45],[1016,48,1092,46,"health"],[1016,54,1092,52],[1016,57,1092,55],[1016,58,1092,56],[1016,60,1092,58],[1017,22,1093,20,"console"],[1017,29,1093,27],[1017,30,1093,28,"log"],[1017,33,1093,31],[1017,34,1093,32],[1017,60,1093,58,"enemy"],[1017,65,1093,63],[1017,66,1093,64,"name"],[1017,70,1093,68],[1017,84,1093,82,"projectile"],[1017,94,1093,92],[1017,95,1093,93,"abilityName"],[1017,106,1093,104],[1017,109,1093,107],[1017,110,1093,108],[1019,22,1095,20],[1020,22,1096,20,"newState"],[1020,30,1096,28],[1020,31,1096,29,"enemies"],[1020,38,1096,36],[1020,39,1096,37,"enemyIndex"],[1020,49,1096,47],[1020,50,1096,48],[1020,53,1096,51],[1021,24,1097,22],[1021,27,1097,25,"newState"],[1021,35,1097,33],[1021,36,1097,34,"enemies"],[1021,43,1097,41],[1021,44,1097,42,"enemyIndex"],[1021,54,1097,52],[1021,55,1097,53],[1022,24,1098,22,"health"],[1022,30,1098,28],[1022,32,1098,30],[1022,33,1098,31],[1023,24,1099,22,"markedForDeath"],[1023,38,1099,36],[1023,40,1099,38],[1024,22,1100,20],[1024,23,1100,21],[1026,22,1102,20],[1027,22,1103,20,"setTimeout"],[1027,32,1103,30],[1027,33,1103,31],[1027,39,1103,37,"handleEnemyKill"],[1027,54,1103,52],[1027,55,1103,53,"enemy"],[1027,60,1103,58],[1027,61,1103,59],[1027,63,1103,61],[1027,64,1103,62],[1027,65,1103,63],[1028,20,1104,18],[1029,18,1105,16],[1030,16,1106,14],[1031,16,1108,14],[1031,23,1108,21,"newState"],[1031,31,1108,29],[1032,14,1109,12],[1032,15,1109,13],[1032,16,1109,14],[1033,12,1110,10],[1035,12,1112,10],[1036,12,1113,10],[1036,16,1113,14,"progress"],[1036,24,1113,22],[1036,28,1113,26],[1036,31,1113,29],[1036,33,1113,31],[1037,14,1114,12],[1037,21,1114,19],[1037,25,1114,23],[1038,12,1115,10],[1039,12,1117,10],[1039,19,1117,17,"projectile"],[1039,29,1117,27],[1040,10,1118,8],[1040,11,1118,9],[1040,12,1118,10],[1040,13,1118,11,"filter"],[1040,19,1118,17],[1040,20,1118,18,"Boolean"],[1040,27,1118,25],[1040,28,1118,26],[1041,8,1119,6],[1041,9,1119,7],[1041,10,1119,8],[1042,6,1120,4],[1042,7,1120,5],[1044,6,1122,4],[1045,6,1123,4],[1045,12,1123,10,"impactInterval"],[1045,26,1123,24],[1045,29,1123,27,"setInterval"],[1045,40,1123,38],[1045,41,1123,39,"processProjectileImpacts"],[1045,65,1123,63],[1045,67,1123,65],[1045,69,1123,67],[1045,70,1123,68],[1046,6,1124,4],[1046,13,1124,11],[1046,19,1124,17,"clearInterval"],[1046,32,1124,30],[1046,33,1124,31,"impactInterval"],[1046,47,1124,45],[1046,48,1124,46],[1047,4,1125,2],[1047,5,1125,3],[1047,7,1125,5],[1047,8,1125,6,"handleEnemyKill"],[1047,23,1125,21],[1047,24,1125,22],[1047,25,1125,23],[1049,4,1127,2],[1050,4,1128,2],[1050,10,1128,8,"saveAbilityData"],[1050,25,1128,23],[1050,28,1128,26],[1050,32,1128,26,"useCallback"],[1050,38,1128,37],[1050,39,1128,37,"useCallback"],[1050,50,1128,37],[1050,52,1128,38],[1050,58,1128,44],[1051,6,1129,4],[1051,10,1129,8,"combatState"],[1051,21,1129,19],[1051,22,1129,20,"abilityManager"],[1051,36,1129,34],[1051,38,1129,36],[1052,8,1130,6],[1052,14,1130,12,"abilityData"],[1052,25,1130,23],[1052,28,1130,26,"combatState"],[1052,39,1130,37],[1052,40,1130,38,"abilityManager"],[1052,54,1130,52],[1052,55,1130,53,"getSaveData"],[1052,66,1130,64],[1052,67,1130,65],[1052,68,1130,66],[1053,8,1131,6,"console"],[1053,15,1131,13],[1053,16,1131,14,"log"],[1053,19,1131,17],[1053,20,1131,18],[1053,70,1131,68],[1053,72,1131,70,"abilityData"],[1053,83,1131,81],[1053,84,1131,82],[1054,8,1132,6,"game"],[1054,12,1132,10],[1054,13,1132,11,"updateAbilityData"],[1054,30,1132,28],[1054,31,1132,29,"abilityData"],[1054,42,1132,40],[1054,43,1132,41],[1055,6,1133,4],[1056,4,1134,2],[1056,5,1134,3],[1056,7,1134,5],[1056,8,1134,6,"combatState"],[1056,19,1134,17],[1056,20,1134,18,"abilityManager"],[1056,34,1134,32],[1056,36,1134,34,"game"],[1056,40,1134,38],[1056,41,1134,39,"updateAbilityData"],[1056,58,1134,56],[1056,59,1134,57],[1056,60,1134,58],[1057,4,1136,2],[1057,10,1136,8,"contextValue"],[1057,22,1136,39],[1057,25,1136,42,"React"],[1057,30,1136,47],[1057,31,1136,47,"default"],[1057,38,1136,47],[1057,39,1136,48,"useMemo"],[1057,46,1136,55],[1057,47,1136,56],[1057,54,1136,63],[1058,6,1137,4,"combatState"],[1058,17,1137,15],[1059,6,1138,4,"projectiles"],[1059,17,1138,15],[1060,6,1139,4,"startCombat"],[1060,17,1139,15],[1061,6,1140,4,"stopCombat"],[1061,16,1140,14],[1062,6,1141,4,"equipAbility"],[1062,18,1141,16],[1063,6,1142,4,"handleEnemyKill"],[1063,21,1142,19],[1064,6,1143,4,"getDeck"],[1064,13,1143,11],[1065,6,1144,4,"getAvailableAbilities"],[1065,27,1144,25],[1066,6,1145,4,"upgradeAbility"],[1066,20,1145,18],[1067,6,1146,4,"spawnEnemy"],[1067,16,1146,14],[1068,6,1147,4,"spawnBoss"],[1068,15,1147,13],[1069,6,1148,4,"clearAllEnemies"],[1069,21,1148,19],[1070,6,1149,4,"clearSpecificEnemy"],[1070,24,1149,22],[1071,6,1150,4,"triggerLevelUpExplosion"],[1071,29,1150,27],[1072,6,1151,4,"findClosestEnemy"],[1072,22,1151,20],[1073,6,1152,4,"updateNinjaPosition"],[1073,25,1152,23],[1074,6,1153,4,"setManualControlActive"],[1074,28,1153,26],[1075,6,1154,4,"lastExplosionTime"],[1075,23,1154,21],[1076,6,1155,4,"useAbilityManually"],[1076,24,1155,22],[1077,6,1155,24],[1078,6,1156,4,"saveAbilityData"],[1078,21,1156,19],[1079,6,1156,21],[1080,6,1157,4,"shadowClone"],[1080,17,1157,15],[1080,19,1157,17,"combatState"],[1080,30,1157,28],[1080,31,1157,29,"shadowClone"],[1080,42,1157,40],[1080,43,1157,42],[1081,4,1158,2],[1081,5,1158,3],[1081,6,1158,4],[1081,8,1158,6],[1082,4,1159,4],[1083,4,1160,4],[1084,4,1161,4,"combatState"],[1084,15,1161,15],[1084,17,1162,4,"projectiles"],[1084,28,1162,15],[1084,30,1163,4,"lastExplosionTime"],[1084,47,1163,21],[1085,4,1164,4],[1086,4,1165,4,"combatState"],[1086,15,1165,15],[1086,16,1165,16,"abilityManager"],[1086,30,1165,30],[1086,32,1166,4,"combatState"],[1086,43,1166,15],[1086,44,1166,16,"enemies"],[1086,51,1166,23],[1086,53,1167,4,"combatState"],[1086,64,1167,15],[1086,65,1167,16,"shadowClone"],[1086,76,1167,27],[1087,4,1167,29],[1088,4,1168,4,"useAbilityManually"],[1088,22,1168,22],[1089,4,1168,24],[1090,4,1169,4,"saveAbilityData"],[1090,19,1169,19],[1090,20,1169,21],[1091,4,1169,21],[1091,5,1170,3],[1091,6,1170,4],[1092,4,1172,2],[1092,24,1173,4],[1092,28,1173,4,"_reactJsxDevRuntime"],[1092,47,1173,4],[1092,48,1173,4,"jsxDEV"],[1092,54,1173,4],[1092,56,1173,5,"CombatContext"],[1092,69,1173,18],[1092,70,1173,19,"Provider"],[1092,78,1173,27],[1093,6,1173,28,"value"],[1093,11,1173,33],[1093,13,1173,35,"contextValue"],[1093,25,1173,48],[1094,6,1173,48,"children"],[1094,14,1173,48],[1094,16,1174,7,"children"],[1095,4,1174,15],[1096,6,1174,15,"fileName"],[1096,14,1174,15],[1096,16,1174,15,"_jsxFileName"],[1096,28,1174,15],[1097,6,1174,15,"lineNumber"],[1097,16,1174,15],[1098,6,1174,15,"columnNumber"],[1098,18,1174,15],[1099,4,1174,15],[1099,11,1175,28],[1099,12,1175,29],[1100,2,1177,0],[1100,3,1177,1],[1101,2,1177,2,"_s4"],[1101,5,1177,2],[1101,6,103,13,"CombatProvider"],[1101,20,103,27],[1102,4,103,27],[1102,12,104,15,"useGame"],[1102,24,104,22],[1102,25,104,22,"useGame"],[1102,32,104,22],[1102,34,105,77,"useZone"],[1102,46,105,84],[1102,47,105,84,"useZone"],[1102,54,105,84],[1103,2,105,84],[1104,2,105,84,"_c"],[1104,4,105,84],[1104,7,103,13,"CombatProvider"],[1104,21,103,27],[1105,2,103,27],[1105,6,103,27,"_c"],[1105,8,103,27],[1106,2,103,27,"$RefreshReg$"],[1106,14,103,27],[1106,15,103,27,"_c"],[1106,17,103,27],[1107,0,103,27],[1107,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","setTimeout$argument_0","game.updateNinja$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","enemiesToKill.forEach$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","handleProjectileHit","setProjectiles$argument_0","prev.filter$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","targets.forEach$argument_0","createProjectile","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","triggerLevelUpExplosion","prev.enemies.map$argument_0","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC4F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;eCmB;uBCI;ODO;KDiB;GHC;6CMG;mBJK;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;6BN+D;mBMG;ORiC;kDSqD,0BT;mGUK,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;0BSK;KTG;GNC;mCgBG;oBCY;KDU;GhBI;2BkBG;GlBE;0CmBO;GnBE;6CoBG;GpBG;8BqBG;mBnBG;oDMI,sCN;KmBa;mBCG,oBC,2BD,CD;GrBC;sBwBG;iCCS;oCCE,iCD;KDG;6BG0C;SHO;sBIG;OJU;GxBoB;2B6BG;mBPyC,6BO;ezBG;KyBE;G7BG;yB8BG;G9BsC;8B+BG;G/B4B;wCgCG;mB9BE,uC8B;GhCQ;uCiCG;mB/BC,wC+B;GjCE;uBkCG;GlCE;kBmCE;GnCE;gCoCE;GpCE;yBqCE;GrCE;0BsCG;mBpCE;MoCG;GtCC;kCuCG;mBrCM;mBEU;2BCC;YDG;SFC;8CsCK;QtCI;KqCM;GvCC;qByCG;mBvC2B;MuCG;GzCG;oB0CG;mBxCE;MwCG;G1CC;6B2CG;mBzCC;mC0CE,6B1C;MyCC;G3CC;yC6CG;qB3C4B;O2CI;G7CQ;YCC;W6CO;K7CE;GDC;YCG;qC8CC;qBzBC;sC0BC;2B9Ca;wD+CY;iB/CmC;6BEK;0C8CC,+B9C;mBFC;8DMK,sCN;+BE2B,4BF;a8CM;S1BS;OyBC;K9CC;W6CI,mC7C;GDC;sCmDG;GnDM;wDoDE;IpDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}