{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      const xpReward = Math.round((enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0));\n      const goldReward = Math.round(10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0));\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    // CRITICAL FIX: Use React ref to capture dead enemies for XP processing to avoid closure issues\n    const deadEnemiesRef = (0, _react.useRef)([]);\n    const handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        const allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Use React ref to store dead enemies to avoid closure scoping issues\n        deadEnemiesRef.current = [...allDeadEnemies]; // Store in ref for XP processing\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        const currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            const animationDuration = 750; // 750ms death fade\n            const isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // BULK XP PROCESSING - Use ref to get dead enemies (FIXED: Closure scoping issue)\n      const deadEnemiesToProcess = deadEnemiesRef.current; // Get from ref instead of closure variable\n      if (deadEnemiesToProcess.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        const unprocessedEnemies = deadEnemiesToProcess; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG deadEnemiesToProcess xpAwarded status:`, deadEnemiesToProcess.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${deadEnemiesToProcess.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          let totalXP = 0;\n          let totalGold = 0;\n          const zoneKills = [];\n          const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          const goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            // BALANCE CHANGE: XP rate ÷ 2, Gold rate × 100\n            totalXP += Math.round((enemy.zoneXP || 5) * xpMultiplier / 2); // Divide XP by 2, rounded to integer\n            totalGold += Math.round(10 * goldMultiplier * 100); // Multiply gold by 100, rounded to integer\n\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              const wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 195,\n      y: 400\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        const ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        const ninjaY = currentNinjaPosition.y + 20;\n        const aoeRadius = ability.stats.aoeRadius;\n        const enemiesInRange = state.enemies.filter(enemy => {\n          const enemyX = enemy.position.x + 17.5; // Center of enemy\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      const tickInterval = Platform.default.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${Platform.default.OS}`);\n      const combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      const newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            const timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1238,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"MDeq8hWzWP3Z+s+8FtZeHd86Tq0=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1169,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1,0],[27,6,1,0,"_react"],[27,12,1,0],[27,15,1,0,"require"],[27,22,1,0],[27,23,1,0,"_dependencyMap"],[27,37,1,0],[28,2,1,0],[28,6,1,0,"React"],[28,11,1,0],[28,14,1,0,"_interopDefault"],[28,29,1,0],[28,30,1,0,"_react"],[28,36,1,0],[29,2,1,110],[29,6,1,110,"_reactNativeWebDistExportsPlatform"],[29,40,1,110],[29,43,1,110,"require"],[29,50,1,110],[29,51,1,110,"_dependencyMap"],[29,65,1,110],[30,2,1,110],[30,6,1,110,"Platform"],[30,14,1,110],[30,17,1,110,"_interopDefault"],[30,32,1,110],[30,33,1,110,"_reactNativeWebDistExportsPlatform"],[30,67,1,110],[31,2,3,0],[31,6,3,0,"_engineCombatEngine"],[31,25,3,0],[31,28,3,0,"require"],[31,35,3,0],[31,36,3,0,"_dependencyMap"],[31,50,3,0],[32,2,4,0],[32,6,4,0,"_typesAbilityTypes"],[32,24,4,0],[32,27,4,0,"require"],[32,34,4,0],[32,35,4,0,"_dependencyMap"],[32,49,4,0],[33,2,5,0],[33,6,5,0,"_GameContext"],[33,18,5,0],[33,21,5,0,"require"],[33,28,5,0],[33,29,5,0,"_dependencyMap"],[33,43,5,0],[34,2,6,0],[34,6,6,0,"_ZoneContext"],[34,18,6,0],[34,21,6,0,"require"],[34,28,6,0],[34,29,6,0,"_dependencyMap"],[34,43,6,0],[35,2,6,40],[35,6,6,40,"_reactJsxDevRuntime"],[35,25,6,40],[35,28,6,40,"require"],[35,35,6,40],[35,36,6,40,"_dependencyMap"],[35,50,6,40],[36,2,94,0],[36,8,94,6,"CombatContext"],[36,21,94,19],[36,37,94,22],[36,41,94,22,"createContext"],[36,47,94,35],[36,48,94,35,"createContext"],[36,61,94,35],[36,63,94,67,"undefined"],[36,72,94,76],[36,73,94,77],[37,2,96,7],[37,8,96,13,"useCombat"],[37,17,96,22],[37,20,96,25,"useCombat"],[37,21,96,25],[37,26,96,50],[38,4,96,50,"_s"],[38,6,96,50],[39,4,97,2],[39,10,97,8,"context"],[39,17,97,15],[39,20,97,18],[39,24,97,18,"useContext"],[39,30,97,28],[39,31,97,28,"useContext"],[39,41,97,28],[39,43,97,29,"CombatContext"],[39,56,97,42],[39,57,97,43],[40,4,98,2],[40,8,98,6],[40,9,98,7,"context"],[40,16,98,14],[40,18,98,16],[41,6,99,4],[41,12,99,10],[41,16,99,14,"Error"],[41,21,99,19],[41,22,99,20],[41,70,99,68],[41,71,99,69],[42,4,100,2],[43,4,101,2],[43,11,101,9,"context"],[43,18,101,16],[44,2,102,0],[44,3,102,1],[45,2,102,2,"_s"],[45,4,102,2],[45,5,96,13,"useCombat"],[45,14,96,22],[46,2,104,0],[46,6,104,4,"enemyCounter"],[46,18,104,16],[46,21,104,19],[46,22,104,20],[46,23,104,21],[46,24,104,22],[48,2,106,7],[48,8,106,13,"CombatProvider"],[48,22,106,27],[48,25,106,30,"CombatProvider"],[48,26,106,31],[49,4,106,33,"children"],[50,2,106,67],[50,3,106,68],[50,8,106,73],[51,4,106,73,"_s4"],[51,7,106,73],[52,4,106,73],[52,8,106,73,"_s3"],[52,11,106,73],[52,14,106,73,"$RefreshSig$"],[52,26,106,73],[53,4,107,2],[53,10,107,8,"game"],[53,14,107,12],[53,17,107,15],[53,21,107,15,"useGame"],[53,33,107,22],[53,34,107,22,"useGame"],[53,41,107,22],[53,43,107,23],[53,44,107,24],[54,4,108,2],[54,10,108,8],[55,6,108,10,"currentZone"],[55,17,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[58,6,108,58,"spawnZoneEnemy"],[59,4,108,73],[59,5,108,74],[59,8,108,77],[59,12,108,77,"useZone"],[59,24,108,84],[59,25,108,84,"useZone"],[59,32,108,84],[59,34,108,85],[59,35,108,86],[61,4,110,2],[62,4,111,2],[62,10,111,8,"initialCombatState"],[62,28,111,39],[62,31,111,42],[63,6,112,4,"isInCombat"],[63,16,112,14],[63,18,112,16],[63,23,112,21],[64,6,113,4,"currentTick"],[64,17,113,15],[64,19,113,17],[64,20,113,18],[65,6,114,4,"enemies"],[65,13,114,11],[65,15,114,13],[65,17,114,15],[66,6,115,4,"abilityManager"],[66,20,115,18],[66,22,115,20],[66,26,115,24,"AbilityManager"],[66,44,115,38],[66,45,115,38,"AbilityManager"],[66,59,115,38],[66,60,115,39],[66,61,115,40],[67,6,116,4,"statusEffects"],[67,19,116,17],[67,21,116,19],[67,25,116,23,"StatusEffectManager"],[67,44,116,42],[67,45,116,42,"StatusEffectManager"],[67,64,116,42],[67,65,116,43],[67,66,116,44],[68,6,117,4,"playerStats"],[68,17,117,15],[68,19,117,17],[69,8,118,6,"attack"],[69,14,118,12],[69,16,118,14],[69,18,118,16],[70,8,118,18],[71,8,119,6,"defense"],[71,15,119,13],[71,17,119,15],[71,18,119,16],[72,8,120,6,"health"],[72,14,120,12],[72,16,120,14],[72,19,120,17],[73,8,121,6,"maxHealth"],[73,17,121,15],[73,19,121,17],[73,22,121,20],[74,8,122,6,"critChance"],[74,18,122,16],[74,20,122,18],[74,21,122,19],[75,8,123,6,"critDamage"],[75,18,123,16],[75,20,123,18],[75,23,123,21],[76,8,124,6,"cooldownReduction"],[76,25,124,23],[76,27,124,25],[77,6,125,4],[78,4,126,2],[78,5,126,3],[79,4,128,2],[79,10,128,8],[79,11,128,9,"combatState"],[79,22,128,20],[79,24,128,22,"setCombatState"],[79,38,128,36],[79,39,128,37],[79,42,128,40],[79,46,128,40,"useState"],[79,52,128,48],[79,53,128,48,"useState"],[79,61,128,48],[79,63,128,62,"initialCombatState"],[79,81,128,80],[79,82,128,81],[81,4,130,2],[82,4,131,2],[82,8,131,2,"useEffect"],[82,14,131,11],[82,15,131,11,"useEffect"],[82,24,131,11],[82,26,131,12],[82,32,131,18],[83,6,132,4],[83,10,132,8,"game"],[83,14,132,12],[83,15,132,13,"gameState"],[83,24,132,22],[83,25,132,23,"abilityData"],[83,36,132,34],[83,40,132,38,"combatState"],[83,51,132,49],[83,52,132,50,"abilityManager"],[83,66,132,64],[83,68,132,66],[84,8,133,6,"console"],[84,15,133,13],[84,16,133,14,"log"],[84,19,133,17],[84,20,133,18],[84,68,133,66],[84,70,133,68,"game"],[84,74,133,72],[84,75,133,73,"gameState"],[84,84,133,82],[84,85,133,83,"abilityData"],[84,96,133,94],[84,97,133,95],[85,8,134,6,"combatState"],[85,19,134,17],[85,20,134,18,"abilityManager"],[85,34,134,32],[85,35,134,33,"restoreFromSaveData"],[85,54,134,52],[85,55,134,53,"game"],[85,59,134,57],[85,60,134,58,"gameState"],[85,69,134,67],[85,70,134,68,"abilityData"],[85,81,134,79],[85,82,134,80],[87,8,136,6],[88,8,137,6,"setCombatState"],[88,22,137,20],[88,23,137,21,"prev"],[88,27,137,25],[88,32,137,30],[89,10,137,32],[89,13,137,35,"prev"],[90,8,137,40],[90,9,137,41],[90,10,137,42],[90,11,137,43],[91,6,138,4],[92,4,139,2],[92,5,139,3],[92,7,139,5],[92,8,139,6,"game"],[92,12,139,10],[92,13,139,11,"gameState"],[92,22,139,20],[92,23,139,21,"abilityData"],[92,34,139,32],[92,36,139,34,"combatState"],[92,47,139,45],[92,48,139,46,"abilityManager"],[92,62,139,60],[92,63,139,61],[92,64,139,62],[94,4,141,2],[95,4,142,2],[95,8,142,2,"useEffect"],[95,14,142,11],[95,15,142,11,"useEffect"],[95,24,142,11],[95,26,142,12],[95,32,142,18],[96,6,143,4],[96,10,143,8,"game"],[96,14,143,12],[96,15,143,13,"gameState"],[96,24,143,22],[96,25,143,23,"ninja"],[96,30,143,28],[96,32,143,30],[97,8,144,6],[97,14,144,12,"effectiveStats"],[97,28,144,26],[97,31,144,29,"game"],[97,35,144,33],[97,36,144,34,"getEffectiveStats"],[97,53,144,51],[97,54,144,52],[97,55,144,53],[98,8,146,6,"setCombatState"],[98,22,146,20],[98,23,146,21,"prev"],[98,27,146,25],[98,31,146,29],[99,10,147,8],[100,10,148,8],[100,14,148,12,"prev"],[100,18,148,16],[100,19,148,17,"playerStats"],[100,30,148,28],[100,31,148,29,"maxHealth"],[100,40,148,38],[100,45,148,43],[100,48,148,46],[100,52,148,50,"prev"],[100,56,148,54],[100,57,148,55,"playerStats"],[100,68,148,66],[100,69,148,67,"attack"],[100,75,148,73],[100,80,148,78],[100,82,148,80],[100,84,148,82],[101,12,149,10,"console"],[101,19,149,17],[101,20,149,18,"log"],[101,23,149,21],[101,24,149,22],[101,60,149,58,"effectiveStats"],[101,74,149,72],[101,75,149,73,"health"],[101,81,149,79],[101,93,149,91,"effectiveStats"],[101,107,149,105],[101,108,149,106,"attack"],[101,114,149,112],[101,127,149,125,"effectiveStats"],[101,141,149,139],[101,142,149,140,"defense"],[101,149,149,147],[101,151,149,149],[101,152,149,150],[102,12,151,10],[102,19,151,17],[103,14,152,12],[103,17,152,15,"prev"],[103,21,152,19],[104,14,153,12,"playerStats"],[104,25,153,23],[104,27,153,25],[105,16,154,14,"attack"],[105,22,154,20],[105,24,154,22,"effectiveStats"],[105,38,154,36],[105,39,154,37,"attack"],[105,45,154,43],[106,16,155,14,"defense"],[106,23,155,21],[106,25,155,23,"effectiveStats"],[106,39,155,37],[106,40,155,38,"defense"],[106,47,155,45],[107,16,156,14,"health"],[107,22,156,20],[107,24,156,22,"effectiveStats"],[107,38,156,36],[107,39,156,37,"health"],[107,45,156,43],[108,16,156,45],[109,16,157,14,"maxHealth"],[109,25,157,23],[109,27,157,25,"effectiveStats"],[109,41,157,39],[109,42,157,40,"health"],[109,48,157,46],[110,16,158,14,"critChance"],[110,26,158,24],[110,28,158,26,"effectiveStats"],[110,42,158,40],[110,43,158,41,"critChance"],[110,53,158,51],[110,57,158,55],[110,58,158,56],[111,16,159,14,"critDamage"],[111,26,159,24],[111,28,159,26,"effectiveStats"],[111,42,159,40],[111,43,159,41,"critDamage"],[111,53,159,51],[111,57,159,55],[111,60,159,58],[112,16,160,14,"cooldownReduction"],[112,33,160,31],[112,35,160,33,"effectiveStats"],[112,49,160,47],[112,50,160,48,"cooldownReduction"],[112,67,160,65],[112,71,160,69],[113,14,161,12],[114,12,162,10],[114,13,162,11],[115,10,163,8],[116,10,164,8],[116,17,164,15,"prev"],[116,21,164,19],[117,8,165,6],[117,9,165,7],[117,10,165,8],[118,6,166,4],[119,4,167,2],[119,5,167,3],[119,7,167,5],[119,8,167,6,"game"],[119,12,167,10],[119,13,167,11,"gameState"],[119,22,167,20],[119,23,167,21,"ninja"],[119,28,167,26],[119,29,167,27],[119,30,167,28],[120,4,169,2],[120,10,169,8],[120,11,169,9,"projectiles"],[120,22,169,20],[120,24,169,22,"setProjectiles"],[120,38,169,36],[120,39,169,37],[120,42,169,40],[120,46,169,40,"useState"],[120,52,169,48],[120,53,169,48,"useState"],[120,61,169,48],[120,63,169,69],[120,65,169,71],[120,66,169,72],[121,4,170,2],[121,10,170,8],[121,11,170,9,"lastExplosionTime"],[121,28,170,26],[121,30,170,28,"setLastExplosionTime"],[121,50,170,48],[121,51,170,49],[121,54,170,52],[121,58,170,52,"useState"],[121,64,170,60],[121,65,170,60,"useState"],[121,73,170,60],[121,75,170,69],[121,76,170,70],[121,77,170,71],[122,4,171,2],[123,4,172,2],[125,4,174,2],[126,4,175,2],[126,10,175,8,"handleEnemyKill"],[126,25,175,23],[126,28,175,26],[126,32,175,26,"useCallback"],[126,38,175,37],[126,39,175,37,"useCallback"],[126,50,175,37],[126,52,175,39,"enemy"],[126,57,175,57],[126,61,175,62],[127,6,176,4],[128,6,177,4],[128,12,177,10,"xpReward"],[128,20,177,18],[128,23,177,21,"Math"],[128,27,177,25],[128,28,177,26,"round"],[128,33,177,31],[128,34,177,32],[128,35,177,33,"enemy"],[128,40,177,38],[128,41,177,39,"zoneXP"],[128,47,177,45],[128,51,177,49],[128,52,177,50],[128,57,177,55,"game"],[128,61,177,59],[128,62,177,60,"gameState"],[128,71,177,69],[128,72,177,70,"subscriptionBenefits"],[128,92,177,90],[128,94,177,92,"xp_multiplier"],[128,107,177,105],[128,111,177,109],[128,114,177,112],[128,115,177,113],[128,116,177,114],[129,6,178,4],[129,12,178,10,"goldReward"],[129,22,178,20],[129,25,178,23,"Math"],[129,29,178,27],[129,30,178,28,"round"],[129,35,178,33],[129,36,178,34],[129,38,178,36],[129,42,178,40,"game"],[129,46,178,44],[129,47,178,45,"gameState"],[129,56,178,54],[129,57,178,55,"subscriptionBenefits"],[129,77,178,75],[129,79,178,77,"drop_multiplier"],[129,94,178,92],[129,98,178,96],[129,101,178,99],[129,102,178,100],[129,103,178,101],[130,6,180,4,"console"],[130,13,180,11],[130,14,180,12,"log"],[130,17,180,15],[130,18,180,16],[130,46,180,44,"xpReward"],[130,54,180,52],[130,65,180,63,"goldReward"],[130,75,180,73],[130,88,180,86,"enemy"],[130,93,180,91],[130,94,180,92,"name"],[130,98,180,96],[130,100,180,98],[130,101,180,99],[132,6,182,4],[133,6,183,4,"game"],[133,10,183,8],[133,11,183,9,"updateNinja"],[133,22,183,20],[133,23,183,21,"prev"],[133,27,183,25],[133,32,183,30],[134,8,184,6,"experience"],[134,18,184,16],[134,20,184,18,"prev"],[134,24,184,22],[134,25,184,23,"experience"],[134,35,184,33],[134,38,184,36,"xpReward"],[134,46,184,44],[135,8,185,6,"gold"],[135,12,185,10],[135,14,185,12,"prev"],[135,18,185,16],[135,19,185,17,"gold"],[135,23,185,21],[135,26,185,24,"goldReward"],[136,6,186,4],[136,7,186,5],[136,8,186,6],[136,9,186,7],[138,6,188,4],[139,6,189,4,"setCombatState"],[139,20,189,18],[139,21,189,19,"prevState"],[139,30,189,28],[139,35,189,33],[140,8,190,6],[140,11,190,9,"prevState"],[140,20,190,18],[141,8,191,6,"enemies"],[141,15,191,13],[141,17,191,15,"prevState"],[141,26,191,24],[141,27,191,25,"enemies"],[141,34,191,32],[141,35,191,33,"map"],[141,38,191,36],[141,39,191,37,"e"],[141,40,191,38],[141,44,192,8,"e"],[141,45,192,9],[141,46,192,10,"id"],[141,48,192,12],[141,53,192,17,"enemy"],[141,58,192,22],[141,59,192,23,"id"],[141,61,192,25],[141,64,192,28],[142,10,192,30],[142,13,192,33,"e"],[142,14,192,34],[143,10,192,36,"xpAwarded"],[143,19,192,45],[143,21,192,47],[144,8,192,52],[144,9,192,53],[144,12,192,56,"e"],[144,13,193,6],[145,6,194,4],[145,7,194,5],[145,8,194,6],[145,9,194,7],[147,6,196,4],[148,6,197,4],[148,10,197,8,"enemy"],[148,15,197,13],[148,16,197,14,"zoneTypeId"],[148,26,197,24],[148,28,197,26],[149,8,198,6,"recordEnemyKill"],[149,23,198,21],[149,24,198,22],[150,10,199,8,"id"],[150,12,199,10],[150,14,199,12,"enemy"],[150,19,199,17],[150,20,199,18,"id"],[150,22,199,20],[151,10,200,8,"typeId"],[151,16,200,14],[151,18,200,16,"enemy"],[151,23,200,21],[151,24,200,22,"zoneTypeId"],[151,34,200,32],[152,10,201,8,"name"],[152,14,201,12],[152,16,201,14,"enemy"],[152,21,201,19],[152,22,201,20,"name"],[152,26,201,24],[153,10,202,8,"icon"],[153,14,202,12],[153,16,202,14],[153,20,202,18],[154,10,203,8,"hp"],[154,12,203,10],[154,14,203,12],[154,15,203,13],[155,10,204,8,"maxHP"],[155,15,204,13],[155,17,204,15,"enemy"],[155,22,204,20],[155,23,204,21,"maxHealth"],[155,32,204,30],[156,10,205,8,"attack"],[156,16,205,14],[156,18,205,16,"enemy"],[156,23,205,21],[156,24,205,22,"stats"],[156,29,205,27],[156,30,205,28,"attack"],[156,36,205,34],[157,10,206,8,"xp"],[157,12,206,10],[157,14,206,12,"enemy"],[157,19,206,17],[157,20,206,18,"zoneXP"],[157,26,206,24],[157,30,206,28],[157,31,206,29],[158,10,207,8,"position"],[158,18,207,16],[158,20,207,18,"enemy"],[158,25,207,23],[158,26,207,24,"position"],[159,8,208,6],[159,9,208,7],[159,10,208,8],[160,6,209,4],[161,4,210,2],[161,5,210,3],[161,7,210,5],[161,8,210,6,"game"],[161,12,210,10],[161,13,210,11,"updateNinja"],[161,24,210,22],[161,26,210,24,"game"],[161,30,210,28],[161,31,210,29,"gameState"],[161,40,210,38],[161,41,210,39,"subscriptionBenefits"],[161,61,210,59],[161,63,210,61,"recordEnemyKill"],[161,78,210,76],[161,79,210,77],[161,80,210,78],[163,4,212,2],[164,4,213,2],[165,4,214,2],[166,4,215,2],[166,10,215,8,"deadEnemiesRef"],[166,24,215,22],[166,27,215,25],[166,31,215,25,"useRef"],[166,37,215,31],[166,38,215,31,"useRef"],[166,44,215,31],[166,46,215,47],[166,48,215,49],[166,49,215,50],[167,4,217,2],[167,10,217,8,"handleCombatTick"],[167,26,217,24],[167,29,217,27,"React"],[167,34,217,32],[167,35,217,32,"default"],[167,42,217,32],[167,43,217,33,"useCallback"],[167,54,217,44],[167,55,217,45],[167,61,217,51],[168,6,217,51],[168,10,217,51,"_s2"],[168,13,217,51],[168,16,217,51,"$RefreshSig$"],[168,28,217,51],[169,6,218,4,"console"],[169,13,218,11],[169,14,218,12,"log"],[169,17,218,15],[169,18,218,16],[169,87,218,85],[169,88,218,86],[170,6,219,4,"console"],[170,13,219,11],[170,14,219,12,"log"],[170,17,219,15],[170,18,219,16],[170,65,219,63,"isManualControlActive"],[170,86,219,84],[170,99,219,97,"game"],[170,103,219,101],[170,104,219,102,"gameState"],[170,113,219,111],[170,114,219,112,"isAlive"],[170,121,219,119],[170,123,219,121],[170,124,219,122],[171,6,221,4,"_s2"],[171,9,221,4],[171,10,221,4,"setCombatState"],[171,24,221,18],[171,25,221,18,"_s2"],[171,28,221,18],[171,29,221,19,"prev"],[171,33,221,23],[171,37,221,27],[172,8,221,27,"_s2"],[172,11,221,27],[173,8,222,6],[173,14,222,12,"newTick"],[173,21,222,19],[173,24,222,22,"combatEngine"],[173,43,222,34],[173,44,222,34,"combatEngine"],[173,56,222,34],[173,57,222,35,"getCurrentTick"],[173,71,222,49],[173,72,222,50],[173,73,222,51],[174,8,223,6],[174,14,223,12,"newState"],[174,22,223,20],[174,25,223,23],[175,10,223,25],[175,13,223,28,"prev"],[175,17,223,32],[176,10,223,34,"currentTick"],[176,21,223,45],[176,23,223,47,"newTick"],[177,8,223,55],[177,9,223,56],[178,8,225,6],[178,12,225,10],[178,13,225,11,"newState"],[178,21,225,19],[178,22,225,20,"isInCombat"],[178,32,225,30],[178,34,225,32],[178,41,225,39,"newState"],[178,49,225,47],[180,8,227,6],[181,8,228,6,"newState"],[181,16,228,14],[181,17,228,15,"abilityManager"],[181,31,228,29],[181,32,228,30,"updateCooldowns"],[181,47,228,45],[181,48,228,46,"newTick"],[181,55,228,53],[181,56,228,54],[183,8,230,6],[184,8,231,6],[184,14,231,12,"effectResults"],[184,27,231,25],[184,30,231,28,"newState"],[184,38,231,36],[184,39,231,37,"statusEffects"],[184,52,231,50],[184,53,231,51,"processTick"],[184,64,231,62],[184,65,231,63,"newTick"],[184,72,231,70],[184,73,231,71],[186,8,233,6],[187,8,234,6,"effectResults"],[187,21,234,19],[187,22,234,20,"forEach"],[187,29,234,27],[187,30,234,28],[187,31,234,29,"results"],[187,38,234,36],[187,40,234,38,"entityId"],[187,48,234,46],[187,53,234,51],[188,10,235,8],[188,16,235,14,"enemyIndex"],[188,26,235,24],[188,29,235,27,"newState"],[188,37,235,35],[188,38,235,36,"enemies"],[188,45,235,43],[188,46,235,44,"findIndex"],[188,55,235,53],[188,56,235,54,"e"],[188,57,235,55],[188,61,235,59,"e"],[188,62,235,60],[188,63,235,61,"id"],[188,65,235,63],[188,70,235,68,"entityId"],[188,78,235,76],[188,79,235,77],[189,10,236,8],[189,14,236,12,"enemyIndex"],[189,24,236,22],[189,28,236,26],[189,29,236,27],[189,31,236,29],[190,12,237,10,"results"],[190,19,237,17],[190,20,237,18,"forEach"],[190,27,237,25],[190,28,237,26,"result"],[190,34,237,32],[190,38,237,36],[191,14,238,12,"newState"],[191,22,238,20],[191,23,238,21,"enemies"],[191,30,238,28],[191,31,238,29,"enemyIndex"],[191,41,238,39],[191,42,238,40],[191,43,238,41,"health"],[191,49,238,47],[191,53,238,51,"result"],[191,59,238,57],[191,60,238,58,"damage"],[191,66,238,64],[192,14,239,12,"newState"],[192,22,239,20],[192,23,239,21,"enemies"],[192,30,239,28],[192,31,239,29,"enemyIndex"],[192,41,239,39],[192,42,239,40],[192,43,239,41,"lastDamaged"],[192,54,239,52],[192,57,239,55,"newTick"],[192,64,239,62],[193,12,240,10],[193,13,240,11],[193,14,240,12],[194,10,241,8],[195,8,242,6],[195,9,242,7],[195,10,242,8],[197,8,244,6],[198,8,245,6],[199,8,246,6],[199,12,246,10,"newState"],[199,20,246,18],[199,21,246,19,"playerStats"],[199,32,246,30],[199,36,246,34,"game"],[199,40,246,38],[199,41,246,39,"gameState"],[199,50,246,48],[199,51,246,49,"ninja"],[199,56,246,54],[199,58,246,56],[200,10,247,8],[200,16,247,14,"effectiveStats"],[200,30,247,28],[200,33,247,31,"game"],[200,37,247,35],[200,38,247,36,"getEffectiveStats"],[200,55,247,53],[200,56,247,54],[200,57,247,55],[202,10,249,8],[203,10,250,8],[203,14,250,12,"newState"],[203,22,250,20],[203,23,250,21,"playerStats"],[203,34,250,32],[203,35,250,33,"attack"],[203,41,250,39],[203,46,250,44,"effectiveStats"],[203,60,250,58],[203,61,250,59,"attack"],[203,67,250,65],[203,71,251,12,"newState"],[203,79,251,20],[203,80,251,21,"playerStats"],[203,91,251,32],[203,92,251,33,"defense"],[203,99,251,40],[203,104,251,45,"effectiveStats"],[203,118,251,59],[203,119,251,60,"defense"],[203,126,251,67],[203,130,252,12,"newState"],[203,138,252,20],[203,139,252,21,"playerStats"],[203,150,252,32],[203,151,252,33,"maxHealth"],[203,160,252,42],[203,165,252,47,"effectiveStats"],[203,179,252,61],[203,180,252,62,"maxHealth"],[203,189,252,71],[203,191,252,73],[204,12,254,10,"console"],[204,19,254,17],[204,20,254,18,"log"],[204,23,254,21],[204,24,254,22],[204,58,254,56,"newState"],[204,66,254,64],[204,67,254,65,"playerStats"],[204,78,254,76],[204,79,254,77,"attack"],[204,85,254,83],[204,91,254,89,"effectiveStats"],[204,105,254,103],[204,106,254,104,"attack"],[204,112,254,110],[204,125,254,123,"newState"],[204,133,254,131],[204,134,254,132,"playerStats"],[204,145,254,143],[204,146,254,144,"defense"],[204,153,254,151],[204,159,254,157,"effectiveStats"],[204,173,254,171],[204,174,254,172,"defense"],[204,181,254,179],[204,192,254,190,"newState"],[204,200,254,198],[204,201,254,199,"playerStats"],[204,212,254,210],[204,213,254,211,"maxHealth"],[204,222,254,220],[204,228,254,226,"effectiveStats"],[204,242,254,240],[204,243,254,241,"maxHealth"],[204,252,254,250],[204,254,254,252],[204,255,254,253],[206,12,256,10],[207,12,257,10],[207,16,257,14,"newHealth"],[207,25,257,23],[207,28,257,26,"newState"],[207,36,257,34],[207,37,257,35,"playerStats"],[207,48,257,46],[207,49,257,47,"health"],[207,55,257,53],[208,12,258,10],[208,16,258,14,"newState"],[208,24,258,22],[208,25,258,23,"playerStats"],[208,36,258,34],[208,37,258,35,"maxHealth"],[208,46,258,44],[208,51,258,49,"effectiveStats"],[208,65,258,63],[208,66,258,64,"maxHealth"],[208,75,258,73],[208,77,258,75],[209,14,259,12],[210,14,260,12],[210,18,260,16,"effectiveStats"],[210,32,260,30],[210,33,260,31,"maxHealth"],[210,42,260,40],[210,45,260,43,"newState"],[210,53,260,51],[210,54,260,52,"playerStats"],[210,65,260,63],[210,66,260,64,"maxHealth"],[210,75,260,73],[210,78,260,76],[210,81,260,79],[210,83,260,81],[211,16,261,14],[212,16,262,14],[212,22,262,20,"healthRatio"],[212,33,262,31],[212,36,262,34,"newState"],[212,44,262,42],[212,45,262,43,"playerStats"],[212,56,262,54],[212,57,262,55,"maxHealth"],[212,66,262,64],[212,69,262,67],[212,70,262,68],[212,73,263,16,"newState"],[212,81,263,24],[212,82,263,25,"playerStats"],[212,93,263,36],[212,94,263,37,"health"],[212,100,263,43],[212,103,263,46,"newState"],[212,111,263,54],[212,112,263,55,"playerStats"],[212,123,263,66],[212,124,263,67,"maxHealth"],[212,133,263,76],[212,136,263,79],[212,137,263,80],[213,16,264,14,"newHealth"],[213,25,264,23],[213,28,264,26,"Math"],[213,32,264,30],[213,33,264,31,"floor"],[213,38,264,36],[213,39,264,37,"effectiveStats"],[213,53,264,51],[213,54,264,52,"maxHealth"],[213,63,264,61],[213,66,264,64,"healthRatio"],[213,77,264,75],[213,78,264,76],[214,14,265,12],[214,15,265,13],[214,21,265,19],[214,25,265,23,"newState"],[214,33,265,31],[214,34,265,32,"playerStats"],[214,45,265,43],[214,46,265,44,"health"],[214,52,265,50],[214,55,265,53,"effectiveStats"],[214,69,265,67],[214,70,265,68,"maxHealth"],[214,79,265,77],[214,81,265,79],[215,16,266,14],[216,16,267,14,"newHealth"],[216,25,267,23],[216,28,267,26,"effectiveStats"],[216,42,267,40],[216,43,267,41,"maxHealth"],[216,52,267,50],[217,14,268,12],[218,14,269,12],[219,12,270,10],[220,12,272,10,"newState"],[220,20,272,18],[220,21,272,19,"playerStats"],[220,32,272,30],[220,35,272,33],[221,14,273,12],[221,17,273,15,"newState"],[221,25,273,23],[221,26,273,24,"playerStats"],[221,37,273,35],[222,14,274,12,"attack"],[222,20,274,18],[222,22,274,20,"effectiveStats"],[222,36,274,34],[222,37,274,35,"attack"],[222,43,274,41],[223,14,275,12,"defense"],[223,21,275,19],[223,23,275,21,"effectiveStats"],[223,37,275,35],[223,38,275,36,"defense"],[223,45,275,43],[224,14,276,12,"maxHealth"],[224,23,276,21],[224,25,276,23,"effectiveStats"],[224,39,276,37],[224,40,276,38,"maxHealth"],[224,49,276,47],[225,14,276,49],[226,14,277,12,"health"],[226,20,277,18],[226,22,277,20,"newHealth"],[226,31,277,29],[227,14,277,31],[228,14,278,12,"critChance"],[228,24,278,22],[228,26,278,24,"effectiveStats"],[228,40,278,38],[228,41,278,39,"critChance"],[228,51,278,49],[228,55,278,53,"newState"],[228,63,278,61],[228,64,278,62,"playerStats"],[228,75,278,73],[228,76,278,74,"critChance"],[228,86,278,84],[229,14,279,12,"critDamage"],[229,24,279,22],[229,26,279,24,"effectiveStats"],[229,40,279,38],[229,41,279,39,"critDamage"],[229,51,279,49],[229,55,279,53,"newState"],[229,63,279,61],[229,64,279,62,"playerStats"],[229,75,279,73],[229,76,279,74,"critDamage"],[229,86,279,84],[230,14,280,12,"cooldownReduction"],[230,31,280,29],[230,33,280,31,"effectiveStats"],[230,47,280,45],[230,48,280,46,"cooldownReduction"],[230,65,280,63],[230,69,280,67,"newState"],[230,77,280,75],[230,78,280,76,"playerStats"],[230,89,280,87],[230,90,280,88,"cooldownReduction"],[231,12,281,10],[231,13,281,11],[232,10,282,8],[234,10,284,8],[235,10,285,8],[235,14,285,12,"game"],[235,18,285,16],[235,19,285,17,"gameState"],[235,28,285,26],[235,29,285,27,"isAlive"],[235,36,285,34],[235,40,286,12,"game"],[235,44,286,16],[235,45,286,17,"gameState"],[235,54,286,26],[235,55,286,27,"ninja"],[235,60,286,32],[235,61,286,33,"health"],[235,67,286,39],[235,72,286,44,"effectiveStats"],[235,86,286,58],[235,87,286,59,"maxHealth"],[235,96,286,68],[235,100,287,12,"newState"],[235,108,287,20],[235,109,287,21,"playerStats"],[235,120,287,32],[235,121,287,33,"health"],[235,127,287,39],[235,130,287,42,"effectiveStats"],[235,144,287,56],[235,145,287,57,"maxHealth"],[235,154,287,66],[235,157,287,69],[235,160,287,72],[235,162,287,74],[236,12,288,10,"console"],[236,19,288,17],[236,20,288,18,"log"],[236,23,288,21],[236,24,288,22],[236,58,288,56,"newState"],[236,66,288,64],[236,67,288,65,"playerStats"],[236,78,288,76],[236,79,288,77,"health"],[236,85,288,83],[236,91,288,89,"game"],[236,95,288,93],[236,96,288,94,"gameState"],[236,105,288,103],[236,106,288,104,"ninja"],[236,111,288,109],[236,112,288,110,"health"],[236,118,288,116],[236,139,288,137],[236,140,288,138],[237,12,289,10,"newState"],[237,20,289,18],[237,21,289,19,"playerStats"],[237,32,289,30],[237,33,289,31,"health"],[237,39,289,37],[237,42,289,40,"game"],[237,46,289,44],[237,47,289,45,"gameState"],[237,56,289,54],[237,57,289,55,"ninja"],[237,62,289,60],[237,63,289,61,"health"],[237,69,289,67],[238,10,290,8],[239,8,291,6],[241,8,293,6],[242,8,294,6,"newState"],[242,16,294,14],[242,17,294,15,"enemies"],[242,24,294,22],[242,25,294,23,"forEach"],[242,32,294,30],[242,33,294,31,"enemy"],[242,38,294,36],[242,42,294,40],[243,10,295,8],[243,14,295,12],[243,15,295,13,"enemy"],[243,20,295,18],[243,21,295,19,"isBoss"],[243,27,295,25],[243,29,295,27],[244,12,295,29],[245,12,296,10],[246,12,297,10],[246,18,297,16,"MOVEMENT_SPEED"],[246,32,297,30],[246,35,297,33],[246,39,297,37],[246,40,297,38],[246,41,297,39],[247,12,298,10],[247,18,298,16,"SCREEN_WIDTH"],[247,30,298,28],[247,33,298,31],[247,36,298,34],[248,12,299,10],[248,18,299,16,"GAME_AREA_HEIGHT"],[248,34,299,32],[248,37,299,35],[248,40,299,38],[248,41,299,39],[248,42,299,40],[249,12,300,10],[249,18,300,16,"ENEMY_SIZE"],[249,28,300,26],[249,31,300,29],[249,33,300,31],[251,12,302,10],[252,12,303,10],[252,18,303,16,"playerX"],[252,25,303,23],[252,28,303,26,"currentNinjaPosition"],[252,48,303,46],[252,49,303,47,"x"],[252,50,303,48],[253,12,304,10],[253,18,304,16,"playerY"],[253,25,304,23],[253,28,304,26,"currentNinjaPosition"],[253,48,304,46],[253,49,304,47,"y"],[253,50,304,48],[255,12,306,10],[256,12,307,10],[256,18,307,16,"deltaX"],[256,24,307,22],[256,27,307,25,"playerX"],[256,34,307,32],[256,37,307,35,"enemy"],[256,42,307,40],[256,43,307,41,"position"],[256,51,307,49],[256,52,307,50,"x"],[256,53,307,51],[257,12,308,10],[257,18,308,16,"deltaY"],[257,24,308,22],[257,27,308,25,"playerY"],[257,34,308,32],[257,37,308,35,"enemy"],[257,42,308,40],[257,43,308,41,"position"],[257,51,308,49],[257,52,308,50,"y"],[257,53,308,51],[258,12,309,10],[258,18,309,16,"distance"],[258,26,309,24],[258,29,309,27,"Math"],[258,33,309,31],[258,34,309,32,"sqrt"],[258,38,309,36],[258,39,309,37,"deltaX"],[258,45,309,43],[258,48,309,46,"deltaX"],[258,54,309,52],[258,57,309,55,"deltaY"],[258,63,309,61],[258,66,309,64,"deltaY"],[258,72,309,70],[258,73,309,71],[260,12,311,10],[261,12,312,10],[261,18,312,16,"ATTACK_RANGE"],[261,30,312,28],[261,33,312,31],[261,35,312,33],[261,36,312,34],[261,37,312,35],[262,12,313,10],[262,18,313,16,"ATTACK_COOLDOWN"],[262,33,313,31],[262,36,313,34],[262,38,313,36],[262,39,313,37],[262,40,313,38],[264,12,315,10],[264,16,315,14,"distance"],[264,24,315,22],[264,28,315,26,"ATTACK_RANGE"],[264,40,315,38],[264,42,315,40],[265,14,316,12],[266,14,317,12],[266,18,317,16],[266,19,317,17,"enemy"],[266,24,317,22],[266,25,317,23,"lastAttackTick"],[266,39,317,37],[266,41,317,39,"enemy"],[266,46,317,44],[266,47,317,45,"lastAttackTick"],[266,61,317,59],[266,64,317,62],[266,65,317,63],[267,14,319,12],[267,18,319,16,"newState"],[267,26,319,24],[267,27,319,25,"currentTick"],[267,38,319,36],[267,41,319,39,"enemy"],[267,46,319,44],[267,47,319,45,"lastAttackTick"],[267,61,319,59],[267,65,319,63,"ATTACK_COOLDOWN"],[267,80,319,78],[267,82,319,80],[268,16,320,14],[269,16,321,14],[269,20,321,18],[269,21,321,19,"game"],[269,25,321,23],[269,26,321,24,"gameState"],[269,35,321,33],[269,36,321,34,"isAlive"],[269,43,321,41],[269,45,321,43],[270,18,322,16,"console"],[270,25,322,23],[270,26,322,24,"log"],[270,29,322,27],[270,30,322,28],[270,49,322,47,"enemy"],[270,54,322,52],[270,55,322,53,"name"],[270,59,322,57],[270,93,322,91],[270,94,322,92],[271,18,323,16],[272,18,324,16,"enemy"],[272,23,324,21],[272,24,324,22,"lastAttackTick"],[272,38,324,36],[272,41,324,39,"newState"],[272,49,324,47],[272,50,324,48,"currentTick"],[272,61,324,59],[273,16,325,14],[273,17,325,15],[273,23,325,21],[274,18,326,16],[275,18,327,16],[275,24,327,22,"isPlayerInvincible"],[275,42,327,40],[275,45,327,43,"game"],[275,49,327,47],[275,50,327,48,"gameState"],[275,59,327,57],[275,60,327,58,"isInvincible"],[275,72,327,70],[275,76,328,41,"game"],[275,80,328,45],[275,81,328,46,"gameState"],[275,90,328,55],[275,91,328,56,"invincibilityEndTime"],[275,111,328,76],[275,115,329,41,"Date"],[275,119,329,45],[275,120,329,46,"now"],[275,123,329,49],[275,124,329,50],[275,125,329,51],[275,128,329,54,"game"],[275,132,329,58],[275,133,329,59,"gameState"],[275,142,329,68],[275,143,329,69,"invincibilityEndTime"],[275,163,329,89],[276,18,331,16],[276,22,331,20,"isPlayerInvincible"],[276,40,331,38],[276,42,331,40],[277,20,332,18,"console"],[277,27,332,25],[277,28,332,26,"log"],[277,31,332,29],[277,32,332,30],[277,51,332,49,"enemy"],[277,56,332,54],[277,57,332,55,"name"],[277,61,332,59],[277,101,332,99],[277,102,332,100],[278,20,333,18],[279,20,334,18,"enemy"],[279,25,334,23],[279,26,334,24,"lastAttackTick"],[279,40,334,38],[279,43,334,41,"newState"],[279,51,334,49],[279,52,334,50,"currentTick"],[279,63,334,61],[280,18,335,16],[280,19,335,17],[280,25,335,23],[281,20,336,16],[282,20,337,16],[282,26,337,22,"baseAttack"],[282,36,337,32],[282,39,337,35,"enemy"],[282,44,337,40],[282,45,337,41,"stats"],[282,50,337,46],[282,51,337,47,"attack"],[282,57,337,53],[282,60,337,56],[282,63,337,59],[282,64,337,60],[282,65,337,61],[283,20,338,16],[283,26,338,22,"attackDamage"],[283,38,338,34],[283,41,338,37,"Math"],[283,45,338,41],[283,46,338,42,"floor"],[283,51,338,47],[283,52,338,48,"baseAttack"],[283,62,338,58],[283,66,338,62],[283,69,338,65],[283,72,338,68,"Math"],[283,76,338,72],[283,77,338,73,"random"],[283,83,338,79],[283,84,338,80],[283,85,338,81],[283,88,338,84],[283,91,338,87],[283,92,338,88],[283,93,338,89],[283,94,338,90],[283,95,338,91],[284,20,339,16],[284,26,339,22,"playerDefense"],[284,39,339,35],[284,42,339,38,"newState"],[284,50,339,46],[284,51,339,47,"playerStats"],[284,62,339,58],[284,63,339,59,"defense"],[284,70,339,66],[285,20,340,16],[285,26,340,22,"finalDamage"],[285,37,340,33],[285,40,340,36,"Math"],[285,44,340,40],[285,45,340,41,"max"],[285,48,340,44],[285,49,340,45],[285,50,340,46],[285,52,340,48,"attackDamage"],[285,64,340,60],[285,67,340,63,"Math"],[285,71,340,67],[285,72,340,68,"floor"],[285,77,340,73],[285,78,340,74,"playerDefense"],[285,91,340,87],[285,94,340,90],[285,97,340,93],[285,98,340,94],[285,99,340,95],[285,100,340,96],[285,101,340,97],[287,20,342,16,"console"],[287,27,342,23],[287,28,342,24,"log"],[287,31,342,27],[287,32,342,28],[287,53,342,49,"enemy"],[287,58,342,54],[287,59,342,55,"name"],[287,63,342,59],[287,86,342,82,"finalDamage"],[287,97,342,93],[287,109,342,105,"attackDamage"],[287,121,342,117],[287,132,342,128,"Math"],[287,136,342,132],[287,137,342,133,"floor"],[287,142,342,138],[287,143,342,139,"playerDefense"],[287,156,342,152],[287,159,342,155],[287,162,342,158],[287,163,342,159],[287,184,342,180],[287,185,342,181],[289,20,344,16],[290,20,345,16],[290,26,345,22,"newPlayerHealth"],[290,41,345,37],[290,44,345,40,"Math"],[290,48,345,44],[290,49,345,45,"max"],[290,52,345,48],[290,53,345,49],[290,54,345,50],[290,56,345,52,"newState"],[290,64,345,60],[290,65,345,61,"playerStats"],[290,76,345,72],[290,77,345,73,"health"],[290,83,345,79],[290,86,345,82,"finalDamage"],[290,97,345,93],[290,98,345,94],[291,20,346,16,"newState"],[291,28,346,24],[291,29,346,25,"playerStats"],[291,40,346,36],[291,41,346,37,"health"],[291,47,346,43],[291,50,346,46,"newPlayerHealth"],[291,65,346,61],[292,20,348,16,"console"],[292,27,348,23],[292,28,348,24,"log"],[292,31,348,27],[292,32,348,28],[292,53,348,49,"newState"],[292,61,348,57],[292,62,348,58,"playerStats"],[292,73,348,69],[292,74,348,70,"health"],[292,80,348,76],[292,84,348,80,"newState"],[292,92,348,88],[292,93,348,89,"playerStats"],[292,104,348,100],[292,105,348,101,"maxHealth"],[292,114,348,110],[292,124,348,120,"finalDamage"],[292,135,348,131],[292,145,348,141],[292,146,348,142],[294,20,350,16],[295,20,351,16,"enemy"],[295,25,351,21],[295,26,351,22,"lastAttackTick"],[295,40,351,36],[295,43,351,39,"newState"],[295,51,351,47],[295,52,351,48,"currentTick"],[295,63,351,59],[297,20,353,16],[298,20,354,16],[298,24,354,20,"newPlayerHealth"],[298,39,354,35],[298,43,354,39],[298,44,354,40],[298,46,354,42],[299,22,355,18,"console"],[299,29,355,25],[299,30,355,26,"log"],[299,33,355,29],[299,34,355,30],[299,84,355,80],[299,85,355,81],[300,22,356,18],[301,22,357,18,"game"],[301,26,357,22],[301,27,357,23,"updateGameState"],[301,42,357,38],[301,43,357,39],[302,24,357,41,"isAlive"],[302,31,357,48],[302,33,357,50],[303,22,357,56],[303,23,357,57],[303,24,357,58],[304,20,358,16],[305,18,359,16],[306,16,360,14],[307,14,361,12],[308,12,362,10],[308,13,362,11],[308,19,362,17],[309,14,363,12],[310,14,364,12],[311,14,365,12],[311,18,365,16,"distance"],[311,26,365,24],[311,29,365,27],[311,31,365,29],[311,33,365,31],[312,16,366,14],[313,16,367,14],[313,22,367,20,"normalizedX"],[313,33,367,31],[313,36,367,34,"deltaX"],[313,42,367,40],[313,45,367,43,"distance"],[313,53,367,51],[314,16,368,14],[314,22,368,20,"normalizedY"],[314,33,368,31],[314,36,368,34,"deltaY"],[314,42,368,40],[314,45,368,43,"distance"],[314,53,368,51],[316,16,370,14],[317,16,371,14],[317,22,371,20,"randomFactor"],[317,34,371,32],[317,37,371,35],[317,40,371,38],[317,41,371,39],[317,42,371,40],[318,16,372,14],[318,22,372,20,"finalX"],[318,28,372,26],[318,31,372,29,"normalizedX"],[318,42,372,40],[318,45,372,43],[318,46,372,44,"Math"],[318,50,372,48],[318,51,372,49,"random"],[318,57,372,55],[318,58,372,56],[318,59,372,57],[318,62,372,60],[318,65,372,63],[318,69,372,67,"randomFactor"],[318,81,372,79],[319,16,373,14],[319,22,373,20,"finalY"],[319,28,373,26],[319,31,373,29,"normalizedY"],[319,42,373,40],[319,45,373,43],[319,46,373,44,"Math"],[319,50,373,48],[319,51,373,49,"random"],[319,57,373,55],[319,58,373,56],[319,59,373,57],[319,62,373,60],[319,65,373,63],[319,69,373,67,"randomFactor"],[319,81,373,79],[321,16,375,14],[322,16,376,14],[322,20,376,18,"newX"],[322,24,376,22],[322,27,376,25,"enemy"],[322,32,376,30],[322,33,376,31,"position"],[322,41,376,39],[322,42,376,40,"x"],[322,43,376,41],[322,46,376,45,"finalX"],[322,52,376,51],[322,55,376,54,"MOVEMENT_SPEED"],[322,69,376,69],[323,16,377,14],[323,20,377,18,"newY"],[323,24,377,22],[323,27,377,25,"enemy"],[323,32,377,30],[323,33,377,31,"position"],[323,41,377,39],[323,42,377,40,"y"],[323,43,377,41],[323,46,377,45,"finalY"],[323,52,377,51],[323,55,377,54,"MOVEMENT_SPEED"],[323,69,377,69],[325,16,379,14],[326,16,380,14,"newX"],[326,20,380,18],[326,23,380,21,"Math"],[326,27,380,25],[326,28,380,26,"max"],[326,31,380,29],[326,32,380,30],[326,33,380,31],[326,35,380,33,"Math"],[326,39,380,37],[326,40,380,38,"min"],[326,43,380,41],[326,44,380,42,"SCREEN_WIDTH"],[326,56,380,54],[326,59,380,57,"ENEMY_SIZE"],[326,69,380,67],[326,71,380,69,"newX"],[326,75,380,73],[326,76,380,74],[326,77,380,75],[327,16,381,14,"newY"],[327,20,381,18],[327,23,381,21,"Math"],[327,27,381,25],[327,28,381,26,"max"],[327,31,381,29],[327,32,381,30],[327,33,381,31],[327,35,381,33,"Math"],[327,39,381,37],[327,40,381,38,"min"],[327,43,381,41],[327,44,381,42,"GAME_AREA_HEIGHT"],[327,60,381,58],[327,63,381,61,"ENEMY_SIZE"],[327,73,381,71],[327,75,381,73,"newY"],[327,79,381,77],[327,80,381,78],[327,81,381,79],[329,16,383,14],[330,16,384,14,"enemy"],[330,21,384,19],[330,22,384,20,"position"],[330,30,384,28],[330,31,384,29,"x"],[330,32,384,30],[330,35,384,33,"newX"],[330,39,384,37],[331,16,385,14,"enemy"],[331,21,385,19],[331,22,385,20,"position"],[331,30,385,28],[331,31,385,29,"y"],[331,32,385,30],[331,35,385,33,"newY"],[331,39,385,37],[332,14,386,12],[333,14,387,12],[334,12,388,10],[335,10,389,8],[336,8,390,6],[336,9,390,7],[336,10,390,8],[338,8,392,6],[339,8,393,6],[339,12,393,10,"newState"],[339,20,393,18],[339,21,393,19,"shadowClone"],[339,32,393,30],[339,34,393,32],[340,10,394,8],[341,10,395,8,"newState"],[341,18,395,16],[341,19,395,17,"shadowClone"],[341,30,395,28],[341,31,395,29,"remainingTicks"],[341,45,395,43],[341,47,395,45],[343,10,397,8],[344,10,398,8],[344,16,398,14,"cloneOffset"],[344,27,398,25],[344,30,398,28],[344,32,398,30],[344,33,398,31],[344,34,398,32],[345,10,399,8,"newState"],[345,18,399,16],[345,19,399,17,"shadowClone"],[345,30,399,28],[345,31,399,29,"position"],[345,39,399,37],[345,40,399,38,"x"],[345,41,399,39],[345,44,399,42,"currentNinjaPosition"],[345,64,399,62],[345,65,399,63,"x"],[345,66,399,64],[345,69,399,67,"cloneOffset"],[345,80,399,78],[346,10,400,8,"newState"],[346,18,400,16],[346,19,400,17,"shadowClone"],[346,30,400,28],[346,31,400,29,"position"],[346,39,400,37],[346,40,400,38,"y"],[346,41,400,39],[346,44,400,42,"currentNinjaPosition"],[346,64,400,62],[346,65,400,63,"y"],[346,66,400,64],[346,69,400,67],[346,71,400,69],[348,10,402,8],[349,10,403,8],[349,14,403,12,"newState"],[349,22,403,20],[349,23,403,21,"shadowClone"],[349,34,403,32],[349,35,403,33,"remainingTicks"],[349,49,403,47],[349,53,403,51],[349,54,403,52],[349,56,403,54],[350,12,404,10,"console"],[350,19,404,17],[350,20,404,18,"log"],[350,23,404,21],[350,24,404,22],[350,75,404,73],[350,76,404,74],[351,12,405,10,"newState"],[351,20,405,18],[351,21,405,19,"shadowClone"],[351,32,405,30],[351,35,405,33,"undefined"],[351,44,405,42],[352,10,406,8],[352,11,406,9],[352,17,406,15],[353,12,407,10],[354,12,408,10],[355,12,409,10],[355,18,409,16,"CLONE_ATTACK_INTERVAL"],[355,39,409,37],[355,42,409,40],[355,44,409,42],[356,12,410,10],[356,16,410,14,"newState"],[356,24,410,22],[356,25,410,23,"currentTick"],[356,36,410,34],[356,39,410,37,"CLONE_ATTACK_INTERVAL"],[356,60,410,58],[356,65,410,63],[356,66,410,64],[356,70,410,68,"newState"],[356,78,410,76],[356,79,410,77,"enemies"],[356,86,410,84],[356,87,410,85,"length"],[356,93,410,91],[356,96,410,94],[356,97,410,95],[356,99,410,97],[357,14,411,12,"console"],[357,21,411,19],[357,22,411,20,"log"],[357,25,411,23],[357,26,411,24],[357,83,411,81],[357,84,411,82],[359,14,413,12],[360,14,414,12],[360,20,414,18,"target"],[360,26,414,24],[360,29,414,27,"findClosestEnemyInternal"],[360,53,414,51],[360,54,414,52,"newState"],[360,62,414,60],[360,63,414,61,"enemies"],[360,70,414,68],[360,71,414,69],[361,14,415,12],[361,18,415,16,"target"],[361,24,415,22],[361,26,415,24],[362,16,416,14],[363,16,417,14],[363,22,417,20,"cloneDamage"],[363,33,417,31],[363,36,417,34,"Math"],[363,40,417,38],[363,41,417,39,"floor"],[363,46,417,44],[363,47,417,45,"newState"],[363,55,417,53],[363,56,417,54,"playerStats"],[363,67,417,65],[363,68,417,66,"attack"],[363,74,417,72],[363,77,417,75],[363,80,417,78],[363,81,417,79],[365,16,419,14],[366,16,420,14,"createProjectile"],[366,32,420,30],[366,33,420,31,"target"],[366,39,420,37],[366,41,420,39,"cloneDamage"],[366,52,420,50],[366,54,420,52,"newState"],[366,62,420,60],[366,63,420,61,"shadowClone"],[366,74,420,72],[366,75,420,73,"position"],[366,83,420,81],[366,85,420,83],[367,18,421,16,"id"],[367,20,421,18],[367,22,421,20],[367,43,421,41],[368,18,422,16,"name"],[368,22,422,20],[368,24,422,22],[368,45,422,43],[369,18,423,16,"icon"],[369,22,423,20],[369,24,423,22],[370,16,424,14],[370,17,424,15],[370,18,424,16],[371,14,425,12],[372,12,426,10],[373,10,427,8],[374,8,428,6],[376,8,430,6],[377,8,431,6],[378,8,432,6,"console"],[378,15,432,13],[378,16,432,14,"log"],[378,19,432,17],[378,20,432,18],[378,63,432,61,"isManualControlActive"],[378,84,432,82],[378,97,432,95,"game"],[378,101,432,99],[378,102,432,100,"gameState"],[378,111,432,109],[378,112,432,110,"isAlive"],[378,119,432,117],[378,121,432,119],[378,122,432,120],[379,8,433,6],[379,12,433,10],[379,13,433,11,"isManualControlActive"],[379,34,433,32],[379,38,433,36,"game"],[379,42,433,40],[379,43,433,41,"gameState"],[379,52,433,50],[379,53,433,51,"isAlive"],[379,60,433,58],[379,62,433,60],[380,10,434,8],[380,15,434,13],[380,19,434,17,"i"],[380,20,434,18],[380,23,434,21],[380,24,434,22],[380,26,434,24,"i"],[380,27,434,25],[380,30,434,28],[380,31,434,29],[380,33,434,31,"i"],[380,34,434,32],[380,36,434,34],[380,38,434,36],[381,12,435,10],[381,16,435,14,"newState"],[381,24,435,22],[381,25,435,23,"abilityManager"],[381,39,435,37],[381,40,435,38,"isAbilityReady"],[381,54,435,52],[381,55,435,53,"i"],[381,56,435,54],[381,57,435,55],[381,61,435,59,"newState"],[381,69,435,67],[381,70,435,68,"enemies"],[381,77,435,75],[381,78,435,76,"length"],[381,84,435,82],[381,87,435,85],[381,88,435,86],[381,90,435,88],[382,14,436,12],[382,18,436,16,"newState"],[382,26,436,24],[382,27,436,25,"abilityManager"],[382,41,436,39],[382,42,436,40,"useAbility"],[382,52,436,50],[382,53,436,51,"i"],[382,54,436,52],[382,56,436,54,"newTick"],[382,63,436,61],[382,64,436,62],[382,66,436,64],[383,16,437,14,"console"],[383,23,437,21],[383,24,437,22,"log"],[383,27,437,25],[383,28,437,26],[383,73,437,71,"i"],[383,74,437,72],[383,76,437,74],[383,77,437,75],[384,16,438,14,"castAbility"],[384,27,438,25],[384,28,438,26,"newState"],[384,36,438,34],[384,38,438,36,"i"],[384,39,438,37],[384,40,438,38],[385,14,439,12],[386,12,440,10],[387,10,441,8],[388,8,442,6],[390,8,444,6],[391,8,445,6],[392,8,446,6],[392,14,446,12,"allDeadEnemies"],[392,28,446,26],[392,31,446,29,"newState"],[392,39,446,37],[392,40,446,38,"enemies"],[392,47,446,45],[392,48,446,46,"filter"],[392,54,446,52],[392,55,446,53,"enemy"],[392,60,446,58],[392,64,446,62,"enemy"],[392,69,446,67],[392,70,446,68,"health"],[392,76,446,74],[392,80,446,78],[392,81,446,79],[392,82,446,80],[394,8,448,6],[395,8,449,6,"deadEnemiesRef"],[395,22,449,20],[395,23,449,21,"current"],[395,30,449,28],[395,33,449,31],[395,34,449,32],[395,37,449,35,"allDeadEnemies"],[395,51,449,49],[395,52,449,50],[395,53,449,51],[395,54,449,52],[397,8,451,6],[398,8,452,6],[398,12,452,10,"allDeadEnemies"],[398,26,452,24],[398,27,452,25,"length"],[398,33,452,31],[398,36,452,34],[398,37,452,35],[398,39,452,37],[399,10,453,8,"console"],[399,17,453,15],[399,18,453,16,"log"],[399,21,453,19],[399,22,453,20],[399,34,453,32,"allDeadEnemies"],[399,48,453,46],[399,49,453,47,"length"],[399,55,453,53],[399,83,453,81],[399,85,453,83,"allDeadEnemies"],[399,99,453,97],[399,100,453,98,"map"],[399,103,453,101],[399,104,453,102,"e"],[399,105,453,103],[399,109,453,107],[399,112,453,110,"e"],[399,113,453,111],[399,114,453,112,"name"],[399,118,453,116],[399,122,453,120,"e"],[399,123,453,121],[399,124,453,122,"health"],[399,130,453,128],[399,145,453,143,"e"],[399,146,453,144],[399,147,453,145,"isDying"],[399,154,453,152],[399,157,453,155],[399,158,453,156],[399,159,453,157],[400,8,454,6],[402,8,456,6],[403,8,457,6],[403,14,457,12,"currentTime"],[403,25,457,23],[403,28,457,26,"Date"],[403,32,457,30],[403,33,457,31,"now"],[403,36,457,34],[403,37,457,35],[403,38,457,36],[404,8,458,6,"newState"],[404,16,458,14],[404,17,458,15,"enemies"],[404,24,458,22],[404,27,458,25,"newState"],[404,35,458,33],[404,36,458,34,"enemies"],[404,43,458,41],[404,44,458,42,"filter"],[404,50,458,48],[404,51,458,49,"enemy"],[404,56,458,54],[404,60,458,58],[405,10,459,8],[405,14,459,12,"enemy"],[405,19,459,17],[405,20,459,18,"isDying"],[405,27,459,25],[405,31,459,29,"enemy"],[405,36,459,34],[405,37,459,35,"deathStartTime"],[405,51,459,49],[405,53,459,51],[406,12,460,10],[406,18,460,16,"animationDuration"],[406,35,460,33],[406,38,460,36],[406,41,460,39],[406,42,460,40],[406,43,460,41],[407,12,461,10],[407,18,461,16,"isAnimationComplete"],[407,37,461,35],[407,40,461,38,"currentTime"],[407,51,461,49],[407,54,461,52,"enemy"],[407,59,461,57],[407,60,461,58,"deathStartTime"],[407,74,461,72],[407,78,461,76,"animationDuration"],[407,95,461,93],[408,12,462,10],[408,16,462,14,"isAnimationComplete"],[408,35,462,33],[408,37,462,35],[409,14,463,12,"console"],[409,21,463,19],[409,22,463,20,"log"],[409,25,463,23],[409,26,463,24],[409,58,463,56,"enemy"],[409,63,463,61],[409,64,463,62,"name"],[409,68,463,66],[409,86,463,84,"currentTime"],[409,97,463,95],[409,100,463,98,"enemy"],[409,105,463,103],[409,106,463,104,"deathStartTime"],[409,120,463,118],[409,129,463,127],[409,130,463,128],[410,14,464,12],[410,21,464,19],[410,26,464,24],[410,27,464,25],[410,28,464,26],[411,12,465,10],[412,10,466,8],[413,10,467,8],[413,17,467,15],[413,21,467,19],[413,22,467,20],[413,23,467,21],[414,8,468,6],[414,9,468,7],[414,10,468,8],[416,8,470,6],[417,8,471,6],[417,12,471,10,"allDeadEnemies"],[417,26,471,24],[417,27,471,25,"length"],[417,33,471,31],[417,36,471,34],[417,37,471,35],[417,39,471,37],[418,10,472,8,"console"],[418,17,472,15],[418,18,472,16,"log"],[418,21,472,19],[418,22,472,20],[418,49,472,47,"allDeadEnemies"],[418,63,472,61],[418,64,472,62,"length"],[418,70,472,68],[418,86,472,84],[418,88,472,86,"allDeadEnemies"],[418,102,472,100],[418,103,472,101,"map"],[418,106,472,104],[418,107,472,105,"e"],[418,108,472,106],[418,112,472,110],[418,115,472,113,"e"],[418,116,472,114],[418,117,472,115,"id"],[418,119,472,117],[418,123,472,121,"e"],[418,124,472,122],[418,125,472,123,"health"],[418,131,472,129],[418,136,472,134],[418,137,472,135],[418,138,472,136],[419,8,473,6],[421,8,475,6],[422,8,476,6],[422,14,476,12,"lowHealthEnemies"],[422,30,476,28],[422,33,476,31,"newState"],[422,41,476,39],[422,42,476,40,"enemies"],[422,49,476,47],[422,50,476,48,"filter"],[422,56,476,54],[422,57,476,55,"enemy"],[422,62,476,60],[422,66,476,64,"enemy"],[422,71,476,69],[422,72,476,70,"health"],[422,78,476,76],[422,82,476,80],[422,84,476,82],[422,88,476,86,"enemy"],[422,93,476,91],[422,94,476,92,"health"],[422,100,476,98],[422,103,476,101],[422,104,476,102],[422,105,476,103],[423,8,477,6],[423,12,477,10,"lowHealthEnemies"],[423,28,477,26],[423,29,477,27,"length"],[423,35,477,33],[423,38,477,36],[423,39,477,37],[423,41,477,39],[424,10,478,8,"console"],[424,17,478,15],[424,18,478,16,"log"],[424,21,478,19],[424,22,478,20],[424,61,478,59],[424,63,478,61,"lowHealthEnemies"],[424,79,478,77],[424,80,478,78,"map"],[424,83,478,81],[424,84,478,82,"e"],[424,85,478,83],[424,89,478,87],[424,92,478,90,"e"],[424,93,478,91],[424,94,478,92,"id"],[424,96,478,94],[424,100,478,98,"e"],[424,101,478,99],[424,102,478,100,"health"],[424,108,478,106],[424,112,478,110,"e"],[424,113,478,111],[424,114,478,112,"maxHealth"],[424,123,478,121],[424,128,478,126],[424,129,478,127],[424,130,478,128],[425,8,479,6],[427,8,481,6],[428,8,482,6],[428,14,482,12,"beforeCount"],[428,25,482,23],[428,28,482,26,"newState"],[428,36,482,34],[428,37,482,35,"enemies"],[428,44,482,42],[428,45,482,43,"length"],[428,51,482,49],[429,8,483,6,"newState"],[429,16,483,14],[429,17,483,15,"enemies"],[429,24,483,22],[429,27,483,25,"newState"],[429,35,483,33],[429,36,483,34,"enemies"],[429,43,483,41],[429,44,483,42,"filter"],[429,50,483,48],[429,51,483,49,"enemy"],[429,56,483,54],[429,60,483,58,"enemy"],[429,65,483,63],[429,66,483,64,"health"],[429,72,483,70],[429,75,483,73],[429,76,483,74],[429,77,483,75],[430,8,484,6],[430,14,484,12,"afterCount"],[430,24,484,22],[430,27,484,25,"newState"],[430,35,484,33],[430,36,484,34,"enemies"],[430,43,484,41],[430,44,484,42,"length"],[430,50,484,48],[431,8,486,6],[431,12,486,10,"beforeCount"],[431,23,486,21],[431,28,486,26,"afterCount"],[431,38,486,36],[431,40,486,38],[432,10,487,8,"console"],[432,17,487,15],[432,18,487,16,"log"],[432,21,487,19],[432,22,487,20],[432,52,487,50,"beforeCount"],[432,63,487,61],[432,66,487,64,"afterCount"],[432,76,487,74],[432,102,487,100],[432,103,487,101],[433,8,488,6],[435,8,490,6],[436,8,491,6],[437,8,492,6],[437,14,492,12,"MAX_ENEMIES"],[437,25,492,23],[437,28,492,26],[437,30,492,28],[437,31,492,29],[437,32,492,30],[438,8,493,6],[438,14,493,12,"MIN_SPAWN_DELAY"],[438,29,493,27],[438,32,493,30],[438,35,493,33],[438,36,493,34],[438,37,493,35],[439,8,494,6],[439,14,494,12,"now"],[439,17,494,15],[439,20,494,18,"Date"],[439,24,494,22],[439,25,494,23,"now"],[439,28,494,26],[439,29,494,27],[439,30,494,28],[440,8,495,6],[440,14,495,12,"hasBoss"],[440,21,495,19],[440,24,495,22,"newState"],[440,32,495,30],[440,33,495,31,"enemies"],[440,40,495,38],[440,41,495,39,"some"],[440,45,495,43],[440,46,495,44,"enemy"],[440,51,495,49],[440,55,495,53,"enemy"],[440,60,495,58],[440,61,495,59,"isBoss"],[440,67,495,65],[440,68,495,66],[442,8,497,6],[443,8,498,6],[443,12,498,10],[443,13,498,11,"newState"],[443,21,498,19],[443,22,498,20,"lastSpawnTime"],[443,35,498,33],[443,37,498,35],[444,10,499,8,"newState"],[444,18,499,16],[444,19,499,17,"lastSpawnTime"],[444,32,499,30],[444,35,499,33,"now"],[444,38,499,36],[445,8,500,6],[446,8,502,6,"console"],[446,15,502,13],[446,16,502,14,"log"],[446,19,502,17],[446,20,502,18],[446,53,502,51,"newState"],[446,61,502,59],[446,62,502,60,"enemies"],[446,69,502,67],[446,70,502,68,"length"],[446,76,502,74],[446,85,502,83,"MAX_ENEMIES"],[446,96,502,94],[446,109,502,107,"hasBoss"],[446,116,502,114],[446,118,502,116],[446,119,502,117],[448,8,504,6],[449,8,505,6],[449,12,505,10],[449,13,505,11,"hasBoss"],[449,20,505,18],[449,24,505,22,"newState"],[449,32,505,30],[449,33,505,31,"enemies"],[449,40,505,38],[449,41,505,39,"length"],[449,47,505,45],[449,50,505,48,"MAX_ENEMIES"],[449,61,505,59],[449,65,505,64,"now"],[449,68,505,67],[449,71,505,70,"newState"],[449,79,505,78],[449,80,505,79,"lastSpawnTime"],[449,93,505,92],[449,97,505,97,"MIN_SPAWN_DELAY"],[449,112,505,112],[449,114,505,114],[450,10,506,8,"console"],[450,17,506,15],[450,18,506,16,"log"],[450,21,506,19],[450,22,506,20],[450,43,506,41,"newState"],[450,51,506,49],[450,52,506,50,"enemies"],[450,59,506,57],[450,60,506,58,"length"],[450,66,506,64],[450,69,506,67],[450,70,506,68],[450,74,506,72,"MAX_ENEMIES"],[450,85,506,83],[450,87,506,85],[450,88,506,86],[451,10,507,8,"spawnTestEnemy"],[451,24,507,22],[451,25,507,23,"newState"],[451,33,507,31],[451,34,507,32],[452,10,508,8,"newState"],[452,18,508,16],[452,19,508,17,"lastSpawnTime"],[452,32,508,30],[452,35,508,33,"now"],[452,38,508,36],[453,8,509,6],[454,8,511,6],[454,15,511,13,"newState"],[454,23,511,21],[455,6,512,4],[455,7,512,5],[455,47,512,6],[457,6,514,4],[458,6,515,4],[458,12,515,10,"deadEnemiesToProcess"],[458,32,515,30],[458,35,515,33,"deadEnemiesRef"],[458,49,515,47],[458,50,515,48,"current"],[458,57,515,55],[458,58,515,56],[458,59,515,57],[459,6,516,4],[459,10,516,8,"deadEnemiesToProcess"],[459,30,516,28],[459,31,516,29,"length"],[459,37,516,35],[459,40,516,38],[459,41,516,39],[459,43,516,41],[460,8,517,6],[461,8,518,6],[462,8,519,6],[462,14,519,12,"unprocessedEnemies"],[462,32,519,30],[462,35,519,33,"deadEnemiesToProcess"],[462,55,519,53],[462,56,519,54],[462,57,519,55],[464,8,521,6],[465,8,522,6,"console"],[465,15,522,13],[465,16,522,14,"log"],[465,19,522,17],[465,20,522,18],[465,69,522,67],[465,71,522,69,"deadEnemiesToProcess"],[465,91,522,89],[465,92,522,90,"map"],[465,95,522,93],[465,96,522,94,"e"],[465,97,522,95],[465,102,522,100],[466,10,522,101,"id"],[466,12,522,103],[466,14,522,105,"e"],[466,15,522,106],[466,16,522,107,"id"],[466,18,522,109],[467,10,522,111,"name"],[467,14,522,115],[467,16,522,117,"e"],[467,17,522,118],[467,18,522,119,"name"],[467,22,522,123],[468,10,522,125,"xpAwarded"],[468,19,522,134],[468,21,522,136,"e"],[468,22,522,137],[468,23,522,138,"xpAwarded"],[469,8,522,147],[469,9,522,148],[469,10,522,149],[469,11,522,150],[469,12,522,151],[470,8,523,6,"console"],[470,15,523,13],[470,16,523,14,"log"],[470,19,523,17],[470,20,523,18],[470,43,523,41,"deadEnemiesToProcess"],[470,63,523,61],[470,64,523,62,"length"],[470,70,523,68],[470,87,523,85,"unprocessedEnemies"],[470,105,523,103],[470,106,523,104,"length"],[470,112,523,110],[470,126,523,124],[470,127,523,125],[471,8,525,6],[471,12,525,10,"unprocessedEnemies"],[471,30,525,28],[471,31,525,29,"length"],[471,37,525,35],[471,40,525,38],[471,41,525,39],[471,43,525,41],[472,10,526,8],[473,10,527,8],[473,14,527,12,"totalXP"],[473,21,527,19],[473,24,527,22],[473,25,527,23],[474,10,528,8],[474,14,528,12,"totalGold"],[474,23,528,21],[474,26,528,24],[474,27,528,25],[475,10,529,8],[475,16,529,14,"zoneKills"],[475,25,529,30],[475,28,529,33],[475,30,529,35],[476,10,531,8],[476,16,531,14,"xpMultiplier"],[476,28,531,26],[476,31,531,29,"game"],[476,35,531,33],[476,36,531,34,"gameState"],[476,45,531,43],[476,46,531,44,"subscriptionBenefits"],[476,66,531,64],[476,68,531,66,"xp_multiplier"],[476,81,531,79],[476,85,531,83],[476,88,531,86],[477,10,532,8],[477,16,532,14,"goldMultiplier"],[477,30,532,28],[477,33,532,31,"game"],[477,37,532,35],[477,38,532,36,"gameState"],[477,47,532,45],[477,48,532,46,"subscriptionBenefits"],[477,68,532,66],[477,70,532,68,"drop_multiplier"],[477,85,532,83],[477,89,532,87],[477,92,532,90],[478,10,534,8,"unprocessedEnemies"],[478,28,534,26],[478,29,534,27,"forEach"],[478,36,534,34],[478,37,534,35,"enemy"],[478,42,534,40],[478,46,534,44],[479,12,535,10],[480,12,536,10,"totalXP"],[480,19,536,17],[480,23,536,21,"Math"],[480,27,536,25],[480,28,536,26,"round"],[480,33,536,31],[480,34,536,33],[480,35,536,34,"enemy"],[480,40,536,39],[480,41,536,40,"zoneXP"],[480,47,536,46],[480,51,536,50],[480,52,536,51],[480,56,536,55,"xpMultiplier"],[480,68,536,67],[480,71,536,71],[480,72,536,72],[480,73,536,73],[480,74,536,74],[480,75,536,75],[481,12,537,10,"totalGold"],[481,21,537,19],[481,25,537,23,"Math"],[481,29,537,27],[481,30,537,28,"round"],[481,35,537,33],[481,36,537,35],[481,38,537,37],[481,41,537,40,"goldMultiplier"],[481,55,537,54],[481,58,537,58],[481,61,537,61],[481,62,537,62],[481,63,537,63],[481,64,537,64],[483,12,539,10],[483,16,539,14,"enemy"],[483,21,539,19],[483,22,539,20,"zoneTypeId"],[483,32,539,30],[483,34,539,32],[484,14,540,12,"zoneKills"],[484,23,540,21],[484,24,540,22,"push"],[484,28,540,26],[484,29,540,27],[485,16,541,14,"id"],[485,18,541,16],[485,20,541,18,"enemy"],[485,25,541,23],[485,26,541,24,"id"],[485,28,541,26],[486,16,542,14,"typeId"],[486,22,542,20],[486,24,542,22,"enemy"],[486,29,542,27],[486,30,542,28,"zoneTypeId"],[486,40,542,38],[487,16,543,14,"name"],[487,20,543,18],[487,22,543,20,"enemy"],[487,27,543,25],[487,28,543,26,"name"],[487,32,543,30],[488,16,544,14,"icon"],[488,20,544,18],[488,22,544,20],[488,26,544,24],[489,16,545,14,"hp"],[489,18,545,16],[489,20,545,18],[489,21,545,19],[490,16,546,14,"maxHP"],[490,21,546,19],[490,23,546,21,"enemy"],[490,28,546,26],[490,29,546,27,"maxHealth"],[490,38,546,36],[491,16,547,14,"attack"],[491,22,547,20],[491,24,547,22,"enemy"],[491,29,547,27],[491,30,547,28,"stats"],[491,35,547,33],[491,36,547,34,"attack"],[491,42,547,40],[492,16,548,14,"xp"],[492,18,548,16],[492,20,548,18,"enemy"],[492,25,548,23],[492,26,548,24,"zoneXP"],[492,32,548,30],[492,36,548,34],[492,37,548,35],[493,16,549,14,"position"],[493,24,549,22],[493,26,549,24,"enemy"],[493,31,549,29],[493,32,549,30,"position"],[494,14,550,12],[494,15,550,13],[494,16,550,14],[495,12,551,10],[496,10,552,8],[496,11,552,9],[496,12,552,10],[498,10,554,8],[499,10,555,8,"game"],[499,14,555,12],[499,15,555,13,"updateNinja"],[499,26,555,24],[499,27,555,25,"prev"],[499,31,555,29],[499,36,555,34],[500,12,556,10,"experience"],[500,22,556,20],[500,24,556,22,"prev"],[500,28,556,26],[500,29,556,27,"experience"],[500,39,556,37],[500,42,556,40,"totalXP"],[500,49,556,47],[501,12,557,10,"gold"],[501,16,557,14],[501,18,557,16,"prev"],[501,22,557,20],[501,23,557,21,"gold"],[501,27,557,25],[501,30,557,28,"totalGold"],[502,10,558,8],[502,11,558,9],[502,12,558,10],[502,13,558,11],[504,10,560,8],[505,10,561,8,"zoneKills"],[505,19,561,17],[505,20,561,18,"forEach"],[505,27,561,25],[505,28,561,26,"zoneEnemy"],[505,37,561,35],[505,41,561,39,"recordEnemyKill"],[505,56,561,54],[505,57,561,55,"zoneEnemy"],[505,66,561,64],[505,67,561,65],[505,68,561,66],[507,10,563,8],[508,10,564,8,"setCombatState"],[508,24,564,22],[508,25,564,23,"prev"],[508,29,564,27],[508,34,564,32],[509,12,565,10],[509,15,565,13,"prev"],[509,19,565,17],[510,12,566,10,"enemies"],[510,19,566,17],[510,21,566,19,"prev"],[510,25,566,23],[510,26,566,24,"enemies"],[510,33,566,31],[510,34,566,32,"map"],[510,37,566,35],[510,38,566,36,"enemy"],[510,43,566,41],[510,47,566,45],[511,14,567,12],[511,20,567,18,"wasProcessed"],[511,32,567,30],[511,35,567,33,"unprocessedEnemies"],[511,53,567,51],[511,54,567,52,"find"],[511,58,567,56],[511,59,567,57,"processed"],[511,68,567,66],[511,72,567,70,"processed"],[511,81,567,79],[511,82,567,80,"id"],[511,84,567,82],[511,89,567,87,"enemy"],[511,94,567,92],[511,95,567,93,"id"],[511,97,567,95],[511,98,567,96],[512,14,568,12],[512,21,568,19,"wasProcessed"],[512,33,568,31],[512,36,568,34],[513,16,568,36],[513,19,568,39,"enemy"],[513,24,568,44],[514,16,568,46,"xpAwarded"],[514,25,568,55],[514,27,568,57],[515,14,568,62],[515,15,568,63],[515,18,568,66,"enemy"],[515,23,568,71],[516,12,569,10],[516,13,569,11],[517,10,570,8],[517,11,570,9],[517,12,570,10],[517,13,570,11],[518,8,571,6],[519,6,572,4],[520,4,573,2],[520,5,573,3],[520,7,573,5],[520,8,573,6,"game"],[520,12,573,10],[520,13,573,11,"updateNinja"],[520,24,573,22],[520,26,573,24,"game"],[520,30,573,28],[520,31,573,29,"gameState"],[520,40,573,38],[520,41,573,39,"subscriptionBenefits"],[520,61,573,59],[520,63,573,61,"recordEnemyKill"],[520,78,573,76],[520,80,573,78,"spawnTestEnemy"],[520,94,573,92],[520,96,573,94,"spawnZoneEnemy"],[520,110,573,108],[520,111,573,109],[520,112,573,110],[520,113,573,111],[520,114,573,112],[522,4,575,2],[523,4,576,2],[523,10,576,8,"findClosestEnemyInternal"],[523,34,576,32],[523,37,576,36,"enemies"],[523,44,576,58],[523,48,576,83],[524,6,577,4],[524,10,577,8,"enemies"],[524,17,577,15],[524,18,577,16,"length"],[524,24,577,22],[524,29,577,27],[524,30,577,28],[524,32,577,30],[524,39,577,37],[524,43,577,41],[526,6,579,4],[527,6,580,4],[527,12,580,10,"SCREEN_WIDTH"],[527,24,580,22],[527,27,580,25],[527,30,580,28],[528,6,581,4],[528,12,581,10,"GAME_AREA_HEIGHT"],[528,28,581,26],[528,31,581,29],[528,34,581,32],[528,37,581,35],[528,40,581,38],[528,41,581,39],[528,42,581,40],[529,6,582,4],[529,12,582,10,"ninjaX"],[529,18,582,16],[529,21,582,19,"SCREEN_WIDTH"],[529,33,582,31],[529,36,582,34],[529,37,582,35],[530,6,583,4],[530,12,583,10,"ninjaY"],[530,18,583,16],[530,21,583,19,"GAME_AREA_HEIGHT"],[530,37,583,35],[530,40,583,38],[530,41,583,39],[531,6,585,4],[531,10,585,8,"closestEnemy"],[531,22,585,20],[531,25,585,23,"enemies"],[531,32,585,30],[531,33,585,31],[531,34,585,32],[531,35,585,33],[532,6,586,4],[532,10,586,8,"closestDistance"],[532,25,586,23],[532,28,586,26,"Infinity"],[532,36,586,34],[533,6,588,4,"enemies"],[533,13,588,11],[533,14,588,12,"forEach"],[533,21,588,19],[533,22,588,20,"enemy"],[533,27,588,25],[533,31,588,29],[534,8,589,6],[534,14,589,12,"distance"],[534,22,589,20],[534,25,589,23,"Math"],[534,29,589,27],[534,30,589,28,"sqrt"],[534,34,589,32],[534,35,590,8,"Math"],[534,39,590,12],[534,40,590,13,"pow"],[534,43,590,16],[534,44,590,17,"enemy"],[534,49,590,22],[534,50,590,23,"position"],[534,58,590,31],[534,59,590,32,"x"],[534,60,590,33],[534,63,590,36,"ninjaX"],[534,69,590,42],[534,71,590,44],[534,72,590,45],[534,73,590,46],[534,76,591,8,"Math"],[534,80,591,12],[534,81,591,13,"pow"],[534,84,591,16],[534,85,591,17,"enemy"],[534,90,591,22],[534,91,591,23,"position"],[534,99,591,31],[534,100,591,32,"y"],[534,101,591,33],[534,104,591,36,"ninjaY"],[534,110,591,42],[534,112,591,44],[534,113,591,45],[534,114,592,6],[534,115,592,7],[535,8,594,6],[535,12,594,10,"distance"],[535,20,594,18],[535,23,594,21,"closestDistance"],[535,38,594,36],[535,40,594,38],[536,10,595,8,"closestDistance"],[536,25,595,23],[536,28,595,26,"distance"],[536,36,595,34],[537,10,596,8,"closestEnemy"],[537,22,596,20],[537,25,596,23,"enemy"],[537,30,596,28],[538,8,597,6],[539,6,598,4],[539,7,598,5],[539,8,598,6],[540,6,600,4,"console"],[540,13,600,11],[540,14,600,12,"log"],[540,17,600,15],[540,18,600,16],[540,60,600,58,"closestDistance"],[540,75,600,73],[540,76,600,74,"toFixed"],[540,83,600,81],[540,84,600,82],[540,85,600,83],[540,86,600,84],[540,88,600,86],[540,89,600,87],[541,6,601,4],[541,13,601,11,"closestEnemy"],[541,25,601,23],[542,4,602,2],[542,5,602,3],[544,4,604,2],[545,4,605,2],[545,10,605,8,"findClosestEnemy"],[545,26,605,24],[545,29,605,27,"findClosestEnemy"],[545,30,605,27],[545,35,605,53],[546,6,606,4],[546,13,606,11,"findClosestEnemyInternal"],[546,37,606,35],[546,38,606,36,"combatState"],[546,49,606,47],[546,50,606,48,"enemies"],[546,57,606,55],[546,58,606,56],[547,4,607,2],[547,5,607,3],[549,4,609,2],[550,4,610,2],[551,4,611,2],[551,10,611,8],[551,11,611,9,"currentNinjaPosition"],[551,31,611,29],[551,33,611,31,"setCurrentNinjaPosition"],[551,56,611,54],[551,57,611,55],[551,60,611,58],[551,64,611,58,"useState"],[551,70,611,66],[551,71,611,66,"useState"],[551,79,611,66],[551,81,611,91],[552,6,611,93,"x"],[552,7,611,94],[552,9,611,96],[552,12,611,99],[553,6,611,101,"y"],[553,7,611,102],[553,9,611,104],[554,4,611,108],[554,5,611,109],[554,6,611,110],[555,4,612,2],[555,10,612,8],[555,11,612,9,"isManualControlActive"],[555,32,612,30],[555,34,612,32,"setIsManualControlActive"],[555,58,612,56],[555,59,612,57],[555,62,612,60],[555,66,612,60,"useState"],[555,72,612,68],[555,73,612,68,"useState"],[555,81,612,68],[555,83,612,69],[555,88,612,74],[555,89,612,75],[557,4,614,2],[558,4,615,2],[558,10,615,8,"updateNinjaPosition"],[558,29,615,27],[558,32,615,30],[558,36,615,30,"useCallback"],[558,42,615,41],[558,43,615,41,"useCallback"],[558,54,615,41],[558,56,615,43,"newPosition"],[558,67,615,78],[558,71,615,83],[559,6,616,4,"setCurrentNinjaPosition"],[559,29,616,27],[559,30,616,28,"newPosition"],[559,41,616,39],[559,42,616,40],[560,4,617,2],[560,5,617,3],[560,7,617,5],[560,9,617,7],[560,10,617,8],[562,4,619,2],[563,4,620,2],[563,10,620,8,"setManualControlActive"],[563,32,620,30],[563,35,620,33],[563,39,620,33,"useCallback"],[563,45,620,44],[563,46,620,44,"useCallback"],[563,57,620,44],[563,59,620,46,"active"],[563,65,620,61],[563,69,620,66],[564,6,621,4,"setIsManualControlActive"],[564,30,621,28],[564,31,621,29,"active"],[564,37,621,35],[564,38,621,36],[565,6,622,4,"console"],[565,13,622,11],[565,14,622,12,"log"],[565,17,622,15],[565,18,622,16],[565,39,622,37,"active"],[565,45,622,43],[565,48,622,46],[565,59,622,57],[565,62,622,60],[565,75,622,73],[565,88,622,86,"active"],[565,94,622,92],[565,97,622,95],[565,105,622,103],[565,108,622,106],[565,117,622,115],[565,119,622,117],[565,120,622,118],[566,4,623,2],[566,5,623,3],[566,7,623,5],[566,9,623,7],[566,10,623,8],[568,4,625,2],[569,4,626,2],[570,4,627,2],[572,4,629,2],[573,4,630,2],[573,10,630,8,"castAbility"],[573,21,630,19],[573,24,630,22,"castAbility"],[573,25,630,23,"state"],[573,30,630,41],[573,32,630,43,"slotIndex"],[573,41,630,60],[573,46,630,65],[574,6,631,4],[574,12,631,10,"deck"],[574,16,631,14],[574,19,631,17,"state"],[574,24,631,22],[574,25,631,23,"abilityManager"],[574,39,631,37],[574,40,631,38,"getDeck"],[574,47,631,45],[574,48,631,46],[574,49,631,47],[575,6,632,4],[575,12,632,10,"ability"],[575,19,632,17],[575,22,632,20,"deck"],[575,26,632,24],[575,27,632,25,"slots"],[575,32,632,30],[575,33,632,31,"slotIndex"],[575,42,632,40],[575,43,632,41],[576,6,633,4],[576,10,633,8],[576,11,633,9,"ability"],[576,18,633,16],[576,20,633,18],[577,6,635,4,"console"],[577,13,635,11],[577,14,635,12,"log"],[577,17,635,15],[577,18,635,16],[577,43,635,41,"ability"],[577,50,635,48],[577,51,635,49,"id"],[577,53,635,51],[577,67,635,65,"slotIndex"],[577,76,635,74],[577,78,635,76],[577,79,635,77],[579,6,637,4],[580,6,638,4],[580,10,638,8,"damage"],[580,16,638,14],[580,19,638,17,"ability"],[580,26,638,24],[580,27,638,25,"stats"],[580,32,638,30],[580,33,638,31,"baseDamage"],[580,43,638,41],[582,6,640,4],[583,6,641,4,"deck"],[583,10,641,8],[583,11,641,9,"activeSynergies"],[583,26,641,24],[583,27,641,25,"forEach"],[583,34,641,32],[583,35,641,33,"synergy"],[583,42,641,40],[583,46,641,44],[584,8,642,6],[584,12,642,10,"synergy"],[584,19,642,17],[584,20,642,18,"bonus"],[584,25,642,23],[584,26,642,24,"damageBonus"],[584,37,642,35],[584,41,643,10,"synergy"],[584,48,643,17],[584,49,643,18,"requiredTags"],[584,61,643,30],[584,62,643,31,"some"],[584,66,643,35],[584,67,643,36,"tag"],[584,70,643,39],[584,74,643,43,"ability"],[584,81,643,50],[584,82,643,51,"tags"],[584,86,643,55],[584,87,643,56,"includes"],[584,95,643,64],[584,96,643,65,"tag"],[584,99,643,68],[584,100,643,69],[584,101,643,70],[584,103,643,72],[585,10,644,8,"damage"],[585,16,644,14],[585,20,644,19],[585,21,644,20],[585,24,644,23,"synergy"],[585,31,644,30],[585,32,644,31,"bonus"],[585,37,644,36],[585,38,644,37,"damageBonus"],[585,49,644,48],[585,52,644,51],[585,55,644,55],[586,8,645,6],[587,6,646,4],[587,7,646,5],[587,8,646,6],[589,6,648,4],[590,6,649,4],[590,12,649,10,"isAOE"],[590,17,649,15],[590,20,649,18,"ability"],[590,27,649,25],[590,28,649,26,"effects"],[590,35,649,33],[590,36,649,34,"includes"],[590,44,649,42],[590,45,649,43],[590,50,649,48],[590,51,649,49],[590,55,649,53,"ability"],[590,62,649,60],[590,63,649,61,"stats"],[590,68,649,66],[590,69,649,67,"aoeRadius"],[590,78,649,76],[591,6,650,4,"console"],[591,13,650,11],[591,14,650,12,"log"],[591,17,650,15],[591,18,650,16],[591,39,650,37,"ability"],[591,46,650,44],[591,47,650,45,"name"],[591,51,650,49],[591,66,650,64,"JSON"],[591,70,650,68],[591,71,650,69,"stringify"],[591,80,650,78],[591,81,650,79,"ability"],[591,88,650,86],[591,89,650,87,"effects"],[591,96,650,94],[591,97,650,95],[591,113,650,111,"ability"],[591,120,650,118],[591,121,650,119,"stats"],[591,126,650,124],[591,127,650,125,"aoeRadius"],[591,136,650,134],[591,148,650,146,"isAOE"],[591,153,650,151],[591,155,650,153],[591,156,650,154],[592,6,652,4],[592,10,652,8,"isAOE"],[592,15,652,13],[592,17,652,15],[593,8,653,6,"console"],[593,15,653,13],[593,16,653,14,"log"],[593,19,653,17],[593,20,653,18],[593,39,653,37,"ability"],[593,46,653,44],[593,47,653,45,"name"],[593,51,653,49],[593,67,653,65,"ability"],[593,74,653,72],[593,75,653,73,"stats"],[593,80,653,78],[593,81,653,79,"aoeRadius"],[593,90,653,88],[593,92,653,90],[593,93,653,91],[595,8,655,6],[596,8,656,6],[597,8,657,6],[597,14,657,12,"ninjaX"],[597,20,657,18],[597,23,657,21,"currentNinjaPosition"],[597,43,657,41],[597,44,657,42,"x"],[597,45,657,43],[597,48,657,46],[597,50,657,48],[597,51,657,49],[597,52,657,50],[598,8,658,6],[598,14,658,12,"ninjaY"],[598,20,658,18],[598,23,658,21,"currentNinjaPosition"],[598,43,658,41],[598,44,658,42,"y"],[598,45,658,43],[598,48,658,46],[598,50,658,48],[599,8,659,6],[599,14,659,12,"aoeRadius"],[599,23,659,21],[599,26,659,24,"ability"],[599,33,659,31],[599,34,659,32,"stats"],[599,39,659,37],[599,40,659,38,"aoeRadius"],[599,49,659,47],[600,8,661,6],[600,14,661,12,"enemiesInRange"],[600,28,661,26],[600,31,661,29,"state"],[600,36,661,34],[600,37,661,35,"enemies"],[600,44,661,42],[600,45,661,43,"filter"],[600,51,661,49],[600,52,661,50,"enemy"],[600,57,661,55],[600,61,661,59],[601,10,662,8],[601,16,662,14,"enemyX"],[601,22,662,20],[601,25,662,23,"enemy"],[601,30,662,28],[601,31,662,29,"position"],[601,39,662,37],[601,40,662,38,"x"],[601,41,662,39],[601,44,662,42],[601,48,662,46],[601,49,662,47],[601,50,662,48],[602,10,663,8],[602,16,663,14,"enemyY"],[602,22,663,20],[602,25,663,23,"enemy"],[602,30,663,28],[602,31,663,29,"position"],[602,39,663,37],[602,40,663,38,"y"],[602,41,663,39],[602,44,663,42],[602,48,663,46],[603,10,664,8],[603,16,664,14,"distance"],[603,24,664,22],[603,27,664,25,"Math"],[603,31,664,29],[603,32,664,30,"sqrt"],[603,36,664,34],[603,37,664,35,"Math"],[603,41,664,39],[603,42,664,40,"pow"],[603,45,664,43],[603,46,664,44,"enemyX"],[603,52,664,50],[603,55,664,53,"ninjaX"],[603,61,664,59],[603,63,664,61],[603,64,664,62],[603,65,664,63],[603,68,664,66,"Math"],[603,72,664,70],[603,73,664,71,"pow"],[603,76,664,74],[603,77,664,75,"enemyY"],[603,83,664,81],[603,86,664,84,"ninjaY"],[603,92,664,90],[603,94,664,92],[603,95,664,93],[603,96,664,94],[603,97,664,95],[604,10,665,8],[604,17,665,15,"distance"],[604,25,665,23],[604,29,665,27,"aoeRadius"],[604,38,665,36],[605,8,666,6],[605,9,666,7],[605,10,666,8],[606,8,668,6,"console"],[606,15,668,13],[606,16,668,14,"log"],[606,19,668,17],[606,20,668,18],[606,45,668,43,"enemiesInRange"],[606,59,668,57],[606,60,668,58,"length"],[606,66,668,64],[606,88,668,86,"aoeRadius"],[606,97,668,95],[606,107,668,105],[606,108,668,106],[608,8,670,6],[609,8,671,6,"enemiesInRange"],[609,22,671,20],[609,23,671,21,"forEach"],[609,30,671,28],[609,31,671,29,"enemy"],[609,36,671,34],[609,40,671,38],[610,10,672,8],[610,16,672,14,"damageResult"],[610,28,672,26],[610,31,672,29,"DamageCalculator"],[610,50,672,45],[610,51,672,45,"DamageCalculator"],[610,67,672,45],[610,68,672,46,"calculateDamage"],[610,83,672,61],[610,84,672,62,"damage"],[610,90,672,68],[610,92,672,70,"state"],[610,97,672,75],[610,98,672,76,"playerStats"],[610,109,672,87],[610,111,672,89,"enemy"],[610,116,672,94],[610,117,672,95,"stats"],[610,122,672,100],[610,123,672,101],[611,10,673,8,"createProjectile"],[611,26,673,24],[611,27,673,25,"enemy"],[611,32,673,30],[611,34,673,32,"damageResult"],[611,46,673,44],[611,47,673,45,"damage"],[611,53,673,51],[611,55,673,53,"currentNinjaPosition"],[611,75,673,73],[611,77,673,75],[612,12,674,10,"id"],[612,14,674,12],[612,16,674,14,"ability"],[612,23,674,21],[612,24,674,22,"id"],[612,26,674,24],[613,12,675,10,"name"],[613,16,675,14],[613,18,675,16,"ability"],[613,25,675,23],[613,26,675,24,"name"],[613,30,675,28],[614,12,676,10,"icon"],[614,16,676,14],[614,18,676,16,"ability"],[614,25,676,23],[614,26,676,24,"icon"],[615,10,677,8],[615,11,677,9],[615,12,677,10],[616,10,678,8,"console"],[616,17,678,15],[616,18,678,16,"log"],[616,21,678,19],[616,22,678,20],[616,37,678,35,"enemy"],[616,42,678,40],[616,43,678,41,"name"],[616,47,678,45],[616,55,678,53,"damageResult"],[616,67,678,65],[616,68,678,66,"damage"],[616,74,678,72],[616,83,678,81],[616,84,678,82],[618,10,680,8],[619,10,681,8],[619,14,681,12,"damageResult"],[619,26,681,24],[619,27,681,25,"damage"],[619,33,681,31],[619,37,681,35,"enemy"],[619,42,681,40],[619,43,681,41,"health"],[619,49,681,47],[619,51,681,49],[620,12,682,10,"console"],[620,19,682,17],[620,20,682,18,"log"],[620,23,682,21],[620,24,682,22],[620,67,682,65,"enemy"],[620,72,682,70],[620,73,682,71,"name"],[620,77,682,75],[620,90,682,88,"damageResult"],[620,102,682,100],[620,103,682,101,"damage"],[620,109,682,107],[620,124,682,122,"enemy"],[620,129,682,127],[620,130,682,128,"health"],[620,136,682,134],[620,139,682,137],[620,140,682,138],[621,10,683,8],[622,8,684,6],[622,9,684,7],[622,10,684,8],[623,8,686,6,"console"],[623,15,686,13],[623,16,686,14,"log"],[623,19,686,17],[623,20,686,18],[623,26,686,24,"ability"],[623,33,686,31],[623,34,686,32,"name"],[623,38,686,36],[623,56,686,54,"enemiesInRange"],[623,70,686,68],[623,71,686,69,"length"],[623,77,686,75],[623,93,686,91,"damage"],[623,99,686,97],[623,118,686,116],[623,119,686,117],[624,6,688,4],[624,7,688,5],[624,13,688,11],[625,8,689,6],[626,8,690,6],[626,14,690,12,"target"],[626,20,690,18],[626,23,690,21,"findClosestEnemyInternal"],[626,47,690,45],[626,48,690,46,"state"],[626,53,690,51],[626,54,690,52,"enemies"],[626,61,690,59],[626,62,690,60],[627,8,691,6],[627,12,691,10],[627,13,691,11,"target"],[627,19,691,17],[627,21,691,19],[628,8,693,6],[628,14,693,12,"damageResult"],[628,26,693,24],[628,29,693,27,"DamageCalculator"],[628,48,693,43],[628,49,693,43,"DamageCalculator"],[628,65,693,43],[628,66,693,44,"calculateDamage"],[628,81,693,59],[628,82,693,60,"damage"],[628,88,693,66],[628,90,693,68,"state"],[628,95,693,73],[628,96,693,74,"playerStats"],[628,107,693,85],[628,109,693,87,"target"],[628,115,693,93],[628,116,693,94,"stats"],[628,121,693,99],[628,122,693,100],[630,8,695,6],[631,8,696,6,"console"],[631,15,696,13],[631,16,696,14,"log"],[631,19,696,17],[631,20,696,18],[631,71,696,69,"target"],[631,77,696,75],[631,78,696,76,"name"],[631,82,696,80],[631,91,696,89,"damageResult"],[631,103,696,101],[631,104,696,102,"damage"],[631,110,696,108],[631,119,696,117],[631,120,696,118],[632,8,697,6,"createProjectile"],[632,24,697,22],[632,25,697,23,"target"],[632,31,697,29],[632,33,697,31,"damageResult"],[632,45,697,43],[632,46,697,44,"damage"],[632,52,697,50],[632,54,697,52,"currentNinjaPosition"],[632,74,697,72],[632,76,697,74],[633,10,698,8,"id"],[633,12,698,10],[633,14,698,12,"ability"],[633,21,698,19],[633,22,698,20,"id"],[633,24,698,22],[634,10,699,8,"name"],[634,14,699,12],[634,16,699,14,"ability"],[634,23,699,21],[634,24,699,22,"name"],[634,28,699,26],[635,10,700,8,"icon"],[635,14,700,12],[635,16,700,14,"ability"],[635,23,700,21],[635,24,700,22,"icon"],[636,8,701,6],[636,9,701,7],[636,10,701,8],[637,8,703,6,"console"],[637,15,703,13],[637,16,703,14,"log"],[637,19,703,17],[637,20,703,18],[637,26,703,24,"ability"],[637,33,703,31],[637,34,703,32,"name"],[637,38,703,36],[637,66,703,64,"damageResult"],[637,78,703,76],[637,79,703,77,"damage"],[637,85,703,83],[637,95,703,93,"damageResult"],[637,107,703,105],[637,108,703,106,"isCritical"],[637,118,703,116],[637,121,703,119],[637,131,703,129],[637,134,703,132],[637,136,703,134],[637,138,703,136],[637,139,703,137],[639,8,705,6],[640,8,706,6],[640,12,706,10,"damageResult"],[640,24,706,22],[640,25,706,23,"damage"],[640,31,706,29],[640,35,706,33,"target"],[640,41,706,39],[640,42,706,40,"health"],[640,48,706,46],[640,50,706,48],[641,10,707,8,"console"],[641,17,707,15],[641,18,707,16,"log"],[641,21,707,19],[641,22,707,20],[641,75,707,73,"target"],[641,81,707,79],[641,82,707,80,"name"],[641,86,707,84],[641,99,707,97,"damageResult"],[641,111,707,109],[641,112,707,110,"damage"],[641,118,707,116],[641,133,707,131,"target"],[641,139,707,137],[641,140,707,138,"health"],[641,146,707,144],[641,149,707,147],[641,150,707,148],[642,8,708,6],[643,6,709,4],[645,6,711,4],[646,6,712,4],[646,10,712,8,"ability"],[646,17,712,15],[646,18,712,16,"effects"],[646,25,712,23],[646,26,712,24,"includes"],[646,34,712,32],[646,35,712,33],[646,40,712,38],[646,41,712,39],[646,45,712,43,"ability"],[646,52,712,50],[646,53,712,51,"stats"],[646,58,712,56],[646,59,712,57,"duration"],[646,67,712,65],[646,69,712,67],[647,8,713,6],[647,14,713,12,"targets"],[647,21,713,19],[647,24,713,22,"isAOE"],[647,29,713,27],[647,32,714,8,"state"],[647,37,714,13],[647,38,714,14,"enemies"],[647,45,714,21],[647,46,714,22,"filter"],[647,52,714,28],[647,53,714,29,"enemy"],[647,58,714,34],[647,62,714,38],[648,10,715,10],[648,16,715,16,"ninjaX"],[648,22,715,22],[648,25,715,25,"currentNinjaPosition"],[648,45,715,45],[648,46,715,46,"x"],[648,47,715,47],[648,50,715,50],[648,52,715,52],[649,10,716,10],[649,16,716,16,"ninjaY"],[649,22,716,22],[649,25,716,25,"currentNinjaPosition"],[649,45,716,45],[649,46,716,46,"y"],[649,47,716,47],[649,50,716,50],[649,52,716,52],[650,10,717,10],[650,16,717,16,"enemyX"],[650,22,717,22],[650,25,717,25,"enemy"],[650,30,717,30],[650,31,717,31,"position"],[650,39,717,39],[650,40,717,40,"x"],[650,41,717,41],[650,44,717,44],[650,48,717,48],[651,10,718,10],[651,16,718,16,"enemyY"],[651,22,718,22],[651,25,718,25,"enemy"],[651,30,718,30],[651,31,718,31,"position"],[651,39,718,39],[651,40,718,40,"y"],[651,41,718,41],[651,44,718,44],[651,48,718,48],[652,10,719,10],[652,16,719,16,"distance"],[652,24,719,24],[652,27,719,27,"Math"],[652,31,719,31],[652,32,719,32,"sqrt"],[652,36,719,36],[652,37,719,37,"Math"],[652,41,719,41],[652,42,719,42,"pow"],[652,45,719,45],[652,46,719,46,"enemyX"],[652,52,719,52],[652,55,719,55,"ninjaX"],[652,61,719,61],[652,63,719,63],[652,64,719,64],[652,65,719,65],[652,68,719,68,"Math"],[652,72,719,72],[652,73,719,73,"pow"],[652,76,719,76],[652,77,719,77,"enemyY"],[652,83,719,83],[652,86,719,86,"ninjaY"],[652,92,719,92],[652,94,719,94],[652,95,719,95],[652,96,719,96],[652,97,719,97],[653,10,720,10],[653,17,720,17,"distance"],[653,25,720,25],[653,29,720,29,"ability"],[653,36,720,36],[653,37,720,37,"stats"],[653,42,720,42],[653,43,720,43,"aoeRadius"],[653,52,720,52],[654,8,721,8],[654,9,721,9],[654,10,721,10],[654,13,722,8],[654,14,722,9,"findClosestEnemyInternal"],[654,38,722,33],[654,39,722,34,"state"],[654,44,722,39],[654,45,722,40,"enemies"],[654,52,722,47],[654,53,722,48],[654,54,722,49],[654,55,722,50,"filter"],[654,61,722,56],[654,62,722,57,"Boolean"],[654,69,722,64],[654,70,722,65],[655,8,724,6,"targets"],[655,15,724,13],[655,16,724,14,"forEach"],[655,23,724,21],[655,24,724,22,"target"],[655,30,724,28],[655,34,724,32],[656,10,725,8,"state"],[656,15,725,13],[656,16,725,14,"statusEffects"],[656,29,725,27],[656,30,725,28,"addEffect"],[656,39,725,37],[656,40,725,38,"target"],[656,46,725,44],[656,47,725,45,"id"],[656,49,725,47],[656,51,725,49],[657,12,726,10,"id"],[657,14,726,12],[657,16,726,14],[657,19,726,17,"ability"],[657,26,726,24],[657,27,726,25,"id"],[657,29,726,27],[657,35,726,33],[658,12,727,10,"type"],[658,16,727,14],[658,18,727,16],[658,23,727,21],[659,12,728,10,"remainingTicks"],[659,26,728,24],[659,28,728,26,"Math"],[659,32,728,30],[659,33,728,31,"floor"],[659,38,728,36],[659,39,728,37,"ability"],[659,46,728,44],[659,47,728,45,"stats"],[659,52,728,50],[659,53,728,51,"duration"],[659,61,728,59],[659,64,728,62],[659,66,728,64],[659,67,728,65],[660,12,729,10,"tickInterval"],[660,24,729,22],[660,26,729,24],[660,28,729,26],[661,12,730,10,"lastTick"],[661,20,730,18],[661,22,730,20,"state"],[661,27,730,25],[661,28,730,26,"currentTick"],[661,39,730,37],[662,12,731,10,"value"],[662,17,731,15],[662,19,731,17,"Math"],[662,23,731,21],[662,24,731,22,"floor"],[662,29,731,27],[662,30,731,28,"damage"],[662,36,731,34],[662,39,731,37],[662,42,731,40],[662,43,731,41],[663,12,732,10,"stackable"],[663,21,732,19],[663,23,732,21],[664,10,733,8],[664,11,733,9],[664,12,733,10],[665,8,734,6],[665,9,734,7],[665,10,734,8],[666,6,735,4],[668,6,737,4],[669,6,738,4],[669,10,738,8,"ability"],[669,17,738,15],[669,18,738,16,"effects"],[669,25,738,23],[669,26,738,24,"includes"],[669,34,738,32],[669,35,738,33],[669,41,738,39],[669,42,738,40],[669,46,738,44,"ability"],[669,53,738,51],[669,54,738,52,"id"],[669,56,738,54],[669,61,738,59],[669,75,738,73],[669,77,738,75],[670,8,739,6,"console"],[670,15,739,13],[670,16,739,14,"log"],[670,19,739,17],[670,20,739,18],[670,66,739,64,"ability"],[670,73,739,71],[670,74,739,72,"stats"],[670,79,739,77],[670,80,739,78,"duration"],[670,88,739,86],[670,98,739,96],[670,99,739,97],[672,8,741,6],[673,8,742,6],[673,14,742,12,"cloneX"],[673,20,742,18],[673,23,742,21,"currentNinjaPosition"],[673,43,742,41],[673,44,742,42,"x"],[673,45,742,43],[673,48,742,46],[673,50,742,48],[673,51,742,49],[673,52,742,50],[674,8,743,6],[674,14,743,12,"cloneY"],[674,20,743,18],[674,23,743,21,"currentNinjaPosition"],[674,43,743,41],[674,44,743,42,"y"],[674,45,743,43],[674,48,743,46],[674,50,743,48],[674,51,743,49],[674,52,743,50],[676,8,745,6,"state"],[676,13,745,11],[676,14,745,12,"shadowClone"],[676,25,745,23],[676,28,745,26],[677,10,746,8,"id"],[677,12,746,10],[677,14,746,12],[677,30,746,28,"Date"],[677,34,746,32],[677,35,746,33,"now"],[677,38,746,36],[677,39,746,37],[677,40,746,38],[677,42,746,40],[678,10,747,8,"remainingTicks"],[678,24,747,22],[678,26,747,24,"Math"],[678,30,747,28],[678,31,747,29,"floor"],[678,36,747,34],[678,37,747,35,"ability"],[678,44,747,42],[678,45,747,43,"stats"],[678,50,747,48],[678,51,747,49,"duration"],[678,59,747,57],[678,62,747,60],[678,64,747,62],[678,65,747,63],[679,10,747,65],[680,10,748,8,"position"],[680,18,748,16],[680,20,748,18],[681,12,748,20,"x"],[681,13,748,21],[681,15,748,23,"cloneX"],[681,21,748,29],[682,12,748,31,"y"],[682,13,748,32],[682,15,748,34,"cloneY"],[683,10,748,41],[683,11,748,42],[684,10,749,8,"damageMultiplier"],[684,26,749,24],[684,28,749,26],[684,31,749,29],[684,32,749,31],[685,8,750,6],[685,9,750,7],[686,8,752,6,"console"],[686,15,752,13],[686,16,752,14,"log"],[686,19,752,17],[686,20,752,18],[686,63,752,61,"ability"],[686,70,752,68],[686,71,752,69,"stats"],[686,76,752,74],[686,77,752,75,"duration"],[686,85,752,83],[686,108,752,106],[686,109,752,107],[687,6,753,4],[688,4,754,2],[688,5,754,3],[690,4,756,2],[691,4,757,2],[691,10,757,8,"createProjectile"],[691,26,757,24],[691,29,757,27,"createProjectile"],[691,30,757,28,"targetEnemy"],[691,41,757,52],[691,43,757,54,"damage"],[691,49,757,68],[691,51,757,70,"ninjaPos"],[691,59,757,103],[691,61,757,105,"abilityInfo"],[691,72,757,159],[691,74,757,161,"isAOE"],[691,79,757,176],[691,81,757,178,"aoeRadius"],[691,90,757,196],[691,95,757,201],[692,6,758,4],[692,10,758,8],[692,11,758,9,"targetEnemy"],[692,22,758,20],[692,24,758,22],[693,8,759,6,"console"],[693,15,759,13],[693,16,759,14,"log"],[693,19,759,17],[693,20,759,18],[693,65,759,63],[693,66,759,64],[694,8,760,6],[694,15,760,13],[694,19,760,17],[695,6,761,4],[697,6,763,4],[698,6,764,4,"console"],[698,13,764,11],[698,14,764,12,"log"],[698,17,764,15],[698,18,764,16],[698,52,764,50,"damage"],[698,58,764,56],[698,70,764,68,"targetEnemy"],[698,81,764,79],[698,82,764,80,"name"],[698,86,764,84],[698,91,764,89,"targetEnemy"],[698,102,764,100],[698,103,764,101,"health"],[698,109,764,107],[698,113,764,111,"targetEnemy"],[698,124,764,122],[698,125,764,123,"maxHealth"],[698,134,764,132],[698,140,764,138],[698,141,764,139],[699,6,766,4],[699,12,766,10,"SCREEN_WIDTH"],[699,24,766,22],[699,27,766,25],[699,30,766,28],[700,6,767,4],[700,12,767,10,"GAME_AREA_HEIGHT"],[700,28,767,26],[700,31,767,29],[700,34,767,32],[700,37,767,35],[700,40,767,38],[700,41,767,39],[700,42,767,40],[701,6,768,4],[701,12,768,10,"NINJA_SIZE"],[701,22,768,20],[701,25,768,23],[701,27,768,25],[703,6,770,4],[704,6,771,4],[704,12,771,10,"ninjaX"],[704,18,771,16],[704,21,771,19,"ninjaPos"],[704,29,771,27],[704,32,771,30,"ninjaPos"],[704,40,771,38],[704,41,771,39,"x"],[704,42,771,40],[704,45,771,43,"NINJA_SIZE"],[704,55,771,53],[704,58,771,56],[704,59,771,57],[704,62,771,60,"SCREEN_WIDTH"],[704,74,771,72],[704,77,771,75],[704,78,771,76],[705,6,772,4],[705,12,772,10,"ninjaY"],[705,18,772,16],[705,21,772,19,"ninjaPos"],[705,29,772,27],[705,32,772,30,"ninjaPos"],[705,40,772,38],[705,41,772,39,"y"],[705,42,772,40],[705,45,772,43,"NINJA_SIZE"],[705,55,772,53],[705,58,772,56],[705,59,772,57],[705,62,772,60,"GAME_AREA_HEIGHT"],[705,78,772,76],[705,81,772,79],[705,82,772,80],[706,6,773,4],[706,12,773,10,"ENEMY_SIZE"],[706,22,773,20],[706,25,773,23],[706,27,773,25],[707,6,775,4],[707,12,775,10,"projectileId"],[707,24,775,22],[707,27,775,25],[707,35,775,33,"Date"],[707,39,775,37],[707,40,775,38,"now"],[707,43,775,41],[707,44,775,42],[707,45,775,43],[707,49,775,47,"Math"],[707,53,775,51],[707,54,775,52,"random"],[707,60,775,58],[707,61,775,59],[707,62,775,60],[707,64,775,62],[708,6,777,4],[708,12,777,10,"projectile"],[708,22,777,38],[708,25,777,41],[709,8,778,6,"id"],[709,10,778,8],[709,12,778,10,"projectileId"],[709,24,778,22],[710,8,779,6,"x"],[710,9,779,7],[710,11,779,9,"ninjaX"],[710,17,779,15],[711,8,780,6,"y"],[711,9,780,7],[711,11,780,9,"ninjaY"],[711,17,780,15],[712,8,781,6,"targetX"],[712,15,781,13],[712,17,781,15,"targetEnemy"],[712,28,781,26],[712,29,781,27,"position"],[712,37,781,35],[712,38,781,36,"x"],[712,39,781,37],[712,42,781,40,"ENEMY_SIZE"],[712,52,781,50],[712,55,781,53],[712,56,781,54],[713,8,782,6,"targetY"],[713,15,782,13],[713,17,782,15,"targetEnemy"],[713,28,782,26],[713,29,782,27,"position"],[713,37,782,35],[713,38,782,36,"y"],[713,39,782,37],[713,42,782,40,"ENEMY_SIZE"],[713,52,782,50],[713,55,782,53],[713,56,782,54],[714,8,783,6,"targetEnemyId"],[714,21,783,19],[714,23,783,21,"targetEnemy"],[714,34,783,32],[714,35,783,33,"id"],[714,37,783,35],[715,8,784,6,"damage"],[715,14,784,12],[715,16,784,14,"damage"],[715,22,784,20],[716,8,785,6,"startTime"],[716,17,785,15],[716,19,785,17,"Date"],[716,23,785,21],[716,24,785,22,"now"],[716,27,785,25],[716,28,785,26],[716,29,785,27],[717,8,786,6,"duration"],[717,16,786,14],[717,18,786,16],[717,21,786,19],[718,8,786,21],[719,8,787,6],[720,8,788,6,"abilityId"],[720,17,788,15],[720,19,788,17,"abilityInfo"],[720,30,788,28],[720,32,788,30,"id"],[720,34,788,32],[720,38,788,36],[720,54,788,52],[721,8,789,6,"abilityName"],[721,19,789,17],[721,21,789,19,"abilityInfo"],[721,32,789,30],[721,34,789,32,"name"],[721,38,789,36],[721,42,789,40],[721,58,789,56],[722,8,790,6,"abilityIcon"],[722,19,790,17],[722,21,790,19,"abilityInfo"],[722,32,790,30],[722,34,790,32,"icon"],[722,38,790,36],[722,42,790,40],[722,46,790,44],[723,8,790,46],[724,8,791,6],[725,8,792,6,"isAOE"],[725,13,792,11],[725,15,792,13,"isAOE"],[725,20,792,18],[725,24,792,22],[725,29,792,27],[726,8,793,6,"aoeRadius"],[726,17,793,15],[726,19,793,17,"aoeRadius"],[726,28,793,26],[726,32,793,30],[727,6,794,4],[727,7,794,5],[728,6,796,4,"console"],[728,13,796,11],[728,14,796,12,"log"],[728,17,796,15],[728,18,796,16],[728,44,796,42,"abilityInfo"],[728,55,796,53],[728,57,796,55,"name"],[728,61,796,59],[728,65,796,63],[728,81,796,79],[728,101,796,99,"projectileId"],[728,113,796,111],[728,128,796,126,"targetEnemy"],[728,139,796,137],[728,140,796,138,"name"],[728,144,796,142],[728,152,796,150,"damage"],[728,158,796,156],[728,167,796,165],[728,168,796,166],[729,6,797,4,"console"],[729,13,797,11],[729,14,797,12,"log"],[729,17,797,15],[729,18,797,16],[729,48,797,46,"isAOE"],[729,53,797,51],[729,68,797,66,"aoeRadius"],[729,77,797,75],[729,89,797,87,"damage"],[729,95,797,93],[729,97,797,95],[729,98,797,96],[730,6,799,4,"console"],[730,13,799,11],[730,14,799,12,"log"],[730,17,799,15],[730,18,799,16],[730,53,799,51,"targetEnemy"],[730,64,799,62],[730,65,799,63,"id"],[730,67,799,65],[730,75,799,73,"damage"],[730,81,799,79],[730,90,799,88],[730,91,799,89],[731,6,800,4,"console"],[731,13,800,11],[731,14,800,12,"log"],[731,17,800,15],[731,18,800,16],[731,53,800,51,"ninjaX"],[731,59,800,57],[731,64,800,62,"ninjaY"],[731,70,800,68],[731,87,800,85,"projectile"],[731,97,800,95],[731,98,800,96,"targetX"],[731,105,800,103],[731,110,800,108,"projectile"],[731,120,800,118],[731,121,800,119,"targetY"],[731,128,800,126],[731,131,800,129],[731,132,800,130],[732,6,802,4,"setProjectiles"],[732,20,802,18],[732,21,802,19,"prev"],[732,25,802,23],[732,29,802,27],[732,30,802,28],[732,33,802,31,"prev"],[732,37,802,35],[732,39,802,37,"projectile"],[732,49,802,47],[732,50,802,48],[732,51,802,49],[734,6,804,4],[735,6,805,4],[737,6,807,4],[737,13,807,11,"projectile"],[737,23,807,21],[738,4,808,2],[738,5,808,3],[740,4,810,2],[741,4,811,2],[741,10,811,8,"spawnTestEnemy"],[741,24,811,22],[741,27,811,26,"state"],[741,32,811,44],[741,36,811,49],[742,6,812,4,"console"],[742,13,812,11],[742,14,812,12,"log"],[742,17,812,15],[742,18,812,16],[742,83,812,81],[742,84,812,82],[744,6,814,4],[745,6,815,4],[745,12,815,10,"zoneEnemy"],[745,21,815,19],[745,24,815,22,"spawnZoneEnemy"],[745,38,815,36],[745,39,815,37],[745,40,815,38],[746,6,816,4],[746,10,816,8],[746,11,816,9,"zoneEnemy"],[746,20,816,18],[746,22,816,20],[747,8,817,6,"console"],[747,15,817,13],[747,16,817,14,"log"],[747,19,817,17],[747,20,817,18],[747,76,817,74],[747,77,817,75],[748,8,818,6],[749,8,819,6,"spawnBasicTestEnemy"],[749,27,819,25],[749,28,819,26,"state"],[749,33,819,31],[749,34,819,32],[750,8,820,6],[751,6,821,4],[752,6,823,4,"console"],[752,13,823,11],[752,14,823,12,"log"],[752,17,823,15],[752,18,823,16],[752,44,823,42,"zoneEnemy"],[752,53,823,51],[752,54,823,52,"name"],[752,58,823,56],[752,63,823,61,"zoneEnemy"],[752,72,823,70],[752,73,823,71,"typeId"],[752,79,823,77],[752,94,823,92,"currentZone"],[752,105,823,103],[752,107,823,105,"id"],[752,109,823,107],[752,119,823,117,"currentZoneLevel"],[752,135,823,133],[752,137,823,135,"level"],[752,142,823,140],[752,144,823,142],[752,145,823,143],[754,6,825,4],[755,6,826,4],[755,12,826,10,"combatEnemy"],[755,23,826,34],[755,26,826,37],[756,8,827,6,"id"],[756,10,827,8],[756,12,827,10,"zoneEnemy"],[756,21,827,19],[756,22,827,20,"id"],[756,24,827,22],[757,8,828,6,"name"],[757,12,828,10],[757,14,828,12,"zoneEnemy"],[757,23,828,21],[757,24,828,22,"name"],[757,28,828,26],[758,8,829,6,"health"],[758,14,829,12],[758,16,829,14,"zoneEnemy"],[758,25,829,23],[758,26,829,24,"hp"],[758,28,829,26],[759,8,830,6,"maxHealth"],[759,17,830,15],[759,19,830,17,"zoneEnemy"],[759,28,830,26],[759,29,830,27,"maxHP"],[759,34,830,32],[760,8,831,6,"stats"],[760,13,831,11],[760,15,831,13],[761,10,832,8,"attack"],[761,16,832,14],[761,18,832,16,"zoneEnemy"],[761,27,832,25],[761,28,832,26,"attack"],[761,34,832,32],[762,10,833,8,"defense"],[762,17,833,15],[762,19,833,17],[762,21,833,19],[763,10,833,21],[764,10,834,8,"health"],[764,16,834,14],[764,18,834,16,"zoneEnemy"],[764,27,834,25],[764,28,834,26,"hp"],[764,30,834,28],[765,10,835,8,"maxHealth"],[765,19,835,17],[765,21,835,19,"zoneEnemy"],[765,30,835,28],[765,31,835,29,"maxHP"],[765,36,835,34],[766,10,836,8,"critChance"],[766,20,836,18],[766,22,836,20],[766,23,836,21],[767,10,837,8,"critDamage"],[767,20,837,18],[767,22,837,20],[767,25,837,23],[768,10,838,8,"cooldownReduction"],[768,27,838,25],[768,29,838,27],[769,8,839,6],[769,9,839,7],[770,8,840,6,"position"],[770,16,840,14],[770,18,840,16,"zoneEnemy"],[770,27,840,25],[770,28,840,26,"position"],[770,36,840,34],[771,8,841,6,"lastDamaged"],[771,19,841,17],[771,21,841,19],[771,22,841,20],[772,8,842,6],[773,8,843,6,"zoneTypeId"],[773,18,843,16],[773,20,843,18,"zoneEnemy"],[773,29,843,27],[773,30,843,28,"typeId"],[773,36,843,34],[774,8,844,6,"zoneXP"],[774,14,844,12],[774,16,844,14,"zoneEnemy"],[774,25,844,23],[774,26,844,24,"xp"],[775,6,845,4],[775,7,845,5],[776,6,847,4,"console"],[776,13,847,11],[776,14,847,12,"log"],[776,17,847,15],[776,18,847,16],[776,42,847,40,"combatEnemy"],[776,53,847,51],[776,54,847,52,"name"],[776,58,847,56],[776,67,847,65,"combatEnemy"],[776,78,847,76],[776,79,847,77,"health"],[776,85,847,83],[776,100,847,98,"currentZone"],[776,111,847,109],[776,113,847,111,"id"],[776,115,847,113],[776,125,847,123,"currentZoneLevel"],[776,141,847,139],[776,143,847,141,"level"],[776,148,847,146],[776,150,847,148],[776,151,847,149],[777,6,848,4,"state"],[777,11,848,9],[777,12,848,10,"enemies"],[777,19,848,17],[777,20,848,18,"push"],[777,24,848,22],[777,25,848,23,"combatEnemy"],[777,36,848,34],[777,37,848,35],[778,4,849,2],[778,5,849,3],[780,4,851,2],[781,4,852,2],[781,10,852,8,"spawnBasicTestEnemy"],[781,29,852,27],[781,32,852,31,"state"],[781,37,852,49],[781,41,852,54],[782,6,853,4],[782,12,853,10,"SCREEN_WIDTH"],[782,24,853,22],[782,27,853,25],[782,30,853,28],[783,6,854,4],[783,12,854,10,"GAME_AREA_HEIGHT"],[783,28,854,26],[783,31,854,29],[783,34,854,32],[783,37,854,35],[783,40,854,38],[784,6,855,4],[784,12,855,10,"ENEMY_SIZE"],[784,22,855,20],[784,25,855,23],[784,27,855,25],[785,6,857,4],[785,12,857,10,"x"],[785,13,857,11],[785,16,857,14,"Math"],[785,20,857,18],[785,21,857,19,"random"],[785,27,857,25],[785,28,857,26],[785,29,857,27],[785,33,857,31,"SCREEN_WIDTH"],[785,45,857,43],[785,48,857,46,"ENEMY_SIZE"],[785,58,857,56],[785,61,857,59],[785,62,857,60],[785,63,857,61],[785,66,857,64,"ENEMY_SIZE"],[785,76,857,74],[786,6,858,4],[786,12,858,10,"y"],[786,13,858,11],[786,16,858,14,"Math"],[786,20,858,18],[786,21,858,19,"random"],[786,27,858,25],[786,28,858,26],[786,29,858,27],[786,33,858,31,"GAME_AREA_HEIGHT"],[786,49,858,47],[786,52,858,50,"ENEMY_SIZE"],[786,62,858,60],[786,65,858,63],[786,66,858,64],[786,67,858,65],[786,70,858,68,"ENEMY_SIZE"],[786,80,858,78],[787,6,860,4],[787,12,860,10,"enemy"],[787,17,860,28],[787,20,860,31],[788,8,861,6,"id"],[788,10,861,8],[788,12,861,10],[788,30,861,28,"Date"],[788,34,861,32],[788,35,861,33,"now"],[788,38,861,36],[788,39,861,37],[788,40,861,38],[788,44,861,42,"Math"],[788,48,861,46],[788,49,861,47,"random"],[788,55,861,53],[788,56,861,54],[788,57,861,55],[788,59,861,57],[789,8,862,6,"name"],[789,12,862,10],[789,14,862,12],[789,26,862,24,"Math"],[789,30,862,28],[789,31,862,29,"floor"],[789,36,862,34],[789,37,862,35,"Math"],[789,41,862,39],[789,42,862,40,"random"],[789,48,862,46],[789,49,862,47],[789,50,862,48],[789,53,862,51],[789,56,862,54],[789,57,862,55],[789,59,862,57],[790,8,863,6,"health"],[790,14,863,12],[790,16,863,14],[790,18,863,16],[791,8,864,6,"maxHealth"],[791,17,864,15],[791,19,864,17],[791,21,864,19],[792,8,865,6,"stats"],[792,13,865,11],[792,15,865,13],[793,10,866,8,"attack"],[793,16,866,14],[793,18,866,16],[793,20,866,18],[794,10,867,8,"defense"],[794,17,867,15],[794,19,867,17],[794,21,867,19],[795,10,868,8,"health"],[795,16,868,14],[795,18,868,16],[795,20,868,18],[796,10,869,8,"maxHealth"],[796,19,869,17],[796,21,869,19],[796,23,869,21],[797,10,870,8,"critChance"],[797,20,870,18],[797,22,870,20],[797,23,870,21],[798,10,871,8,"critDamage"],[798,20,871,18],[798,22,871,20],[798,25,871,23],[799,10,872,8,"cooldownReduction"],[799,27,872,25],[799,29,872,27],[800,8,873,6],[800,9,873,7],[801,8,874,6,"position"],[801,16,874,14],[801,18,874,16],[802,10,874,18,"x"],[802,11,874,19],[803,10,874,21,"y"],[804,8,874,23],[804,9,874,24],[805,8,875,6,"lastDamaged"],[805,19,875,17],[805,21,875,19],[806,6,876,4],[806,7,876,5],[807,6,878,4,"console"],[807,13,878,11],[807,14,878,12,"log"],[807,17,878,15],[807,18,878,16],[807,42,878,40,"enemy"],[807,47,878,45],[807,48,878,46,"name"],[807,52,878,50],[807,60,878,58,"Math"],[807,64,878,62],[807,65,878,63,"round"],[807,70,878,68],[807,71,878,69,"x"],[807,72,878,70],[807,73,878,71],[807,78,878,76,"Math"],[807,82,878,80],[807,83,878,81,"round"],[807,88,878,86],[807,89,878,87,"y"],[807,90,878,88],[807,91,878,89],[807,94,878,92],[807,95,878,93],[808,6,879,4,"state"],[808,11,879,9],[808,12,879,10,"enemies"],[808,19,879,17],[808,20,879,18,"push"],[808,24,879,22],[808,25,879,23,"enemy"],[808,30,879,28],[808,31,879,29],[809,4,880,2],[809,5,880,3],[811,4,882,2],[812,4,883,2],[813,4,884,2],[813,10,884,8,"startCombat"],[813,21,884,19],[813,24,884,22,"React"],[813,29,884,27],[813,30,884,27,"default"],[813,37,884,27],[813,38,884,28,"useCallback"],[813,49,884,39],[813,50,884,40],[813,56,884,46],[814,6,885,4,"console"],[814,13,885,11],[814,14,885,12,"log"],[814,17,885,15],[814,18,885,16],[814,63,885,61],[814,64,885,62],[815,6,886,4,"console"],[815,13,886,11],[815,14,886,12,"log"],[815,17,886,15],[815,18,886,16],[815,37,886,35],[815,39,886,37,"combatEngine"],[815,58,886,49],[815,59,886,49,"combatEngine"],[815,71,886,49],[815,72,886,50],[816,6,887,4,"console"],[816,13,887,11],[816,14,887,12,"log"],[816,17,887,15],[816,18,887,16],[816,51,887,49],[816,53,887,51,"handleCombatTick"],[816,69,887,67],[816,70,887,68],[817,6,888,4,"setCombatState"],[817,20,888,18],[817,21,888,19,"prev"],[817,25,888,23],[817,30,888,28],[818,8,888,30],[818,11,888,33,"prev"],[818,15,888,37],[819,8,888,39,"isInCombat"],[819,18,888,49],[819,20,888,51],[820,6,888,56],[820,7,888,57],[820,8,888,58],[820,9,888,59],[822,6,890,4],[823,6,891,4,"combatEngine"],[823,25,891,16],[823,26,891,16,"combatEngine"],[823,38,891,16],[823,39,891,17,"addTickCallback"],[823,54,891,32],[823,55,891,33,"handleCombatTick"],[823,71,891,49],[823,72,891,50],[824,6,892,4,"console"],[824,13,892,11],[824,14,892,12,"log"],[824,17,892,15],[824,18,892,16],[824,62,892,60],[824,63,892,61],[826,6,894,4],[827,6,895,4,"combatEngine"],[827,25,895,16],[827,26,895,16,"combatEngine"],[827,38,895,16],[827,39,895,17,"start"],[827,44,895,22],[827,45,895,23],[827,46,895,24],[828,6,896,4,"console"],[828,13,896,11],[828,14,896,12,"log"],[828,17,896,15],[828,18,896,16],[828,51,896,49],[828,52,896,50],[829,4,897,2],[829,5,897,3],[829,7,897,5],[829,8,897,6,"combatEngine"],[829,27,897,18],[829,28,897,18,"combatEngine"],[829,40,897,18],[829,42,897,20,"handleCombatTick"],[829,58,897,36],[829,59,897,37],[829,60,897,38],[831,4,899,2],[832,4,900,2],[832,10,900,8,"stopCombat"],[832,20,900,18],[832,23,900,21,"React"],[832,28,900,26],[832,29,900,26,"default"],[832,36,900,26],[832,37,900,27,"useCallback"],[832,48,900,38],[832,49,900,39],[832,55,900,45],[833,6,901,4,"setCombatState"],[833,20,901,18],[833,21,901,19,"prev"],[833,25,901,23],[833,30,901,28],[834,8,901,30],[834,11,901,33,"prev"],[834,15,901,37],[835,8,901,39,"isInCombat"],[835,18,901,49],[835,20,901,51],[836,6,901,57],[836,7,901,58],[836,8,901,59],[836,9,901,60],[837,6,902,4,"combatEngine"],[837,25,902,16],[837,26,902,16,"combatEngine"],[837,38,902,16],[837,39,902,17,"removeTickCallback"],[837,57,902,35],[837,58,902,36,"handleCombatTick"],[837,74,902,52],[837,75,902,53],[838,4,903,2],[838,5,903,3],[838,7,903,5],[838,8,903,6,"combatEngine"],[838,27,903,18],[838,28,903,18,"combatEngine"],[838,40,903,18],[838,42,903,20,"handleCombatTick"],[838,58,903,36],[838,59,903,37],[838,60,903,38],[840,4,905,2],[841,4,906,2],[841,10,906,8,"equipAbility"],[841,22,906,20],[841,25,906,23,"equipAbility"],[841,26,906,24,"abilityId"],[841,35,906,41],[841,37,906,43,"slotIndex"],[841,46,906,60],[841,51,906,74],[842,6,907,4],[842,13,907,11,"combatState"],[842,24,907,22],[842,25,907,23,"abilityManager"],[842,39,907,37],[842,40,907,38,"equipAbility"],[842,52,907,50],[842,53,907,51,"abilityId"],[842,62,907,60],[842,64,907,62,"slotIndex"],[842,73,907,71],[842,74,907,72],[843,4,908,2],[843,5,908,3],[844,4,910,2],[844,10,910,8,"getDeck"],[844,17,910,15],[844,20,910,18,"getDeck"],[844,21,910,18],[844,26,910,24],[845,6,911,4],[845,13,911,11,"combatState"],[845,24,911,22],[845,25,911,23,"abilityManager"],[845,39,911,37],[845,40,911,38,"getDeck"],[845,47,911,45],[845,48,911,46],[845,49,911,47],[846,4,912,2],[846,5,912,3],[847,4,914,2],[847,10,914,8,"getAvailableAbilities"],[847,31,914,29],[847,34,914,32,"getAvailableAbilities"],[847,35,914,32],[847,40,914,38],[848,6,915,4],[848,13,915,11,"combatState"],[848,24,915,22],[848,25,915,23,"abilityManager"],[848,39,915,37],[848,40,915,38,"getAvailableAbilities"],[848,61,915,59],[848,62,915,60],[848,63,915,61],[849,4,916,2],[849,5,916,3],[850,4,918,2],[850,10,918,8,"upgradeAbility"],[850,24,918,22],[850,27,918,26,"abilityId"],[850,36,918,43],[850,40,918,57],[851,6,919,4],[851,13,919,11,"combatState"],[851,24,919,22],[851,25,919,23,"abilityManager"],[851,39,919,37],[851,40,919,38,"upgradeAbility"],[851,54,919,52],[851,55,919,53,"abilityId"],[851,64,919,62],[851,65,919,63],[852,4,920,2],[852,5,920,3],[854,4,922,2],[855,4,923,2],[855,10,923,8,"clearAllEnemies"],[855,25,923,23],[855,28,923,26,"clearAllEnemies"],[855,29,923,26],[855,34,923,32],[856,6,924,4,"console"],[856,13,924,11],[856,14,924,12,"log"],[856,17,924,15],[856,18,924,16],[856,67,924,65],[856,68,924,66],[857,6,925,4,"setCombatState"],[857,20,925,18],[857,21,925,19,"prev"],[857,25,925,23],[857,30,925,28],[858,8,926,6],[858,11,926,9,"prev"],[858,15,926,13],[859,8,927,6,"enemies"],[859,15,927,13],[859,17,927,15],[860,6,928,4],[860,7,928,5],[860,8,928,6],[860,9,928,7],[861,4,929,2],[861,5,929,3],[863,4,931,2],[864,4,932,2],[866,4,934,2],[867,4,935,2],[867,10,935,8,"spawnEnemy"],[867,20,935,18],[867,23,935,22,"position"],[867,31,935,57],[867,35,935,75],[868,6,936,4],[868,12,936,10,"SCREEN_WIDTH"],[868,24,936,22],[868,27,936,25],[868,30,936,28],[869,6,937,4],[869,12,937,10,"GAME_AREA_HEIGHT"],[869,28,937,26],[869,31,937,29],[869,34,937,32],[869,37,937,35],[869,40,937,38],[869,41,937,39],[869,42,937,40],[870,6,938,4],[870,12,938,10,"ENEMY_SIZE"],[870,22,938,20],[870,25,938,23],[870,27,938,25],[872,6,940,4],[873,6,941,4],[873,12,941,10,"x"],[873,13,941,11],[873,16,941,14,"position"],[873,24,941,22],[873,26,941,24,"x"],[873,27,941,25],[873,31,941,29,"Math"],[873,35,941,33],[873,36,941,34,"random"],[873,42,941,40],[873,43,941,41],[873,44,941,42],[873,48,941,46,"SCREEN_WIDTH"],[873,60,941,58],[873,63,941,61,"ENEMY_SIZE"],[873,73,941,71],[873,76,941,74],[873,77,941,75],[873,78,941,76],[873,81,941,79,"ENEMY_SIZE"],[873,91,941,89],[874,6,942,4],[874,12,942,10,"y"],[874,13,942,11],[874,16,942,14,"position"],[874,24,942,22],[874,26,942,24,"y"],[874,27,942,25],[874,31,942,29,"Math"],[874,35,942,33],[874,36,942,34,"random"],[874,42,942,40],[874,43,942,41],[874,44,942,42],[874,48,942,46,"GAME_AREA_HEIGHT"],[874,64,942,62],[874,67,942,65,"ENEMY_SIZE"],[874,77,942,75],[874,80,942,78],[874,81,942,79],[874,82,942,80],[874,85,942,83,"ENEMY_SIZE"],[874,95,942,93],[875,6,944,4],[875,12,944,10,"enemy"],[875,17,944,28],[875,20,944,31],[876,8,945,6,"id"],[876,10,945,8],[876,12,945,10],[876,21,945,19],[876,23,945,21,"enemyCounter"],[876,35,945,33],[876,37,945,35],[877,8,946,6,"name"],[877,12,946,10],[877,14,946,12],[877,24,946,22],[878,8,947,6,"health"],[878,14,947,12],[878,16,947,14],[878,19,947,17],[879,8,948,6,"maxHealth"],[879,17,948,15],[879,19,948,17],[879,22,948,20],[880,8,949,6,"stats"],[880,13,949,11],[880,15,949,13],[881,10,950,8,"attack"],[881,16,950,14],[881,18,950,16],[881,20,950,18],[882,10,951,8,"defense"],[882,17,951,15],[882,19,951,17],[882,21,951,19],[883,10,952,8,"health"],[883,16,952,14],[883,18,952,16],[883,21,952,19],[884,10,953,8,"maxHealth"],[884,19,953,17],[884,21,953,19],[884,24,953,22],[885,10,954,8,"critChance"],[885,20,954,18],[885,22,954,20],[885,23,954,21],[886,10,955,8,"critDamage"],[886,20,955,18],[886,22,955,20],[886,25,955,23],[887,10,956,8,"cooldownReduction"],[887,27,956,25],[887,29,956,27],[888,8,957,6],[888,9,957,7],[889,8,958,6,"position"],[889,16,958,14],[889,18,958,16],[890,10,958,18,"x"],[890,11,958,19],[891,10,958,21,"y"],[892,8,958,23],[892,9,958,24],[893,8,959,6,"lastDamaged"],[893,19,959,17],[893,21,959,19],[894,6,960,4],[894,7,960,5],[895,6,962,4,"setCombatState"],[895,20,962,18],[895,21,962,19,"prev"],[895,25,962,23],[895,30,962,28],[896,8,963,6],[896,11,963,9,"prev"],[896,15,963,13],[897,8,964,6,"enemies"],[897,15,964,13],[897,17,964,15],[897,18,964,16],[897,21,964,19,"prev"],[897,25,964,23],[897,26,964,24,"enemies"],[897,33,964,31],[897,35,964,33,"enemy"],[897,40,964,38],[898,6,965,4],[898,7,965,5],[898,8,965,6],[898,9,965,7],[899,6,967,4],[899,13,967,11,"enemy"],[899,18,967,16],[900,4,968,2],[900,5,968,3],[902,4,970,2],[903,4,971,2],[903,10,971,8,"spawnBoss"],[903,19,971,17],[903,22,971,21,"bossEnemy"],[903,31,971,43],[903,35,971,48],[904,6,972,4,"console"],[904,13,972,11],[904,14,972,12,"log"],[904,17,972,15],[904,18,972,16],[904,39,972,37,"bossEnemy"],[904,48,972,46],[904,49,972,47,"name"],[904,53,972,51],[904,90,972,88],[904,91,972,89],[905,6,973,4,"setCombatState"],[905,20,973,18],[905,21,973,19,"prev"],[905,25,973,23],[905,30,973,28],[906,8,974,6],[906,11,974,9,"prev"],[906,15,974,13],[907,8,975,6,"enemies"],[907,15,975,13],[907,17,975,15],[907,18,975,16,"bossEnemy"],[907,27,975,25],[907,28,975,26],[907,29,975,27],[908,6,976,4],[908,7,976,5],[908,8,976,6],[908,9,976,7],[909,4,977,2],[909,5,977,3],[911,4,979,2],[912,4,980,2],[912,10,980,8,"clearSpecificEnemy"],[912,28,980,26],[912,31,980,30,"enemyId"],[912,38,980,45],[912,42,980,50],[913,6,981,4,"setCombatState"],[913,20,981,18],[913,21,981,19,"prev"],[913,25,981,23],[913,30,981,28],[914,8,982,6],[914,11,982,9,"prev"],[914,15,982,13],[915,8,983,6,"enemies"],[915,15,983,13],[915,17,983,15,"prev"],[915,21,983,19],[915,22,983,20,"enemies"],[915,29,983,27],[915,30,983,28,"filter"],[915,36,983,34],[915,37,983,35,"enemy"],[915,42,983,40],[915,46,983,44,"enemy"],[915,51,983,49],[915,52,983,50,"id"],[915,54,983,52],[915,59,983,57,"enemyId"],[915,66,983,64],[916,6,984,4],[916,7,984,5],[916,8,984,6],[916,9,984,7],[917,4,985,2],[917,5,985,3],[919,4,987,2],[920,4,988,2],[920,10,988,8,"useAbilityManually"],[920,28,988,26],[920,31,988,26,"_s3"],[920,34,988,26],[920,35,988,29],[920,39,988,29,"useCallback"],[920,45,988,40],[920,46,988,40,"useCallback"],[920,57,988,40],[920,59,988,40,"_s3"],[920,62,988,40],[920,63,988,42,"slotIndex"],[920,72,988,59],[920,76,988,73],[921,6,988,73,"_s3"],[921,9,988,73],[922,6,989,4,"console"],[922,13,989,11],[922,14,989,12,"log"],[922,17,989,15],[922,18,989,16],[922,64,989,62,"slotIndex"],[922,73,989,71],[922,82,989,80],[922,83,989,81],[923,6,990,4,"console"],[923,13,990,11],[923,14,990,12,"log"],[923,17,990,15],[923,18,990,16],[923,65,990,63,"slotIndex"],[923,74,990,72],[923,76,990,74],[923,77,990,75],[924,6,991,4,"console"],[924,13,991,11],[924,14,991,12,"log"],[924,17,991,15],[924,18,991,16],[924,53,991,51,"slotIndex"],[924,62,991,60],[924,64,991,62],[924,65,991,63],[926,6,993,4],[927,6,994,4],[927,10,994,8],[927,11,994,9,"game"],[927,15,994,13],[927,16,994,14,"gameState"],[927,25,994,23],[927,26,994,24,"isAlive"],[927,33,994,31],[927,35,994,33],[928,8,995,6,"console"],[928,15,995,13],[928,16,995,14,"log"],[928,19,995,17],[928,20,995,18],[928,70,995,68],[928,71,995,69],[929,8,996,6],[929,15,996,13],[929,20,996,18],[930,6,997,4],[932,6,999,4],[933,6,1000,4],[933,12,1000,10,"isReady"],[933,19,1000,17],[933,22,1000,20,"combatState"],[933,33,1000,31],[933,34,1000,32,"abilityManager"],[933,48,1000,46],[933,49,1000,47,"isAbilityReady"],[933,63,1000,61],[933,64,1000,62,"slotIndex"],[933,73,1000,71],[933,74,1000,72],[934,6,1001,4],[934,10,1001,8],[934,11,1001,9,"isReady"],[934,18,1001,16],[934,20,1001,18],[935,8,1002,6,"console"],[935,15,1002,13],[935,16,1002,14,"log"],[935,19,1002,17],[935,20,1002,18],[935,41,1002,39,"slotIndex"],[935,50,1002,48],[935,85,1002,83],[935,86,1002,84],[936,8,1003,6],[936,15,1003,13],[936,20,1003,18],[937,6,1004,4],[939,6,1006,4],[940,6,1007,4],[940,10,1007,8,"combatState"],[940,21,1007,19],[940,22,1007,20,"enemies"],[940,29,1007,27],[940,30,1007,28,"length"],[940,36,1007,34],[940,41,1007,39],[940,42,1007,40],[940,44,1007,42],[941,8,1008,6,"console"],[941,15,1008,13],[941,16,1008,14,"log"],[941,19,1008,17],[941,20,1008,18],[941,69,1008,67],[941,70,1008,68],[942,8,1009,6],[942,15,1009,13],[942,20,1009,18],[943,6,1010,4],[945,6,1012,4],[946,6,1013,4],[946,12,1013,10,"currentTick"],[946,23,1013,21],[946,26,1013,24,"combatEngine"],[946,45,1013,36],[946,46,1013,36,"combatEngine"],[946,58,1013,36],[946,59,1013,37,"getCurrentTick"],[946,73,1013,51],[946,74,1013,52],[946,75,1013,53],[947,6,1014,4],[947,12,1014,10,"success"],[947,19,1014,17],[947,22,1014,20,"combatState"],[947,33,1014,31],[947,34,1014,32,"abilityManager"],[947,48,1014,46],[947,49,1014,47,"useAbility"],[947,59,1014,57],[947,60,1014,58,"slotIndex"],[947,69,1014,67],[947,71,1014,69,"currentTick"],[947,82,1014,80],[947,83,1014,81],[948,6,1016,4],[948,10,1016,8,"success"],[948,17,1016,15],[948,19,1016,17],[949,8,1017,6],[950,8,1018,6,"setCombatState"],[950,22,1018,20],[950,23,1018,21,"prev"],[950,27,1018,25],[950,31,1018,29],[951,10,1019,8],[951,16,1019,14,"newState"],[951,24,1019,22],[951,27,1019,25],[952,12,1019,27],[952,15,1019,30,"prev"],[953,10,1019,35],[953,11,1019,36],[954,10,1020,8,"castAbility"],[954,21,1020,19],[954,22,1020,20,"newState"],[954,30,1020,28],[954,32,1020,30,"slotIndex"],[954,41,1020,39],[954,42,1020,40],[955,10,1021,8],[955,17,1021,15,"newState"],[955,25,1021,23],[956,8,1022,6],[956,9,1022,7],[956,10,1022,8],[957,8,1024,6,"console"],[957,15,1024,13],[957,16,1024,14,"log"],[957,19,1024,17],[957,20,1024,18],[957,65,1024,63,"slotIndex"],[957,74,1024,72],[957,76,1024,74],[957,77,1024,75],[958,8,1025,6],[958,15,1025,13],[958,19,1025,17],[959,6,1026,4],[959,7,1026,5],[959,13,1026,11],[960,8,1027,6,"console"],[960,15,1027,13],[960,16,1027,14,"log"],[960,19,1027,17],[960,20,1027,18],[960,61,1027,59,"slotIndex"],[960,70,1027,68],[960,72,1027,70],[960,73,1027,71],[961,8,1028,6],[961,15,1028,13],[961,20,1028,18],[962,6,1029,4],[963,4,1030,2],[963,5,1030,3],[963,46,1030,5],[963,47,1030,6,"combatState"],[963,58,1030,17],[963,59,1030,18,"abilityManager"],[963,73,1030,32],[963,75,1030,34,"combatState"],[963,86,1030,45],[963,87,1030,46,"enemies"],[963,94,1030,53],[963,95,1030,54],[963,96,1030,55],[964,4,1031,2],[964,8,1031,2,"useEffect"],[964,14,1031,11],[964,15,1031,11,"useEffect"],[964,24,1031,11],[964,26,1031,12],[964,32,1031,18],[965,6,1032,4,"combatEngine"],[965,25,1032,16],[965,26,1032,16,"combatEngine"],[965,38,1032,16],[965,39,1032,17,"start"],[965,44,1032,22],[965,45,1032,23],[965,46,1032,24],[967,6,1034,4],[968,6,1035,4],[969,6,1036,4,"console"],[969,13,1036,11],[969,14,1036,12,"log"],[969,17,1036,15],[969,18,1036,16],[969,97,1036,95],[969,98,1036,96],[970,6,1038,4],[970,13,1038,11],[970,19,1038,17],[971,8,1039,6,"combatEngine"],[971,27,1039,18],[971,28,1039,18,"combatEngine"],[971,40,1039,18],[971,41,1039,19,"stop"],[971,45,1039,23],[971,46,1039,24],[971,47,1039,25],[972,6,1040,4],[972,7,1040,5],[973,4,1041,2],[973,5,1041,3],[973,7,1041,5],[973,9,1041,7],[973,10,1041,8],[975,4,1043,2],[976,4,1044,2],[976,8,1044,2,"useEffect"],[976,14,1044,11],[976,15,1044,11,"useEffect"],[976,24,1044,11],[976,26,1044,12],[976,32,1044,18],[977,6,1045,4],[978,6,1046,4],[978,12,1046,10,"tickInterval"],[978,24,1046,22],[978,27,1046,25,"Platform"],[978,35,1046,33],[978,36,1046,33,"default"],[978,43,1046,33],[978,44,1046,34,"OS"],[978,46,1046,36],[978,51,1046,41],[978,56,1046,46],[978,59,1046,49],[978,62,1046,52],[978,65,1046,55],[978,68,1046,58],[978,69,1046,59],[978,70,1046,60],[979,6,1047,4,"console"],[979,13,1047,11],[979,14,1047,12,"log"],[979,17,1047,15],[979,18,1047,16],[979,91,1047,89,"tickInterval"],[979,103,1047,101],[979,112,1047,110,"Platform"],[979,120,1047,118],[979,121,1047,118,"default"],[979,128,1047,118],[979,129,1047,119,"OS"],[979,131,1047,121],[979,133,1047,123],[979,134,1047,124],[980,6,1048,4],[980,12,1048,10,"combatTickInterval"],[980,30,1048,28],[980,33,1048,31,"setInterval"],[980,44,1048,42],[980,45,1048,43,"handleCombatTick"],[980,61,1048,59],[980,63,1048,61,"tickInterval"],[980,75,1048,73],[980,76,1048,74],[981,6,1050,4],[981,13,1050,11],[981,19,1050,17],[982,8,1051,6,"console"],[982,15,1051,13],[982,16,1051,14,"log"],[982,19,1051,17],[982,20,1051,18],[982,51,1051,49],[982,52,1051,50],[983,8,1052,6,"clearInterval"],[983,21,1052,19],[983,22,1052,20,"combatTickInterval"],[983,40,1052,38],[983,41,1052,39],[984,6,1053,4],[984,7,1053,5],[985,4,1054,2],[985,5,1054,3],[985,7,1054,5],[985,8,1054,6,"handleCombatTick"],[985,24,1054,22],[985,25,1054,23],[985,26,1054,24],[987,4,1056,2],[988,4,1057,2],[988,8,1057,2,"useEffect"],[988,14,1057,11],[988,15,1057,11,"useEffect"],[988,24,1057,11],[988,26,1057,12],[988,32,1057,18],[989,6,1058,4],[989,12,1058,10,"processProjectileImpacts"],[989,36,1058,34],[989,39,1058,37,"processProjectileImpacts"],[989,40,1058,37],[989,45,1058,43],[990,8,1059,6,"setProjectiles"],[990,22,1059,20],[990,23,1059,21,"currentProjectiles"],[990,41,1059,39],[990,45,1059,43],[991,10,1060,8],[991,17,1060,15,"currentProjectiles"],[991,35,1060,33],[991,36,1060,34,"map"],[991,39,1060,37],[991,40,1060,38,"projectile"],[991,50,1060,48],[991,54,1060,52],[992,12,1061,10],[992,16,1061,14],[992,17,1061,15,"projectile"],[992,27,1061,25],[992,29,1061,27],[992,36,1061,34],[992,40,1061,38],[994,12,1063,10],[995,12,1064,10],[995,18,1064,16,"currentTime"],[995,29,1064,27],[995,32,1064,30,"Date"],[995,36,1064,34],[995,37,1064,35,"now"],[995,40,1064,38],[995,41,1064,39],[995,42,1064,40],[996,12,1065,10],[996,18,1065,16,"startTime"],[996,27,1065,25],[996,30,1065,28,"projectile"],[996,40,1065,38],[996,41,1065,39,"startTime"],[996,50,1065,48],[996,54,1065,52,"currentTime"],[996,65,1065,63],[997,12,1066,10],[997,18,1066,16,"elapsedTime"],[997,29,1066,27],[997,32,1066,30,"currentTime"],[997,43,1066,41],[997,46,1066,44,"startTime"],[997,55,1066,53],[998,12,1067,10],[998,18,1067,16,"progress"],[998,26,1067,24],[998,29,1067,27,"Math"],[998,33,1067,31],[998,34,1067,32,"min"],[998,37,1067,35],[998,38,1067,36,"elapsedTime"],[998,49,1067,47],[998,53,1067,51,"projectile"],[998,63,1067,61],[998,64,1067,62,"duration"],[998,72,1067,70],[998,76,1067,74],[998,79,1067,77],[998,80,1067,78],[998,82,1067,80],[998,83,1067,81],[998,84,1067,82],[1000,12,1069,10],[1001,12,1070,10],[1001,16,1070,14,"progress"],[1001,24,1070,22],[1001,28,1070,26],[1001,29,1070,27],[1001,33,1070,31],[1001,34,1070,32,"projectile"],[1001,44,1070,42],[1001,45,1070,43,"hasHit"],[1001,51,1070,49],[1001,53,1070,51],[1002,14,1071,12],[1003,14,1072,12,"console"],[1003,21,1072,19],[1003,22,1072,20,"log"],[1003,25,1072,23],[1003,26,1072,24],[1003,51,1072,49,"projectile"],[1003,61,1072,59],[1003,62,1072,60,"abilityName"],[1003,73,1072,71],[1003,97,1072,95],[1003,98,1072,96],[1004,14,1074,12,"setCombatState"],[1004,28,1074,26],[1004,29,1074,27,"prev"],[1004,33,1074,31],[1004,37,1074,35],[1005,16,1075,14],[1005,22,1075,20,"newState"],[1005,30,1075,28],[1005,33,1075,31],[1006,18,1075,33],[1006,21,1075,36,"prev"],[1007,16,1075,41],[1007,17,1075,42],[1008,16,1077,14],[1008,20,1077,18,"projectile"],[1008,30,1077,28],[1008,31,1077,29,"isAOE"],[1008,36,1077,34],[1008,40,1077,38,"projectile"],[1008,50,1077,48],[1008,51,1077,49,"aoeRadius"],[1008,60,1077,58],[1008,64,1077,62,"projectile"],[1008,74,1077,72],[1008,75,1077,73,"aoeRadius"],[1008,84,1077,82],[1008,87,1077,85],[1008,88,1077,86],[1008,90,1077,88],[1009,18,1078,16],[1010,18,1079,16,"console"],[1010,25,1079,23],[1010,26,1079,24,"log"],[1010,29,1079,27],[1010,30,1079,28],[1010,59,1079,57,"projectile"],[1010,69,1079,67],[1010,70,1079,68,"abilityName"],[1010,81,1079,79],[1010,97,1079,95,"projectile"],[1010,107,1079,105],[1010,108,1079,106,"aoeRadius"],[1010,117,1079,115],[1010,119,1079,117],[1010,120,1079,118],[1011,18,1081,16],[1011,24,1081,22,"impactX"],[1011,31,1081,29],[1011,34,1081,32,"projectile"],[1011,44,1081,42],[1011,45,1081,43,"targetX"],[1011,52,1081,50],[1012,18,1082,16],[1012,24,1082,22,"impactY"],[1012,31,1082,29],[1012,34,1082,32,"projectile"],[1012,44,1082,42],[1012,45,1082,43,"targetY"],[1012,52,1082,50],[1013,18,1083,16],[1013,24,1083,22,"enemiesKilled"],[1013,37,1083,50],[1013,40,1083,53],[1013,42,1083,55],[1015,18,1085,16],[1016,18,1086,16,"newState"],[1016,26,1086,24],[1016,27,1086,25,"enemies"],[1016,34,1086,32],[1016,37,1086,35,"newState"],[1016,45,1086,43],[1016,46,1086,44,"enemies"],[1016,53,1086,51],[1016,54,1086,52,"map"],[1016,57,1086,55],[1016,58,1086,56,"enemy"],[1016,63,1086,61],[1016,67,1086,65],[1017,20,1087,18],[1017,24,1087,22,"enemy"],[1017,29,1087,27],[1017,30,1087,28,"health"],[1017,36,1087,34],[1017,40,1087,38],[1017,41,1087,39],[1017,45,1087,43,"enemy"],[1017,50,1087,48],[1017,51,1087,49,"markedForDeath"],[1017,65,1087,63],[1017,67,1087,65],[1017,74,1087,72,"enemy"],[1017,79,1087,77],[1018,20,1089,18],[1018,26,1089,24,"enemyX"],[1018,32,1089,30],[1018,35,1089,33,"enemy"],[1018,40,1089,38],[1018,41,1089,39,"position"],[1018,49,1089,47],[1018,50,1089,48,"x"],[1018,51,1089,49],[1018,54,1089,52],[1018,58,1089,56],[1018,59,1089,57],[1018,60,1089,58],[1019,20,1090,18],[1019,26,1090,24,"enemyY"],[1019,32,1090,30],[1019,35,1090,33,"enemy"],[1019,40,1090,38],[1019,41,1090,39,"position"],[1019,49,1090,47],[1019,50,1090,48,"y"],[1019,51,1090,49],[1019,54,1090,52],[1019,58,1090,56],[1020,20,1091,18],[1020,26,1091,24,"distance"],[1020,34,1091,32],[1020,37,1091,35,"Math"],[1020,41,1091,39],[1020,42,1091,40,"sqrt"],[1020,46,1091,44],[1020,47,1091,45,"Math"],[1020,51,1091,49],[1020,52,1091,50,"pow"],[1020,55,1091,53],[1020,56,1091,54,"enemyX"],[1020,62,1091,60],[1020,65,1091,63,"impactX"],[1020,72,1091,70],[1020,74,1091,72],[1020,75,1091,73],[1020,76,1091,74],[1020,79,1091,77,"Math"],[1020,83,1091,81],[1020,84,1091,82,"pow"],[1020,87,1091,85],[1020,88,1091,86,"enemyY"],[1020,94,1091,92],[1020,97,1091,95,"impactY"],[1020,104,1091,102],[1020,106,1091,104],[1020,107,1091,105],[1020,108,1091,106],[1020,109,1091,107],[1021,20,1093,18,"console"],[1021,27,1093,25],[1021,28,1093,26,"log"],[1021,31,1093,29],[1021,32,1093,30],[1021,58,1093,56,"enemy"],[1021,63,1093,61],[1021,64,1093,62,"name"],[1021,68,1093,66],[1021,76,1093,74,"enemyX"],[1021,82,1093,80],[1021,87,1093,85,"enemyY"],[1021,93,1093,91],[1021,109,1093,107,"impactX"],[1021,116,1093,114],[1021,121,1093,119,"impactY"],[1021,128,1093,126],[1021,135,1093,133,"distance"],[1021,143,1093,141],[1021,144,1093,142,"toFixed"],[1021,151,1093,149],[1021,152,1093,150],[1021,153,1093,151],[1021,154,1093,152],[1021,169,1093,167,"projectile"],[1021,179,1093,177],[1021,180,1093,178,"aoeRadius"],[1021,189,1093,187],[1021,194,1093,192],[1021,195,1093,193],[1022,20,1095,18],[1022,24,1095,22,"distance"],[1022,32,1095,30],[1022,36,1095,34,"projectile"],[1022,46,1095,44],[1022,47,1095,45,"aoeRadius"],[1022,56,1095,54],[1022,58,1095,56],[1023,22,1096,20],[1024,22,1097,20],[1024,28,1097,26,"newHealth"],[1024,37,1097,35],[1024,40,1097,38,"Math"],[1024,44,1097,42],[1024,45,1097,43,"max"],[1024,48,1097,46],[1024,49,1097,47],[1024,50,1097,48],[1024,52,1097,50,"enemy"],[1024,57,1097,55],[1024,58,1097,56,"health"],[1024,64,1097,62],[1024,67,1097,65,"projectile"],[1024,77,1097,75],[1024,78,1097,76,"damage"],[1024,84,1097,82],[1024,85,1097,83],[1025,22,1099,20,"console"],[1025,29,1099,27],[1025,30,1099,28,"log"],[1025,33,1099,31],[1025,34,1099,32],[1025,52,1099,50,"enemy"],[1025,57,1099,55],[1025,58,1099,56,"name"],[1025,62,1099,60],[1025,74,1099,72,"projectile"],[1025,84,1099,82],[1025,85,1099,83,"damage"],[1025,91,1099,89],[1025,103,1099,101,"enemy"],[1025,108,1099,106],[1025,109,1099,107,"health"],[1025,115,1099,113],[1025,122,1099,120,"newHealth"],[1025,131,1099,129],[1025,134,1099,132],[1025,135,1099,133],[1027,22,1101,20],[1028,22,1102,20],[1028,26,1102,24,"newHealth"],[1028,35,1102,33],[1028,39,1102,37],[1028,40,1102,38],[1028,44,1102,42,"enemy"],[1028,49,1102,47],[1028,50,1102,48,"health"],[1028,56,1102,54],[1028,59,1102,57],[1028,60,1102,58],[1028,62,1102,60],[1029,24,1103,22,"console"],[1029,31,1103,29],[1029,32,1103,30,"log"],[1029,35,1103,33],[1029,36,1103,34],[1029,52,1103,50,"enemy"],[1029,57,1103,55],[1029,58,1103,56,"name"],[1029,62,1103,60],[1029,76,1103,74,"projectile"],[1029,86,1103,84],[1029,87,1103,85,"abilityName"],[1029,98,1103,96],[1029,101,1103,99],[1029,102,1103,100],[1030,24,1104,22,"enemiesKilled"],[1030,37,1104,35],[1030,38,1104,36,"push"],[1030,42,1104,40],[1030,43,1104,41,"enemy"],[1030,48,1104,46],[1030,49,1104,47],[1030,50,1104,48],[1030,51,1104,49],[1032,24,1106,22],[1032,31,1106,29],[1033,26,1107,24],[1033,29,1107,27,"enemy"],[1033,34,1107,32],[1034,26,1108,24,"health"],[1034,32,1108,30],[1034,34,1108,32],[1034,35,1108,33],[1035,26,1109,24,"markedForDeath"],[1035,40,1109,38],[1035,42,1109,40],[1035,46,1109,44],[1036,26,1110,24,"lastDamaged"],[1036,37,1110,35],[1036,39,1110,37,"combatEngine"],[1036,58,1110,49],[1036,59,1110,49,"combatEngine"],[1036,71,1110,49],[1036,72,1110,50,"getCurrentTick"],[1036,86,1110,64],[1036,87,1110,65],[1037,24,1111,22],[1037,25,1111,23],[1038,22,1112,20],[1038,23,1112,21],[1038,29,1112,27],[1039,24,1113,22],[1039,31,1113,29],[1040,26,1114,24],[1040,29,1114,27,"enemy"],[1040,34,1114,32],[1041,26,1115,24,"health"],[1041,32,1115,30],[1041,34,1115,32,"newHealth"],[1041,43,1115,41],[1042,26,1116,24,"lastDamaged"],[1042,37,1116,35],[1042,39,1116,37,"combatEngine"],[1042,58,1116,49],[1042,59,1116,49,"combatEngine"],[1042,71,1116,49],[1042,72,1116,50,"getCurrentTick"],[1042,86,1116,64],[1042,87,1116,65],[1043,24,1117,22],[1043,25,1117,23],[1044,22,1118,20],[1045,20,1119,18],[1046,20,1121,18],[1046,27,1121,25,"enemy"],[1046,32,1121,30],[1046,33,1121,31],[1046,34,1121,32],[1047,18,1122,16],[1047,19,1122,17],[1047,20,1122,18],[1049,18,1124,16],[1050,18,1125,16],[1050,22,1125,20,"enemiesKilled"],[1050,35,1125,33],[1050,36,1125,34,"length"],[1050,42,1125,40],[1050,45,1125,43],[1050,46,1125,44],[1050,48,1125,46],[1051,20,1126,18,"console"],[1051,27,1126,25],[1051,28,1126,26,"log"],[1051,31,1126,29],[1051,32,1126,30],[1051,52,1126,50,"enemiesKilled"],[1051,65,1126,63],[1051,66,1126,64,"length"],[1051,72,1126,70],[1051,94,1126,92,"projectile"],[1051,104,1126,102],[1051,105,1126,103,"abilityName"],[1051,116,1126,114],[1051,118,1126,116],[1051,119,1126,117],[1052,20,1127,18],[1053,20,1128,18,"enemiesKilled"],[1053,33,1128,31],[1053,34,1128,32,"forEach"],[1053,41,1128,39],[1053,42,1128,40,"enemy"],[1053,47,1128,45],[1053,51,1128,49,"handleEnemyKill"],[1053,66,1128,64],[1053,67,1128,65,"enemy"],[1053,72,1128,70],[1053,73,1128,71],[1053,74,1128,72],[1054,18,1129,16],[1055,16,1131,14],[1055,17,1131,15],[1055,23,1131,21],[1056,18,1132,16],[1057,18,1133,16],[1057,24,1133,22,"enemyIndex"],[1057,34,1133,32],[1057,37,1133,35,"newState"],[1057,45,1133,43],[1057,46,1133,44,"enemies"],[1057,53,1133,51],[1057,54,1133,52,"findIndex"],[1057,63,1133,61],[1057,64,1133,62,"e"],[1057,65,1133,63],[1057,69,1133,67,"e"],[1057,70,1133,68],[1057,71,1133,69,"id"],[1057,73,1133,71],[1057,78,1133,76,"projectile"],[1057,88,1133,86],[1057,89,1133,87,"targetEnemyId"],[1057,102,1133,100],[1057,103,1133,101],[1058,18,1135,16],[1058,22,1135,20,"enemyIndex"],[1058,32,1135,30],[1058,36,1135,34],[1058,37,1135,35],[1058,41,1135,39,"newState"],[1058,49,1135,47],[1058,50,1135,48,"enemies"],[1058,57,1135,55],[1058,58,1135,56,"enemyIndex"],[1058,68,1135,66],[1058,69,1135,67],[1058,70,1135,68,"health"],[1058,76,1135,74],[1058,79,1135,77],[1058,80,1135,78],[1058,84,1135,82],[1058,85,1135,83,"newState"],[1058,93,1135,91],[1058,94,1135,92,"enemies"],[1058,101,1135,99],[1058,102,1135,100,"enemyIndex"],[1058,112,1135,110],[1058,113,1135,111],[1058,114,1135,112,"markedForDeath"],[1058,128,1135,126],[1058,130,1135,128],[1059,20,1136,18,"newState"],[1059,28,1136,26],[1059,29,1136,27,"enemies"],[1059,36,1136,34],[1059,39,1136,37],[1059,40,1136,38],[1059,43,1136,41,"newState"],[1059,51,1136,49],[1059,52,1136,50,"enemies"],[1059,59,1136,57],[1059,60,1136,58],[1060,20,1137,18],[1060,26,1137,24,"enemy"],[1060,31,1137,29],[1060,34,1137,32,"newState"],[1060,42,1137,40],[1060,43,1137,41,"enemies"],[1060,50,1137,48],[1060,51,1137,49,"enemyIndex"],[1060,61,1137,59],[1060,62,1137,60],[1061,20,1138,18],[1061,26,1138,24,"newHealth"],[1061,35,1138,33],[1061,38,1138,36,"Math"],[1061,42,1138,40],[1061,43,1138,41,"max"],[1061,46,1138,44],[1061,47,1138,45],[1061,48,1138,46],[1061,50,1138,48,"enemy"],[1061,55,1138,53],[1061,56,1138,54,"health"],[1061,62,1138,60],[1061,65,1138,63,"projectile"],[1061,75,1138,73],[1061,76,1138,74,"damage"],[1061,82,1138,80],[1061,83,1138,81],[1062,20,1140,18,"newState"],[1062,28,1140,26],[1062,29,1140,27,"enemies"],[1062,36,1140,34],[1062,37,1140,35,"enemyIndex"],[1062,47,1140,45],[1062,48,1140,46],[1062,51,1140,49],[1063,22,1141,20],[1063,25,1141,23,"enemy"],[1063,30,1141,28],[1064,22,1142,20,"health"],[1064,28,1142,26],[1064,30,1142,28,"newHealth"],[1064,39,1142,37],[1065,22,1143,20,"lastDamaged"],[1065,33,1143,31],[1065,35,1143,33,"combatEngine"],[1065,54,1143,45],[1065,55,1143,45,"combatEngine"],[1065,67,1143,45],[1065,68,1143,46,"getCurrentTick"],[1065,82,1143,60],[1065,83,1143,61],[1066,20,1144,18],[1066,21,1144,19],[1067,20,1146,18,"console"],[1067,27,1146,25],[1067,28,1146,26,"log"],[1067,31,1146,29],[1067,32,1146,30],[1067,60,1146,58,"enemy"],[1067,65,1146,63],[1067,66,1146,64,"name"],[1067,70,1146,68],[1067,82,1146,80,"newHealth"],[1067,91,1146,89],[1067,95,1146,93,"enemy"],[1067,100,1146,98],[1067,101,1146,99,"maxHealth"],[1067,110,1146,108],[1067,112,1146,110],[1067,113,1146,111],[1069,20,1148,18],[1070,20,1149,18],[1070,24,1149,22,"newHealth"],[1070,33,1149,31],[1070,37,1149,35],[1070,38,1149,36],[1070,42,1149,40,"enemy"],[1070,47,1149,45],[1070,48,1149,46,"health"],[1070,54,1149,52],[1070,57,1149,55],[1070,58,1149,56],[1070,60,1149,58],[1071,22,1150,20,"console"],[1071,29,1150,27],[1071,30,1150,28,"log"],[1071,33,1150,31],[1071,34,1150,32],[1071,54,1150,52,"enemy"],[1071,59,1150,57],[1071,60,1150,58,"name"],[1071,64,1150,62],[1071,78,1150,76,"projectile"],[1071,88,1150,86],[1071,89,1150,87,"abilityName"],[1071,100,1150,98],[1071,136,1150,134],[1071,137,1150,135],[1073,22,1152,20],[1074,22,1153,20,"newState"],[1074,30,1153,28],[1074,31,1153,29,"enemies"],[1074,38,1153,36],[1074,39,1153,37,"enemyIndex"],[1074,49,1153,47],[1074,50,1153,48],[1074,53,1153,51],[1075,24,1154,22],[1075,27,1154,25,"newState"],[1075,35,1154,33],[1075,36,1154,34,"enemies"],[1075,43,1154,41],[1075,44,1154,42,"enemyIndex"],[1075,54,1154,52],[1075,55,1154,53],[1076,24,1155,22,"health"],[1076,30,1155,28],[1076,32,1155,30],[1076,33,1155,31],[1077,24,1156,22,"isDying"],[1077,31,1156,29],[1077,33,1156,31],[1077,37,1156,35],[1078,24,1157,22,"deathStartTime"],[1078,38,1157,36],[1078,40,1157,38,"Date"],[1078,44,1157,42],[1078,45,1157,43,"now"],[1078,48,1157,46],[1078,49,1157,47],[1079,22,1158,20],[1079,23,1158,21],[1080,20,1159,18],[1080,21,1159,19],[1080,27,1159,25],[1080,31,1159,29,"enemy"],[1080,36,1159,34],[1080,37,1159,35,"health"],[1080,43,1159,41],[1080,46,1159,44],[1080,47,1159,45],[1080,49,1159,47],[1081,22,1160,20,"console"],[1081,29,1160,27],[1081,30,1160,28,"log"],[1081,33,1160,31],[1081,34,1160,32],[1081,48,1160,46,"enemy"],[1081,53,1160,51],[1081,54,1160,52,"name"],[1081,58,1160,56],[1081,70,1160,68,"projectile"],[1081,80,1160,78],[1081,81,1160,79,"damage"],[1081,87,1160,85],[1081,99,1160,97,"enemy"],[1081,104,1160,102],[1081,105,1160,103,"health"],[1081,111,1160,109],[1081,117,1160,115,"newHealth"],[1081,126,1160,124],[1081,129,1160,127],[1081,130,1160,128],[1082,20,1161,18],[1083,18,1162,16],[1084,16,1163,14],[1085,16,1165,14],[1085,23,1165,21,"newState"],[1085,31,1165,29],[1086,14,1166,12],[1086,15,1166,13],[1086,16,1166,14],[1088,14,1168,12],[1089,14,1169,12],[1090,12,1170,10],[1092,12,1172,10],[1093,12,1173,10],[1094,12,1174,10],[1094,18,1174,16,"timeBasedCleanup"],[1094,34,1174,32],[1094,37,1174,35,"elapsedTime"],[1094,48,1174,46],[1094,51,1174,49],[1094,55,1174,53],[1094,56,1174,54],[1094,57,1174,55],[1095,12,1175,10],[1095,16,1175,14,"progress"],[1095,24,1175,22],[1095,28,1175,26],[1095,31,1175,29],[1095,35,1175,33,"timeBasedCleanup"],[1095,51,1175,49],[1095,53,1175,51],[1096,14,1176,12],[1096,18,1176,16,"timeBasedCleanup"],[1096,34,1176,32],[1096,36,1176,34],[1097,16,1177,14,"console"],[1097,23,1177,21],[1097,24,1177,22,"log"],[1097,27,1177,25],[1097,28,1177,26],[1097,63,1177,61,"projectile"],[1097,73,1177,71],[1097,74,1177,72,"id"],[1097,76,1177,74],[1097,105,1177,103],[1097,106,1177,104],[1098,14,1178,12],[1099,14,1179,12],[1099,21,1179,19],[1099,25,1179,23],[1100,12,1180,10],[1101,12,1182,10],[1101,19,1182,17,"projectile"],[1101,29,1182,27],[1102,10,1183,8],[1102,11,1183,9],[1102,12,1183,10],[1102,13,1183,11,"filter"],[1102,19,1183,17],[1102,20,1183,18,"Boolean"],[1102,27,1183,25],[1102,28,1183,26],[1103,8,1184,6],[1103,9,1184,7],[1103,10,1184,8],[1104,6,1185,4],[1104,7,1185,5],[1106,6,1187,4],[1107,6,1188,4],[1107,12,1188,10,"impactInterval"],[1107,26,1188,24],[1107,29,1188,27,"setInterval"],[1107,40,1188,38],[1107,41,1188,39,"processProjectileImpacts"],[1107,65,1188,63],[1107,67,1188,65],[1107,69,1188,67],[1107,70,1188,68],[1108,6,1189,4],[1108,13,1189,11],[1108,19,1189,17,"clearInterval"],[1108,32,1189,30],[1108,33,1189,31,"impactInterval"],[1108,47,1189,45],[1108,48,1189,46],[1109,4,1190,2],[1109,5,1190,3],[1109,7,1190,5],[1109,9,1190,7],[1109,10,1190,8],[1109,11,1190,9],[1109,12,1190,10],[1111,4,1192,2],[1112,4,1193,2],[1112,10,1193,8,"saveAbilityData"],[1112,25,1193,23],[1112,28,1193,26],[1112,32,1193,26,"useCallback"],[1112,38,1193,37],[1112,39,1193,37,"useCallback"],[1112,50,1193,37],[1112,52,1193,38],[1112,58,1193,44],[1113,6,1194,4],[1113,10,1194,8,"combatState"],[1113,21,1194,19],[1113,22,1194,20,"abilityManager"],[1113,36,1194,34],[1113,38,1194,36],[1114,8,1195,6],[1114,14,1195,12,"abilityData"],[1114,25,1195,23],[1114,28,1195,26,"combatState"],[1114,39,1195,37],[1114,40,1195,38,"abilityManager"],[1114,54,1195,52],[1114,55,1195,53,"getSaveData"],[1114,66,1195,64],[1114,67,1195,65],[1114,68,1195,66],[1115,8,1196,6,"console"],[1115,15,1196,13],[1115,16,1196,14,"log"],[1115,19,1196,17],[1115,20,1196,18],[1115,70,1196,68],[1115,72,1196,70,"abilityData"],[1115,83,1196,81],[1115,84,1196,82],[1116,8,1197,6,"game"],[1116,12,1197,10],[1116,13,1197,11,"updateAbilityData"],[1116,30,1197,28],[1116,31,1197,29,"abilityData"],[1116,42,1197,40],[1116,43,1197,41],[1117,6,1198,4],[1118,4,1199,2],[1118,5,1199,3],[1118,7,1199,5],[1118,8,1199,6,"combatState"],[1118,19,1199,17],[1118,20,1199,18,"abilityManager"],[1118,34,1199,32],[1118,36,1199,34,"game"],[1118,40,1199,38],[1118,41,1199,39,"updateAbilityData"],[1118,58,1199,56],[1118,59,1199,57],[1118,60,1199,58],[1119,4,1201,2],[1119,10,1201,8,"contextValue"],[1119,22,1201,39],[1119,25,1201,42,"React"],[1119,30,1201,47],[1119,31,1201,47,"default"],[1119,38,1201,47],[1119,39,1201,48,"useMemo"],[1119,46,1201,55],[1119,47,1201,56],[1119,54,1201,63],[1120,6,1202,4,"combatState"],[1120,17,1202,15],[1121,6,1203,4,"projectiles"],[1121,17,1203,15],[1122,6,1204,4,"startCombat"],[1122,17,1204,15],[1123,6,1205,4,"stopCombat"],[1123,16,1205,14],[1124,6,1206,4,"equipAbility"],[1124,18,1206,16],[1125,6,1207,4,"handleEnemyKill"],[1125,21,1207,19],[1126,6,1208,4,"getDeck"],[1126,13,1208,11],[1127,6,1209,4,"getAvailableAbilities"],[1127,27,1209,25],[1128,6,1210,4,"upgradeAbility"],[1128,20,1210,18],[1129,6,1211,4,"spawnEnemy"],[1129,16,1211,14],[1130,6,1212,4,"spawnBoss"],[1130,15,1212,13],[1131,6,1213,4,"clearAllEnemies"],[1131,21,1213,19],[1132,6,1214,4,"clearSpecificEnemy"],[1132,24,1214,22],[1133,6,1215,4],[1134,6,1216,4,"findClosestEnemy"],[1134,22,1216,20],[1135,6,1217,4,"updateNinjaPosition"],[1135,25,1217,23],[1136,6,1218,4,"setManualControlActive"],[1136,28,1218,26],[1137,6,1219,4,"lastExplosionTime"],[1137,23,1219,21],[1138,6,1220,4,"useAbilityManually"],[1138,24,1220,22],[1139,6,1220,24],[1140,6,1221,4,"saveAbilityData"],[1140,21,1221,19],[1141,6,1221,21],[1142,6,1222,4,"shadowClone"],[1142,17,1222,15],[1142,19,1222,17,"combatState"],[1142,30,1222,28],[1142,31,1222,29,"shadowClone"],[1142,42,1222,40],[1142,43,1222,42],[1143,4,1223,2],[1143,5,1223,3],[1143,6,1223,4],[1143,8,1223,6],[1144,4,1224,4],[1145,4,1225,4],[1146,4,1226,4,"combatState"],[1146,15,1226,15],[1146,17,1227,4,"projectiles"],[1146,28,1227,15],[1146,30,1228,4,"lastExplosionTime"],[1146,47,1228,21],[1147,4,1229,4],[1148,4,1230,4,"combatState"],[1148,15,1230,15],[1148,16,1230,16,"abilityManager"],[1148,30,1230,30],[1148,32,1231,4,"combatState"],[1148,43,1231,15],[1148,44,1231,16,"enemies"],[1148,51,1231,23],[1148,53,1232,4,"combatState"],[1148,64,1232,15],[1148,65,1232,16,"shadowClone"],[1148,76,1232,27],[1149,4,1232,29],[1150,4,1233,4,"useAbilityManually"],[1150,22,1233,22],[1151,4,1233,24],[1152,4,1234,4,"saveAbilityData"],[1152,19,1234,19],[1152,20,1234,21],[1153,4,1234,21],[1153,5,1235,3],[1153,6,1235,4],[1154,4,1237,2],[1154,24,1238,4],[1154,28,1238,4,"_reactJsxDevRuntime"],[1154,47,1238,4],[1154,48,1238,4,"jsxDEV"],[1154,54,1238,4],[1154,56,1238,5,"CombatContext"],[1154,69,1238,18],[1154,70,1238,19,"Provider"],[1154,78,1238,27],[1155,6,1238,28,"value"],[1155,11,1238,33],[1155,13,1238,35,"contextValue"],[1155,25,1238,48],[1156,6,1238,48,"children"],[1156,14,1238,48],[1156,16,1239,7,"children"],[1157,4,1239,15],[1158,6,1239,15,"fileName"],[1158,14,1239,15],[1158,16,1239,15,"_jsxFileName"],[1158,28,1239,15],[1159,6,1239,15,"lineNumber"],[1159,16,1239,15],[1160,6,1239,15,"columnNumber"],[1160,18,1239,15],[1161,4,1239,15],[1161,11,1240,28],[1161,12,1240,29],[1162,2,1242,0],[1162,3,1242,1],[1163,2,1242,2,"_s4"],[1163,5,1242,2],[1163,6,106,13,"CombatProvider"],[1163,20,106,27],[1164,4,106,27],[1164,12,107,15,"useGame"],[1164,24,107,22],[1164,25,107,22,"useGame"],[1164,32,107,22],[1164,34,108,77,"useZone"],[1164,46,108,84],[1164,47,108,84,"useZone"],[1164,54,108,84],[1165,2,108,84],[1166,2,108,84,"_c"],[1166,4,108,84],[1166,7,106,13,"CombatProvider"],[1166,21,106,27],[1167,2,106,27],[1167,6,106,27,"_c"],[1167,8,106,27],[1168,2,106,27,"$RefreshReg$"],[1168,14,106,27],[1168,15,106,27,"_c"],[1168,17,106,27],[1169,0,106,27],[1169,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","deadEnemiesToProcess.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMO;mBJI;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;8FSU,uDT;mCUY;SVkB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}