{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      const xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      const goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    // CRITICAL FIX: Use React ref to capture dead enemies for XP processing to avoid closure issues\n    const deadEnemiesRef = (0, _react.useRef)([]);\n    const handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        const allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Use React ref to store dead enemies to avoid closure scoping issues\n        deadEnemiesRef.current = [...allDeadEnemies]; // Store in ref for XP processing\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        const currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            const animationDuration = 750; // 750ms death fade\n            const isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // BULK XP PROCESSING - Use ref to get dead enemies (FIXED: Closure scoping issue)\n      const deadEnemiesToProcess = deadEnemiesRef.current; // Get from ref instead of closure variable\n      if (deadEnemiesToProcess.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        const unprocessedEnemies = deadEnemiesToProcess; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG deadEnemiesToProcess xpAwarded status:`, deadEnemiesToProcess.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${deadEnemiesToProcess.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          let totalXP = 0;\n          let totalGold = 0;\n          const zoneKills = [];\n          const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          const goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier;\n            totalGold += 10 * goldMultiplier;\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              const wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 195,\n      y: 400\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        const ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        const ninjaY = currentNinjaPosition.y + 20;\n        const aoeRadius = ability.stats.aoeRadius;\n        const enemiesInRange = state.enemies.filter(enemy => {\n          const enemyX = enemy.position.x + 17.5; // Center of enemy\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      const tickInterval = Platform.default.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${Platform.default.OS}`);\n      const combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      const newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            const timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"MDeq8hWzWP3Z+s+8FtZeHd86Tq0=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1167,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1,0],[27,6,1,0,"_react"],[27,12,1,0],[27,15,1,0,"require"],[27,22,1,0],[27,23,1,0,"_dependencyMap"],[27,37,1,0],[28,2,1,0],[28,6,1,0,"React"],[28,11,1,0],[28,14,1,0,"_interopDefault"],[28,29,1,0],[28,30,1,0,"_react"],[28,36,1,0],[29,2,1,110],[29,6,1,110,"_reactNativeWebDistExportsPlatform"],[29,40,1,110],[29,43,1,110,"require"],[29,50,1,110],[29,51,1,110,"_dependencyMap"],[29,65,1,110],[30,2,1,110],[30,6,1,110,"Platform"],[30,14,1,110],[30,17,1,110,"_interopDefault"],[30,32,1,110],[30,33,1,110,"_reactNativeWebDistExportsPlatform"],[30,67,1,110],[31,2,3,0],[31,6,3,0,"_engineCombatEngine"],[31,25,3,0],[31,28,3,0,"require"],[31,35,3,0],[31,36,3,0,"_dependencyMap"],[31,50,3,0],[32,2,4,0],[32,6,4,0,"_typesAbilityTypes"],[32,24,4,0],[32,27,4,0,"require"],[32,34,4,0],[32,35,4,0,"_dependencyMap"],[32,49,4,0],[33,2,5,0],[33,6,5,0,"_GameContext"],[33,18,5,0],[33,21,5,0,"require"],[33,28,5,0],[33,29,5,0,"_dependencyMap"],[33,43,5,0],[34,2,6,0],[34,6,6,0,"_ZoneContext"],[34,18,6,0],[34,21,6,0,"require"],[34,28,6,0],[34,29,6,0,"_dependencyMap"],[34,43,6,0],[35,2,6,40],[35,6,6,40,"_reactJsxDevRuntime"],[35,25,6,40],[35,28,6,40,"require"],[35,35,6,40],[35,36,6,40,"_dependencyMap"],[35,50,6,40],[36,2,94,0],[36,8,94,6,"CombatContext"],[36,21,94,19],[36,37,94,22],[36,41,94,22,"createContext"],[36,47,94,35],[36,48,94,35,"createContext"],[36,61,94,35],[36,63,94,67,"undefined"],[36,72,94,76],[36,73,94,77],[37,2,96,7],[37,8,96,13,"useCombat"],[37,17,96,22],[37,20,96,25,"useCombat"],[37,21,96,25],[37,26,96,50],[38,4,96,50,"_s"],[38,6,96,50],[39,4,97,2],[39,10,97,8,"context"],[39,17,97,15],[39,20,97,18],[39,24,97,18,"useContext"],[39,30,97,28],[39,31,97,28,"useContext"],[39,41,97,28],[39,43,97,29,"CombatContext"],[39,56,97,42],[39,57,97,43],[40,4,98,2],[40,8,98,6],[40,9,98,7,"context"],[40,16,98,14],[40,18,98,16],[41,6,99,4],[41,12,99,10],[41,16,99,14,"Error"],[41,21,99,19],[41,22,99,20],[41,70,99,68],[41,71,99,69],[42,4,100,2],[43,4,101,2],[43,11,101,9,"context"],[43,18,101,16],[44,2,102,0],[44,3,102,1],[45,2,102,2,"_s"],[45,4,102,2],[45,5,96,13,"useCombat"],[45,14,96,22],[46,2,104,0],[46,6,104,4,"enemyCounter"],[46,18,104,16],[46,21,104,19],[46,22,104,20],[46,23,104,21],[46,24,104,22],[48,2,106,7],[48,8,106,13,"CombatProvider"],[48,22,106,27],[48,25,106,30,"CombatProvider"],[48,26,106,31],[49,4,106,33,"children"],[50,2,106,67],[50,3,106,68],[50,8,106,73],[51,4,106,73,"_s4"],[51,7,106,73],[52,4,106,73],[52,8,106,73,"_s3"],[52,11,106,73],[52,14,106,73,"$RefreshSig$"],[52,26,106,73],[53,4,107,2],[53,10,107,8,"game"],[53,14,107,12],[53,17,107,15],[53,21,107,15,"useGame"],[53,33,107,22],[53,34,107,22,"useGame"],[53,41,107,22],[53,43,107,23],[53,44,107,24],[54,4,108,2],[54,10,108,8],[55,6,108,10,"currentZone"],[55,17,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[58,6,108,58,"spawnZoneEnemy"],[59,4,108,73],[59,5,108,74],[59,8,108,77],[59,12,108,77,"useZone"],[59,24,108,84],[59,25,108,84,"useZone"],[59,32,108,84],[59,34,108,85],[59,35,108,86],[61,4,110,2],[62,4,111,2],[62,10,111,8,"initialCombatState"],[62,28,111,39],[62,31,111,42],[63,6,112,4,"isInCombat"],[63,16,112,14],[63,18,112,16],[63,23,112,21],[64,6,113,4,"currentTick"],[64,17,113,15],[64,19,113,17],[64,20,113,18],[65,6,114,4,"enemies"],[65,13,114,11],[65,15,114,13],[65,17,114,15],[66,6,115,4,"abilityManager"],[66,20,115,18],[66,22,115,20],[66,26,115,24,"AbilityManager"],[66,44,115,38],[66,45,115,38,"AbilityManager"],[66,59,115,38],[66,60,115,39],[66,61,115,40],[67,6,116,4,"statusEffects"],[67,19,116,17],[67,21,116,19],[67,25,116,23,"StatusEffectManager"],[67,44,116,42],[67,45,116,42,"StatusEffectManager"],[67,64,116,42],[67,65,116,43],[67,66,116,44],[68,6,117,4,"playerStats"],[68,17,117,15],[68,19,117,17],[69,8,118,6,"attack"],[69,14,118,12],[69,16,118,14],[69,18,118,16],[70,8,118,18],[71,8,119,6,"defense"],[71,15,119,13],[71,17,119,15],[71,18,119,16],[72,8,120,6,"health"],[72,14,120,12],[72,16,120,14],[72,19,120,17],[73,8,121,6,"maxHealth"],[73,17,121,15],[73,19,121,17],[73,22,121,20],[74,8,122,6,"critChance"],[74,18,122,16],[74,20,122,18],[74,21,122,19],[75,8,123,6,"critDamage"],[75,18,123,16],[75,20,123,18],[75,23,123,21],[76,8,124,6,"cooldownReduction"],[76,25,124,23],[76,27,124,25],[77,6,125,4],[78,4,126,2],[78,5,126,3],[79,4,128,2],[79,10,128,8],[79,11,128,9,"combatState"],[79,22,128,20],[79,24,128,22,"setCombatState"],[79,38,128,36],[79,39,128,37],[79,42,128,40],[79,46,128,40,"useState"],[79,52,128,48],[79,53,128,48,"useState"],[79,61,128,48],[79,63,128,62,"initialCombatState"],[79,81,128,80],[79,82,128,81],[81,4,130,2],[82,4,131,2],[82,8,131,2,"useEffect"],[82,14,131,11],[82,15,131,11,"useEffect"],[82,24,131,11],[82,26,131,12],[82,32,131,18],[83,6,132,4],[83,10,132,8,"game"],[83,14,132,12],[83,15,132,13,"gameState"],[83,24,132,22],[83,25,132,23,"abilityData"],[83,36,132,34],[83,40,132,38,"combatState"],[83,51,132,49],[83,52,132,50,"abilityManager"],[83,66,132,64],[83,68,132,66],[84,8,133,6,"console"],[84,15,133,13],[84,16,133,14,"log"],[84,19,133,17],[84,20,133,18],[84,68,133,66],[84,70,133,68,"game"],[84,74,133,72],[84,75,133,73,"gameState"],[84,84,133,82],[84,85,133,83,"abilityData"],[84,96,133,94],[84,97,133,95],[85,8,134,6,"combatState"],[85,19,134,17],[85,20,134,18,"abilityManager"],[85,34,134,32],[85,35,134,33,"restoreFromSaveData"],[85,54,134,52],[85,55,134,53,"game"],[85,59,134,57],[85,60,134,58,"gameState"],[85,69,134,67],[85,70,134,68,"abilityData"],[85,81,134,79],[85,82,134,80],[87,8,136,6],[88,8,137,6,"setCombatState"],[88,22,137,20],[88,23,137,21,"prev"],[88,27,137,25],[88,32,137,30],[89,10,137,32],[89,13,137,35,"prev"],[90,8,137,40],[90,9,137,41],[90,10,137,42],[90,11,137,43],[91,6,138,4],[92,4,139,2],[92,5,139,3],[92,7,139,5],[92,8,139,6,"game"],[92,12,139,10],[92,13,139,11,"gameState"],[92,22,139,20],[92,23,139,21,"abilityData"],[92,34,139,32],[92,36,139,34,"combatState"],[92,47,139,45],[92,48,139,46,"abilityManager"],[92,62,139,60],[92,63,139,61],[92,64,139,62],[94,4,141,2],[95,4,142,2],[95,8,142,2,"useEffect"],[95,14,142,11],[95,15,142,11,"useEffect"],[95,24,142,11],[95,26,142,12],[95,32,142,18],[96,6,143,4],[96,10,143,8,"game"],[96,14,143,12],[96,15,143,13,"gameState"],[96,24,143,22],[96,25,143,23,"ninja"],[96,30,143,28],[96,32,143,30],[97,8,144,6],[97,14,144,12,"effectiveStats"],[97,28,144,26],[97,31,144,29,"game"],[97,35,144,33],[97,36,144,34,"getEffectiveStats"],[97,53,144,51],[97,54,144,52],[97,55,144,53],[98,8,146,6,"setCombatState"],[98,22,146,20],[98,23,146,21,"prev"],[98,27,146,25],[98,31,146,29],[99,10,147,8],[100,10,148,8],[100,14,148,12,"prev"],[100,18,148,16],[100,19,148,17,"playerStats"],[100,30,148,28],[100,31,148,29,"maxHealth"],[100,40,148,38],[100,45,148,43],[100,48,148,46],[100,52,148,50,"prev"],[100,56,148,54],[100,57,148,55,"playerStats"],[100,68,148,66],[100,69,148,67,"attack"],[100,75,148,73],[100,80,148,78],[100,82,148,80],[100,84,148,82],[101,12,149,10,"console"],[101,19,149,17],[101,20,149,18,"log"],[101,23,149,21],[101,24,149,22],[101,60,149,58,"effectiveStats"],[101,74,149,72],[101,75,149,73,"health"],[101,81,149,79],[101,93,149,91,"effectiveStats"],[101,107,149,105],[101,108,149,106,"attack"],[101,114,149,112],[101,127,149,125,"effectiveStats"],[101,141,149,139],[101,142,149,140,"defense"],[101,149,149,147],[101,151,149,149],[101,152,149,150],[102,12,151,10],[102,19,151,17],[103,14,152,12],[103,17,152,15,"prev"],[103,21,152,19],[104,14,153,12,"playerStats"],[104,25,153,23],[104,27,153,25],[105,16,154,14,"attack"],[105,22,154,20],[105,24,154,22,"effectiveStats"],[105,38,154,36],[105,39,154,37,"attack"],[105,45,154,43],[106,16,155,14,"defense"],[106,23,155,21],[106,25,155,23,"effectiveStats"],[106,39,155,37],[106,40,155,38,"defense"],[106,47,155,45],[107,16,156,14,"health"],[107,22,156,20],[107,24,156,22,"effectiveStats"],[107,38,156,36],[107,39,156,37,"health"],[107,45,156,43],[108,16,156,45],[109,16,157,14,"maxHealth"],[109,25,157,23],[109,27,157,25,"effectiveStats"],[109,41,157,39],[109,42,157,40,"health"],[109,48,157,46],[110,16,158,14,"critChance"],[110,26,158,24],[110,28,158,26,"effectiveStats"],[110,42,158,40],[110,43,158,41,"critChance"],[110,53,158,51],[110,57,158,55],[110,58,158,56],[111,16,159,14,"critDamage"],[111,26,159,24],[111,28,159,26,"effectiveStats"],[111,42,159,40],[111,43,159,41,"critDamage"],[111,53,159,51],[111,57,159,55],[111,60,159,58],[112,16,160,14,"cooldownReduction"],[112,33,160,31],[112,35,160,33,"effectiveStats"],[112,49,160,47],[112,50,160,48,"cooldownReduction"],[112,67,160,65],[112,71,160,69],[113,14,161,12],[114,12,162,10],[114,13,162,11],[115,10,163,8],[116,10,164,8],[116,17,164,15,"prev"],[116,21,164,19],[117,8,165,6],[117,9,165,7],[117,10,165,8],[118,6,166,4],[119,4,167,2],[119,5,167,3],[119,7,167,5],[119,8,167,6,"game"],[119,12,167,10],[119,13,167,11,"gameState"],[119,22,167,20],[119,23,167,21,"ninja"],[119,28,167,26],[119,29,167,27],[119,30,167,28],[120,4,169,2],[120,10,169,8],[120,11,169,9,"projectiles"],[120,22,169,20],[120,24,169,22,"setProjectiles"],[120,38,169,36],[120,39,169,37],[120,42,169,40],[120,46,169,40,"useState"],[120,52,169,48],[120,53,169,48,"useState"],[120,61,169,48],[120,63,169,69],[120,65,169,71],[120,66,169,72],[121,4,170,2],[121,10,170,8],[121,11,170,9,"lastExplosionTime"],[121,28,170,26],[121,30,170,28,"setLastExplosionTime"],[121,50,170,48],[121,51,170,49],[121,54,170,52],[121,58,170,52,"useState"],[121,64,170,60],[121,65,170,60,"useState"],[121,73,170,60],[121,75,170,69],[121,76,170,70],[121,77,170,71],[122,4,171,2],[123,4,172,2],[125,4,174,2],[126,4,175,2],[126,10,175,8,"handleEnemyKill"],[126,25,175,23],[126,28,175,26],[126,32,175,26,"useCallback"],[126,38,175,37],[126,39,175,37,"useCallback"],[126,50,175,37],[126,52,175,39,"enemy"],[126,57,175,57],[126,61,175,62],[127,6,176,4],[128,6,177,4],[128,12,177,10,"xpReward"],[128,20,177,18],[128,23,177,21],[128,24,177,22,"enemy"],[128,29,177,27],[128,30,177,28,"zoneXP"],[128,36,177,34],[128,40,177,38],[128,41,177,39],[128,46,177,44,"game"],[128,50,177,48],[128,51,177,49,"gameState"],[128,60,177,58],[128,61,177,59,"subscriptionBenefits"],[128,81,177,79],[128,83,177,81,"xp_multiplier"],[128,96,177,94],[128,100,177,98],[128,103,177,101],[128,104,177,102],[129,6,178,4],[129,12,178,10,"goldReward"],[129,22,178,20],[129,25,178,23],[129,27,178,25],[129,31,178,29,"game"],[129,35,178,33],[129,36,178,34,"gameState"],[129,45,178,43],[129,46,178,44,"subscriptionBenefits"],[129,66,178,64],[129,68,178,66,"drop_multiplier"],[129,83,178,81],[129,87,178,85],[129,90,178,88],[129,91,178,89],[130,6,180,4,"console"],[130,13,180,11],[130,14,180,12,"log"],[130,17,180,15],[130,18,180,16],[130,46,180,44,"xpReward"],[130,54,180,52],[130,65,180,63,"goldReward"],[130,75,180,73],[130,88,180,86,"enemy"],[130,93,180,91],[130,94,180,92,"name"],[130,98,180,96],[130,100,180,98],[130,101,180,99],[132,6,182,4],[133,6,183,4,"game"],[133,10,183,8],[133,11,183,9,"updateNinja"],[133,22,183,20],[133,23,183,21,"prev"],[133,27,183,25],[133,32,183,30],[134,8,184,6,"experience"],[134,18,184,16],[134,20,184,18,"prev"],[134,24,184,22],[134,25,184,23,"experience"],[134,35,184,33],[134,38,184,36,"xpReward"],[134,46,184,44],[135,8,185,6,"gold"],[135,12,185,10],[135,14,185,12,"prev"],[135,18,185,16],[135,19,185,17,"gold"],[135,23,185,21],[135,26,185,24,"goldReward"],[136,6,186,4],[136,7,186,5],[136,8,186,6],[136,9,186,7],[138,6,188,4],[139,6,189,4,"setCombatState"],[139,20,189,18],[139,21,189,19,"prevState"],[139,30,189,28],[139,35,189,33],[140,8,190,6],[140,11,190,9,"prevState"],[140,20,190,18],[141,8,191,6,"enemies"],[141,15,191,13],[141,17,191,15,"prevState"],[141,26,191,24],[141,27,191,25,"enemies"],[141,34,191,32],[141,35,191,33,"map"],[141,38,191,36],[141,39,191,37,"e"],[141,40,191,38],[141,44,192,8,"e"],[141,45,192,9],[141,46,192,10,"id"],[141,48,192,12],[141,53,192,17,"enemy"],[141,58,192,22],[141,59,192,23,"id"],[141,61,192,25],[141,64,192,28],[142,10,192,30],[142,13,192,33,"e"],[142,14,192,34],[143,10,192,36,"xpAwarded"],[143,19,192,45],[143,21,192,47],[144,8,192,52],[144,9,192,53],[144,12,192,56,"e"],[144,13,193,6],[145,6,194,4],[145,7,194,5],[145,8,194,6],[145,9,194,7],[147,6,196,4],[148,6,197,4],[148,10,197,8,"enemy"],[148,15,197,13],[148,16,197,14,"zoneTypeId"],[148,26,197,24],[148,28,197,26],[149,8,198,6,"recordEnemyKill"],[149,23,198,21],[149,24,198,22],[150,10,199,8,"id"],[150,12,199,10],[150,14,199,12,"enemy"],[150,19,199,17],[150,20,199,18,"id"],[150,22,199,20],[151,10,200,8,"typeId"],[151,16,200,14],[151,18,200,16,"enemy"],[151,23,200,21],[151,24,200,22,"zoneTypeId"],[151,34,200,32],[152,10,201,8,"name"],[152,14,201,12],[152,16,201,14,"enemy"],[152,21,201,19],[152,22,201,20,"name"],[152,26,201,24],[153,10,202,8,"icon"],[153,14,202,12],[153,16,202,14],[153,20,202,18],[154,10,203,8,"hp"],[154,12,203,10],[154,14,203,12],[154,15,203,13],[155,10,204,8,"maxHP"],[155,15,204,13],[155,17,204,15,"enemy"],[155,22,204,20],[155,23,204,21,"maxHealth"],[155,32,204,30],[156,10,205,8,"attack"],[156,16,205,14],[156,18,205,16,"enemy"],[156,23,205,21],[156,24,205,22,"stats"],[156,29,205,27],[156,30,205,28,"attack"],[156,36,205,34],[157,10,206,8,"xp"],[157,12,206,10],[157,14,206,12,"enemy"],[157,19,206,17],[157,20,206,18,"zoneXP"],[157,26,206,24],[157,30,206,28],[157,31,206,29],[158,10,207,8,"position"],[158,18,207,16],[158,20,207,18,"enemy"],[158,25,207,23],[158,26,207,24,"position"],[159,8,208,6],[159,9,208,7],[159,10,208,8],[160,6,209,4],[161,4,210,2],[161,5,210,3],[161,7,210,5],[161,8,210,6,"game"],[161,12,210,10],[161,13,210,11,"updateNinja"],[161,24,210,22],[161,26,210,24,"game"],[161,30,210,28],[161,31,210,29,"gameState"],[161,40,210,38],[161,41,210,39,"subscriptionBenefits"],[161,61,210,59],[161,63,210,61,"recordEnemyKill"],[161,78,210,76],[161,79,210,77],[161,80,210,78],[163,4,212,2],[164,4,213,2],[165,4,214,2],[166,4,215,2],[166,10,215,8,"deadEnemiesRef"],[166,24,215,22],[166,27,215,25],[166,31,215,25,"useRef"],[166,37,215,31],[166,38,215,31,"useRef"],[166,44,215,31],[166,46,215,47],[166,48,215,49],[166,49,215,50],[167,4,217,2],[167,10,217,8,"handleCombatTick"],[167,26,217,24],[167,29,217,27,"React"],[167,34,217,32],[167,35,217,32,"default"],[167,42,217,32],[167,43,217,33,"useCallback"],[167,54,217,44],[167,55,217,45],[167,61,217,51],[168,6,217,51],[168,10,217,51,"_s2"],[168,13,217,51],[168,16,217,51,"$RefreshSig$"],[168,28,217,51],[169,6,218,4,"console"],[169,13,218,11],[169,14,218,12,"log"],[169,17,218,15],[169,18,218,16],[169,87,218,85],[169,88,218,86],[170,6,219,4,"console"],[170,13,219,11],[170,14,219,12,"log"],[170,17,219,15],[170,18,219,16],[170,65,219,63,"isManualControlActive"],[170,86,219,84],[170,99,219,97,"game"],[170,103,219,101],[170,104,219,102,"gameState"],[170,113,219,111],[170,114,219,112,"isAlive"],[170,121,219,119],[170,123,219,121],[170,124,219,122],[171,6,221,4,"_s2"],[171,9,221,4],[171,10,221,4,"setCombatState"],[171,24,221,18],[171,25,221,18,"_s2"],[171,28,221,18],[171,29,221,19,"prev"],[171,33,221,23],[171,37,221,27],[172,8,221,27,"_s2"],[172,11,221,27],[173,8,222,6],[173,14,222,12,"newTick"],[173,21,222,19],[173,24,222,22,"combatEngine"],[173,43,222,34],[173,44,222,34,"combatEngine"],[173,56,222,34],[173,57,222,35,"getCurrentTick"],[173,71,222,49],[173,72,222,50],[173,73,222,51],[174,8,223,6],[174,14,223,12,"newState"],[174,22,223,20],[174,25,223,23],[175,10,223,25],[175,13,223,28,"prev"],[175,17,223,32],[176,10,223,34,"currentTick"],[176,21,223,45],[176,23,223,47,"newTick"],[177,8,223,55],[177,9,223,56],[178,8,225,6],[178,12,225,10],[178,13,225,11,"newState"],[178,21,225,19],[178,22,225,20,"isInCombat"],[178,32,225,30],[178,34,225,32],[178,41,225,39,"newState"],[178,49,225,47],[180,8,227,6],[181,8,228,6,"newState"],[181,16,228,14],[181,17,228,15,"abilityManager"],[181,31,228,29],[181,32,228,30,"updateCooldowns"],[181,47,228,45],[181,48,228,46,"newTick"],[181,55,228,53],[181,56,228,54],[183,8,230,6],[184,8,231,6],[184,14,231,12,"effectResults"],[184,27,231,25],[184,30,231,28,"newState"],[184,38,231,36],[184,39,231,37,"statusEffects"],[184,52,231,50],[184,53,231,51,"processTick"],[184,64,231,62],[184,65,231,63,"newTick"],[184,72,231,70],[184,73,231,71],[186,8,233,6],[187,8,234,6,"effectResults"],[187,21,234,19],[187,22,234,20,"forEach"],[187,29,234,27],[187,30,234,28],[187,31,234,29,"results"],[187,38,234,36],[187,40,234,38,"entityId"],[187,48,234,46],[187,53,234,51],[188,10,235,8],[188,16,235,14,"enemyIndex"],[188,26,235,24],[188,29,235,27,"newState"],[188,37,235,35],[188,38,235,36,"enemies"],[188,45,235,43],[188,46,235,44,"findIndex"],[188,55,235,53],[188,56,235,54,"e"],[188,57,235,55],[188,61,235,59,"e"],[188,62,235,60],[188,63,235,61,"id"],[188,65,235,63],[188,70,235,68,"entityId"],[188,78,235,76],[188,79,235,77],[189,10,236,8],[189,14,236,12,"enemyIndex"],[189,24,236,22],[189,28,236,26],[189,29,236,27],[189,31,236,29],[190,12,237,10,"results"],[190,19,237,17],[190,20,237,18,"forEach"],[190,27,237,25],[190,28,237,26,"result"],[190,34,237,32],[190,38,237,36],[191,14,238,12,"newState"],[191,22,238,20],[191,23,238,21,"enemies"],[191,30,238,28],[191,31,238,29,"enemyIndex"],[191,41,238,39],[191,42,238,40],[191,43,238,41,"health"],[191,49,238,47],[191,53,238,51,"result"],[191,59,238,57],[191,60,238,58,"damage"],[191,66,238,64],[192,14,239,12,"newState"],[192,22,239,20],[192,23,239,21,"enemies"],[192,30,239,28],[192,31,239,29,"enemyIndex"],[192,41,239,39],[192,42,239,40],[192,43,239,41,"lastDamaged"],[192,54,239,52],[192,57,239,55,"newTick"],[192,64,239,62],[193,12,240,10],[193,13,240,11],[193,14,240,12],[194,10,241,8],[195,8,242,6],[195,9,242,7],[195,10,242,8],[197,8,244,6],[198,8,245,6],[199,8,246,6],[199,12,246,10,"newState"],[199,20,246,18],[199,21,246,19,"playerStats"],[199,32,246,30],[199,36,246,34,"game"],[199,40,246,38],[199,41,246,39,"gameState"],[199,50,246,48],[199,51,246,49,"ninja"],[199,56,246,54],[199,58,246,56],[200,10,247,8],[200,16,247,14,"effectiveStats"],[200,30,247,28],[200,33,247,31,"game"],[200,37,247,35],[200,38,247,36,"getEffectiveStats"],[200,55,247,53],[200,56,247,54],[200,57,247,55],[202,10,249,8],[203,10,250,8],[203,14,250,12,"newState"],[203,22,250,20],[203,23,250,21,"playerStats"],[203,34,250,32],[203,35,250,33,"attack"],[203,41,250,39],[203,46,250,44,"effectiveStats"],[203,60,250,58],[203,61,250,59,"attack"],[203,67,250,65],[203,71,251,12,"newState"],[203,79,251,20],[203,80,251,21,"playerStats"],[203,91,251,32],[203,92,251,33,"defense"],[203,99,251,40],[203,104,251,45,"effectiveStats"],[203,118,251,59],[203,119,251,60,"defense"],[203,126,251,67],[203,130,252,12,"newState"],[203,138,252,20],[203,139,252,21,"playerStats"],[203,150,252,32],[203,151,252,33,"maxHealth"],[203,160,252,42],[203,165,252,47,"effectiveStats"],[203,179,252,61],[203,180,252,62,"maxHealth"],[203,189,252,71],[203,191,252,73],[204,12,254,10,"console"],[204,19,254,17],[204,20,254,18,"log"],[204,23,254,21],[204,24,254,22],[204,58,254,56,"newState"],[204,66,254,64],[204,67,254,65,"playerStats"],[204,78,254,76],[204,79,254,77,"attack"],[204,85,254,83],[204,91,254,89,"effectiveStats"],[204,105,254,103],[204,106,254,104,"attack"],[204,112,254,110],[204,125,254,123,"newState"],[204,133,254,131],[204,134,254,132,"playerStats"],[204,145,254,143],[204,146,254,144,"defense"],[204,153,254,151],[204,159,254,157,"effectiveStats"],[204,173,254,171],[204,174,254,172,"defense"],[204,181,254,179],[204,192,254,190,"newState"],[204,200,254,198],[204,201,254,199,"playerStats"],[204,212,254,210],[204,213,254,211,"maxHealth"],[204,222,254,220],[204,228,254,226,"effectiveStats"],[204,242,254,240],[204,243,254,241,"maxHealth"],[204,252,254,250],[204,254,254,252],[204,255,254,253],[206,12,256,10],[207,12,257,10],[207,16,257,14,"newHealth"],[207,25,257,23],[207,28,257,26,"newState"],[207,36,257,34],[207,37,257,35,"playerStats"],[207,48,257,46],[207,49,257,47,"health"],[207,55,257,53],[208,12,258,10],[208,16,258,14,"newState"],[208,24,258,22],[208,25,258,23,"playerStats"],[208,36,258,34],[208,37,258,35,"maxHealth"],[208,46,258,44],[208,51,258,49,"effectiveStats"],[208,65,258,63],[208,66,258,64,"maxHealth"],[208,75,258,73],[208,77,258,75],[209,14,259,12],[210,14,260,12],[210,18,260,16,"effectiveStats"],[210,32,260,30],[210,33,260,31,"maxHealth"],[210,42,260,40],[210,45,260,43,"newState"],[210,53,260,51],[210,54,260,52,"playerStats"],[210,65,260,63],[210,66,260,64,"maxHealth"],[210,75,260,73],[210,78,260,76],[210,81,260,79],[210,83,260,81],[211,16,261,14],[212,16,262,14],[212,22,262,20,"healthRatio"],[212,33,262,31],[212,36,262,34,"newState"],[212,44,262,42],[212,45,262,43,"playerStats"],[212,56,262,54],[212,57,262,55,"maxHealth"],[212,66,262,64],[212,69,262,67],[212,70,262,68],[212,73,263,16,"newState"],[212,81,263,24],[212,82,263,25,"playerStats"],[212,93,263,36],[212,94,263,37,"health"],[212,100,263,43],[212,103,263,46,"newState"],[212,111,263,54],[212,112,263,55,"playerStats"],[212,123,263,66],[212,124,263,67,"maxHealth"],[212,133,263,76],[212,136,263,79],[212,137,263,80],[213,16,264,14,"newHealth"],[213,25,264,23],[213,28,264,26,"Math"],[213,32,264,30],[213,33,264,31,"floor"],[213,38,264,36],[213,39,264,37,"effectiveStats"],[213,53,264,51],[213,54,264,52,"maxHealth"],[213,63,264,61],[213,66,264,64,"healthRatio"],[213,77,264,75],[213,78,264,76],[214,14,265,12],[214,15,265,13],[214,21,265,19],[214,25,265,23,"newState"],[214,33,265,31],[214,34,265,32,"playerStats"],[214,45,265,43],[214,46,265,44,"health"],[214,52,265,50],[214,55,265,53,"effectiveStats"],[214,69,265,67],[214,70,265,68,"maxHealth"],[214,79,265,77],[214,81,265,79],[215,16,266,14],[216,16,267,14,"newHealth"],[216,25,267,23],[216,28,267,26,"effectiveStats"],[216,42,267,40],[216,43,267,41,"maxHealth"],[216,52,267,50],[217,14,268,12],[218,14,269,12],[219,12,270,10],[220,12,272,10,"newState"],[220,20,272,18],[220,21,272,19,"playerStats"],[220,32,272,30],[220,35,272,33],[221,14,273,12],[221,17,273,15,"newState"],[221,25,273,23],[221,26,273,24,"playerStats"],[221,37,273,35],[222,14,274,12,"attack"],[222,20,274,18],[222,22,274,20,"effectiveStats"],[222,36,274,34],[222,37,274,35,"attack"],[222,43,274,41],[223,14,275,12,"defense"],[223,21,275,19],[223,23,275,21,"effectiveStats"],[223,37,275,35],[223,38,275,36,"defense"],[223,45,275,43],[224,14,276,12,"maxHealth"],[224,23,276,21],[224,25,276,23,"effectiveStats"],[224,39,276,37],[224,40,276,38,"maxHealth"],[224,49,276,47],[225,14,276,49],[226,14,277,12,"health"],[226,20,277,18],[226,22,277,20,"newHealth"],[226,31,277,29],[227,14,277,31],[228,14,278,12,"critChance"],[228,24,278,22],[228,26,278,24,"effectiveStats"],[228,40,278,38],[228,41,278,39,"critChance"],[228,51,278,49],[228,55,278,53,"newState"],[228,63,278,61],[228,64,278,62,"playerStats"],[228,75,278,73],[228,76,278,74,"critChance"],[228,86,278,84],[229,14,279,12,"critDamage"],[229,24,279,22],[229,26,279,24,"effectiveStats"],[229,40,279,38],[229,41,279,39,"critDamage"],[229,51,279,49],[229,55,279,53,"newState"],[229,63,279,61],[229,64,279,62,"playerStats"],[229,75,279,73],[229,76,279,74,"critDamage"],[229,86,279,84],[230,14,280,12,"cooldownReduction"],[230,31,280,29],[230,33,280,31,"effectiveStats"],[230,47,280,45],[230,48,280,46,"cooldownReduction"],[230,65,280,63],[230,69,280,67,"newState"],[230,77,280,75],[230,78,280,76,"playerStats"],[230,89,280,87],[230,90,280,88,"cooldownReduction"],[231,12,281,10],[231,13,281,11],[232,10,282,8],[234,10,284,8],[235,10,285,8],[235,14,285,12,"game"],[235,18,285,16],[235,19,285,17,"gameState"],[235,28,285,26],[235,29,285,27,"isAlive"],[235,36,285,34],[235,40,286,12,"game"],[235,44,286,16],[235,45,286,17,"gameState"],[235,54,286,26],[235,55,286,27,"ninja"],[235,60,286,32],[235,61,286,33,"health"],[235,67,286,39],[235,72,286,44,"effectiveStats"],[235,86,286,58],[235,87,286,59,"maxHealth"],[235,96,286,68],[235,100,287,12,"newState"],[235,108,287,20],[235,109,287,21,"playerStats"],[235,120,287,32],[235,121,287,33,"health"],[235,127,287,39],[235,130,287,42,"effectiveStats"],[235,144,287,56],[235,145,287,57,"maxHealth"],[235,154,287,66],[235,157,287,69],[235,160,287,72],[235,162,287,74],[236,12,288,10,"console"],[236,19,288,17],[236,20,288,18,"log"],[236,23,288,21],[236,24,288,22],[236,58,288,56,"newState"],[236,66,288,64],[236,67,288,65,"playerStats"],[236,78,288,76],[236,79,288,77,"health"],[236,85,288,83],[236,91,288,89,"game"],[236,95,288,93],[236,96,288,94,"gameState"],[236,105,288,103],[236,106,288,104,"ninja"],[236,111,288,109],[236,112,288,110,"health"],[236,118,288,116],[236,139,288,137],[236,140,288,138],[237,12,289,10,"newState"],[237,20,289,18],[237,21,289,19,"playerStats"],[237,32,289,30],[237,33,289,31,"health"],[237,39,289,37],[237,42,289,40,"game"],[237,46,289,44],[237,47,289,45,"gameState"],[237,56,289,54],[237,57,289,55,"ninja"],[237,62,289,60],[237,63,289,61,"health"],[237,69,289,67],[238,10,290,8],[239,8,291,6],[241,8,293,6],[242,8,294,6,"newState"],[242,16,294,14],[242,17,294,15,"enemies"],[242,24,294,22],[242,25,294,23,"forEach"],[242,32,294,30],[242,33,294,31,"enemy"],[242,38,294,36],[242,42,294,40],[243,10,295,8],[243,14,295,12],[243,15,295,13,"enemy"],[243,20,295,18],[243,21,295,19,"isBoss"],[243,27,295,25],[243,29,295,27],[244,12,295,29],[245,12,296,10],[246,12,297,10],[246,18,297,16,"MOVEMENT_SPEED"],[246,32,297,30],[246,35,297,33],[246,39,297,37],[246,40,297,38],[246,41,297,39],[247,12,298,10],[247,18,298,16,"SCREEN_WIDTH"],[247,30,298,28],[247,33,298,31],[247,36,298,34],[248,12,299,10],[248,18,299,16,"GAME_AREA_HEIGHT"],[248,34,299,32],[248,37,299,35],[248,40,299,38],[248,41,299,39],[248,42,299,40],[249,12,300,10],[249,18,300,16,"ENEMY_SIZE"],[249,28,300,26],[249,31,300,29],[249,33,300,31],[251,12,302,10],[252,12,303,10],[252,18,303,16,"playerX"],[252,25,303,23],[252,28,303,26,"currentNinjaPosition"],[252,48,303,46],[252,49,303,47,"x"],[252,50,303,48],[253,12,304,10],[253,18,304,16,"playerY"],[253,25,304,23],[253,28,304,26,"currentNinjaPosition"],[253,48,304,46],[253,49,304,47,"y"],[253,50,304,48],[255,12,306,10],[256,12,307,10],[256,18,307,16,"deltaX"],[256,24,307,22],[256,27,307,25,"playerX"],[256,34,307,32],[256,37,307,35,"enemy"],[256,42,307,40],[256,43,307,41,"position"],[256,51,307,49],[256,52,307,50,"x"],[256,53,307,51],[257,12,308,10],[257,18,308,16,"deltaY"],[257,24,308,22],[257,27,308,25,"playerY"],[257,34,308,32],[257,37,308,35,"enemy"],[257,42,308,40],[257,43,308,41,"position"],[257,51,308,49],[257,52,308,50,"y"],[257,53,308,51],[258,12,309,10],[258,18,309,16,"distance"],[258,26,309,24],[258,29,309,27,"Math"],[258,33,309,31],[258,34,309,32,"sqrt"],[258,38,309,36],[258,39,309,37,"deltaX"],[258,45,309,43],[258,48,309,46,"deltaX"],[258,54,309,52],[258,57,309,55,"deltaY"],[258,63,309,61],[258,66,309,64,"deltaY"],[258,72,309,70],[258,73,309,71],[260,12,311,10],[261,12,312,10],[261,18,312,16,"ATTACK_RANGE"],[261,30,312,28],[261,33,312,31],[261,35,312,33],[261,36,312,34],[261,37,312,35],[262,12,313,10],[262,18,313,16,"ATTACK_COOLDOWN"],[262,33,313,31],[262,36,313,34],[262,38,313,36],[262,39,313,37],[262,40,313,38],[264,12,315,10],[264,16,315,14,"distance"],[264,24,315,22],[264,28,315,26,"ATTACK_RANGE"],[264,40,315,38],[264,42,315,40],[265,14,316,12],[266,14,317,12],[266,18,317,16],[266,19,317,17,"enemy"],[266,24,317,22],[266,25,317,23,"lastAttackTick"],[266,39,317,37],[266,41,317,39,"enemy"],[266,46,317,44],[266,47,317,45,"lastAttackTick"],[266,61,317,59],[266,64,317,62],[266,65,317,63],[267,14,319,12],[267,18,319,16,"newState"],[267,26,319,24],[267,27,319,25,"currentTick"],[267,38,319,36],[267,41,319,39,"enemy"],[267,46,319,44],[267,47,319,45,"lastAttackTick"],[267,61,319,59],[267,65,319,63,"ATTACK_COOLDOWN"],[267,80,319,78],[267,82,319,80],[268,16,320,14],[269,16,321,14],[269,20,321,18],[269,21,321,19,"game"],[269,25,321,23],[269,26,321,24,"gameState"],[269,35,321,33],[269,36,321,34,"isAlive"],[269,43,321,41],[269,45,321,43],[270,18,322,16,"console"],[270,25,322,23],[270,26,322,24,"log"],[270,29,322,27],[270,30,322,28],[270,49,322,47,"enemy"],[270,54,322,52],[270,55,322,53,"name"],[270,59,322,57],[270,93,322,91],[270,94,322,92],[271,18,323,16],[272,18,324,16,"enemy"],[272,23,324,21],[272,24,324,22,"lastAttackTick"],[272,38,324,36],[272,41,324,39,"newState"],[272,49,324,47],[272,50,324,48,"currentTick"],[272,61,324,59],[273,16,325,14],[273,17,325,15],[273,23,325,21],[274,18,326,16],[275,18,327,16],[275,24,327,22,"isPlayerInvincible"],[275,42,327,40],[275,45,327,43,"game"],[275,49,327,47],[275,50,327,48,"gameState"],[275,59,327,57],[275,60,327,58,"isInvincible"],[275,72,327,70],[275,76,328,41,"game"],[275,80,328,45],[275,81,328,46,"gameState"],[275,90,328,55],[275,91,328,56,"invincibilityEndTime"],[275,111,328,76],[275,115,329,41,"Date"],[275,119,329,45],[275,120,329,46,"now"],[275,123,329,49],[275,124,329,50],[275,125,329,51],[275,128,329,54,"game"],[275,132,329,58],[275,133,329,59,"gameState"],[275,142,329,68],[275,143,329,69,"invincibilityEndTime"],[275,163,329,89],[276,18,331,16],[276,22,331,20,"isPlayerInvincible"],[276,40,331,38],[276,42,331,40],[277,20,332,18,"console"],[277,27,332,25],[277,28,332,26,"log"],[277,31,332,29],[277,32,332,30],[277,51,332,49,"enemy"],[277,56,332,54],[277,57,332,55,"name"],[277,61,332,59],[277,101,332,99],[277,102,332,100],[278,20,333,18],[279,20,334,18,"enemy"],[279,25,334,23],[279,26,334,24,"lastAttackTick"],[279,40,334,38],[279,43,334,41,"newState"],[279,51,334,49],[279,52,334,50,"currentTick"],[279,63,334,61],[280,18,335,16],[280,19,335,17],[280,25,335,23],[281,20,336,16],[282,20,337,16],[282,26,337,22,"baseAttack"],[282,36,337,32],[282,39,337,35,"enemy"],[282,44,337,40],[282,45,337,41,"stats"],[282,50,337,46],[282,51,337,47,"attack"],[282,57,337,53],[282,60,337,56],[282,63,337,59],[282,64,337,60],[282,65,337,61],[283,20,338,16],[283,26,338,22,"attackDamage"],[283,38,338,34],[283,41,338,37,"Math"],[283,45,338,41],[283,46,338,42,"floor"],[283,51,338,47],[283,52,338,48,"baseAttack"],[283,62,338,58],[283,66,338,62],[283,69,338,65],[283,72,338,68,"Math"],[283,76,338,72],[283,77,338,73,"random"],[283,83,338,79],[283,84,338,80],[283,85,338,81],[283,88,338,84],[283,91,338,87],[283,92,338,88],[283,93,338,89],[283,94,338,90],[283,95,338,91],[284,20,339,16],[284,26,339,22,"playerDefense"],[284,39,339,35],[284,42,339,38,"newState"],[284,50,339,46],[284,51,339,47,"playerStats"],[284,62,339,58],[284,63,339,59,"defense"],[284,70,339,66],[285,20,340,16],[285,26,340,22,"finalDamage"],[285,37,340,33],[285,40,340,36,"Math"],[285,44,340,40],[285,45,340,41,"max"],[285,48,340,44],[285,49,340,45],[285,50,340,46],[285,52,340,48,"attackDamage"],[285,64,340,60],[285,67,340,63,"Math"],[285,71,340,67],[285,72,340,68,"floor"],[285,77,340,73],[285,78,340,74,"playerDefense"],[285,91,340,87],[285,94,340,90],[285,97,340,93],[285,98,340,94],[285,99,340,95],[285,100,340,96],[285,101,340,97],[287,20,342,16,"console"],[287,27,342,23],[287,28,342,24,"log"],[287,31,342,27],[287,32,342,28],[287,53,342,49,"enemy"],[287,58,342,54],[287,59,342,55,"name"],[287,63,342,59],[287,86,342,82,"finalDamage"],[287,97,342,93],[287,109,342,105,"attackDamage"],[287,121,342,117],[287,132,342,128,"Math"],[287,136,342,132],[287,137,342,133,"floor"],[287,142,342,138],[287,143,342,139,"playerDefense"],[287,156,342,152],[287,159,342,155],[287,162,342,158],[287,163,342,159],[287,184,342,180],[287,185,342,181],[289,20,344,16],[290,20,345,16],[290,26,345,22,"newPlayerHealth"],[290,41,345,37],[290,44,345,40,"Math"],[290,48,345,44],[290,49,345,45,"max"],[290,52,345,48],[290,53,345,49],[290,54,345,50],[290,56,345,52,"newState"],[290,64,345,60],[290,65,345,61,"playerStats"],[290,76,345,72],[290,77,345,73,"health"],[290,83,345,79],[290,86,345,82,"finalDamage"],[290,97,345,93],[290,98,345,94],[291,20,346,16,"newState"],[291,28,346,24],[291,29,346,25,"playerStats"],[291,40,346,36],[291,41,346,37,"health"],[291,47,346,43],[291,50,346,46,"newPlayerHealth"],[291,65,346,61],[292,20,348,16,"console"],[292,27,348,23],[292,28,348,24,"log"],[292,31,348,27],[292,32,348,28],[292,53,348,49,"newState"],[292,61,348,57],[292,62,348,58,"playerStats"],[292,73,348,69],[292,74,348,70,"health"],[292,80,348,76],[292,84,348,80,"newState"],[292,92,348,88],[292,93,348,89,"playerStats"],[292,104,348,100],[292,105,348,101,"maxHealth"],[292,114,348,110],[292,124,348,120,"finalDamage"],[292,135,348,131],[292,145,348,141],[292,146,348,142],[294,20,350,16],[295,20,351,16,"enemy"],[295,25,351,21],[295,26,351,22,"lastAttackTick"],[295,40,351,36],[295,43,351,39,"newState"],[295,51,351,47],[295,52,351,48,"currentTick"],[295,63,351,59],[297,20,353,16],[298,20,354,16],[298,24,354,20,"newPlayerHealth"],[298,39,354,35],[298,43,354,39],[298,44,354,40],[298,46,354,42],[299,22,355,18,"console"],[299,29,355,25],[299,30,355,26,"log"],[299,33,355,29],[299,34,355,30],[299,84,355,80],[299,85,355,81],[300,22,356,18],[301,22,357,18,"game"],[301,26,357,22],[301,27,357,23,"updateGameState"],[301,42,357,38],[301,43,357,39],[302,24,357,41,"isAlive"],[302,31,357,48],[302,33,357,50],[303,22,357,56],[303,23,357,57],[303,24,357,58],[304,20,358,16],[305,18,359,16],[306,16,360,14],[307,14,361,12],[308,12,362,10],[308,13,362,11],[308,19,362,17],[309,14,363,12],[310,14,364,12],[311,14,365,12],[311,18,365,16,"distance"],[311,26,365,24],[311,29,365,27],[311,31,365,29],[311,33,365,31],[312,16,366,14],[313,16,367,14],[313,22,367,20,"normalizedX"],[313,33,367,31],[313,36,367,34,"deltaX"],[313,42,367,40],[313,45,367,43,"distance"],[313,53,367,51],[314,16,368,14],[314,22,368,20,"normalizedY"],[314,33,368,31],[314,36,368,34,"deltaY"],[314,42,368,40],[314,45,368,43,"distance"],[314,53,368,51],[316,16,370,14],[317,16,371,14],[317,22,371,20,"randomFactor"],[317,34,371,32],[317,37,371,35],[317,40,371,38],[317,41,371,39],[317,42,371,40],[318,16,372,14],[318,22,372,20,"finalX"],[318,28,372,26],[318,31,372,29,"normalizedX"],[318,42,372,40],[318,45,372,43],[318,46,372,44,"Math"],[318,50,372,48],[318,51,372,49,"random"],[318,57,372,55],[318,58,372,56],[318,59,372,57],[318,62,372,60],[318,65,372,63],[318,69,372,67,"randomFactor"],[318,81,372,79],[319,16,373,14],[319,22,373,20,"finalY"],[319,28,373,26],[319,31,373,29,"normalizedY"],[319,42,373,40],[319,45,373,43],[319,46,373,44,"Math"],[319,50,373,48],[319,51,373,49,"random"],[319,57,373,55],[319,58,373,56],[319,59,373,57],[319,62,373,60],[319,65,373,63],[319,69,373,67,"randomFactor"],[319,81,373,79],[321,16,375,14],[322,16,376,14],[322,20,376,18,"newX"],[322,24,376,22],[322,27,376,25,"enemy"],[322,32,376,30],[322,33,376,31,"position"],[322,41,376,39],[322,42,376,40,"x"],[322,43,376,41],[322,46,376,45,"finalX"],[322,52,376,51],[322,55,376,54,"MOVEMENT_SPEED"],[322,69,376,69],[323,16,377,14],[323,20,377,18,"newY"],[323,24,377,22],[323,27,377,25,"enemy"],[323,32,377,30],[323,33,377,31,"position"],[323,41,377,39],[323,42,377,40,"y"],[323,43,377,41],[323,46,377,45,"finalY"],[323,52,377,51],[323,55,377,54,"MOVEMENT_SPEED"],[323,69,377,69],[325,16,379,14],[326,16,380,14,"newX"],[326,20,380,18],[326,23,380,21,"Math"],[326,27,380,25],[326,28,380,26,"max"],[326,31,380,29],[326,32,380,30],[326,33,380,31],[326,35,380,33,"Math"],[326,39,380,37],[326,40,380,38,"min"],[326,43,380,41],[326,44,380,42,"SCREEN_WIDTH"],[326,56,380,54],[326,59,380,57,"ENEMY_SIZE"],[326,69,380,67],[326,71,380,69,"newX"],[326,75,380,73],[326,76,380,74],[326,77,380,75],[327,16,381,14,"newY"],[327,20,381,18],[327,23,381,21,"Math"],[327,27,381,25],[327,28,381,26,"max"],[327,31,381,29],[327,32,381,30],[327,33,381,31],[327,35,381,33,"Math"],[327,39,381,37],[327,40,381,38,"min"],[327,43,381,41],[327,44,381,42,"GAME_AREA_HEIGHT"],[327,60,381,58],[327,63,381,61,"ENEMY_SIZE"],[327,73,381,71],[327,75,381,73,"newY"],[327,79,381,77],[327,80,381,78],[327,81,381,79],[329,16,383,14],[330,16,384,14,"enemy"],[330,21,384,19],[330,22,384,20,"position"],[330,30,384,28],[330,31,384,29,"x"],[330,32,384,30],[330,35,384,33,"newX"],[330,39,384,37],[331,16,385,14,"enemy"],[331,21,385,19],[331,22,385,20,"position"],[331,30,385,28],[331,31,385,29,"y"],[331,32,385,30],[331,35,385,33,"newY"],[331,39,385,37],[332,14,386,12],[333,14,387,12],[334,12,388,10],[335,10,389,8],[336,8,390,6],[336,9,390,7],[336,10,390,8],[338,8,392,6],[339,8,393,6],[339,12,393,10,"newState"],[339,20,393,18],[339,21,393,19,"shadowClone"],[339,32,393,30],[339,34,393,32],[340,10,394,8],[341,10,395,8,"newState"],[341,18,395,16],[341,19,395,17,"shadowClone"],[341,30,395,28],[341,31,395,29,"remainingTicks"],[341,45,395,43],[341,47,395,45],[343,10,397,8],[344,10,398,8],[344,16,398,14,"cloneOffset"],[344,27,398,25],[344,30,398,28],[344,32,398,30],[344,33,398,31],[344,34,398,32],[345,10,399,8,"newState"],[345,18,399,16],[345,19,399,17,"shadowClone"],[345,30,399,28],[345,31,399,29,"position"],[345,39,399,37],[345,40,399,38,"x"],[345,41,399,39],[345,44,399,42,"currentNinjaPosition"],[345,64,399,62],[345,65,399,63,"x"],[345,66,399,64],[345,69,399,67,"cloneOffset"],[345,80,399,78],[346,10,400,8,"newState"],[346,18,400,16],[346,19,400,17,"shadowClone"],[346,30,400,28],[346,31,400,29,"position"],[346,39,400,37],[346,40,400,38,"y"],[346,41,400,39],[346,44,400,42,"currentNinjaPosition"],[346,64,400,62],[346,65,400,63,"y"],[346,66,400,64],[346,69,400,67],[346,71,400,69],[348,10,402,8],[349,10,403,8],[349,14,403,12,"newState"],[349,22,403,20],[349,23,403,21,"shadowClone"],[349,34,403,32],[349,35,403,33,"remainingTicks"],[349,49,403,47],[349,53,403,51],[349,54,403,52],[349,56,403,54],[350,12,404,10,"console"],[350,19,404,17],[350,20,404,18,"log"],[350,23,404,21],[350,24,404,22],[350,75,404,73],[350,76,404,74],[351,12,405,10,"newState"],[351,20,405,18],[351,21,405,19,"shadowClone"],[351,32,405,30],[351,35,405,33,"undefined"],[351,44,405,42],[352,10,406,8],[352,11,406,9],[352,17,406,15],[353,12,407,10],[354,12,408,10],[355,12,409,10],[355,18,409,16,"CLONE_ATTACK_INTERVAL"],[355,39,409,37],[355,42,409,40],[355,44,409,42],[356,12,410,10],[356,16,410,14,"newState"],[356,24,410,22],[356,25,410,23,"currentTick"],[356,36,410,34],[356,39,410,37,"CLONE_ATTACK_INTERVAL"],[356,60,410,58],[356,65,410,63],[356,66,410,64],[356,70,410,68,"newState"],[356,78,410,76],[356,79,410,77,"enemies"],[356,86,410,84],[356,87,410,85,"length"],[356,93,410,91],[356,96,410,94],[356,97,410,95],[356,99,410,97],[357,14,411,12,"console"],[357,21,411,19],[357,22,411,20,"log"],[357,25,411,23],[357,26,411,24],[357,83,411,81],[357,84,411,82],[359,14,413,12],[360,14,414,12],[360,20,414,18,"target"],[360,26,414,24],[360,29,414,27,"findClosestEnemyInternal"],[360,53,414,51],[360,54,414,52,"newState"],[360,62,414,60],[360,63,414,61,"enemies"],[360,70,414,68],[360,71,414,69],[361,14,415,12],[361,18,415,16,"target"],[361,24,415,22],[361,26,415,24],[362,16,416,14],[363,16,417,14],[363,22,417,20,"cloneDamage"],[363,33,417,31],[363,36,417,34,"Math"],[363,40,417,38],[363,41,417,39,"floor"],[363,46,417,44],[363,47,417,45,"newState"],[363,55,417,53],[363,56,417,54,"playerStats"],[363,67,417,65],[363,68,417,66,"attack"],[363,74,417,72],[363,77,417,75],[363,80,417,78],[363,81,417,79],[365,16,419,14],[366,16,420,14,"createProjectile"],[366,32,420,30],[366,33,420,31,"target"],[366,39,420,37],[366,41,420,39,"cloneDamage"],[366,52,420,50],[366,54,420,52,"newState"],[366,62,420,60],[366,63,420,61,"shadowClone"],[366,74,420,72],[366,75,420,73,"position"],[366,83,420,81],[366,85,420,83],[367,18,421,16,"id"],[367,20,421,18],[367,22,421,20],[367,43,421,41],[368,18,422,16,"name"],[368,22,422,20],[368,24,422,22],[368,45,422,43],[369,18,423,16,"icon"],[369,22,423,20],[369,24,423,22],[370,16,424,14],[370,17,424,15],[370,18,424,16],[371,14,425,12],[372,12,426,10],[373,10,427,8],[374,8,428,6],[376,8,430,6],[377,8,431,6],[378,8,432,6,"console"],[378,15,432,13],[378,16,432,14,"log"],[378,19,432,17],[378,20,432,18],[378,63,432,61,"isManualControlActive"],[378,84,432,82],[378,97,432,95,"game"],[378,101,432,99],[378,102,432,100,"gameState"],[378,111,432,109],[378,112,432,110,"isAlive"],[378,119,432,117],[378,121,432,119],[378,122,432,120],[379,8,433,6],[379,12,433,10],[379,13,433,11,"isManualControlActive"],[379,34,433,32],[379,38,433,36,"game"],[379,42,433,40],[379,43,433,41,"gameState"],[379,52,433,50],[379,53,433,51,"isAlive"],[379,60,433,58],[379,62,433,60],[380,10,434,8],[380,15,434,13],[380,19,434,17,"i"],[380,20,434,18],[380,23,434,21],[380,24,434,22],[380,26,434,24,"i"],[380,27,434,25],[380,30,434,28],[380,31,434,29],[380,33,434,31,"i"],[380,34,434,32],[380,36,434,34],[380,38,434,36],[381,12,435,10],[381,16,435,14,"newState"],[381,24,435,22],[381,25,435,23,"abilityManager"],[381,39,435,37],[381,40,435,38,"isAbilityReady"],[381,54,435,52],[381,55,435,53,"i"],[381,56,435,54],[381,57,435,55],[381,61,435,59,"newState"],[381,69,435,67],[381,70,435,68,"enemies"],[381,77,435,75],[381,78,435,76,"length"],[381,84,435,82],[381,87,435,85],[381,88,435,86],[381,90,435,88],[382,14,436,12],[382,18,436,16,"newState"],[382,26,436,24],[382,27,436,25,"abilityManager"],[382,41,436,39],[382,42,436,40,"useAbility"],[382,52,436,50],[382,53,436,51,"i"],[382,54,436,52],[382,56,436,54,"newTick"],[382,63,436,61],[382,64,436,62],[382,66,436,64],[383,16,437,14,"console"],[383,23,437,21],[383,24,437,22,"log"],[383,27,437,25],[383,28,437,26],[383,73,437,71,"i"],[383,74,437,72],[383,76,437,74],[383,77,437,75],[384,16,438,14,"castAbility"],[384,27,438,25],[384,28,438,26,"newState"],[384,36,438,34],[384,38,438,36,"i"],[384,39,438,37],[384,40,438,38],[385,14,439,12],[386,12,440,10],[387,10,441,8],[388,8,442,6],[390,8,444,6],[391,8,445,6],[392,8,446,6],[392,14,446,12,"allDeadEnemies"],[392,28,446,26],[392,31,446,29,"newState"],[392,39,446,37],[392,40,446,38,"enemies"],[392,47,446,45],[392,48,446,46,"filter"],[392,54,446,52],[392,55,446,53,"enemy"],[392,60,446,58],[392,64,446,62,"enemy"],[392,69,446,67],[392,70,446,68,"health"],[392,76,446,74],[392,80,446,78],[392,81,446,79],[392,82,446,80],[394,8,448,6],[395,8,449,6,"deadEnemiesRef"],[395,22,449,20],[395,23,449,21,"current"],[395,30,449,28],[395,33,449,31],[395,34,449,32],[395,37,449,35,"allDeadEnemies"],[395,51,449,49],[395,52,449,50],[395,53,449,51],[395,54,449,52],[397,8,451,6],[398,8,452,6],[398,12,452,10,"allDeadEnemies"],[398,26,452,24],[398,27,452,25,"length"],[398,33,452,31],[398,36,452,34],[398,37,452,35],[398,39,452,37],[399,10,453,8,"console"],[399,17,453,15],[399,18,453,16,"log"],[399,21,453,19],[399,22,453,20],[399,34,453,32,"allDeadEnemies"],[399,48,453,46],[399,49,453,47,"length"],[399,55,453,53],[399,83,453,81],[399,85,453,83,"allDeadEnemies"],[399,99,453,97],[399,100,453,98,"map"],[399,103,453,101],[399,104,453,102,"e"],[399,105,453,103],[399,109,453,107],[399,112,453,110,"e"],[399,113,453,111],[399,114,453,112,"name"],[399,118,453,116],[399,122,453,120,"e"],[399,123,453,121],[399,124,453,122,"health"],[399,130,453,128],[399,145,453,143,"e"],[399,146,453,144],[399,147,453,145,"isDying"],[399,154,453,152],[399,157,453,155],[399,158,453,156],[399,159,453,157],[400,8,454,6],[402,8,456,6],[403,8,457,6],[403,14,457,12,"currentTime"],[403,25,457,23],[403,28,457,26,"Date"],[403,32,457,30],[403,33,457,31,"now"],[403,36,457,34],[403,37,457,35],[403,38,457,36],[404,8,458,6,"newState"],[404,16,458,14],[404,17,458,15,"enemies"],[404,24,458,22],[404,27,458,25,"newState"],[404,35,458,33],[404,36,458,34,"enemies"],[404,43,458,41],[404,44,458,42,"filter"],[404,50,458,48],[404,51,458,49,"enemy"],[404,56,458,54],[404,60,458,58],[405,10,459,8],[405,14,459,12,"enemy"],[405,19,459,17],[405,20,459,18,"isDying"],[405,27,459,25],[405,31,459,29,"enemy"],[405,36,459,34],[405,37,459,35,"deathStartTime"],[405,51,459,49],[405,53,459,51],[406,12,460,10],[406,18,460,16,"animationDuration"],[406,35,460,33],[406,38,460,36],[406,41,460,39],[406,42,460,40],[406,43,460,41],[407,12,461,10],[407,18,461,16,"isAnimationComplete"],[407,37,461,35],[407,40,461,38,"currentTime"],[407,51,461,49],[407,54,461,52,"enemy"],[407,59,461,57],[407,60,461,58,"deathStartTime"],[407,74,461,72],[407,78,461,76,"animationDuration"],[407,95,461,93],[408,12,462,10],[408,16,462,14,"isAnimationComplete"],[408,35,462,33],[408,37,462,35],[409,14,463,12,"console"],[409,21,463,19],[409,22,463,20,"log"],[409,25,463,23],[409,26,463,24],[409,58,463,56,"enemy"],[409,63,463,61],[409,64,463,62,"name"],[409,68,463,66],[409,86,463,84,"currentTime"],[409,97,463,95],[409,100,463,98,"enemy"],[409,105,463,103],[409,106,463,104,"deathStartTime"],[409,120,463,118],[409,129,463,127],[409,130,463,128],[410,14,464,12],[410,21,464,19],[410,26,464,24],[410,27,464,25],[410,28,464,26],[411,12,465,10],[412,10,466,8],[413,10,467,8],[413,17,467,15],[413,21,467,19],[413,22,467,20],[413,23,467,21],[414,8,468,6],[414,9,468,7],[414,10,468,8],[416,8,470,6],[417,8,471,6],[417,12,471,10,"allDeadEnemies"],[417,26,471,24],[417,27,471,25,"length"],[417,33,471,31],[417,36,471,34],[417,37,471,35],[417,39,471,37],[418,10,472,8,"console"],[418,17,472,15],[418,18,472,16,"log"],[418,21,472,19],[418,22,472,20],[418,49,472,47,"allDeadEnemies"],[418,63,472,61],[418,64,472,62,"length"],[418,70,472,68],[418,86,472,84],[418,88,472,86,"allDeadEnemies"],[418,102,472,100],[418,103,472,101,"map"],[418,106,472,104],[418,107,472,105,"e"],[418,108,472,106],[418,112,472,110],[418,115,472,113,"e"],[418,116,472,114],[418,117,472,115,"id"],[418,119,472,117],[418,123,472,121,"e"],[418,124,472,122],[418,125,472,123,"health"],[418,131,472,129],[418,136,472,134],[418,137,472,135],[418,138,472,136],[419,8,473,6],[421,8,475,6],[422,8,476,6],[422,14,476,12,"lowHealthEnemies"],[422,30,476,28],[422,33,476,31,"newState"],[422,41,476,39],[422,42,476,40,"enemies"],[422,49,476,47],[422,50,476,48,"filter"],[422,56,476,54],[422,57,476,55,"enemy"],[422,62,476,60],[422,66,476,64,"enemy"],[422,71,476,69],[422,72,476,70,"health"],[422,78,476,76],[422,82,476,80],[422,84,476,82],[422,88,476,86,"enemy"],[422,93,476,91],[422,94,476,92,"health"],[422,100,476,98],[422,103,476,101],[422,104,476,102],[422,105,476,103],[423,8,477,6],[423,12,477,10,"lowHealthEnemies"],[423,28,477,26],[423,29,477,27,"length"],[423,35,477,33],[423,38,477,36],[423,39,477,37],[423,41,477,39],[424,10,478,8,"console"],[424,17,478,15],[424,18,478,16,"log"],[424,21,478,19],[424,22,478,20],[424,61,478,59],[424,63,478,61,"lowHealthEnemies"],[424,79,478,77],[424,80,478,78,"map"],[424,83,478,81],[424,84,478,82,"e"],[424,85,478,83],[424,89,478,87],[424,92,478,90,"e"],[424,93,478,91],[424,94,478,92,"id"],[424,96,478,94],[424,100,478,98,"e"],[424,101,478,99],[424,102,478,100,"health"],[424,108,478,106],[424,112,478,110,"e"],[424,113,478,111],[424,114,478,112,"maxHealth"],[424,123,478,121],[424,128,478,126],[424,129,478,127],[424,130,478,128],[425,8,479,6],[427,8,481,6],[428,8,482,6],[428,14,482,12,"beforeCount"],[428,25,482,23],[428,28,482,26,"newState"],[428,36,482,34],[428,37,482,35,"enemies"],[428,44,482,42],[428,45,482,43,"length"],[428,51,482,49],[429,8,483,6,"newState"],[429,16,483,14],[429,17,483,15,"enemies"],[429,24,483,22],[429,27,483,25,"newState"],[429,35,483,33],[429,36,483,34,"enemies"],[429,43,483,41],[429,44,483,42,"filter"],[429,50,483,48],[429,51,483,49,"enemy"],[429,56,483,54],[429,60,483,58,"enemy"],[429,65,483,63],[429,66,483,64,"health"],[429,72,483,70],[429,75,483,73],[429,76,483,74],[429,77,483,75],[430,8,484,6],[430,14,484,12,"afterCount"],[430,24,484,22],[430,27,484,25,"newState"],[430,35,484,33],[430,36,484,34,"enemies"],[430,43,484,41],[430,44,484,42,"length"],[430,50,484,48],[431,8,486,6],[431,12,486,10,"beforeCount"],[431,23,486,21],[431,28,486,26,"afterCount"],[431,38,486,36],[431,40,486,38],[432,10,487,8,"console"],[432,17,487,15],[432,18,487,16,"log"],[432,21,487,19],[432,22,487,20],[432,52,487,50,"beforeCount"],[432,63,487,61],[432,66,487,64,"afterCount"],[432,76,487,74],[432,102,487,100],[432,103,487,101],[433,8,488,6],[435,8,490,6],[436,8,491,6],[437,8,492,6],[437,14,492,12,"MAX_ENEMIES"],[437,25,492,23],[437,28,492,26],[437,30,492,28],[437,31,492,29],[437,32,492,30],[438,8,493,6],[438,14,493,12,"MIN_SPAWN_DELAY"],[438,29,493,27],[438,32,493,30],[438,35,493,33],[438,36,493,34],[438,37,493,35],[439,8,494,6],[439,14,494,12,"now"],[439,17,494,15],[439,20,494,18,"Date"],[439,24,494,22],[439,25,494,23,"now"],[439,28,494,26],[439,29,494,27],[439,30,494,28],[440,8,495,6],[440,14,495,12,"hasBoss"],[440,21,495,19],[440,24,495,22,"newState"],[440,32,495,30],[440,33,495,31,"enemies"],[440,40,495,38],[440,41,495,39,"some"],[440,45,495,43],[440,46,495,44,"enemy"],[440,51,495,49],[440,55,495,53,"enemy"],[440,60,495,58],[440,61,495,59,"isBoss"],[440,67,495,65],[440,68,495,66],[442,8,497,6],[443,8,498,6],[443,12,498,10],[443,13,498,11,"newState"],[443,21,498,19],[443,22,498,20,"lastSpawnTime"],[443,35,498,33],[443,37,498,35],[444,10,499,8,"newState"],[444,18,499,16],[444,19,499,17,"lastSpawnTime"],[444,32,499,30],[444,35,499,33,"now"],[444,38,499,36],[445,8,500,6],[446,8,502,6,"console"],[446,15,502,13],[446,16,502,14,"log"],[446,19,502,17],[446,20,502,18],[446,53,502,51,"newState"],[446,61,502,59],[446,62,502,60,"enemies"],[446,69,502,67],[446,70,502,68,"length"],[446,76,502,74],[446,85,502,83,"MAX_ENEMIES"],[446,96,502,94],[446,109,502,107,"hasBoss"],[446,116,502,114],[446,118,502,116],[446,119,502,117],[448,8,504,6],[449,8,505,6],[449,12,505,10],[449,13,505,11,"hasBoss"],[449,20,505,18],[449,24,505,22,"newState"],[449,32,505,30],[449,33,505,31,"enemies"],[449,40,505,38],[449,41,505,39,"length"],[449,47,505,45],[449,50,505,48,"MAX_ENEMIES"],[449,61,505,59],[449,65,505,64,"now"],[449,68,505,67],[449,71,505,70,"newState"],[449,79,505,78],[449,80,505,79,"lastSpawnTime"],[449,93,505,92],[449,97,505,97,"MIN_SPAWN_DELAY"],[449,112,505,112],[449,114,505,114],[450,10,506,8,"console"],[450,17,506,15],[450,18,506,16,"log"],[450,21,506,19],[450,22,506,20],[450,43,506,41,"newState"],[450,51,506,49],[450,52,506,50,"enemies"],[450,59,506,57],[450,60,506,58,"length"],[450,66,506,64],[450,69,506,67],[450,70,506,68],[450,74,506,72,"MAX_ENEMIES"],[450,85,506,83],[450,87,506,85],[450,88,506,86],[451,10,507,8,"spawnTestEnemy"],[451,24,507,22],[451,25,507,23,"newState"],[451,33,507,31],[451,34,507,32],[452,10,508,8,"newState"],[452,18,508,16],[452,19,508,17,"lastSpawnTime"],[452,32,508,30],[452,35,508,33,"now"],[452,38,508,36],[453,8,509,6],[454,8,511,6],[454,15,511,13,"newState"],[454,23,511,21],[455,6,512,4],[455,7,512,5],[455,47,512,6],[457,6,514,4],[458,6,515,4],[458,12,515,10,"deadEnemiesToProcess"],[458,32,515,30],[458,35,515,33,"deadEnemiesRef"],[458,49,515,47],[458,50,515,48,"current"],[458,57,515,55],[458,58,515,56],[458,59,515,57],[459,6,516,4],[459,10,516,8,"deadEnemiesToProcess"],[459,30,516,28],[459,31,516,29,"length"],[459,37,516,35],[459,40,516,38],[459,41,516,39],[459,43,516,41],[460,8,517,6],[461,8,518,6],[462,8,519,6],[462,14,519,12,"unprocessedEnemies"],[462,32,519,30],[462,35,519,33,"deadEnemiesToProcess"],[462,55,519,53],[462,56,519,54],[462,57,519,55],[464,8,521,6],[465,8,522,6,"console"],[465,15,522,13],[465,16,522,14,"log"],[465,19,522,17],[465,20,522,18],[465,69,522,67],[465,71,522,69,"deadEnemiesToProcess"],[465,91,522,89],[465,92,522,90,"map"],[465,95,522,93],[465,96,522,94,"e"],[465,97,522,95],[465,102,522,100],[466,10,522,101,"id"],[466,12,522,103],[466,14,522,105,"e"],[466,15,522,106],[466,16,522,107,"id"],[466,18,522,109],[467,10,522,111,"name"],[467,14,522,115],[467,16,522,117,"e"],[467,17,522,118],[467,18,522,119,"name"],[467,22,522,123],[468,10,522,125,"xpAwarded"],[468,19,522,134],[468,21,522,136,"e"],[468,22,522,137],[468,23,522,138,"xpAwarded"],[469,8,522,147],[469,9,522,148],[469,10,522,149],[469,11,522,150],[469,12,522,151],[470,8,523,6,"console"],[470,15,523,13],[470,16,523,14,"log"],[470,19,523,17],[470,20,523,18],[470,43,523,41,"deadEnemiesToProcess"],[470,63,523,61],[470,64,523,62,"length"],[470,70,523,68],[470,87,523,85,"unprocessedEnemies"],[470,105,523,103],[470,106,523,104,"length"],[470,112,523,110],[470,126,523,124],[470,127,523,125],[471,8,525,6],[471,12,525,10,"unprocessedEnemies"],[471,30,525,28],[471,31,525,29,"length"],[471,37,525,35],[471,40,525,38],[471,41,525,39],[471,43,525,41],[472,10,526,8],[473,10,527,8],[473,14,527,12,"totalXP"],[473,21,527,19],[473,24,527,22],[473,25,527,23],[474,10,528,8],[474,14,528,12,"totalGold"],[474,23,528,21],[474,26,528,24],[474,27,528,25],[475,10,529,8],[475,16,529,14,"zoneKills"],[475,25,529,30],[475,28,529,33],[475,30,529,35],[476,10,531,8],[476,16,531,14,"xpMultiplier"],[476,28,531,26],[476,31,531,29,"game"],[476,35,531,33],[476,36,531,34,"gameState"],[476,45,531,43],[476,46,531,44,"subscriptionBenefits"],[476,66,531,64],[476,68,531,66,"xp_multiplier"],[476,81,531,79],[476,85,531,83],[476,88,531,86],[477,10,532,8],[477,16,532,14,"goldMultiplier"],[477,30,532,28],[477,33,532,31,"game"],[477,37,532,35],[477,38,532,36,"gameState"],[477,47,532,45],[477,48,532,46,"subscriptionBenefits"],[477,68,532,66],[477,70,532,68,"drop_multiplier"],[477,85,532,83],[477,89,532,87],[477,92,532,90],[478,10,534,8,"unprocessedEnemies"],[478,28,534,26],[478,29,534,27,"forEach"],[478,36,534,34],[478,37,534,35,"enemy"],[478,42,534,40],[478,46,534,44],[479,12,535,10,"totalXP"],[479,19,535,17],[479,23,535,21],[479,24,535,22,"enemy"],[479,29,535,27],[479,30,535,28,"zoneXP"],[479,36,535,34],[479,40,535,38],[479,41,535,39],[479,45,535,43,"xpMultiplier"],[479,57,535,55],[480,12,536,10,"totalGold"],[480,21,536,19],[480,25,536,23],[480,27,536,25],[480,30,536,28,"goldMultiplier"],[480,44,536,42],[481,12,538,10],[481,16,538,14,"enemy"],[481,21,538,19],[481,22,538,20,"zoneTypeId"],[481,32,538,30],[481,34,538,32],[482,14,539,12,"zoneKills"],[482,23,539,21],[482,24,539,22,"push"],[482,28,539,26],[482,29,539,27],[483,16,540,14,"id"],[483,18,540,16],[483,20,540,18,"enemy"],[483,25,540,23],[483,26,540,24,"id"],[483,28,540,26],[484,16,541,14,"typeId"],[484,22,541,20],[484,24,541,22,"enemy"],[484,29,541,27],[484,30,541,28,"zoneTypeId"],[484,40,541,38],[485,16,542,14,"name"],[485,20,542,18],[485,22,542,20,"enemy"],[485,27,542,25],[485,28,542,26,"name"],[485,32,542,30],[486,16,543,14,"icon"],[486,20,543,18],[486,22,543,20],[486,26,543,24],[487,16,544,14,"hp"],[487,18,544,16],[487,20,544,18],[487,21,544,19],[488,16,545,14,"maxHP"],[488,21,545,19],[488,23,545,21,"enemy"],[488,28,545,26],[488,29,545,27,"maxHealth"],[488,38,545,36],[489,16,546,14,"attack"],[489,22,546,20],[489,24,546,22,"enemy"],[489,29,546,27],[489,30,546,28,"stats"],[489,35,546,33],[489,36,546,34,"attack"],[489,42,546,40],[490,16,547,14,"xp"],[490,18,547,16],[490,20,547,18,"enemy"],[490,25,547,23],[490,26,547,24,"zoneXP"],[490,32,547,30],[490,36,547,34],[490,37,547,35],[491,16,548,14,"position"],[491,24,548,22],[491,26,548,24,"enemy"],[491,31,548,29],[491,32,548,30,"position"],[492,14,549,12],[492,15,549,13],[492,16,549,14],[493,12,550,10],[494,10,551,8],[494,11,551,9],[494,12,551,10],[496,10,553,8],[497,10,554,8,"game"],[497,14,554,12],[497,15,554,13,"updateNinja"],[497,26,554,24],[497,27,554,25,"prev"],[497,31,554,29],[497,36,554,34],[498,12,555,10,"experience"],[498,22,555,20],[498,24,555,22,"prev"],[498,28,555,26],[498,29,555,27,"experience"],[498,39,555,37],[498,42,555,40,"totalXP"],[498,49,555,47],[499,12,556,10,"gold"],[499,16,556,14],[499,18,556,16,"prev"],[499,22,556,20],[499,23,556,21,"gold"],[499,27,556,25],[499,30,556,28,"totalGold"],[500,10,557,8],[500,11,557,9],[500,12,557,10],[500,13,557,11],[502,10,559,8],[503,10,560,8,"zoneKills"],[503,19,560,17],[503,20,560,18,"forEach"],[503,27,560,25],[503,28,560,26,"zoneEnemy"],[503,37,560,35],[503,41,560,39,"recordEnemyKill"],[503,56,560,54],[503,57,560,55,"zoneEnemy"],[503,66,560,64],[503,67,560,65],[503,68,560,66],[505,10,562,8],[506,10,563,8,"setCombatState"],[506,24,563,22],[506,25,563,23,"prev"],[506,29,563,27],[506,34,563,32],[507,12,564,10],[507,15,564,13,"prev"],[507,19,564,17],[508,12,565,10,"enemies"],[508,19,565,17],[508,21,565,19,"prev"],[508,25,565,23],[508,26,565,24,"enemies"],[508,33,565,31],[508,34,565,32,"map"],[508,37,565,35],[508,38,565,36,"enemy"],[508,43,565,41],[508,47,565,45],[509,14,566,12],[509,20,566,18,"wasProcessed"],[509,32,566,30],[509,35,566,33,"unprocessedEnemies"],[509,53,566,51],[509,54,566,52,"find"],[509,58,566,56],[509,59,566,57,"processed"],[509,68,566,66],[509,72,566,70,"processed"],[509,81,566,79],[509,82,566,80,"id"],[509,84,566,82],[509,89,566,87,"enemy"],[509,94,566,92],[509,95,566,93,"id"],[509,97,566,95],[509,98,566,96],[510,14,567,12],[510,21,567,19,"wasProcessed"],[510,33,567,31],[510,36,567,34],[511,16,567,36],[511,19,567,39,"enemy"],[511,24,567,44],[512,16,567,46,"xpAwarded"],[512,25,567,55],[512,27,567,57],[513,14,567,62],[513,15,567,63],[513,18,567,66,"enemy"],[513,23,567,71],[514,12,568,10],[514,13,568,11],[515,10,569,8],[515,11,569,9],[515,12,569,10],[515,13,569,11],[516,8,570,6],[517,6,571,4],[518,4,572,2],[518,5,572,3],[518,7,572,5],[518,8,572,6,"game"],[518,12,572,10],[518,13,572,11,"updateNinja"],[518,24,572,22],[518,26,572,24,"game"],[518,30,572,28],[518,31,572,29,"gameState"],[518,40,572,38],[518,41,572,39,"subscriptionBenefits"],[518,61,572,59],[518,63,572,61,"recordEnemyKill"],[518,78,572,76],[518,80,572,78,"spawnTestEnemy"],[518,94,572,92],[518,96,572,94,"spawnZoneEnemy"],[518,110,572,108],[518,111,572,109],[518,112,572,110],[518,113,572,111],[518,114,572,112],[520,4,574,2],[521,4,575,2],[521,10,575,8,"findClosestEnemyInternal"],[521,34,575,32],[521,37,575,36,"enemies"],[521,44,575,58],[521,48,575,83],[522,6,576,4],[522,10,576,8,"enemies"],[522,17,576,15],[522,18,576,16,"length"],[522,24,576,22],[522,29,576,27],[522,30,576,28],[522,32,576,30],[522,39,576,37],[522,43,576,41],[524,6,578,4],[525,6,579,4],[525,12,579,10,"SCREEN_WIDTH"],[525,24,579,22],[525,27,579,25],[525,30,579,28],[526,6,580,4],[526,12,580,10,"GAME_AREA_HEIGHT"],[526,28,580,26],[526,31,580,29],[526,34,580,32],[526,37,580,35],[526,40,580,38],[526,41,580,39],[526,42,580,40],[527,6,581,4],[527,12,581,10,"ninjaX"],[527,18,581,16],[527,21,581,19,"SCREEN_WIDTH"],[527,33,581,31],[527,36,581,34],[527,37,581,35],[528,6,582,4],[528,12,582,10,"ninjaY"],[528,18,582,16],[528,21,582,19,"GAME_AREA_HEIGHT"],[528,37,582,35],[528,40,582,38],[528,41,582,39],[529,6,584,4],[529,10,584,8,"closestEnemy"],[529,22,584,20],[529,25,584,23,"enemies"],[529,32,584,30],[529,33,584,31],[529,34,584,32],[529,35,584,33],[530,6,585,4],[530,10,585,8,"closestDistance"],[530,25,585,23],[530,28,585,26,"Infinity"],[530,36,585,34],[531,6,587,4,"enemies"],[531,13,587,11],[531,14,587,12,"forEach"],[531,21,587,19],[531,22,587,20,"enemy"],[531,27,587,25],[531,31,587,29],[532,8,588,6],[532,14,588,12,"distance"],[532,22,588,20],[532,25,588,23,"Math"],[532,29,588,27],[532,30,588,28,"sqrt"],[532,34,588,32],[532,35,589,8,"Math"],[532,39,589,12],[532,40,589,13,"pow"],[532,43,589,16],[532,44,589,17,"enemy"],[532,49,589,22],[532,50,589,23,"position"],[532,58,589,31],[532,59,589,32,"x"],[532,60,589,33],[532,63,589,36,"ninjaX"],[532,69,589,42],[532,71,589,44],[532,72,589,45],[532,73,589,46],[532,76,590,8,"Math"],[532,80,590,12],[532,81,590,13,"pow"],[532,84,590,16],[532,85,590,17,"enemy"],[532,90,590,22],[532,91,590,23,"position"],[532,99,590,31],[532,100,590,32,"y"],[532,101,590,33],[532,104,590,36,"ninjaY"],[532,110,590,42],[532,112,590,44],[532,113,590,45],[532,114,591,6],[532,115,591,7],[533,8,593,6],[533,12,593,10,"distance"],[533,20,593,18],[533,23,593,21,"closestDistance"],[533,38,593,36],[533,40,593,38],[534,10,594,8,"closestDistance"],[534,25,594,23],[534,28,594,26,"distance"],[534,36,594,34],[535,10,595,8,"closestEnemy"],[535,22,595,20],[535,25,595,23,"enemy"],[535,30,595,28],[536,8,596,6],[537,6,597,4],[537,7,597,5],[537,8,597,6],[538,6,599,4,"console"],[538,13,599,11],[538,14,599,12,"log"],[538,17,599,15],[538,18,599,16],[538,60,599,58,"closestDistance"],[538,75,599,73],[538,76,599,74,"toFixed"],[538,83,599,81],[538,84,599,82],[538,85,599,83],[538,86,599,84],[538,88,599,86],[538,89,599,87],[539,6,600,4],[539,13,600,11,"closestEnemy"],[539,25,600,23],[540,4,601,2],[540,5,601,3],[542,4,603,2],[543,4,604,2],[543,10,604,8,"findClosestEnemy"],[543,26,604,24],[543,29,604,27,"findClosestEnemy"],[543,30,604,27],[543,35,604,53],[544,6,605,4],[544,13,605,11,"findClosestEnemyInternal"],[544,37,605,35],[544,38,605,36,"combatState"],[544,49,605,47],[544,50,605,48,"enemies"],[544,57,605,55],[544,58,605,56],[545,4,606,2],[545,5,606,3],[547,4,608,2],[548,4,609,2],[549,4,610,2],[549,10,610,8],[549,11,610,9,"currentNinjaPosition"],[549,31,610,29],[549,33,610,31,"setCurrentNinjaPosition"],[549,56,610,54],[549,57,610,55],[549,60,610,58],[549,64,610,58,"useState"],[549,70,610,66],[549,71,610,66,"useState"],[549,79,610,66],[549,81,610,91],[550,6,610,93,"x"],[550,7,610,94],[550,9,610,96],[550,12,610,99],[551,6,610,101,"y"],[551,7,610,102],[551,9,610,104],[552,4,610,108],[552,5,610,109],[552,6,610,110],[553,4,611,2],[553,10,611,8],[553,11,611,9,"isManualControlActive"],[553,32,611,30],[553,34,611,32,"setIsManualControlActive"],[553,58,611,56],[553,59,611,57],[553,62,611,60],[553,66,611,60,"useState"],[553,72,611,68],[553,73,611,68,"useState"],[553,81,611,68],[553,83,611,69],[553,88,611,74],[553,89,611,75],[555,4,613,2],[556,4,614,2],[556,10,614,8,"updateNinjaPosition"],[556,29,614,27],[556,32,614,30],[556,36,614,30,"useCallback"],[556,42,614,41],[556,43,614,41,"useCallback"],[556,54,614,41],[556,56,614,43,"newPosition"],[556,67,614,78],[556,71,614,83],[557,6,615,4,"setCurrentNinjaPosition"],[557,29,615,27],[557,30,615,28,"newPosition"],[557,41,615,39],[557,42,615,40],[558,4,616,2],[558,5,616,3],[558,7,616,5],[558,9,616,7],[558,10,616,8],[560,4,618,2],[561,4,619,2],[561,10,619,8,"setManualControlActive"],[561,32,619,30],[561,35,619,33],[561,39,619,33,"useCallback"],[561,45,619,44],[561,46,619,44,"useCallback"],[561,57,619,44],[561,59,619,46,"active"],[561,65,619,61],[561,69,619,66],[562,6,620,4,"setIsManualControlActive"],[562,30,620,28],[562,31,620,29,"active"],[562,37,620,35],[562,38,620,36],[563,6,621,4,"console"],[563,13,621,11],[563,14,621,12,"log"],[563,17,621,15],[563,18,621,16],[563,39,621,37,"active"],[563,45,621,43],[563,48,621,46],[563,59,621,57],[563,62,621,60],[563,75,621,73],[563,88,621,86,"active"],[563,94,621,92],[563,97,621,95],[563,105,621,103],[563,108,621,106],[563,117,621,115],[563,119,621,117],[563,120,621,118],[564,4,622,2],[564,5,622,3],[564,7,622,5],[564,9,622,7],[564,10,622,8],[566,4,624,2],[567,4,625,2],[568,4,626,2],[570,4,628,2],[571,4,629,2],[571,10,629,8,"castAbility"],[571,21,629,19],[571,24,629,22,"castAbility"],[571,25,629,23,"state"],[571,30,629,41],[571,32,629,43,"slotIndex"],[571,41,629,60],[571,46,629,65],[572,6,630,4],[572,12,630,10,"deck"],[572,16,630,14],[572,19,630,17,"state"],[572,24,630,22],[572,25,630,23,"abilityManager"],[572,39,630,37],[572,40,630,38,"getDeck"],[572,47,630,45],[572,48,630,46],[572,49,630,47],[573,6,631,4],[573,12,631,10,"ability"],[573,19,631,17],[573,22,631,20,"deck"],[573,26,631,24],[573,27,631,25,"slots"],[573,32,631,30],[573,33,631,31,"slotIndex"],[573,42,631,40],[573,43,631,41],[574,6,632,4],[574,10,632,8],[574,11,632,9,"ability"],[574,18,632,16],[574,20,632,18],[575,6,634,4,"console"],[575,13,634,11],[575,14,634,12,"log"],[575,17,634,15],[575,18,634,16],[575,43,634,41,"ability"],[575,50,634,48],[575,51,634,49,"id"],[575,53,634,51],[575,67,634,65,"slotIndex"],[575,76,634,74],[575,78,634,76],[575,79,634,77],[577,6,636,4],[578,6,637,4],[578,10,637,8,"damage"],[578,16,637,14],[578,19,637,17,"ability"],[578,26,637,24],[578,27,637,25,"stats"],[578,32,637,30],[578,33,637,31,"baseDamage"],[578,43,637,41],[580,6,639,4],[581,6,640,4,"deck"],[581,10,640,8],[581,11,640,9,"activeSynergies"],[581,26,640,24],[581,27,640,25,"forEach"],[581,34,640,32],[581,35,640,33,"synergy"],[581,42,640,40],[581,46,640,44],[582,8,641,6],[582,12,641,10,"synergy"],[582,19,641,17],[582,20,641,18,"bonus"],[582,25,641,23],[582,26,641,24,"damageBonus"],[582,37,641,35],[582,41,642,10,"synergy"],[582,48,642,17],[582,49,642,18,"requiredTags"],[582,61,642,30],[582,62,642,31,"some"],[582,66,642,35],[582,67,642,36,"tag"],[582,70,642,39],[582,74,642,43,"ability"],[582,81,642,50],[582,82,642,51,"tags"],[582,86,642,55],[582,87,642,56,"includes"],[582,95,642,64],[582,96,642,65,"tag"],[582,99,642,68],[582,100,642,69],[582,101,642,70],[582,103,642,72],[583,10,643,8,"damage"],[583,16,643,14],[583,20,643,19],[583,21,643,20],[583,24,643,23,"synergy"],[583,31,643,30],[583,32,643,31,"bonus"],[583,37,643,36],[583,38,643,37,"damageBonus"],[583,49,643,48],[583,52,643,51],[583,55,643,55],[584,8,644,6],[585,6,645,4],[585,7,645,5],[585,8,645,6],[587,6,647,4],[588,6,648,4],[588,12,648,10,"isAOE"],[588,17,648,15],[588,20,648,18,"ability"],[588,27,648,25],[588,28,648,26,"effects"],[588,35,648,33],[588,36,648,34,"includes"],[588,44,648,42],[588,45,648,43],[588,50,648,48],[588,51,648,49],[588,55,648,53,"ability"],[588,62,648,60],[588,63,648,61,"stats"],[588,68,648,66],[588,69,648,67,"aoeRadius"],[588,78,648,76],[589,6,649,4,"console"],[589,13,649,11],[589,14,649,12,"log"],[589,17,649,15],[589,18,649,16],[589,39,649,37,"ability"],[589,46,649,44],[589,47,649,45,"name"],[589,51,649,49],[589,66,649,64,"JSON"],[589,70,649,68],[589,71,649,69,"stringify"],[589,80,649,78],[589,81,649,79,"ability"],[589,88,649,86],[589,89,649,87,"effects"],[589,96,649,94],[589,97,649,95],[589,113,649,111,"ability"],[589,120,649,118],[589,121,649,119,"stats"],[589,126,649,124],[589,127,649,125,"aoeRadius"],[589,136,649,134],[589,148,649,146,"isAOE"],[589,153,649,151],[589,155,649,153],[589,156,649,154],[590,6,651,4],[590,10,651,8,"isAOE"],[590,15,651,13],[590,17,651,15],[591,8,652,6,"console"],[591,15,652,13],[591,16,652,14,"log"],[591,19,652,17],[591,20,652,18],[591,39,652,37,"ability"],[591,46,652,44],[591,47,652,45,"name"],[591,51,652,49],[591,67,652,65,"ability"],[591,74,652,72],[591,75,652,73,"stats"],[591,80,652,78],[591,81,652,79,"aoeRadius"],[591,90,652,88],[591,92,652,90],[591,93,652,91],[593,8,654,6],[594,8,655,6],[595,8,656,6],[595,14,656,12,"ninjaX"],[595,20,656,18],[595,23,656,21,"currentNinjaPosition"],[595,43,656,41],[595,44,656,42,"x"],[595,45,656,43],[595,48,656,46],[595,50,656,48],[595,51,656,49],[595,52,656,50],[596,8,657,6],[596,14,657,12,"ninjaY"],[596,20,657,18],[596,23,657,21,"currentNinjaPosition"],[596,43,657,41],[596,44,657,42,"y"],[596,45,657,43],[596,48,657,46],[596,50,657,48],[597,8,658,6],[597,14,658,12,"aoeRadius"],[597,23,658,21],[597,26,658,24,"ability"],[597,33,658,31],[597,34,658,32,"stats"],[597,39,658,37],[597,40,658,38,"aoeRadius"],[597,49,658,47],[598,8,660,6],[598,14,660,12,"enemiesInRange"],[598,28,660,26],[598,31,660,29,"state"],[598,36,660,34],[598,37,660,35,"enemies"],[598,44,660,42],[598,45,660,43,"filter"],[598,51,660,49],[598,52,660,50,"enemy"],[598,57,660,55],[598,61,660,59],[599,10,661,8],[599,16,661,14,"enemyX"],[599,22,661,20],[599,25,661,23,"enemy"],[599,30,661,28],[599,31,661,29,"position"],[599,39,661,37],[599,40,661,38,"x"],[599,41,661,39],[599,44,661,42],[599,48,661,46],[599,49,661,47],[599,50,661,48],[600,10,662,8],[600,16,662,14,"enemyY"],[600,22,662,20],[600,25,662,23,"enemy"],[600,30,662,28],[600,31,662,29,"position"],[600,39,662,37],[600,40,662,38,"y"],[600,41,662,39],[600,44,662,42],[600,48,662,46],[601,10,663,8],[601,16,663,14,"distance"],[601,24,663,22],[601,27,663,25,"Math"],[601,31,663,29],[601,32,663,30,"sqrt"],[601,36,663,34],[601,37,663,35,"Math"],[601,41,663,39],[601,42,663,40,"pow"],[601,45,663,43],[601,46,663,44,"enemyX"],[601,52,663,50],[601,55,663,53,"ninjaX"],[601,61,663,59],[601,63,663,61],[601,64,663,62],[601,65,663,63],[601,68,663,66,"Math"],[601,72,663,70],[601,73,663,71,"pow"],[601,76,663,74],[601,77,663,75,"enemyY"],[601,83,663,81],[601,86,663,84,"ninjaY"],[601,92,663,90],[601,94,663,92],[601,95,663,93],[601,96,663,94],[601,97,663,95],[602,10,664,8],[602,17,664,15,"distance"],[602,25,664,23],[602,29,664,27,"aoeRadius"],[602,38,664,36],[603,8,665,6],[603,9,665,7],[603,10,665,8],[604,8,667,6,"console"],[604,15,667,13],[604,16,667,14,"log"],[604,19,667,17],[604,20,667,18],[604,45,667,43,"enemiesInRange"],[604,59,667,57],[604,60,667,58,"length"],[604,66,667,64],[604,88,667,86,"aoeRadius"],[604,97,667,95],[604,107,667,105],[604,108,667,106],[606,8,669,6],[607,8,670,6,"enemiesInRange"],[607,22,670,20],[607,23,670,21,"forEach"],[607,30,670,28],[607,31,670,29,"enemy"],[607,36,670,34],[607,40,670,38],[608,10,671,8],[608,16,671,14,"damageResult"],[608,28,671,26],[608,31,671,29,"DamageCalculator"],[608,50,671,45],[608,51,671,45,"DamageCalculator"],[608,67,671,45],[608,68,671,46,"calculateDamage"],[608,83,671,61],[608,84,671,62,"damage"],[608,90,671,68],[608,92,671,70,"state"],[608,97,671,75],[608,98,671,76,"playerStats"],[608,109,671,87],[608,111,671,89,"enemy"],[608,116,671,94],[608,117,671,95,"stats"],[608,122,671,100],[608,123,671,101],[609,10,672,8,"createProjectile"],[609,26,672,24],[609,27,672,25,"enemy"],[609,32,672,30],[609,34,672,32,"damageResult"],[609,46,672,44],[609,47,672,45,"damage"],[609,53,672,51],[609,55,672,53,"currentNinjaPosition"],[609,75,672,73],[609,77,672,75],[610,12,673,10,"id"],[610,14,673,12],[610,16,673,14,"ability"],[610,23,673,21],[610,24,673,22,"id"],[610,26,673,24],[611,12,674,10,"name"],[611,16,674,14],[611,18,674,16,"ability"],[611,25,674,23],[611,26,674,24,"name"],[611,30,674,28],[612,12,675,10,"icon"],[612,16,675,14],[612,18,675,16,"ability"],[612,25,675,23],[612,26,675,24,"icon"],[613,10,676,8],[613,11,676,9],[613,12,676,10],[614,10,677,8,"console"],[614,17,677,15],[614,18,677,16,"log"],[614,21,677,19],[614,22,677,20],[614,37,677,35,"enemy"],[614,42,677,40],[614,43,677,41,"name"],[614,47,677,45],[614,55,677,53,"damageResult"],[614,67,677,65],[614,68,677,66,"damage"],[614,74,677,72],[614,83,677,81],[614,84,677,82],[616,10,679,8],[617,10,680,8],[617,14,680,12,"damageResult"],[617,26,680,24],[617,27,680,25,"damage"],[617,33,680,31],[617,37,680,35,"enemy"],[617,42,680,40],[617,43,680,41,"health"],[617,49,680,47],[617,51,680,49],[618,12,681,10,"console"],[618,19,681,17],[618,20,681,18,"log"],[618,23,681,21],[618,24,681,22],[618,67,681,65,"enemy"],[618,72,681,70],[618,73,681,71,"name"],[618,77,681,75],[618,90,681,88,"damageResult"],[618,102,681,100],[618,103,681,101,"damage"],[618,109,681,107],[618,124,681,122,"enemy"],[618,129,681,127],[618,130,681,128,"health"],[618,136,681,134],[618,139,681,137],[618,140,681,138],[619,10,682,8],[620,8,683,6],[620,9,683,7],[620,10,683,8],[621,8,685,6,"console"],[621,15,685,13],[621,16,685,14,"log"],[621,19,685,17],[621,20,685,18],[621,26,685,24,"ability"],[621,33,685,31],[621,34,685,32,"name"],[621,38,685,36],[621,56,685,54,"enemiesInRange"],[621,70,685,68],[621,71,685,69,"length"],[621,77,685,75],[621,93,685,91,"damage"],[621,99,685,97],[621,118,685,116],[621,119,685,117],[622,6,687,4],[622,7,687,5],[622,13,687,11],[623,8,688,6],[624,8,689,6],[624,14,689,12,"target"],[624,20,689,18],[624,23,689,21,"findClosestEnemyInternal"],[624,47,689,45],[624,48,689,46,"state"],[624,53,689,51],[624,54,689,52,"enemies"],[624,61,689,59],[624,62,689,60],[625,8,690,6],[625,12,690,10],[625,13,690,11,"target"],[625,19,690,17],[625,21,690,19],[626,8,692,6],[626,14,692,12,"damageResult"],[626,26,692,24],[626,29,692,27,"DamageCalculator"],[626,48,692,43],[626,49,692,43,"DamageCalculator"],[626,65,692,43],[626,66,692,44,"calculateDamage"],[626,81,692,59],[626,82,692,60,"damage"],[626,88,692,66],[626,90,692,68,"state"],[626,95,692,73],[626,96,692,74,"playerStats"],[626,107,692,85],[626,109,692,87,"target"],[626,115,692,93],[626,116,692,94,"stats"],[626,121,692,99],[626,122,692,100],[628,8,694,6],[629,8,695,6,"console"],[629,15,695,13],[629,16,695,14,"log"],[629,19,695,17],[629,20,695,18],[629,71,695,69,"target"],[629,77,695,75],[629,78,695,76,"name"],[629,82,695,80],[629,91,695,89,"damageResult"],[629,103,695,101],[629,104,695,102,"damage"],[629,110,695,108],[629,119,695,117],[629,120,695,118],[630,8,696,6,"createProjectile"],[630,24,696,22],[630,25,696,23,"target"],[630,31,696,29],[630,33,696,31,"damageResult"],[630,45,696,43],[630,46,696,44,"damage"],[630,52,696,50],[630,54,696,52,"currentNinjaPosition"],[630,74,696,72],[630,76,696,74],[631,10,697,8,"id"],[631,12,697,10],[631,14,697,12,"ability"],[631,21,697,19],[631,22,697,20,"id"],[631,24,697,22],[632,10,698,8,"name"],[632,14,698,12],[632,16,698,14,"ability"],[632,23,698,21],[632,24,698,22,"name"],[632,28,698,26],[633,10,699,8,"icon"],[633,14,699,12],[633,16,699,14,"ability"],[633,23,699,21],[633,24,699,22,"icon"],[634,8,700,6],[634,9,700,7],[634,10,700,8],[635,8,702,6,"console"],[635,15,702,13],[635,16,702,14,"log"],[635,19,702,17],[635,20,702,18],[635,26,702,24,"ability"],[635,33,702,31],[635,34,702,32,"name"],[635,38,702,36],[635,66,702,64,"damageResult"],[635,78,702,76],[635,79,702,77,"damage"],[635,85,702,83],[635,95,702,93,"damageResult"],[635,107,702,105],[635,108,702,106,"isCritical"],[635,118,702,116],[635,121,702,119],[635,131,702,129],[635,134,702,132],[635,136,702,134],[635,138,702,136],[635,139,702,137],[637,8,704,6],[638,8,705,6],[638,12,705,10,"damageResult"],[638,24,705,22],[638,25,705,23,"damage"],[638,31,705,29],[638,35,705,33,"target"],[638,41,705,39],[638,42,705,40,"health"],[638,48,705,46],[638,50,705,48],[639,10,706,8,"console"],[639,17,706,15],[639,18,706,16,"log"],[639,21,706,19],[639,22,706,20],[639,75,706,73,"target"],[639,81,706,79],[639,82,706,80,"name"],[639,86,706,84],[639,99,706,97,"damageResult"],[639,111,706,109],[639,112,706,110,"damage"],[639,118,706,116],[639,133,706,131,"target"],[639,139,706,137],[639,140,706,138,"health"],[639,146,706,144],[639,149,706,147],[639,150,706,148],[640,8,707,6],[641,6,708,4],[643,6,710,4],[644,6,711,4],[644,10,711,8,"ability"],[644,17,711,15],[644,18,711,16,"effects"],[644,25,711,23],[644,26,711,24,"includes"],[644,34,711,32],[644,35,711,33],[644,40,711,38],[644,41,711,39],[644,45,711,43,"ability"],[644,52,711,50],[644,53,711,51,"stats"],[644,58,711,56],[644,59,711,57,"duration"],[644,67,711,65],[644,69,711,67],[645,8,712,6],[645,14,712,12,"targets"],[645,21,712,19],[645,24,712,22,"isAOE"],[645,29,712,27],[645,32,713,8,"state"],[645,37,713,13],[645,38,713,14,"enemies"],[645,45,713,21],[645,46,713,22,"filter"],[645,52,713,28],[645,53,713,29,"enemy"],[645,58,713,34],[645,62,713,38],[646,10,714,10],[646,16,714,16,"ninjaX"],[646,22,714,22],[646,25,714,25,"currentNinjaPosition"],[646,45,714,45],[646,46,714,46,"x"],[646,47,714,47],[646,50,714,50],[646,52,714,52],[647,10,715,10],[647,16,715,16,"ninjaY"],[647,22,715,22],[647,25,715,25,"currentNinjaPosition"],[647,45,715,45],[647,46,715,46,"y"],[647,47,715,47],[647,50,715,50],[647,52,715,52],[648,10,716,10],[648,16,716,16,"enemyX"],[648,22,716,22],[648,25,716,25,"enemy"],[648,30,716,30],[648,31,716,31,"position"],[648,39,716,39],[648,40,716,40,"x"],[648,41,716,41],[648,44,716,44],[648,48,716,48],[649,10,717,10],[649,16,717,16,"enemyY"],[649,22,717,22],[649,25,717,25,"enemy"],[649,30,717,30],[649,31,717,31,"position"],[649,39,717,39],[649,40,717,40,"y"],[649,41,717,41],[649,44,717,44],[649,48,717,48],[650,10,718,10],[650,16,718,16,"distance"],[650,24,718,24],[650,27,718,27,"Math"],[650,31,718,31],[650,32,718,32,"sqrt"],[650,36,718,36],[650,37,718,37,"Math"],[650,41,718,41],[650,42,718,42,"pow"],[650,45,718,45],[650,46,718,46,"enemyX"],[650,52,718,52],[650,55,718,55,"ninjaX"],[650,61,718,61],[650,63,718,63],[650,64,718,64],[650,65,718,65],[650,68,718,68,"Math"],[650,72,718,72],[650,73,718,73,"pow"],[650,76,718,76],[650,77,718,77,"enemyY"],[650,83,718,83],[650,86,718,86,"ninjaY"],[650,92,718,92],[650,94,718,94],[650,95,718,95],[650,96,718,96],[650,97,718,97],[651,10,719,10],[651,17,719,17,"distance"],[651,25,719,25],[651,29,719,29,"ability"],[651,36,719,36],[651,37,719,37,"stats"],[651,42,719,42],[651,43,719,43,"aoeRadius"],[651,52,719,52],[652,8,720,8],[652,9,720,9],[652,10,720,10],[652,13,721,8],[652,14,721,9,"findClosestEnemyInternal"],[652,38,721,33],[652,39,721,34,"state"],[652,44,721,39],[652,45,721,40,"enemies"],[652,52,721,47],[652,53,721,48],[652,54,721,49],[652,55,721,50,"filter"],[652,61,721,56],[652,62,721,57,"Boolean"],[652,69,721,64],[652,70,721,65],[653,8,723,6,"targets"],[653,15,723,13],[653,16,723,14,"forEach"],[653,23,723,21],[653,24,723,22,"target"],[653,30,723,28],[653,34,723,32],[654,10,724,8,"state"],[654,15,724,13],[654,16,724,14,"statusEffects"],[654,29,724,27],[654,30,724,28,"addEffect"],[654,39,724,37],[654,40,724,38,"target"],[654,46,724,44],[654,47,724,45,"id"],[654,49,724,47],[654,51,724,49],[655,12,725,10,"id"],[655,14,725,12],[655,16,725,14],[655,19,725,17,"ability"],[655,26,725,24],[655,27,725,25,"id"],[655,29,725,27],[655,35,725,33],[656,12,726,10,"type"],[656,16,726,14],[656,18,726,16],[656,23,726,21],[657,12,727,10,"remainingTicks"],[657,26,727,24],[657,28,727,26,"Math"],[657,32,727,30],[657,33,727,31,"floor"],[657,38,727,36],[657,39,727,37,"ability"],[657,46,727,44],[657,47,727,45,"stats"],[657,52,727,50],[657,53,727,51,"duration"],[657,61,727,59],[657,64,727,62],[657,66,727,64],[657,67,727,65],[658,12,728,10,"tickInterval"],[658,24,728,22],[658,26,728,24],[658,28,728,26],[659,12,729,10,"lastTick"],[659,20,729,18],[659,22,729,20,"state"],[659,27,729,25],[659,28,729,26,"currentTick"],[659,39,729,37],[660,12,730,10,"value"],[660,17,730,15],[660,19,730,17,"Math"],[660,23,730,21],[660,24,730,22,"floor"],[660,29,730,27],[660,30,730,28,"damage"],[660,36,730,34],[660,39,730,37],[660,42,730,40],[660,43,730,41],[661,12,731,10,"stackable"],[661,21,731,19],[661,23,731,21],[662,10,732,8],[662,11,732,9],[662,12,732,10],[663,8,733,6],[663,9,733,7],[663,10,733,8],[664,6,734,4],[666,6,736,4],[667,6,737,4],[667,10,737,8,"ability"],[667,17,737,15],[667,18,737,16,"effects"],[667,25,737,23],[667,26,737,24,"includes"],[667,34,737,32],[667,35,737,33],[667,41,737,39],[667,42,737,40],[667,46,737,44,"ability"],[667,53,737,51],[667,54,737,52,"id"],[667,56,737,54],[667,61,737,59],[667,75,737,73],[667,77,737,75],[668,8,738,6,"console"],[668,15,738,13],[668,16,738,14,"log"],[668,19,738,17],[668,20,738,18],[668,66,738,64,"ability"],[668,73,738,71],[668,74,738,72,"stats"],[668,79,738,77],[668,80,738,78,"duration"],[668,88,738,86],[668,98,738,96],[668,99,738,97],[670,8,740,6],[671,8,741,6],[671,14,741,12,"cloneX"],[671,20,741,18],[671,23,741,21,"currentNinjaPosition"],[671,43,741,41],[671,44,741,42,"x"],[671,45,741,43],[671,48,741,46],[671,50,741,48],[671,51,741,49],[671,52,741,50],[672,8,742,6],[672,14,742,12,"cloneY"],[672,20,742,18],[672,23,742,21,"currentNinjaPosition"],[672,43,742,41],[672,44,742,42,"y"],[672,45,742,43],[672,48,742,46],[672,50,742,48],[672,51,742,49],[672,52,742,50],[674,8,744,6,"state"],[674,13,744,11],[674,14,744,12,"shadowClone"],[674,25,744,23],[674,28,744,26],[675,10,745,8,"id"],[675,12,745,10],[675,14,745,12],[675,30,745,28,"Date"],[675,34,745,32],[675,35,745,33,"now"],[675,38,745,36],[675,39,745,37],[675,40,745,38],[675,42,745,40],[676,10,746,8,"remainingTicks"],[676,24,746,22],[676,26,746,24,"Math"],[676,30,746,28],[676,31,746,29,"floor"],[676,36,746,34],[676,37,746,35,"ability"],[676,44,746,42],[676,45,746,43,"stats"],[676,50,746,48],[676,51,746,49,"duration"],[676,59,746,57],[676,62,746,60],[676,64,746,62],[676,65,746,63],[677,10,746,65],[678,10,747,8,"position"],[678,18,747,16],[678,20,747,18],[679,12,747,20,"x"],[679,13,747,21],[679,15,747,23,"cloneX"],[679,21,747,29],[680,12,747,31,"y"],[680,13,747,32],[680,15,747,34,"cloneY"],[681,10,747,41],[681,11,747,42],[682,10,748,8,"damageMultiplier"],[682,26,748,24],[682,28,748,26],[682,31,748,29],[682,32,748,31],[683,8,749,6],[683,9,749,7],[684,8,751,6,"console"],[684,15,751,13],[684,16,751,14,"log"],[684,19,751,17],[684,20,751,18],[684,63,751,61,"ability"],[684,70,751,68],[684,71,751,69,"stats"],[684,76,751,74],[684,77,751,75,"duration"],[684,85,751,83],[684,108,751,106],[684,109,751,107],[685,6,752,4],[686,4,753,2],[686,5,753,3],[688,4,755,2],[689,4,756,2],[689,10,756,8,"createProjectile"],[689,26,756,24],[689,29,756,27,"createProjectile"],[689,30,756,28,"targetEnemy"],[689,41,756,52],[689,43,756,54,"damage"],[689,49,756,68],[689,51,756,70,"ninjaPos"],[689,59,756,103],[689,61,756,105,"abilityInfo"],[689,72,756,159],[689,74,756,161,"isAOE"],[689,79,756,176],[689,81,756,178,"aoeRadius"],[689,90,756,196],[689,95,756,201],[690,6,757,4],[690,10,757,8],[690,11,757,9,"targetEnemy"],[690,22,757,20],[690,24,757,22],[691,8,758,6,"console"],[691,15,758,13],[691,16,758,14,"log"],[691,19,758,17],[691,20,758,18],[691,65,758,63],[691,66,758,64],[692,8,759,6],[692,15,759,13],[692,19,759,17],[693,6,760,4],[695,6,762,4],[696,6,763,4,"console"],[696,13,763,11],[696,14,763,12,"log"],[696,17,763,15],[696,18,763,16],[696,52,763,50,"damage"],[696,58,763,56],[696,70,763,68,"targetEnemy"],[696,81,763,79],[696,82,763,80,"name"],[696,86,763,84],[696,91,763,89,"targetEnemy"],[696,102,763,100],[696,103,763,101,"health"],[696,109,763,107],[696,113,763,111,"targetEnemy"],[696,124,763,122],[696,125,763,123,"maxHealth"],[696,134,763,132],[696,140,763,138],[696,141,763,139],[697,6,765,4],[697,12,765,10,"SCREEN_WIDTH"],[697,24,765,22],[697,27,765,25],[697,30,765,28],[698,6,766,4],[698,12,766,10,"GAME_AREA_HEIGHT"],[698,28,766,26],[698,31,766,29],[698,34,766,32],[698,37,766,35],[698,40,766,38],[698,41,766,39],[698,42,766,40],[699,6,767,4],[699,12,767,10,"NINJA_SIZE"],[699,22,767,20],[699,25,767,23],[699,27,767,25],[701,6,769,4],[702,6,770,4],[702,12,770,10,"ninjaX"],[702,18,770,16],[702,21,770,19,"ninjaPos"],[702,29,770,27],[702,32,770,30,"ninjaPos"],[702,40,770,38],[702,41,770,39,"x"],[702,42,770,40],[702,45,770,43,"NINJA_SIZE"],[702,55,770,53],[702,58,770,56],[702,59,770,57],[702,62,770,60,"SCREEN_WIDTH"],[702,74,770,72],[702,77,770,75],[702,78,770,76],[703,6,771,4],[703,12,771,10,"ninjaY"],[703,18,771,16],[703,21,771,19,"ninjaPos"],[703,29,771,27],[703,32,771,30,"ninjaPos"],[703,40,771,38],[703,41,771,39,"y"],[703,42,771,40],[703,45,771,43,"NINJA_SIZE"],[703,55,771,53],[703,58,771,56],[703,59,771,57],[703,62,771,60,"GAME_AREA_HEIGHT"],[703,78,771,76],[703,81,771,79],[703,82,771,80],[704,6,772,4],[704,12,772,10,"ENEMY_SIZE"],[704,22,772,20],[704,25,772,23],[704,27,772,25],[705,6,774,4],[705,12,774,10,"projectileId"],[705,24,774,22],[705,27,774,25],[705,35,774,33,"Date"],[705,39,774,37],[705,40,774,38,"now"],[705,43,774,41],[705,44,774,42],[705,45,774,43],[705,49,774,47,"Math"],[705,53,774,51],[705,54,774,52,"random"],[705,60,774,58],[705,61,774,59],[705,62,774,60],[705,64,774,62],[706,6,776,4],[706,12,776,10,"projectile"],[706,22,776,38],[706,25,776,41],[707,8,777,6,"id"],[707,10,777,8],[707,12,777,10,"projectileId"],[707,24,777,22],[708,8,778,6,"x"],[708,9,778,7],[708,11,778,9,"ninjaX"],[708,17,778,15],[709,8,779,6,"y"],[709,9,779,7],[709,11,779,9,"ninjaY"],[709,17,779,15],[710,8,780,6,"targetX"],[710,15,780,13],[710,17,780,15,"targetEnemy"],[710,28,780,26],[710,29,780,27,"position"],[710,37,780,35],[710,38,780,36,"x"],[710,39,780,37],[710,42,780,40,"ENEMY_SIZE"],[710,52,780,50],[710,55,780,53],[710,56,780,54],[711,8,781,6,"targetY"],[711,15,781,13],[711,17,781,15,"targetEnemy"],[711,28,781,26],[711,29,781,27,"position"],[711,37,781,35],[711,38,781,36,"y"],[711,39,781,37],[711,42,781,40,"ENEMY_SIZE"],[711,52,781,50],[711,55,781,53],[711,56,781,54],[712,8,782,6,"targetEnemyId"],[712,21,782,19],[712,23,782,21,"targetEnemy"],[712,34,782,32],[712,35,782,33,"id"],[712,37,782,35],[713,8,783,6,"damage"],[713,14,783,12],[713,16,783,14,"damage"],[713,22,783,20],[714,8,784,6,"startTime"],[714,17,784,15],[714,19,784,17,"Date"],[714,23,784,21],[714,24,784,22,"now"],[714,27,784,25],[714,28,784,26],[714,29,784,27],[715,8,785,6,"duration"],[715,16,785,14],[715,18,785,16],[715,21,785,19],[716,8,785,21],[717,8,786,6],[718,8,787,6,"abilityId"],[718,17,787,15],[718,19,787,17,"abilityInfo"],[718,30,787,28],[718,32,787,30,"id"],[718,34,787,32],[718,38,787,36],[718,54,787,52],[719,8,788,6,"abilityName"],[719,19,788,17],[719,21,788,19,"abilityInfo"],[719,32,788,30],[719,34,788,32,"name"],[719,38,788,36],[719,42,788,40],[719,58,788,56],[720,8,789,6,"abilityIcon"],[720,19,789,17],[720,21,789,19,"abilityInfo"],[720,32,789,30],[720,34,789,32,"icon"],[720,38,789,36],[720,42,789,40],[720,46,789,44],[721,8,789,46],[722,8,790,6],[723,8,791,6,"isAOE"],[723,13,791,11],[723,15,791,13,"isAOE"],[723,20,791,18],[723,24,791,22],[723,29,791,27],[724,8,792,6,"aoeRadius"],[724,17,792,15],[724,19,792,17,"aoeRadius"],[724,28,792,26],[724,32,792,30],[725,6,793,4],[725,7,793,5],[726,6,795,4,"console"],[726,13,795,11],[726,14,795,12,"log"],[726,17,795,15],[726,18,795,16],[726,44,795,42,"abilityInfo"],[726,55,795,53],[726,57,795,55,"name"],[726,61,795,59],[726,65,795,63],[726,81,795,79],[726,101,795,99,"projectileId"],[726,113,795,111],[726,128,795,126,"targetEnemy"],[726,139,795,137],[726,140,795,138,"name"],[726,144,795,142],[726,152,795,150,"damage"],[726,158,795,156],[726,167,795,165],[726,168,795,166],[727,6,796,4,"console"],[727,13,796,11],[727,14,796,12,"log"],[727,17,796,15],[727,18,796,16],[727,48,796,46,"isAOE"],[727,53,796,51],[727,68,796,66,"aoeRadius"],[727,77,796,75],[727,89,796,87,"damage"],[727,95,796,93],[727,97,796,95],[727,98,796,96],[728,6,798,4,"console"],[728,13,798,11],[728,14,798,12,"log"],[728,17,798,15],[728,18,798,16],[728,53,798,51,"targetEnemy"],[728,64,798,62],[728,65,798,63,"id"],[728,67,798,65],[728,75,798,73,"damage"],[728,81,798,79],[728,90,798,88],[728,91,798,89],[729,6,799,4,"console"],[729,13,799,11],[729,14,799,12,"log"],[729,17,799,15],[729,18,799,16],[729,53,799,51,"ninjaX"],[729,59,799,57],[729,64,799,62,"ninjaY"],[729,70,799,68],[729,87,799,85,"projectile"],[729,97,799,95],[729,98,799,96,"targetX"],[729,105,799,103],[729,110,799,108,"projectile"],[729,120,799,118],[729,121,799,119,"targetY"],[729,128,799,126],[729,131,799,129],[729,132,799,130],[730,6,801,4,"setProjectiles"],[730,20,801,18],[730,21,801,19,"prev"],[730,25,801,23],[730,29,801,27],[730,30,801,28],[730,33,801,31,"prev"],[730,37,801,35],[730,39,801,37,"projectile"],[730,49,801,47],[730,50,801,48],[730,51,801,49],[732,6,803,4],[733,6,804,4],[735,6,806,4],[735,13,806,11,"projectile"],[735,23,806,21],[736,4,807,2],[736,5,807,3],[738,4,809,2],[739,4,810,2],[739,10,810,8,"spawnTestEnemy"],[739,24,810,22],[739,27,810,26,"state"],[739,32,810,44],[739,36,810,49],[740,6,811,4,"console"],[740,13,811,11],[740,14,811,12,"log"],[740,17,811,15],[740,18,811,16],[740,83,811,81],[740,84,811,82],[742,6,813,4],[743,6,814,4],[743,12,814,10,"zoneEnemy"],[743,21,814,19],[743,24,814,22,"spawnZoneEnemy"],[743,38,814,36],[743,39,814,37],[743,40,814,38],[744,6,815,4],[744,10,815,8],[744,11,815,9,"zoneEnemy"],[744,20,815,18],[744,22,815,20],[745,8,816,6,"console"],[745,15,816,13],[745,16,816,14,"log"],[745,19,816,17],[745,20,816,18],[745,76,816,74],[745,77,816,75],[746,8,817,6],[747,8,818,6,"spawnBasicTestEnemy"],[747,27,818,25],[747,28,818,26,"state"],[747,33,818,31],[747,34,818,32],[748,8,819,6],[749,6,820,4],[750,6,822,4,"console"],[750,13,822,11],[750,14,822,12,"log"],[750,17,822,15],[750,18,822,16],[750,44,822,42,"zoneEnemy"],[750,53,822,51],[750,54,822,52,"name"],[750,58,822,56],[750,63,822,61,"zoneEnemy"],[750,72,822,70],[750,73,822,71,"typeId"],[750,79,822,77],[750,94,822,92,"currentZone"],[750,105,822,103],[750,107,822,105,"id"],[750,109,822,107],[750,119,822,117,"currentZoneLevel"],[750,135,822,133],[750,137,822,135,"level"],[750,142,822,140],[750,144,822,142],[750,145,822,143],[752,6,824,4],[753,6,825,4],[753,12,825,10,"combatEnemy"],[753,23,825,34],[753,26,825,37],[754,8,826,6,"id"],[754,10,826,8],[754,12,826,10,"zoneEnemy"],[754,21,826,19],[754,22,826,20,"id"],[754,24,826,22],[755,8,827,6,"name"],[755,12,827,10],[755,14,827,12,"zoneEnemy"],[755,23,827,21],[755,24,827,22,"name"],[755,28,827,26],[756,8,828,6,"health"],[756,14,828,12],[756,16,828,14,"zoneEnemy"],[756,25,828,23],[756,26,828,24,"hp"],[756,28,828,26],[757,8,829,6,"maxHealth"],[757,17,829,15],[757,19,829,17,"zoneEnemy"],[757,28,829,26],[757,29,829,27,"maxHP"],[757,34,829,32],[758,8,830,6,"stats"],[758,13,830,11],[758,15,830,13],[759,10,831,8,"attack"],[759,16,831,14],[759,18,831,16,"zoneEnemy"],[759,27,831,25],[759,28,831,26,"attack"],[759,34,831,32],[760,10,832,8,"defense"],[760,17,832,15],[760,19,832,17],[760,21,832,19],[761,10,832,21],[762,10,833,8,"health"],[762,16,833,14],[762,18,833,16,"zoneEnemy"],[762,27,833,25],[762,28,833,26,"hp"],[762,30,833,28],[763,10,834,8,"maxHealth"],[763,19,834,17],[763,21,834,19,"zoneEnemy"],[763,30,834,28],[763,31,834,29,"maxHP"],[763,36,834,34],[764,10,835,8,"critChance"],[764,20,835,18],[764,22,835,20],[764,23,835,21],[765,10,836,8,"critDamage"],[765,20,836,18],[765,22,836,20],[765,25,836,23],[766,10,837,8,"cooldownReduction"],[766,27,837,25],[766,29,837,27],[767,8,838,6],[767,9,838,7],[768,8,839,6,"position"],[768,16,839,14],[768,18,839,16,"zoneEnemy"],[768,27,839,25],[768,28,839,26,"position"],[768,36,839,34],[769,8,840,6,"lastDamaged"],[769,19,840,17],[769,21,840,19],[769,22,840,20],[770,8,841,6],[771,8,842,6,"zoneTypeId"],[771,18,842,16],[771,20,842,18,"zoneEnemy"],[771,29,842,27],[771,30,842,28,"typeId"],[771,36,842,34],[772,8,843,6,"zoneXP"],[772,14,843,12],[772,16,843,14,"zoneEnemy"],[772,25,843,23],[772,26,843,24,"xp"],[773,6,844,4],[773,7,844,5],[774,6,846,4,"console"],[774,13,846,11],[774,14,846,12,"log"],[774,17,846,15],[774,18,846,16],[774,42,846,40,"combatEnemy"],[774,53,846,51],[774,54,846,52,"name"],[774,58,846,56],[774,67,846,65,"combatEnemy"],[774,78,846,76],[774,79,846,77,"health"],[774,85,846,83],[774,100,846,98,"currentZone"],[774,111,846,109],[774,113,846,111,"id"],[774,115,846,113],[774,125,846,123,"currentZoneLevel"],[774,141,846,139],[774,143,846,141,"level"],[774,148,846,146],[774,150,846,148],[774,151,846,149],[775,6,847,4,"state"],[775,11,847,9],[775,12,847,10,"enemies"],[775,19,847,17],[775,20,847,18,"push"],[775,24,847,22],[775,25,847,23,"combatEnemy"],[775,36,847,34],[775,37,847,35],[776,4,848,2],[776,5,848,3],[778,4,850,2],[779,4,851,2],[779,10,851,8,"spawnBasicTestEnemy"],[779,29,851,27],[779,32,851,31,"state"],[779,37,851,49],[779,41,851,54],[780,6,852,4],[780,12,852,10,"SCREEN_WIDTH"],[780,24,852,22],[780,27,852,25],[780,30,852,28],[781,6,853,4],[781,12,853,10,"GAME_AREA_HEIGHT"],[781,28,853,26],[781,31,853,29],[781,34,853,32],[781,37,853,35],[781,40,853,38],[782,6,854,4],[782,12,854,10,"ENEMY_SIZE"],[782,22,854,20],[782,25,854,23],[782,27,854,25],[783,6,856,4],[783,12,856,10,"x"],[783,13,856,11],[783,16,856,14,"Math"],[783,20,856,18],[783,21,856,19,"random"],[783,27,856,25],[783,28,856,26],[783,29,856,27],[783,33,856,31,"SCREEN_WIDTH"],[783,45,856,43],[783,48,856,46,"ENEMY_SIZE"],[783,58,856,56],[783,61,856,59],[783,62,856,60],[783,63,856,61],[783,66,856,64,"ENEMY_SIZE"],[783,76,856,74],[784,6,857,4],[784,12,857,10,"y"],[784,13,857,11],[784,16,857,14,"Math"],[784,20,857,18],[784,21,857,19,"random"],[784,27,857,25],[784,28,857,26],[784,29,857,27],[784,33,857,31,"GAME_AREA_HEIGHT"],[784,49,857,47],[784,52,857,50,"ENEMY_SIZE"],[784,62,857,60],[784,65,857,63],[784,66,857,64],[784,67,857,65],[784,70,857,68,"ENEMY_SIZE"],[784,80,857,78],[785,6,859,4],[785,12,859,10,"enemy"],[785,17,859,28],[785,20,859,31],[786,8,860,6,"id"],[786,10,860,8],[786,12,860,10],[786,30,860,28,"Date"],[786,34,860,32],[786,35,860,33,"now"],[786,38,860,36],[786,39,860,37],[786,40,860,38],[786,44,860,42,"Math"],[786,48,860,46],[786,49,860,47,"random"],[786,55,860,53],[786,56,860,54],[786,57,860,55],[786,59,860,57],[787,8,861,6,"name"],[787,12,861,10],[787,14,861,12],[787,26,861,24,"Math"],[787,30,861,28],[787,31,861,29,"floor"],[787,36,861,34],[787,37,861,35,"Math"],[787,41,861,39],[787,42,861,40,"random"],[787,48,861,46],[787,49,861,47],[787,50,861,48],[787,53,861,51],[787,56,861,54],[787,57,861,55],[787,59,861,57],[788,8,862,6,"health"],[788,14,862,12],[788,16,862,14],[788,18,862,16],[789,8,863,6,"maxHealth"],[789,17,863,15],[789,19,863,17],[789,21,863,19],[790,8,864,6,"stats"],[790,13,864,11],[790,15,864,13],[791,10,865,8,"attack"],[791,16,865,14],[791,18,865,16],[791,20,865,18],[792,10,866,8,"defense"],[792,17,866,15],[792,19,866,17],[792,21,866,19],[793,10,867,8,"health"],[793,16,867,14],[793,18,867,16],[793,20,867,18],[794,10,868,8,"maxHealth"],[794,19,868,17],[794,21,868,19],[794,23,868,21],[795,10,869,8,"critChance"],[795,20,869,18],[795,22,869,20],[795,23,869,21],[796,10,870,8,"critDamage"],[796,20,870,18],[796,22,870,20],[796,25,870,23],[797,10,871,8,"cooldownReduction"],[797,27,871,25],[797,29,871,27],[798,8,872,6],[798,9,872,7],[799,8,873,6,"position"],[799,16,873,14],[799,18,873,16],[800,10,873,18,"x"],[800,11,873,19],[801,10,873,21,"y"],[802,8,873,23],[802,9,873,24],[803,8,874,6,"lastDamaged"],[803,19,874,17],[803,21,874,19],[804,6,875,4],[804,7,875,5],[805,6,877,4,"console"],[805,13,877,11],[805,14,877,12,"log"],[805,17,877,15],[805,18,877,16],[805,42,877,40,"enemy"],[805,47,877,45],[805,48,877,46,"name"],[805,52,877,50],[805,60,877,58,"Math"],[805,64,877,62],[805,65,877,63,"round"],[805,70,877,68],[805,71,877,69,"x"],[805,72,877,70],[805,73,877,71],[805,78,877,76,"Math"],[805,82,877,80],[805,83,877,81,"round"],[805,88,877,86],[805,89,877,87,"y"],[805,90,877,88],[805,91,877,89],[805,94,877,92],[805,95,877,93],[806,6,878,4,"state"],[806,11,878,9],[806,12,878,10,"enemies"],[806,19,878,17],[806,20,878,18,"push"],[806,24,878,22],[806,25,878,23,"enemy"],[806,30,878,28],[806,31,878,29],[807,4,879,2],[807,5,879,3],[809,4,881,2],[810,4,882,2],[811,4,883,2],[811,10,883,8,"startCombat"],[811,21,883,19],[811,24,883,22,"React"],[811,29,883,27],[811,30,883,27,"default"],[811,37,883,27],[811,38,883,28,"useCallback"],[811,49,883,39],[811,50,883,40],[811,56,883,46],[812,6,884,4,"console"],[812,13,884,11],[812,14,884,12,"log"],[812,17,884,15],[812,18,884,16],[812,63,884,61],[812,64,884,62],[813,6,885,4,"console"],[813,13,885,11],[813,14,885,12,"log"],[813,17,885,15],[813,18,885,16],[813,37,885,35],[813,39,885,37,"combatEngine"],[813,58,885,49],[813,59,885,49,"combatEngine"],[813,71,885,49],[813,72,885,50],[814,6,886,4,"console"],[814,13,886,11],[814,14,886,12,"log"],[814,17,886,15],[814,18,886,16],[814,51,886,49],[814,53,886,51,"handleCombatTick"],[814,69,886,67],[814,70,886,68],[815,6,887,4,"setCombatState"],[815,20,887,18],[815,21,887,19,"prev"],[815,25,887,23],[815,30,887,28],[816,8,887,30],[816,11,887,33,"prev"],[816,15,887,37],[817,8,887,39,"isInCombat"],[817,18,887,49],[817,20,887,51],[818,6,887,56],[818,7,887,57],[818,8,887,58],[818,9,887,59],[820,6,889,4],[821,6,890,4,"combatEngine"],[821,25,890,16],[821,26,890,16,"combatEngine"],[821,38,890,16],[821,39,890,17,"addTickCallback"],[821,54,890,32],[821,55,890,33,"handleCombatTick"],[821,71,890,49],[821,72,890,50],[822,6,891,4,"console"],[822,13,891,11],[822,14,891,12,"log"],[822,17,891,15],[822,18,891,16],[822,62,891,60],[822,63,891,61],[824,6,893,4],[825,6,894,4,"combatEngine"],[825,25,894,16],[825,26,894,16,"combatEngine"],[825,38,894,16],[825,39,894,17,"start"],[825,44,894,22],[825,45,894,23],[825,46,894,24],[826,6,895,4,"console"],[826,13,895,11],[826,14,895,12,"log"],[826,17,895,15],[826,18,895,16],[826,51,895,49],[826,52,895,50],[827,4,896,2],[827,5,896,3],[827,7,896,5],[827,8,896,6,"combatEngine"],[827,27,896,18],[827,28,896,18,"combatEngine"],[827,40,896,18],[827,42,896,20,"handleCombatTick"],[827,58,896,36],[827,59,896,37],[827,60,896,38],[829,4,898,2],[830,4,899,2],[830,10,899,8,"stopCombat"],[830,20,899,18],[830,23,899,21,"React"],[830,28,899,26],[830,29,899,26,"default"],[830,36,899,26],[830,37,899,27,"useCallback"],[830,48,899,38],[830,49,899,39],[830,55,899,45],[831,6,900,4,"setCombatState"],[831,20,900,18],[831,21,900,19,"prev"],[831,25,900,23],[831,30,900,28],[832,8,900,30],[832,11,900,33,"prev"],[832,15,900,37],[833,8,900,39,"isInCombat"],[833,18,900,49],[833,20,900,51],[834,6,900,57],[834,7,900,58],[834,8,900,59],[834,9,900,60],[835,6,901,4,"combatEngine"],[835,25,901,16],[835,26,901,16,"combatEngine"],[835,38,901,16],[835,39,901,17,"removeTickCallback"],[835,57,901,35],[835,58,901,36,"handleCombatTick"],[835,74,901,52],[835,75,901,53],[836,4,902,2],[836,5,902,3],[836,7,902,5],[836,8,902,6,"combatEngine"],[836,27,902,18],[836,28,902,18,"combatEngine"],[836,40,902,18],[836,42,902,20,"handleCombatTick"],[836,58,902,36],[836,59,902,37],[836,60,902,38],[838,4,904,2],[839,4,905,2],[839,10,905,8,"equipAbility"],[839,22,905,20],[839,25,905,23,"equipAbility"],[839,26,905,24,"abilityId"],[839,35,905,41],[839,37,905,43,"slotIndex"],[839,46,905,60],[839,51,905,74],[840,6,906,4],[840,13,906,11,"combatState"],[840,24,906,22],[840,25,906,23,"abilityManager"],[840,39,906,37],[840,40,906,38,"equipAbility"],[840,52,906,50],[840,53,906,51,"abilityId"],[840,62,906,60],[840,64,906,62,"slotIndex"],[840,73,906,71],[840,74,906,72],[841,4,907,2],[841,5,907,3],[842,4,909,2],[842,10,909,8,"getDeck"],[842,17,909,15],[842,20,909,18,"getDeck"],[842,21,909,18],[842,26,909,24],[843,6,910,4],[843,13,910,11,"combatState"],[843,24,910,22],[843,25,910,23,"abilityManager"],[843,39,910,37],[843,40,910,38,"getDeck"],[843,47,910,45],[843,48,910,46],[843,49,910,47],[844,4,911,2],[844,5,911,3],[845,4,913,2],[845,10,913,8,"getAvailableAbilities"],[845,31,913,29],[845,34,913,32,"getAvailableAbilities"],[845,35,913,32],[845,40,913,38],[846,6,914,4],[846,13,914,11,"combatState"],[846,24,914,22],[846,25,914,23,"abilityManager"],[846,39,914,37],[846,40,914,38,"getAvailableAbilities"],[846,61,914,59],[846,62,914,60],[846,63,914,61],[847,4,915,2],[847,5,915,3],[848,4,917,2],[848,10,917,8,"upgradeAbility"],[848,24,917,22],[848,27,917,26,"abilityId"],[848,36,917,43],[848,40,917,57],[849,6,918,4],[849,13,918,11,"combatState"],[849,24,918,22],[849,25,918,23,"abilityManager"],[849,39,918,37],[849,40,918,38,"upgradeAbility"],[849,54,918,52],[849,55,918,53,"abilityId"],[849,64,918,62],[849,65,918,63],[850,4,919,2],[850,5,919,3],[852,4,921,2],[853,4,922,2],[853,10,922,8,"clearAllEnemies"],[853,25,922,23],[853,28,922,26,"clearAllEnemies"],[853,29,922,26],[853,34,922,32],[854,6,923,4,"console"],[854,13,923,11],[854,14,923,12,"log"],[854,17,923,15],[854,18,923,16],[854,67,923,65],[854,68,923,66],[855,6,924,4,"setCombatState"],[855,20,924,18],[855,21,924,19,"prev"],[855,25,924,23],[855,30,924,28],[856,8,925,6],[856,11,925,9,"prev"],[856,15,925,13],[857,8,926,6,"enemies"],[857,15,926,13],[857,17,926,15],[858,6,927,4],[858,7,927,5],[858,8,927,6],[858,9,927,7],[859,4,928,2],[859,5,928,3],[861,4,930,2],[862,4,931,2],[864,4,933,2],[865,4,934,2],[865,10,934,8,"spawnEnemy"],[865,20,934,18],[865,23,934,22,"position"],[865,31,934,57],[865,35,934,75],[866,6,935,4],[866,12,935,10,"SCREEN_WIDTH"],[866,24,935,22],[866,27,935,25],[866,30,935,28],[867,6,936,4],[867,12,936,10,"GAME_AREA_HEIGHT"],[867,28,936,26],[867,31,936,29],[867,34,936,32],[867,37,936,35],[867,40,936,38],[867,41,936,39],[867,42,936,40],[868,6,937,4],[868,12,937,10,"ENEMY_SIZE"],[868,22,937,20],[868,25,937,23],[868,27,937,25],[870,6,939,4],[871,6,940,4],[871,12,940,10,"x"],[871,13,940,11],[871,16,940,14,"position"],[871,24,940,22],[871,26,940,24,"x"],[871,27,940,25],[871,31,940,29,"Math"],[871,35,940,33],[871,36,940,34,"random"],[871,42,940,40],[871,43,940,41],[871,44,940,42],[871,48,940,46,"SCREEN_WIDTH"],[871,60,940,58],[871,63,940,61,"ENEMY_SIZE"],[871,73,940,71],[871,76,940,74],[871,77,940,75],[871,78,940,76],[871,81,940,79,"ENEMY_SIZE"],[871,91,940,89],[872,6,941,4],[872,12,941,10,"y"],[872,13,941,11],[872,16,941,14,"position"],[872,24,941,22],[872,26,941,24,"y"],[872,27,941,25],[872,31,941,29,"Math"],[872,35,941,33],[872,36,941,34,"random"],[872,42,941,40],[872,43,941,41],[872,44,941,42],[872,48,941,46,"GAME_AREA_HEIGHT"],[872,64,941,62],[872,67,941,65,"ENEMY_SIZE"],[872,77,941,75],[872,80,941,78],[872,81,941,79],[872,82,941,80],[872,85,941,83,"ENEMY_SIZE"],[872,95,941,93],[873,6,943,4],[873,12,943,10,"enemy"],[873,17,943,28],[873,20,943,31],[874,8,944,6,"id"],[874,10,944,8],[874,12,944,10],[874,21,944,19],[874,23,944,21,"enemyCounter"],[874,35,944,33],[874,37,944,35],[875,8,945,6,"name"],[875,12,945,10],[875,14,945,12],[875,24,945,22],[876,8,946,6,"health"],[876,14,946,12],[876,16,946,14],[876,19,946,17],[877,8,947,6,"maxHealth"],[877,17,947,15],[877,19,947,17],[877,22,947,20],[878,8,948,6,"stats"],[878,13,948,11],[878,15,948,13],[879,10,949,8,"attack"],[879,16,949,14],[879,18,949,16],[879,20,949,18],[880,10,950,8,"defense"],[880,17,950,15],[880,19,950,17],[880,21,950,19],[881,10,951,8,"health"],[881,16,951,14],[881,18,951,16],[881,21,951,19],[882,10,952,8,"maxHealth"],[882,19,952,17],[882,21,952,19],[882,24,952,22],[883,10,953,8,"critChance"],[883,20,953,18],[883,22,953,20],[883,23,953,21],[884,10,954,8,"critDamage"],[884,20,954,18],[884,22,954,20],[884,25,954,23],[885,10,955,8,"cooldownReduction"],[885,27,955,25],[885,29,955,27],[886,8,956,6],[886,9,956,7],[887,8,957,6,"position"],[887,16,957,14],[887,18,957,16],[888,10,957,18,"x"],[888,11,957,19],[889,10,957,21,"y"],[890,8,957,23],[890,9,957,24],[891,8,958,6,"lastDamaged"],[891,19,958,17],[891,21,958,19],[892,6,959,4],[892,7,959,5],[893,6,961,4,"setCombatState"],[893,20,961,18],[893,21,961,19,"prev"],[893,25,961,23],[893,30,961,28],[894,8,962,6],[894,11,962,9,"prev"],[894,15,962,13],[895,8,963,6,"enemies"],[895,15,963,13],[895,17,963,15],[895,18,963,16],[895,21,963,19,"prev"],[895,25,963,23],[895,26,963,24,"enemies"],[895,33,963,31],[895,35,963,33,"enemy"],[895,40,963,38],[896,6,964,4],[896,7,964,5],[896,8,964,6],[896,9,964,7],[897,6,966,4],[897,13,966,11,"enemy"],[897,18,966,16],[898,4,967,2],[898,5,967,3],[900,4,969,2],[901,4,970,2],[901,10,970,8,"spawnBoss"],[901,19,970,17],[901,22,970,21,"bossEnemy"],[901,31,970,43],[901,35,970,48],[902,6,971,4,"console"],[902,13,971,11],[902,14,971,12,"log"],[902,17,971,15],[902,18,971,16],[902,39,971,37,"bossEnemy"],[902,48,971,46],[902,49,971,47,"name"],[902,53,971,51],[902,90,971,88],[902,91,971,89],[903,6,972,4,"setCombatState"],[903,20,972,18],[903,21,972,19,"prev"],[903,25,972,23],[903,30,972,28],[904,8,973,6],[904,11,973,9,"prev"],[904,15,973,13],[905,8,974,6,"enemies"],[905,15,974,13],[905,17,974,15],[905,18,974,16,"bossEnemy"],[905,27,974,25],[905,28,974,26],[905,29,974,27],[906,6,975,4],[906,7,975,5],[906,8,975,6],[906,9,975,7],[907,4,976,2],[907,5,976,3],[909,4,978,2],[910,4,979,2],[910,10,979,8,"clearSpecificEnemy"],[910,28,979,26],[910,31,979,30,"enemyId"],[910,38,979,45],[910,42,979,50],[911,6,980,4,"setCombatState"],[911,20,980,18],[911,21,980,19,"prev"],[911,25,980,23],[911,30,980,28],[912,8,981,6],[912,11,981,9,"prev"],[912,15,981,13],[913,8,982,6,"enemies"],[913,15,982,13],[913,17,982,15,"prev"],[913,21,982,19],[913,22,982,20,"enemies"],[913,29,982,27],[913,30,982,28,"filter"],[913,36,982,34],[913,37,982,35,"enemy"],[913,42,982,40],[913,46,982,44,"enemy"],[913,51,982,49],[913,52,982,50,"id"],[913,54,982,52],[913,59,982,57,"enemyId"],[913,66,982,64],[914,6,983,4],[914,7,983,5],[914,8,983,6],[914,9,983,7],[915,4,984,2],[915,5,984,3],[917,4,986,2],[918,4,987,2],[918,10,987,8,"useAbilityManually"],[918,28,987,26],[918,31,987,26,"_s3"],[918,34,987,26],[918,35,987,29],[918,39,987,29,"useCallback"],[918,45,987,40],[918,46,987,40,"useCallback"],[918,57,987,40],[918,59,987,40,"_s3"],[918,62,987,40],[918,63,987,42,"slotIndex"],[918,72,987,59],[918,76,987,73],[919,6,987,73,"_s3"],[919,9,987,73],[920,6,988,4,"console"],[920,13,988,11],[920,14,988,12,"log"],[920,17,988,15],[920,18,988,16],[920,64,988,62,"slotIndex"],[920,73,988,71],[920,82,988,80],[920,83,988,81],[921,6,989,4,"console"],[921,13,989,11],[921,14,989,12,"log"],[921,17,989,15],[921,18,989,16],[921,65,989,63,"slotIndex"],[921,74,989,72],[921,76,989,74],[921,77,989,75],[922,6,990,4,"console"],[922,13,990,11],[922,14,990,12,"log"],[922,17,990,15],[922,18,990,16],[922,53,990,51,"slotIndex"],[922,62,990,60],[922,64,990,62],[922,65,990,63],[924,6,992,4],[925,6,993,4],[925,10,993,8],[925,11,993,9,"game"],[925,15,993,13],[925,16,993,14,"gameState"],[925,25,993,23],[925,26,993,24,"isAlive"],[925,33,993,31],[925,35,993,33],[926,8,994,6,"console"],[926,15,994,13],[926,16,994,14,"log"],[926,19,994,17],[926,20,994,18],[926,70,994,68],[926,71,994,69],[927,8,995,6],[927,15,995,13],[927,20,995,18],[928,6,996,4],[930,6,998,4],[931,6,999,4],[931,12,999,10,"isReady"],[931,19,999,17],[931,22,999,20,"combatState"],[931,33,999,31],[931,34,999,32,"abilityManager"],[931,48,999,46],[931,49,999,47,"isAbilityReady"],[931,63,999,61],[931,64,999,62,"slotIndex"],[931,73,999,71],[931,74,999,72],[932,6,1000,4],[932,10,1000,8],[932,11,1000,9,"isReady"],[932,18,1000,16],[932,20,1000,18],[933,8,1001,6,"console"],[933,15,1001,13],[933,16,1001,14,"log"],[933,19,1001,17],[933,20,1001,18],[933,41,1001,39,"slotIndex"],[933,50,1001,48],[933,85,1001,83],[933,86,1001,84],[934,8,1002,6],[934,15,1002,13],[934,20,1002,18],[935,6,1003,4],[937,6,1005,4],[938,6,1006,4],[938,10,1006,8,"combatState"],[938,21,1006,19],[938,22,1006,20,"enemies"],[938,29,1006,27],[938,30,1006,28,"length"],[938,36,1006,34],[938,41,1006,39],[938,42,1006,40],[938,44,1006,42],[939,8,1007,6,"console"],[939,15,1007,13],[939,16,1007,14,"log"],[939,19,1007,17],[939,20,1007,18],[939,69,1007,67],[939,70,1007,68],[940,8,1008,6],[940,15,1008,13],[940,20,1008,18],[941,6,1009,4],[943,6,1011,4],[944,6,1012,4],[944,12,1012,10,"currentTick"],[944,23,1012,21],[944,26,1012,24,"combatEngine"],[944,45,1012,36],[944,46,1012,36,"combatEngine"],[944,58,1012,36],[944,59,1012,37,"getCurrentTick"],[944,73,1012,51],[944,74,1012,52],[944,75,1012,53],[945,6,1013,4],[945,12,1013,10,"success"],[945,19,1013,17],[945,22,1013,20,"combatState"],[945,33,1013,31],[945,34,1013,32,"abilityManager"],[945,48,1013,46],[945,49,1013,47,"useAbility"],[945,59,1013,57],[945,60,1013,58,"slotIndex"],[945,69,1013,67],[945,71,1013,69,"currentTick"],[945,82,1013,80],[945,83,1013,81],[946,6,1015,4],[946,10,1015,8,"success"],[946,17,1015,15],[946,19,1015,17],[947,8,1016,6],[948,8,1017,6,"setCombatState"],[948,22,1017,20],[948,23,1017,21,"prev"],[948,27,1017,25],[948,31,1017,29],[949,10,1018,8],[949,16,1018,14,"newState"],[949,24,1018,22],[949,27,1018,25],[950,12,1018,27],[950,15,1018,30,"prev"],[951,10,1018,35],[951,11,1018,36],[952,10,1019,8,"castAbility"],[952,21,1019,19],[952,22,1019,20,"newState"],[952,30,1019,28],[952,32,1019,30,"slotIndex"],[952,41,1019,39],[952,42,1019,40],[953,10,1020,8],[953,17,1020,15,"newState"],[953,25,1020,23],[954,8,1021,6],[954,9,1021,7],[954,10,1021,8],[955,8,1023,6,"console"],[955,15,1023,13],[955,16,1023,14,"log"],[955,19,1023,17],[955,20,1023,18],[955,65,1023,63,"slotIndex"],[955,74,1023,72],[955,76,1023,74],[955,77,1023,75],[956,8,1024,6],[956,15,1024,13],[956,19,1024,17],[957,6,1025,4],[957,7,1025,5],[957,13,1025,11],[958,8,1026,6,"console"],[958,15,1026,13],[958,16,1026,14,"log"],[958,19,1026,17],[958,20,1026,18],[958,61,1026,59,"slotIndex"],[958,70,1026,68],[958,72,1026,70],[958,73,1026,71],[959,8,1027,6],[959,15,1027,13],[959,20,1027,18],[960,6,1028,4],[961,4,1029,2],[961,5,1029,3],[961,46,1029,5],[961,47,1029,6,"combatState"],[961,58,1029,17],[961,59,1029,18,"abilityManager"],[961,73,1029,32],[961,75,1029,34,"combatState"],[961,86,1029,45],[961,87,1029,46,"enemies"],[961,94,1029,53],[961,95,1029,54],[961,96,1029,55],[962,4,1030,2],[962,8,1030,2,"useEffect"],[962,14,1030,11],[962,15,1030,11,"useEffect"],[962,24,1030,11],[962,26,1030,12],[962,32,1030,18],[963,6,1031,4,"combatEngine"],[963,25,1031,16],[963,26,1031,16,"combatEngine"],[963,38,1031,16],[963,39,1031,17,"start"],[963,44,1031,22],[963,45,1031,23],[963,46,1031,24],[965,6,1033,4],[966,6,1034,4],[967,6,1035,4,"console"],[967,13,1035,11],[967,14,1035,12,"log"],[967,17,1035,15],[967,18,1035,16],[967,97,1035,95],[967,98,1035,96],[968,6,1037,4],[968,13,1037,11],[968,19,1037,17],[969,8,1038,6,"combatEngine"],[969,27,1038,18],[969,28,1038,18,"combatEngine"],[969,40,1038,18],[969,41,1038,19,"stop"],[969,45,1038,23],[969,46,1038,24],[969,47,1038,25],[970,6,1039,4],[970,7,1039,5],[971,4,1040,2],[971,5,1040,3],[971,7,1040,5],[971,9,1040,7],[971,10,1040,8],[973,4,1042,2],[974,4,1043,2],[974,8,1043,2,"useEffect"],[974,14,1043,11],[974,15,1043,11,"useEffect"],[974,24,1043,11],[974,26,1043,12],[974,32,1043,18],[975,6,1044,4],[976,6,1045,4],[976,12,1045,10,"tickInterval"],[976,24,1045,22],[976,27,1045,25,"Platform"],[976,35,1045,33],[976,36,1045,33,"default"],[976,43,1045,33],[976,44,1045,34,"OS"],[976,46,1045,36],[976,51,1045,41],[976,56,1045,46],[976,59,1045,49],[976,62,1045,52],[976,65,1045,55],[976,68,1045,58],[976,69,1045,59],[976,70,1045,60],[977,6,1046,4,"console"],[977,13,1046,11],[977,14,1046,12,"log"],[977,17,1046,15],[977,18,1046,16],[977,91,1046,89,"tickInterval"],[977,103,1046,101],[977,112,1046,110,"Platform"],[977,120,1046,118],[977,121,1046,118,"default"],[977,128,1046,118],[977,129,1046,119,"OS"],[977,131,1046,121],[977,133,1046,123],[977,134,1046,124],[978,6,1047,4],[978,12,1047,10,"combatTickInterval"],[978,30,1047,28],[978,33,1047,31,"setInterval"],[978,44,1047,42],[978,45,1047,43,"handleCombatTick"],[978,61,1047,59],[978,63,1047,61,"tickInterval"],[978,75,1047,73],[978,76,1047,74],[979,6,1049,4],[979,13,1049,11],[979,19,1049,17],[980,8,1050,6,"console"],[980,15,1050,13],[980,16,1050,14,"log"],[980,19,1050,17],[980,20,1050,18],[980,51,1050,49],[980,52,1050,50],[981,8,1051,6,"clearInterval"],[981,21,1051,19],[981,22,1051,20,"combatTickInterval"],[981,40,1051,38],[981,41,1051,39],[982,6,1052,4],[982,7,1052,5],[983,4,1053,2],[983,5,1053,3],[983,7,1053,5],[983,8,1053,6,"handleCombatTick"],[983,24,1053,22],[983,25,1053,23],[983,26,1053,24],[985,4,1055,2],[986,4,1056,2],[986,8,1056,2,"useEffect"],[986,14,1056,11],[986,15,1056,11,"useEffect"],[986,24,1056,11],[986,26,1056,12],[986,32,1056,18],[987,6,1057,4],[987,12,1057,10,"processProjectileImpacts"],[987,36,1057,34],[987,39,1057,37,"processProjectileImpacts"],[987,40,1057,37],[987,45,1057,43],[988,8,1058,6,"setProjectiles"],[988,22,1058,20],[988,23,1058,21,"currentProjectiles"],[988,41,1058,39],[988,45,1058,43],[989,10,1059,8],[989,17,1059,15,"currentProjectiles"],[989,35,1059,33],[989,36,1059,34,"map"],[989,39,1059,37],[989,40,1059,38,"projectile"],[989,50,1059,48],[989,54,1059,52],[990,12,1060,10],[990,16,1060,14],[990,17,1060,15,"projectile"],[990,27,1060,25],[990,29,1060,27],[990,36,1060,34],[990,40,1060,38],[992,12,1062,10],[993,12,1063,10],[993,18,1063,16,"currentTime"],[993,29,1063,27],[993,32,1063,30,"Date"],[993,36,1063,34],[993,37,1063,35,"now"],[993,40,1063,38],[993,41,1063,39],[993,42,1063,40],[994,12,1064,10],[994,18,1064,16,"startTime"],[994,27,1064,25],[994,30,1064,28,"projectile"],[994,40,1064,38],[994,41,1064,39,"startTime"],[994,50,1064,48],[994,54,1064,52,"currentTime"],[994,65,1064,63],[995,12,1065,10],[995,18,1065,16,"elapsedTime"],[995,29,1065,27],[995,32,1065,30,"currentTime"],[995,43,1065,41],[995,46,1065,44,"startTime"],[995,55,1065,53],[996,12,1066,10],[996,18,1066,16,"progress"],[996,26,1066,24],[996,29,1066,27,"Math"],[996,33,1066,31],[996,34,1066,32,"min"],[996,37,1066,35],[996,38,1066,36,"elapsedTime"],[996,49,1066,47],[996,53,1066,51,"projectile"],[996,63,1066,61],[996,64,1066,62,"duration"],[996,72,1066,70],[996,76,1066,74],[996,79,1066,77],[996,80,1066,78],[996,82,1066,80],[996,83,1066,81],[996,84,1066,82],[998,12,1068,10],[999,12,1069,10],[999,16,1069,14,"progress"],[999,24,1069,22],[999,28,1069,26],[999,29,1069,27],[999,33,1069,31],[999,34,1069,32,"projectile"],[999,44,1069,42],[999,45,1069,43,"hasHit"],[999,51,1069,49],[999,53,1069,51],[1000,14,1070,12],[1001,14,1071,12,"console"],[1001,21,1071,19],[1001,22,1071,20,"log"],[1001,25,1071,23],[1001,26,1071,24],[1001,51,1071,49,"projectile"],[1001,61,1071,59],[1001,62,1071,60,"abilityName"],[1001,73,1071,71],[1001,97,1071,95],[1001,98,1071,96],[1002,14,1073,12,"setCombatState"],[1002,28,1073,26],[1002,29,1073,27,"prev"],[1002,33,1073,31],[1002,37,1073,35],[1003,16,1074,14],[1003,22,1074,20,"newState"],[1003,30,1074,28],[1003,33,1074,31],[1004,18,1074,33],[1004,21,1074,36,"prev"],[1005,16,1074,41],[1005,17,1074,42],[1006,16,1076,14],[1006,20,1076,18,"projectile"],[1006,30,1076,28],[1006,31,1076,29,"isAOE"],[1006,36,1076,34],[1006,40,1076,38,"projectile"],[1006,50,1076,48],[1006,51,1076,49,"aoeRadius"],[1006,60,1076,58],[1006,64,1076,62,"projectile"],[1006,74,1076,72],[1006,75,1076,73,"aoeRadius"],[1006,84,1076,82],[1006,87,1076,85],[1006,88,1076,86],[1006,90,1076,88],[1007,18,1077,16],[1008,18,1078,16,"console"],[1008,25,1078,23],[1008,26,1078,24,"log"],[1008,29,1078,27],[1008,30,1078,28],[1008,59,1078,57,"projectile"],[1008,69,1078,67],[1008,70,1078,68,"abilityName"],[1008,81,1078,79],[1008,97,1078,95,"projectile"],[1008,107,1078,105],[1008,108,1078,106,"aoeRadius"],[1008,117,1078,115],[1008,119,1078,117],[1008,120,1078,118],[1009,18,1080,16],[1009,24,1080,22,"impactX"],[1009,31,1080,29],[1009,34,1080,32,"projectile"],[1009,44,1080,42],[1009,45,1080,43,"targetX"],[1009,52,1080,50],[1010,18,1081,16],[1010,24,1081,22,"impactY"],[1010,31,1081,29],[1010,34,1081,32,"projectile"],[1010,44,1081,42],[1010,45,1081,43,"targetY"],[1010,52,1081,50],[1011,18,1082,16],[1011,24,1082,22,"enemiesKilled"],[1011,37,1082,50],[1011,40,1082,53],[1011,42,1082,55],[1013,18,1084,16],[1014,18,1085,16,"newState"],[1014,26,1085,24],[1014,27,1085,25,"enemies"],[1014,34,1085,32],[1014,37,1085,35,"newState"],[1014,45,1085,43],[1014,46,1085,44,"enemies"],[1014,53,1085,51],[1014,54,1085,52,"map"],[1014,57,1085,55],[1014,58,1085,56,"enemy"],[1014,63,1085,61],[1014,67,1085,65],[1015,20,1086,18],[1015,24,1086,22,"enemy"],[1015,29,1086,27],[1015,30,1086,28,"health"],[1015,36,1086,34],[1015,40,1086,38],[1015,41,1086,39],[1015,45,1086,43,"enemy"],[1015,50,1086,48],[1015,51,1086,49,"markedForDeath"],[1015,65,1086,63],[1015,67,1086,65],[1015,74,1086,72,"enemy"],[1015,79,1086,77],[1016,20,1088,18],[1016,26,1088,24,"enemyX"],[1016,32,1088,30],[1016,35,1088,33,"enemy"],[1016,40,1088,38],[1016,41,1088,39,"position"],[1016,49,1088,47],[1016,50,1088,48,"x"],[1016,51,1088,49],[1016,54,1088,52],[1016,58,1088,56],[1016,59,1088,57],[1016,60,1088,58],[1017,20,1089,18],[1017,26,1089,24,"enemyY"],[1017,32,1089,30],[1017,35,1089,33,"enemy"],[1017,40,1089,38],[1017,41,1089,39,"position"],[1017,49,1089,47],[1017,50,1089,48,"y"],[1017,51,1089,49],[1017,54,1089,52],[1017,58,1089,56],[1018,20,1090,18],[1018,26,1090,24,"distance"],[1018,34,1090,32],[1018,37,1090,35,"Math"],[1018,41,1090,39],[1018,42,1090,40,"sqrt"],[1018,46,1090,44],[1018,47,1090,45,"Math"],[1018,51,1090,49],[1018,52,1090,50,"pow"],[1018,55,1090,53],[1018,56,1090,54,"enemyX"],[1018,62,1090,60],[1018,65,1090,63,"impactX"],[1018,72,1090,70],[1018,74,1090,72],[1018,75,1090,73],[1018,76,1090,74],[1018,79,1090,77,"Math"],[1018,83,1090,81],[1018,84,1090,82,"pow"],[1018,87,1090,85],[1018,88,1090,86,"enemyY"],[1018,94,1090,92],[1018,97,1090,95,"impactY"],[1018,104,1090,102],[1018,106,1090,104],[1018,107,1090,105],[1018,108,1090,106],[1018,109,1090,107],[1019,20,1092,18,"console"],[1019,27,1092,25],[1019,28,1092,26,"log"],[1019,31,1092,29],[1019,32,1092,30],[1019,58,1092,56,"enemy"],[1019,63,1092,61],[1019,64,1092,62,"name"],[1019,68,1092,66],[1019,76,1092,74,"enemyX"],[1019,82,1092,80],[1019,87,1092,85,"enemyY"],[1019,93,1092,91],[1019,109,1092,107,"impactX"],[1019,116,1092,114],[1019,121,1092,119,"impactY"],[1019,128,1092,126],[1019,135,1092,133,"distance"],[1019,143,1092,141],[1019,144,1092,142,"toFixed"],[1019,151,1092,149],[1019,152,1092,150],[1019,153,1092,151],[1019,154,1092,152],[1019,169,1092,167,"projectile"],[1019,179,1092,177],[1019,180,1092,178,"aoeRadius"],[1019,189,1092,187],[1019,194,1092,192],[1019,195,1092,193],[1020,20,1094,18],[1020,24,1094,22,"distance"],[1020,32,1094,30],[1020,36,1094,34,"projectile"],[1020,46,1094,44],[1020,47,1094,45,"aoeRadius"],[1020,56,1094,54],[1020,58,1094,56],[1021,22,1095,20],[1022,22,1096,20],[1022,28,1096,26,"newHealth"],[1022,37,1096,35],[1022,40,1096,38,"Math"],[1022,44,1096,42],[1022,45,1096,43,"max"],[1022,48,1096,46],[1022,49,1096,47],[1022,50,1096,48],[1022,52,1096,50,"enemy"],[1022,57,1096,55],[1022,58,1096,56,"health"],[1022,64,1096,62],[1022,67,1096,65,"projectile"],[1022,77,1096,75],[1022,78,1096,76,"damage"],[1022,84,1096,82],[1022,85,1096,83],[1023,22,1098,20,"console"],[1023,29,1098,27],[1023,30,1098,28,"log"],[1023,33,1098,31],[1023,34,1098,32],[1023,52,1098,50,"enemy"],[1023,57,1098,55],[1023,58,1098,56,"name"],[1023,62,1098,60],[1023,74,1098,72,"projectile"],[1023,84,1098,82],[1023,85,1098,83,"damage"],[1023,91,1098,89],[1023,103,1098,101,"enemy"],[1023,108,1098,106],[1023,109,1098,107,"health"],[1023,115,1098,113],[1023,122,1098,120,"newHealth"],[1023,131,1098,129],[1023,134,1098,132],[1023,135,1098,133],[1025,22,1100,20],[1026,22,1101,20],[1026,26,1101,24,"newHealth"],[1026,35,1101,33],[1026,39,1101,37],[1026,40,1101,38],[1026,44,1101,42,"enemy"],[1026,49,1101,47],[1026,50,1101,48,"health"],[1026,56,1101,54],[1026,59,1101,57],[1026,60,1101,58],[1026,62,1101,60],[1027,24,1102,22,"console"],[1027,31,1102,29],[1027,32,1102,30,"log"],[1027,35,1102,33],[1027,36,1102,34],[1027,52,1102,50,"enemy"],[1027,57,1102,55],[1027,58,1102,56,"name"],[1027,62,1102,60],[1027,76,1102,74,"projectile"],[1027,86,1102,84],[1027,87,1102,85,"abilityName"],[1027,98,1102,96],[1027,101,1102,99],[1027,102,1102,100],[1028,24,1103,22,"enemiesKilled"],[1028,37,1103,35],[1028,38,1103,36,"push"],[1028,42,1103,40],[1028,43,1103,41,"enemy"],[1028,48,1103,46],[1028,49,1103,47],[1028,50,1103,48],[1028,51,1103,49],[1030,24,1105,22],[1030,31,1105,29],[1031,26,1106,24],[1031,29,1106,27,"enemy"],[1031,34,1106,32],[1032,26,1107,24,"health"],[1032,32,1107,30],[1032,34,1107,32],[1032,35,1107,33],[1033,26,1108,24,"markedForDeath"],[1033,40,1108,38],[1033,42,1108,40],[1033,46,1108,44],[1034,26,1109,24,"lastDamaged"],[1034,37,1109,35],[1034,39,1109,37,"combatEngine"],[1034,58,1109,49],[1034,59,1109,49,"combatEngine"],[1034,71,1109,49],[1034,72,1109,50,"getCurrentTick"],[1034,86,1109,64],[1034,87,1109,65],[1035,24,1110,22],[1035,25,1110,23],[1036,22,1111,20],[1036,23,1111,21],[1036,29,1111,27],[1037,24,1112,22],[1037,31,1112,29],[1038,26,1113,24],[1038,29,1113,27,"enemy"],[1038,34,1113,32],[1039,26,1114,24,"health"],[1039,32,1114,30],[1039,34,1114,32,"newHealth"],[1039,43,1114,41],[1040,26,1115,24,"lastDamaged"],[1040,37,1115,35],[1040,39,1115,37,"combatEngine"],[1040,58,1115,49],[1040,59,1115,49,"combatEngine"],[1040,71,1115,49],[1040,72,1115,50,"getCurrentTick"],[1040,86,1115,64],[1040,87,1115,65],[1041,24,1116,22],[1041,25,1116,23],[1042,22,1117,20],[1043,20,1118,18],[1044,20,1120,18],[1044,27,1120,25,"enemy"],[1044,32,1120,30],[1044,33,1120,31],[1044,34,1120,32],[1045,18,1121,16],[1045,19,1121,17],[1045,20,1121,18],[1047,18,1123,16],[1048,18,1124,16],[1048,22,1124,20,"enemiesKilled"],[1048,35,1124,33],[1048,36,1124,34,"length"],[1048,42,1124,40],[1048,45,1124,43],[1048,46,1124,44],[1048,48,1124,46],[1049,20,1125,18,"console"],[1049,27,1125,25],[1049,28,1125,26,"log"],[1049,31,1125,29],[1049,32,1125,30],[1049,52,1125,50,"enemiesKilled"],[1049,65,1125,63],[1049,66,1125,64,"length"],[1049,72,1125,70],[1049,94,1125,92,"projectile"],[1049,104,1125,102],[1049,105,1125,103,"abilityName"],[1049,116,1125,114],[1049,118,1125,116],[1049,119,1125,117],[1050,20,1126,18],[1051,20,1127,18,"enemiesKilled"],[1051,33,1127,31],[1051,34,1127,32,"forEach"],[1051,41,1127,39],[1051,42,1127,40,"enemy"],[1051,47,1127,45],[1051,51,1127,49,"handleEnemyKill"],[1051,66,1127,64],[1051,67,1127,65,"enemy"],[1051,72,1127,70],[1051,73,1127,71],[1051,74,1127,72],[1052,18,1128,16],[1053,16,1130,14],[1053,17,1130,15],[1053,23,1130,21],[1054,18,1131,16],[1055,18,1132,16],[1055,24,1132,22,"enemyIndex"],[1055,34,1132,32],[1055,37,1132,35,"newState"],[1055,45,1132,43],[1055,46,1132,44,"enemies"],[1055,53,1132,51],[1055,54,1132,52,"findIndex"],[1055,63,1132,61],[1055,64,1132,62,"e"],[1055,65,1132,63],[1055,69,1132,67,"e"],[1055,70,1132,68],[1055,71,1132,69,"id"],[1055,73,1132,71],[1055,78,1132,76,"projectile"],[1055,88,1132,86],[1055,89,1132,87,"targetEnemyId"],[1055,102,1132,100],[1055,103,1132,101],[1056,18,1134,16],[1056,22,1134,20,"enemyIndex"],[1056,32,1134,30],[1056,36,1134,34],[1056,37,1134,35],[1056,41,1134,39,"newState"],[1056,49,1134,47],[1056,50,1134,48,"enemies"],[1056,57,1134,55],[1056,58,1134,56,"enemyIndex"],[1056,68,1134,66],[1056,69,1134,67],[1056,70,1134,68,"health"],[1056,76,1134,74],[1056,79,1134,77],[1056,80,1134,78],[1056,84,1134,82],[1056,85,1134,83,"newState"],[1056,93,1134,91],[1056,94,1134,92,"enemies"],[1056,101,1134,99],[1056,102,1134,100,"enemyIndex"],[1056,112,1134,110],[1056,113,1134,111],[1056,114,1134,112,"markedForDeath"],[1056,128,1134,126],[1056,130,1134,128],[1057,20,1135,18,"newState"],[1057,28,1135,26],[1057,29,1135,27,"enemies"],[1057,36,1135,34],[1057,39,1135,37],[1057,40,1135,38],[1057,43,1135,41,"newState"],[1057,51,1135,49],[1057,52,1135,50,"enemies"],[1057,59,1135,57],[1057,60,1135,58],[1058,20,1136,18],[1058,26,1136,24,"enemy"],[1058,31,1136,29],[1058,34,1136,32,"newState"],[1058,42,1136,40],[1058,43,1136,41,"enemies"],[1058,50,1136,48],[1058,51,1136,49,"enemyIndex"],[1058,61,1136,59],[1058,62,1136,60],[1059,20,1137,18],[1059,26,1137,24,"newHealth"],[1059,35,1137,33],[1059,38,1137,36,"Math"],[1059,42,1137,40],[1059,43,1137,41,"max"],[1059,46,1137,44],[1059,47,1137,45],[1059,48,1137,46],[1059,50,1137,48,"enemy"],[1059,55,1137,53],[1059,56,1137,54,"health"],[1059,62,1137,60],[1059,65,1137,63,"projectile"],[1059,75,1137,73],[1059,76,1137,74,"damage"],[1059,82,1137,80],[1059,83,1137,81],[1060,20,1139,18,"newState"],[1060,28,1139,26],[1060,29,1139,27,"enemies"],[1060,36,1139,34],[1060,37,1139,35,"enemyIndex"],[1060,47,1139,45],[1060,48,1139,46],[1060,51,1139,49],[1061,22,1140,20],[1061,25,1140,23,"enemy"],[1061,30,1140,28],[1062,22,1141,20,"health"],[1062,28,1141,26],[1062,30,1141,28,"newHealth"],[1062,39,1141,37],[1063,22,1142,20,"lastDamaged"],[1063,33,1142,31],[1063,35,1142,33,"combatEngine"],[1063,54,1142,45],[1063,55,1142,45,"combatEngine"],[1063,67,1142,45],[1063,68,1142,46,"getCurrentTick"],[1063,82,1142,60],[1063,83,1142,61],[1064,20,1143,18],[1064,21,1143,19],[1065,20,1145,18,"console"],[1065,27,1145,25],[1065,28,1145,26,"log"],[1065,31,1145,29],[1065,32,1145,30],[1065,60,1145,58,"enemy"],[1065,65,1145,63],[1065,66,1145,64,"name"],[1065,70,1145,68],[1065,82,1145,80,"newHealth"],[1065,91,1145,89],[1065,95,1145,93,"enemy"],[1065,100,1145,98],[1065,101,1145,99,"maxHealth"],[1065,110,1145,108],[1065,112,1145,110],[1065,113,1145,111],[1067,20,1147,18],[1068,20,1148,18],[1068,24,1148,22,"newHealth"],[1068,33,1148,31],[1068,37,1148,35],[1068,38,1148,36],[1068,42,1148,40,"enemy"],[1068,47,1148,45],[1068,48,1148,46,"health"],[1068,54,1148,52],[1068,57,1148,55],[1068,58,1148,56],[1068,60,1148,58],[1069,22,1149,20,"console"],[1069,29,1149,27],[1069,30,1149,28,"log"],[1069,33,1149,31],[1069,34,1149,32],[1069,54,1149,52,"enemy"],[1069,59,1149,57],[1069,60,1149,58,"name"],[1069,64,1149,62],[1069,78,1149,76,"projectile"],[1069,88,1149,86],[1069,89,1149,87,"abilityName"],[1069,100,1149,98],[1069,136,1149,134],[1069,137,1149,135],[1071,22,1151,20],[1072,22,1152,20,"newState"],[1072,30,1152,28],[1072,31,1152,29,"enemies"],[1072,38,1152,36],[1072,39,1152,37,"enemyIndex"],[1072,49,1152,47],[1072,50,1152,48],[1072,53,1152,51],[1073,24,1153,22],[1073,27,1153,25,"newState"],[1073,35,1153,33],[1073,36,1153,34,"enemies"],[1073,43,1153,41],[1073,44,1153,42,"enemyIndex"],[1073,54,1153,52],[1073,55,1153,53],[1074,24,1154,22,"health"],[1074,30,1154,28],[1074,32,1154,30],[1074,33,1154,31],[1075,24,1155,22,"isDying"],[1075,31,1155,29],[1075,33,1155,31],[1075,37,1155,35],[1076,24,1156,22,"deathStartTime"],[1076,38,1156,36],[1076,40,1156,38,"Date"],[1076,44,1156,42],[1076,45,1156,43,"now"],[1076,48,1156,46],[1076,49,1156,47],[1077,22,1157,20],[1077,23,1157,21],[1078,20,1158,18],[1078,21,1158,19],[1078,27,1158,25],[1078,31,1158,29,"enemy"],[1078,36,1158,34],[1078,37,1158,35,"health"],[1078,43,1158,41],[1078,46,1158,44],[1078,47,1158,45],[1078,49,1158,47],[1079,22,1159,20,"console"],[1079,29,1159,27],[1079,30,1159,28,"log"],[1079,33,1159,31],[1079,34,1159,32],[1079,48,1159,46,"enemy"],[1079,53,1159,51],[1079,54,1159,52,"name"],[1079,58,1159,56],[1079,70,1159,68,"projectile"],[1079,80,1159,78],[1079,81,1159,79,"damage"],[1079,87,1159,85],[1079,99,1159,97,"enemy"],[1079,104,1159,102],[1079,105,1159,103,"health"],[1079,111,1159,109],[1079,117,1159,115,"newHealth"],[1079,126,1159,124],[1079,129,1159,127],[1079,130,1159,128],[1080,20,1160,18],[1081,18,1161,16],[1082,16,1162,14],[1083,16,1164,14],[1083,23,1164,21,"newState"],[1083,31,1164,29],[1084,14,1165,12],[1084,15,1165,13],[1084,16,1165,14],[1086,14,1167,12],[1087,14,1168,12],[1088,12,1169,10],[1090,12,1171,10],[1091,12,1172,10],[1092,12,1173,10],[1092,18,1173,16,"timeBasedCleanup"],[1092,34,1173,32],[1092,37,1173,35,"elapsedTime"],[1092,48,1173,46],[1092,51,1173,49],[1092,55,1173,53],[1092,56,1173,54],[1092,57,1173,55],[1093,12,1174,10],[1093,16,1174,14,"progress"],[1093,24,1174,22],[1093,28,1174,26],[1093,31,1174,29],[1093,35,1174,33,"timeBasedCleanup"],[1093,51,1174,49],[1093,53,1174,51],[1094,14,1175,12],[1094,18,1175,16,"timeBasedCleanup"],[1094,34,1175,32],[1094,36,1175,34],[1095,16,1176,14,"console"],[1095,23,1176,21],[1095,24,1176,22,"log"],[1095,27,1176,25],[1095,28,1176,26],[1095,63,1176,61,"projectile"],[1095,73,1176,71],[1095,74,1176,72,"id"],[1095,76,1176,74],[1095,105,1176,103],[1095,106,1176,104],[1096,14,1177,12],[1097,14,1178,12],[1097,21,1178,19],[1097,25,1178,23],[1098,12,1179,10],[1099,12,1181,10],[1099,19,1181,17,"projectile"],[1099,29,1181,27],[1100,10,1182,8],[1100,11,1182,9],[1100,12,1182,10],[1100,13,1182,11,"filter"],[1100,19,1182,17],[1100,20,1182,18,"Boolean"],[1100,27,1182,25],[1100,28,1182,26],[1101,8,1183,6],[1101,9,1183,7],[1101,10,1183,8],[1102,6,1184,4],[1102,7,1184,5],[1104,6,1186,4],[1105,6,1187,4],[1105,12,1187,10,"impactInterval"],[1105,26,1187,24],[1105,29,1187,27,"setInterval"],[1105,40,1187,38],[1105,41,1187,39,"processProjectileImpacts"],[1105,65,1187,63],[1105,67,1187,65],[1105,69,1187,67],[1105,70,1187,68],[1106,6,1188,4],[1106,13,1188,11],[1106,19,1188,17,"clearInterval"],[1106,32,1188,30],[1106,33,1188,31,"impactInterval"],[1106,47,1188,45],[1106,48,1188,46],[1107,4,1189,2],[1107,5,1189,3],[1107,7,1189,5],[1107,9,1189,7],[1107,10,1189,8],[1107,11,1189,9],[1107,12,1189,10],[1109,4,1191,2],[1110,4,1192,2],[1110,10,1192,8,"saveAbilityData"],[1110,25,1192,23],[1110,28,1192,26],[1110,32,1192,26,"useCallback"],[1110,38,1192,37],[1110,39,1192,37,"useCallback"],[1110,50,1192,37],[1110,52,1192,38],[1110,58,1192,44],[1111,6,1193,4],[1111,10,1193,8,"combatState"],[1111,21,1193,19],[1111,22,1193,20,"abilityManager"],[1111,36,1193,34],[1111,38,1193,36],[1112,8,1194,6],[1112,14,1194,12,"abilityData"],[1112,25,1194,23],[1112,28,1194,26,"combatState"],[1112,39,1194,37],[1112,40,1194,38,"abilityManager"],[1112,54,1194,52],[1112,55,1194,53,"getSaveData"],[1112,66,1194,64],[1112,67,1194,65],[1112,68,1194,66],[1113,8,1195,6,"console"],[1113,15,1195,13],[1113,16,1195,14,"log"],[1113,19,1195,17],[1113,20,1195,18],[1113,70,1195,68],[1113,72,1195,70,"abilityData"],[1113,83,1195,81],[1113,84,1195,82],[1114,8,1196,6,"game"],[1114,12,1196,10],[1114,13,1196,11,"updateAbilityData"],[1114,30,1196,28],[1114,31,1196,29,"abilityData"],[1114,42,1196,40],[1114,43,1196,41],[1115,6,1197,4],[1116,4,1198,2],[1116,5,1198,3],[1116,7,1198,5],[1116,8,1198,6,"combatState"],[1116,19,1198,17],[1116,20,1198,18,"abilityManager"],[1116,34,1198,32],[1116,36,1198,34,"game"],[1116,40,1198,38],[1116,41,1198,39,"updateAbilityData"],[1116,58,1198,56],[1116,59,1198,57],[1116,60,1198,58],[1117,4,1200,2],[1117,10,1200,8,"contextValue"],[1117,22,1200,39],[1117,25,1200,42,"React"],[1117,30,1200,47],[1117,31,1200,47,"default"],[1117,38,1200,47],[1117,39,1200,48,"useMemo"],[1117,46,1200,55],[1117,47,1200,56],[1117,54,1200,63],[1118,6,1201,4,"combatState"],[1118,17,1201,15],[1119,6,1202,4,"projectiles"],[1119,17,1202,15],[1120,6,1203,4,"startCombat"],[1120,17,1203,15],[1121,6,1204,4,"stopCombat"],[1121,16,1204,14],[1122,6,1205,4,"equipAbility"],[1122,18,1205,16],[1123,6,1206,4,"handleEnemyKill"],[1123,21,1206,19],[1124,6,1207,4,"getDeck"],[1124,13,1207,11],[1125,6,1208,4,"getAvailableAbilities"],[1125,27,1208,25],[1126,6,1209,4,"upgradeAbility"],[1126,20,1209,18],[1127,6,1210,4,"spawnEnemy"],[1127,16,1210,14],[1128,6,1211,4,"spawnBoss"],[1128,15,1211,13],[1129,6,1212,4,"clearAllEnemies"],[1129,21,1212,19],[1130,6,1213,4,"clearSpecificEnemy"],[1130,24,1213,22],[1131,6,1214,4],[1132,6,1215,4,"findClosestEnemy"],[1132,22,1215,20],[1133,6,1216,4,"updateNinjaPosition"],[1133,25,1216,23],[1134,6,1217,4,"setManualControlActive"],[1134,28,1217,26],[1135,6,1218,4,"lastExplosionTime"],[1135,23,1218,21],[1136,6,1219,4,"useAbilityManually"],[1136,24,1219,22],[1137,6,1219,24],[1138,6,1220,4,"saveAbilityData"],[1138,21,1220,19],[1139,6,1220,21],[1140,6,1221,4,"shadowClone"],[1140,17,1221,15],[1140,19,1221,17,"combatState"],[1140,30,1221,28],[1140,31,1221,29,"shadowClone"],[1140,42,1221,40],[1140,43,1221,42],[1141,4,1222,2],[1141,5,1222,3],[1141,6,1222,4],[1141,8,1222,6],[1142,4,1223,4],[1143,4,1224,4],[1144,4,1225,4,"combatState"],[1144,15,1225,15],[1144,17,1226,4,"projectiles"],[1144,28,1226,15],[1144,30,1227,4,"lastExplosionTime"],[1144,47,1227,21],[1145,4,1228,4],[1146,4,1229,4,"combatState"],[1146,15,1229,15],[1146,16,1229,16,"abilityManager"],[1146,30,1229,30],[1146,32,1230,4,"combatState"],[1146,43,1230,15],[1146,44,1230,16,"enemies"],[1146,51,1230,23],[1146,53,1231,4,"combatState"],[1146,64,1231,15],[1146,65,1231,16,"shadowClone"],[1146,76,1231,27],[1147,4,1231,29],[1148,4,1232,4,"useAbilityManually"],[1148,22,1232,22],[1149,4,1232,24],[1150,4,1233,4,"saveAbilityData"],[1150,19,1233,19],[1150,20,1233,21],[1151,4,1233,21],[1151,5,1234,3],[1151,6,1234,4],[1152,4,1236,2],[1152,24,1237,4],[1152,28,1237,4,"_reactJsxDevRuntime"],[1152,47,1237,4],[1152,48,1237,4,"jsxDEV"],[1152,54,1237,4],[1152,56,1237,5,"CombatContext"],[1152,69,1237,18],[1152,70,1237,19,"Provider"],[1152,78,1237,27],[1153,6,1237,28,"value"],[1153,11,1237,33],[1153,13,1237,35,"contextValue"],[1153,25,1237,48],[1154,6,1237,48,"children"],[1154,14,1237,48],[1154,16,1238,7,"children"],[1155,4,1238,15],[1156,6,1238,15,"fileName"],[1156,14,1238,15],[1156,16,1238,15,"_jsxFileName"],[1156,28,1238,15],[1157,6,1238,15,"lineNumber"],[1157,16,1238,15],[1158,6,1238,15,"columnNumber"],[1158,18,1238,15],[1159,4,1238,15],[1159,11,1239,28],[1159,12,1239,29],[1160,2,1241,0],[1160,3,1241,1],[1161,2,1241,2,"_s4"],[1161,5,1241,2],[1161,6,106,13,"CombatProvider"],[1161,20,106,27],[1162,4,106,27],[1162,12,107,15,"useGame"],[1162,24,107,22],[1162,25,107,22,"useGame"],[1162,32,107,22],[1162,34,108,77,"useZone"],[1162,46,108,84],[1162,47,108,84,"useZone"],[1162,54,108,84],[1163,2,108,84],[1164,2,108,84,"_c"],[1164,4,108,84],[1164,7,106,13,"CombatProvider"],[1164,21,106,27],[1165,2,106,27],[1165,6,106,27,"_c"],[1165,8,106,27],[1166,2,106,27,"$RefreshReg$"],[1166,14,106,27],[1166,15,106,27,"_c"],[1166,17,106,27],[1167,0,106,27],[1167,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","deadEnemiesToProcess.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMO;mBJI;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;8FSU,uDT;mCUY;SViB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}