{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":110,"index":110}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":174},"end":{"line":3,"column":106,"index":280}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":281},"end":{"line":4,"column":85,"index":366}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":367},"end":{"line":5,"column":40,"index":407}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"./ZoneContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":408},"end":{"line":6,"column":40,"index":448}}],"key":"i9sMaHA5l/hFF4qXwwv8uyRcuxU=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _engineCombatEngine = require(_dependencyMap[2], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[3], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[4], \"./GameContext\");\n  var _ZoneContext = require(_dependencyMap[5], \"./ZoneContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[6], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s4();\n    var _s3 = $RefreshSig$();\n    const game = (0, _GameContext.useGame)();\n    const {\n      currentZone,\n      currentZoneLevel,\n      recordEnemyKill,\n      spawnZoneEnemy\n    } = (0, _ZoneContext.useZone)();\n\n    // Define initialCombatState before using it\n    const initialCombatState = {\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    };\n    const [combatState, setCombatState] = (0, _react.useState)(initialCombatState);\n\n    // Watch for ability data to become available and restore abilities\n    (0, _react.useEffect)(() => {\n      if (game.gameState.abilityData && combatState.abilityManager) {\n        console.log('🔄 RESTORING ABILITY DATA FROM SAVE (DELAYED):', game.gameState.abilityData);\n        combatState.abilityManager.restoreFromSaveData(game.gameState.abilityData);\n\n        // Force re-render to update UI with restored abilities\n        setCombatState(prev => ({\n          ...prev\n        }));\n      }\n    }, [game.gameState.abilityData, combatState.abilityManager]);\n\n    // Initialize player stats when game context changes\n    (0, _react.useEffect)(() => {\n      if (game.gameState.ninja) {\n        const effectiveStats = game.getEffectiveStats();\n        setCombatState(prev => {\n          // Only initialize if combat player stats are at defaults\n          if (prev.playerStats.maxHealth === 100 && prev.playerStats.attack === 10) {\n            console.log(`🔧 INITIALIZING PLAYER STATS: HP=${effectiveStats.health}, Attack=${effectiveStats.attack}, Defense=${effectiveStats.defense}`);\n            return {\n              ...prev,\n              playerStats: {\n                attack: effectiveStats.attack,\n                defense: effectiveStats.defense,\n                health: effectiveStats.health,\n                // Start at full health\n                maxHealth: effectiveStats.health,\n                critChance: effectiveStats.critChance || 3,\n                critDamage: effectiveStats.critDamage || 150,\n                cooldownReduction: effectiveStats.cooldownReduction || 0\n              }\n            };\n          }\n          return prev;\n        });\n      }\n    }, [game.gameState.ninja]);\n    const [projectiles, setProjectiles] = (0, _react.useState)([]);\n    const [lastExplosionTime, setLastExplosionTime] = (0, _react.useState)(0);\n    // MOBILE FIX: Removed duplicate ninja position state - using main game's position instead\n    // Ninja position is now managed entirely by the main game component\n\n    // Function to handle enemy kills - MEMOIZED to prevent infinite re-renders\n    const handleEnemyKill = (0, _react.useCallback)(enemy => {\n      // INSTANT XP AWARD - Immediate visual feedback for fluid gameplay\n      const xpReward = (enemy.zoneXP || 5) * (game.gameState.subscriptionBenefits?.xp_multiplier || 1.0);\n      const goldReward = 10 * (game.gameState.subscriptionBenefits?.drop_multiplier || 1.0);\n      console.log(`💰 ENEMY KILL - Awarding ${xpReward} XP and ${goldReward} gold for ${enemy.name}`);\n\n      // Award XP/Gold immediately for instant UI feedback\n      game.updateNinja(prev => ({\n        experience: prev.experience + xpReward,\n        gold: prev.gold + goldReward\n      }));\n\n      // Mark enemy as processed to prevent double-processing in bulk system\n      setCombatState(prevState => ({\n        ...prevState,\n        enemies: prevState.enemies.map(e => e.id === enemy.id ? {\n          ...e,\n          xpAwarded: true\n        } : e)\n      }));\n\n      // ZONE PROGRESSION\n      if (enemy.zoneTypeId) {\n        recordEnemyKill({\n          id: enemy.id,\n          typeId: enemy.zoneTypeId,\n          name: enemy.name,\n          icon: '🧌',\n          hp: 0,\n          maxHP: enemy.maxHealth,\n          attack: enemy.stats.attack,\n          xp: enemy.zoneXP || 0,\n          position: enemy.position\n        });\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill]);\n\n    // Combat tick handler - MEMOIZED to prevent infinite re-renders\n    // COMBAT TICK HANDLER - Memoized with minimal dependencies to prevent infinite re-renders\n    const handleCombatTick = React.default.useCallback(() => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 MOBILE DEBUG - handleCombatTick called, checking enemy deaths...');\n      console.log(`🚨 COMBAT TICK DEBUG: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n      let enemiesToKill = []; // Track enemies to kill outside of setState\n\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Sync player stats from game state with EFFECTIVE stats (including upgrades)\n        // CRITICAL: Do this BEFORE enemy attacks to avoid overriding combat damage\n        if (newState.playerStats && game.gameState.ninja) {\n          const effectiveStats = game.getEffectiveStats();\n\n          // MOBILE FIX: Synchronize player stats with effective stats to reflect upgrades\n          if (newState.playerStats.attack !== effectiveStats.attack || newState.playerStats.defense !== effectiveStats.defense || newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n            console.log(`🔧 PLAYER STATS UPDATE: Attack ${newState.playerStats.attack} → ${effectiveStats.attack}, Defense ${newState.playerStats.defense} → ${effectiveStats.defense}, MaxHP ${newState.playerStats.maxHealth} → ${effectiveStats.maxHealth}`);\n\n            // Handle max health changes carefully\n            let newHealth = newState.playerStats.health;\n            if (newState.playerStats.maxHealth !== effectiveStats.maxHealth) {\n              // Only adjust health ratio if max health increased significantly (upgrades)\n              if (effectiveStats.maxHealth > newState.playerStats.maxHealth * 1.1) {\n                // Player got a health upgrade - maintain ratio but give the benefit\n                const healthRatio = newState.playerStats.maxHealth > 0 ? newState.playerStats.health / newState.playerStats.maxHealth : 1;\n                newHealth = Math.floor(effectiveStats.maxHealth * healthRatio);\n              } else if (newState.playerStats.health > effectiveStats.maxHealth) {\n                // Max health decreased or current health exceeds new max - cap it\n                newHealth = effectiveStats.maxHealth;\n              }\n              // Otherwise keep current health value (preserve combat damage)\n            }\n            newState.playerStats = {\n              ...newState.playerStats,\n              attack: effectiveStats.attack,\n              defense: effectiveStats.defense,\n              maxHealth: effectiveStats.maxHealth,\n              // FIXED: Use maxHealth from effectiveStats\n              health: newHealth,\n              // Preserve combat damage\n              critChance: effectiveStats.critChance || newState.playerStats.critChance,\n              critDamage: effectiveStats.critDamage || newState.playerStats.critDamage,\n              cooldownReduction: effectiveStats.cooldownReduction || newState.playerStats.cooldownReduction\n            };\n          }\n\n          // REVIVAL SYNC: Only sync when player is actually revived (game health equals max health and combat health is very low)\n          if (game.gameState.isAlive && game.gameState.ninja.health === effectiveStats.maxHealth && newState.playerStats.health < effectiveStats.maxHealth * 0.1) {\n            console.log(`💖 REVIVAL SYNC: Combat health ${newState.playerStats.health} → ${game.gameState.ninja.health} (Revival detected)`);\n            newState.playerStats.health = game.gameState.ninja.health;\n          }\n        }\n\n        // MOBILE FIX: Enemy AI - Track toward player for idle game combat engagement\n        newState.enemies.forEach(enemy => {\n          if (!enemy.isBoss) {\n            // Only move regular enemies, not bosses\n            // Mobile-optimized enemy movement - 2.5x faster and player-tracking  \n            const MOVEMENT_SPEED = 0.75; // 2.5x faster (was 0.3)\n            const SCREEN_WIDTH = 390;\n            const GAME_AREA_HEIGHT = 704; // 844 - 140 (top bar + bottom nav)\n            const ENEMY_SIZE = 35;\n\n            // IDLE GAME AI: Move toward player for combat engagement\n            const playerX = currentNinjaPosition.x;\n            const playerY = currentNinjaPosition.y;\n\n            // Calculate direction to player\n            const deltaX = playerX - enemy.position.x;\n            const deltaY = playerY - enemy.position.y;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n            // CRITICAL FIX: Enemy attacks when close to player\n            const ATTACK_RANGE = 50; // Enemy attack range\n            const ATTACK_COOLDOWN = 30; // Attack every 3 seconds (30 ticks at 10 TPS)\n\n            if (distance <= ATTACK_RANGE) {\n              // Enemy is close enough to attack player\n              if (!enemy.lastAttackTick) enemy.lastAttackTick = 0;\n              if (newState.currentTick - enemy.lastAttackTick >= ATTACK_COOLDOWN) {\n                // Check if player is alive - CRITICAL: Don't attack dead players\n                if (!game.gameState.isAlive) {\n                  console.log(`💀 DEAD PLAYER: ${enemy.name} cannot attack - player is dead!`);\n                  // Update enemy attack cooldown to prevent spam\n                  enemy.lastAttackTick = newState.currentTick;\n                } else {\n                  // Check if player is invincible\n                  const isPlayerInvincible = game.gameState.isInvincible && game.gameState.invincibilityEndTime && Date.now() < game.gameState.invincibilityEndTime;\n                  if (isPlayerInvincible) {\n                    console.log(`🛡️ INVINCIBLE: ${enemy.name} attack blocked! Player is invincible.`);\n                    // Update enemy attack cooldown even if blocked\n                    enemy.lastAttackTick = newState.currentTick;\n                  } else {\n                    // Enemy attacks player - FIXED: Scale damage appropriately for balanced gameplay\n                    const baseAttack = enemy.stats.attack / 100; // Scale down massive attack values\n                    const attackDamage = Math.floor(baseAttack * (0.8 + Math.random() * 0.4)); // 80-120% of scaled damage\n                    const playerDefense = newState.playerStats.defense;\n                    const finalDamage = Math.max(1, attackDamage - Math.floor(playerDefense * 0.1)); // Defense reduces 10% of damage\n\n                    console.log(`🗡️ ENEMY ATTACK: ${enemy.name} attacks player for ${finalDamage} damage (${attackDamage} base - ${Math.floor(playerDefense * 0.1)} defense reduction)`);\n\n                    // Apply damage to player\n                    const newPlayerHealth = Math.max(0, newState.playerStats.health - finalDamage);\n                    newState.playerStats.health = newPlayerHealth;\n                    console.log(`❤️ PLAYER HEALTH: ${newState.playerStats.health}/${newState.playerStats.maxHealth} (took ${finalDamage} damage)`);\n\n                    // Update enemy attack cooldown\n                    enemy.lastAttackTick = newState.currentTick;\n\n                    // Handle player death if health reaches 0\n                    if (newPlayerHealth <= 0) {\n                      console.log('💀 PLAYER DEFEATED! Triggering revival system...');\n                      // Set player as dead and trigger revival modal immediately\n                      game.updateGameState({\n                        isAlive: false\n                      });\n                    }\n                  }\n                }\n              }\n            } else {\n              // Move toward player if not in attack range\n              // Only move if not too close to player (maintain some distance for combat)\n              if (distance > 40) {\n                // Normalize direction toward player\n                const normalizedX = deltaX / distance;\n                const normalizedY = deltaY / distance;\n\n                // Add slight randomness to movement to prevent perfect tracking\n                const randomFactor = 0.2; // 20% randomness\n                const finalX = normalizedX + (Math.random() - 0.5) * randomFactor;\n                const finalY = normalizedY + (Math.random() - 0.5) * randomFactor;\n\n                // Calculate new position\n                let newX = enemy.position.x + finalX * MOVEMENT_SPEED;\n                let newY = enemy.position.y + finalY * MOVEMENT_SPEED;\n\n                // Keep within bounds\n                newX = Math.max(0, Math.min(SCREEN_WIDTH - ENEMY_SIZE, newX));\n                newY = Math.max(0, Math.min(GAME_AREA_HEIGHT - ENEMY_SIZE, newY));\n\n                // Apply new position\n                enemy.position.x = newX;\n                enemy.position.y = newY;\n              }\n              // If too close to player, enemies stay put to allow combat\n            }\n          }\n        });\n\n        // Shadow clone management\n        if (newState.shadowClone) {\n          // Update clone duration\n          newState.shadowClone.remainingTicks--;\n\n          // Make clone follow player (positioned slightly behind and to the right)\n          const cloneOffset = 50; // Follow at 50 pixels offset\n          newState.shadowClone.position.x = currentNinjaPosition.x + cloneOffset;\n          newState.shadowClone.position.y = currentNinjaPosition.y + 10;\n\n          // Remove clone when duration expires\n          if (newState.shadowClone.remainingTicks <= 0) {\n            console.log('👥 SHADOW CLONE: Duration expired, removing clone');\n            newState.shadowClone = undefined;\n          } else {\n            // Clone attacks with player (70% damage)\n            // Clone attacks every 2 seconds (20 ticks at 10 TPS)\n            const CLONE_ATTACK_INTERVAL = 20;\n            if (newState.currentTick % CLONE_ATTACK_INTERVAL === 0 && newState.enemies.length > 0) {\n              console.log('👥 SHADOW CLONE: Casting duplicate attack at 70% damage');\n\n              // Find closest enemy for clone attack\n              const target = findClosestEnemyInternal(newState.enemies);\n              if (target) {\n                // Calculate clone damage (70% of player base attack)\n                const cloneDamage = Math.floor(newState.playerStats.attack * 0.7);\n\n                // Create clone projectile\n                createProjectile(target, cloneDamage, newState.shadowClone.position, {\n                  id: 'shadow_clone_attack',\n                  name: 'Shadow Clone Attack',\n                  icon: '👥'\n                });\n              }\n            }\n          }\n        }\n\n        // Auto-cast abilities - MOBILE FIX: Pause during manual joystick control to prevent stuttering\n        // CRITICAL: Don't cast abilities when player is dead\n        console.log(`🚨 ABILITY CHECK: isManualControlActive=${isManualControlActive}, isAlive=${game.gameState.isAlive}`);\n        if (!isManualControlActive && game.gameState.isAlive) {\n          for (let i = 0; i < 5; i++) {\n            if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n              if (newState.abilityManager.useAbility(i, newTick)) {\n                console.log(`🚨 ABILITY TRIGGERED: Auto-cast from slot ${i}`);\n                castAbility(newState, i);\n              }\n            }\n          }\n        }\n\n        // Process dying enemies for XP awarding + death animation cleanup\n        // FIXED: Use single filter for all dead enemies regardless of isDying flag\n        const allDeadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n\n        // CRITICAL FIX: Capture dead enemies OUTSIDE state update for XP processing\n        enemiesToKill = [...allDeadEnemies]; // Clone array to avoid state mutation issues\n\n        // DEBUG: Check if any enemies actually have 0 or negative health\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 FOUND ${allDeadEnemies.length} enemies with health <= 0:`, allDeadEnemies.map(e => `${e.name}(${e.health}hp, isDying:${e.isDying})`));\n        }\n\n        // Remove enemies that have finished their death animation (750ms)\n        const currentTime = Date.now();\n        newState.enemies = newState.enemies.filter(enemy => {\n          if (enemy.isDying && enemy.deathStartTime) {\n            const animationDuration = 750; // 750ms death fade\n            const isAnimationComplete = currentTime - enemy.deathStartTime >= animationDuration;\n            if (isAnimationComplete) {\n              console.log(`💀 DEATH ANIMATION COMPLETE: ${enemy.name} removed after ${currentTime - enemy.deathStartTime}ms fade`);\n              return false; // Remove from array\n            }\n          }\n          return true; // Keep in array\n        });\n\n        // MOBILE DEBUG: Log enemy death processing\n        if (allDeadEnemies.length > 0) {\n          console.log(`💀 MOBILE DEBUG - Found ${allDeadEnemies.length} dead enemies:`, allDeadEnemies.map(e => `${e.id}(${e.health}hp)`));\n        }\n\n        // Check if any enemies are close to death for debugging\n        const lowHealthEnemies = newState.enemies.filter(enemy => enemy.health <= 20 && enemy.health > 0);\n        if (lowHealthEnemies.length > 0) {\n          console.log(`🩸 MOBILE DEBUG - Low health enemies:`, lowHealthEnemies.map(e => `${e.id}(${e.health}/${e.maxHealth}hp)`));\n        }\n\n        // Remove dead enemies\n        const beforeCount = newState.enemies.length;\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n        const afterCount = newState.enemies.length;\n        if (beforeCount !== afterCount) {\n          console.log(`🗑️ MOBILE DEBUG - Removed ${beforeCount - afterCount} dead enemies from state`);\n        }\n\n        // Maintain 20 enemies on screen with faster respawn for more intense combat\n        // BUT: Don't spawn new enemies if there's a boss present\n        const MAX_ENEMIES = 20; // DOUBLED from 10 to 20 for more intense combat\n        const MIN_SPAWN_DELAY = 250; // HALVED from 500ms to 250ms for 2x faster spawning\n        const now = Date.now();\n        const hasBoss = newState.enemies.some(enemy => enemy.isBoss);\n\n        // Add respawn cooldown tracking\n        if (!newState.lastSpawnTime) {\n          newState.lastSpawnTime = now;\n        }\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}, HasBoss=${hasBoss}`);\n\n        // Only spawn normal enemies if no boss is present\n        if (!hasBoss && newState.enemies.length < MAX_ENEMIES && now - newState.lastSpawnTime >= MIN_SPAWN_DELAY) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n          newState.lastSpawnTime = now;\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n\n      // BULK XP PROCESSING - Single update for all kills (FIXED: Don't filter by xpAwarded)\n      if (enemiesToKill.length > 0) {\n        // CRITICAL FIX: Process ALL dead enemies regardless of xpAwarded flag\n        // The xpAwarded flag was preventing processing due to persistence from previous cycles\n        const unprocessedEnemies = enemiesToKill; // Process all dead enemies\n\n        // CRITICAL DEBUG: Check why unprocessedEnemies is empty\n        console.log(`🔍 DEBUG enemiesToKill xpAwarded status:`, enemiesToKill.map(e => ({\n          id: e.id,\n          name: e.name,\n          xpAwarded: e.xpAwarded\n        })));\n        console.log(`💀 BULK PROCESSING: ${enemiesToKill.length} total kills, ${unprocessedEnemies.length} unprocessed`);\n        if (unprocessedEnemies.length > 0) {\n          // Calculate total rewards in one pass\n          let totalXP = 0;\n          let totalGold = 0;\n          const zoneKills = [];\n          const xpMultiplier = game.gameState.subscriptionBenefits?.xp_multiplier || 1.0;\n          const goldMultiplier = game.gameState.subscriptionBenefits?.drop_multiplier || 1.0;\n          unprocessedEnemies.forEach(enemy => {\n            totalXP += (enemy.zoneXP || 5) * xpMultiplier;\n            totalGold += 10 * goldMultiplier;\n            if (enemy.zoneTypeId) {\n              zoneKills.push({\n                id: enemy.id,\n                typeId: enemy.zoneTypeId,\n                name: enemy.name,\n                icon: '🧌',\n                hp: 0,\n                maxHP: enemy.maxHealth,\n                attack: enemy.stats.attack,\n                xp: enemy.zoneXP || 0,\n                position: enemy.position\n              });\n            }\n          });\n\n          // Single batch update for all kills\n          game.updateNinja(prev => ({\n            experience: prev.experience + totalXP,\n            gold: prev.gold + totalGold\n          }));\n\n          // Batch zone progression\n          zoneKills.forEach(zoneEnemy => recordEnemyKill(zoneEnemy));\n\n          // Mark enemies as processed to prevent duplicate XP\n          setCombatState(prev => ({\n            ...prev,\n            enemies: prev.enemies.map(enemy => {\n              const wasProcessed = unprocessedEnemies.find(processed => processed.id === enemy.id);\n              return wasProcessed ? {\n                ...enemy,\n                xpAwarded: true\n              } : enemy;\n            })\n          }));\n        }\n      }\n    }, [game.updateNinja, game.gameState.subscriptionBenefits, recordEnemyKill, spawnTestEnemy, spawnZoneEnemy]); // Fixed: Added required dependencies for XP/zone processing\n\n    // Find closest enemy to ninja - exposed for UI use\n    const findClosestEnemyInternal = enemies => {\n      if (enemies.length === 0) return null;\n\n      // Ninja position (center of screen)\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ninjaX = SCREEN_WIDTH / 2;\n      const ninjaY = GAME_AREA_HEIGHT / 2;\n      let closestEnemy = enemies[0];\n      let closestDistance = Infinity;\n      enemies.forEach(enemy => {\n        const distance = Math.sqrt(Math.pow(enemy.position.x - ninjaX, 2) + Math.pow(enemy.position.y - ninjaY, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestEnemy = enemy;\n        }\n      });\n      console.log(`🎯 Targeting closest enemy at distance ${closestDistance.toFixed(0)}`);\n      return closestEnemy;\n    };\n\n    // Public function to find closest enemy from current combat state\n    const findClosestEnemy = () => {\n      return findClosestEnemyInternal(combatState.enemies);\n    };\n\n    // MOBILE FIX: Track ninja position from main game instead of managing separate state\n    // Initialize to center screen position instead of corner (0,0)\n    const [currentNinjaPosition, setCurrentNinjaPosition] = (0, _react.useState)({\n      x: 195,\n      y: 400\n    });\n    const [isManualControlActive, setIsManualControlActive] = (0, _react.useState)(false);\n\n    // Update ninja position for combat calculations - now just tracks main game position\n    const updateNinjaPosition = (0, _react.useCallback)(newPosition => {\n      setCurrentNinjaPosition(newPosition);\n    }, []);\n\n    // MOBILE FIX: Pause/resume combat during manual joystick control to prevent stuttering\n    const setManualControlActive = (0, _react.useCallback)(active => {\n      setIsManualControlActive(active);\n      console.log(`🎮 Manual control ${active ? 'ACTIVATED' : 'DEACTIVATED'} - Combat ${active ? 'PAUSED' : 'RESUMED'}`);\n    }, []);\n\n    // REMOVED: Legacy handleProjectileHit function - replaced with real-time impact processing\n    // Old system caused state conflicts by applying damage 500ms after the new system\n    // Now using processProjectileImpacts for immediate damage application and death detection\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n      console.log(`🚨 ABILITY TRIGGERED: ${ability.id} from slot ${slotIndex}`);\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Check if this is an AOE ability\n      const isAOE = ability.effects.includes('AoE') && ability.stats.aoeRadius;\n      console.log(`🔍 ABILITY CHECK: ${ability.name} - effects: ${JSON.stringify(ability.effects)}, aoeRadius: ${ability.stats.aoeRadius}, isAOE: ${isAOE}`);\n      if (isAOE) {\n        console.log(`💥 AOE ABILITY: ${ability.name} with radius ${ability.stats.aoeRadius}`);\n\n        // TEMPORARY FIX: For now, let's use the old system but fix the XP issue\n        // Find all enemies within AOE range of ninja\n        const ninjaX = currentNinjaPosition.x + 20; // Center of ninja\n        const ninjaY = currentNinjaPosition.y + 20;\n        const aoeRadius = ability.stats.aoeRadius;\n        const enemiesInRange = state.enemies.filter(enemy => {\n          const enemyX = enemy.position.x + 17.5; // Center of enemy\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= aoeRadius;\n        });\n        console.log(`💥 AOE TARGETS: Found ${enemiesInRange.length} enemies in range (${aoeRadius} radius)`);\n\n        // Create projectile for each enemy in range - FIXED XP VERSION\n        enemiesInRange.forEach(enemy => {\n          const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, enemy.stats);\n          createProjectile(enemy, damageResult.damage, currentNinjaPosition, {\n            id: ability.id,\n            name: ability.name,\n            icon: ability.icon\n          });\n          console.log(`💥 AOE HIT: ${enemy.name} for ${damageResult.damage} damage`);\n\n          // Add AOE kill tracking\n          if (damageResult.damage >= enemy.health) {\n            console.log(`🔍 XP DEBUG: AOE projectile should kill ${enemy.name} (damage: ${damageResult.damage} >= health: ${enemy.health})`);\n          }\n        });\n        console.log(`🎯 ${ability.name} AOE cast! Hit ${enemiesInRange.length} enemies for ${damage} base damage each`);\n      } else {\n        // Single target ability (original logic)\n        const target = findClosestEnemyInternal(state.enemies);\n        if (!target) return;\n        const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n        // Create projectile for visual effect and delayed damage\n        console.log(`🔍 SINGLE TARGET DEBUG: Creating projectile for ${target.name} with ${damageResult.damage} damage`);\n        createProjectile(target, damageResult.damage, currentNinjaPosition, {\n          id: ability.id,\n          name: ability.name,\n          icon: ability.icon\n        });\n        console.log(`🎯 ${ability.name} cast! Single target for ${damageResult.damage} damage${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n\n        // Add kill prediction for single target\n        if (damageResult.damage >= target.health) {\n          console.log(`🔍 XP DEBUG: Single target projectile should kill ${target.name} (damage: ${damageResult.damage} >= health: ${target.health})`);\n        }\n      }\n\n      // Apply DoT effects (for primary target in single target, or all targets in AOE)\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        const targets = isAOE ? state.enemies.filter(enemy => {\n          const ninjaX = currentNinjaPosition.x + 20;\n          const ninjaY = currentNinjaPosition.y + 20;\n          const enemyX = enemy.position.x + 17.5;\n          const enemyY = enemy.position.y + 17.5;\n          const distance = Math.sqrt(Math.pow(enemyX - ninjaX, 2) + Math.pow(enemyY - ninjaY, 2));\n          return distance <= ability.stats.aoeRadius;\n        }) : [findClosestEnemyInternal(state.enemies)].filter(Boolean);\n        targets.forEach(target => {\n          state.statusEffects.addEffect(target.id, {\n            id: `${ability.id}_dot`,\n            type: 'dot',\n            remainingTicks: Math.floor(ability.stats.duration * 10),\n            tickInterval: 10,\n            lastTick: state.currentTick,\n            value: Math.floor(damage * 0.3),\n            stackable: false\n          });\n        });\n      }\n\n      // Apply Buff effects (Shadow Clone)\n      if (ability.effects.includes('Buff') && ability.id === 'shadow_clone') {\n        console.log(`👥 SHADOW CLONE: Creating shadow clone for ${ability.stats.duration} seconds`);\n\n        // Position clone slightly offset from ninja\n        const cloneX = currentNinjaPosition.x + 60; // 60 pixels to the right\n        const cloneY = currentNinjaPosition.y + 10; // 10 pixels down\n\n        state.shadowClone = {\n          id: `shadow_clone_${Date.now()}`,\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks (30s = 300 ticks)\n          position: {\n            x: cloneX,\n            y: cloneY\n          },\n          damageMultiplier: 0.7 // 70% damage\n        };\n        console.log(`👥 SHADOW CLONE ACTIVE: Clone will last ${ability.stats.duration}s and deal 70% damage`);\n      }\n    };\n\n    // Create projectile that will deal damage when it hits\n    const createProjectile = (targetEnemy, damage, ninjaPos, abilityInfo, isAOE, aoeRadius) => {\n      if (!targetEnemy) {\n        console.log('❌ Cannot create projectile: No target enemy');\n        return null;\n      }\n\n      // DEBUG: Log damage values being applied\n      console.log(`🚀 CREATING PROJECTILE: damage=${damage}, target=${targetEnemy.name} (${targetEnemy.health}/${targetEnemy.maxHealth} HP)`);\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const NINJA_SIZE = 40;\n\n      // Use provided ninja position or default to center\n      const ninjaX = ninjaPos ? ninjaPos.x + NINJA_SIZE / 2 : SCREEN_WIDTH / 2;\n      const ninjaY = ninjaPos ? ninjaPos.y + NINJA_SIZE / 2 : GAME_AREA_HEIGHT / 2;\n      const ENEMY_SIZE = 35;\n      const projectileId = `proj_${Date.now()}_${Math.random()}`;\n      const projectile = {\n        id: projectileId,\n        x: ninjaX,\n        y: ninjaY,\n        targetX: targetEnemy.position.x + ENEMY_SIZE / 2,\n        targetY: targetEnemy.position.y + ENEMY_SIZE / 2,\n        targetEnemyId: targetEnemy.id,\n        damage: damage,\n        startTime: Date.now(),\n        duration: 500,\n        // 500ms travel time\n        // MOBILE ENHANCEMENT: Store ability information for visual representation\n        abilityId: abilityInfo?.id || 'basic_shuriken',\n        abilityName: abilityInfo?.name || 'Basic Shuriken',\n        abilityIcon: abilityInfo?.icon || '🌟',\n        // Default to star if no ability info\n        // AOE properties\n        isAOE: isAOE || false,\n        aoeRadius: aoeRadius || 0\n      };\n      console.log(`🚀 PROJECTILE CREATED: ${abilityInfo?.name || 'Basic Shuriken'} projectile (ID: ${projectileId}) targeting ${targetEnemy.name} for ${damage} damage`);\n      console.log(`🎯 PROJECTILE DEBUG: isAOE=${isAOE}, aoeRadius=${aoeRadius}, damage=${damage}`);\n      console.log(`🔥 Creating projectile to enemy ${targetEnemy.id} for ${damage} damage`);\n      console.log(`🎯 Projectile origin: ninja at (${ninjaX}, ${ninjaY}), target at (${projectile.targetX}, ${projectile.targetY})`);\n      setProjectiles(prev => [...prev, projectile]);\n\n      // REMOVED: Old damage system scheduling - now using real-time impact processing\n      // setTimeout(() => { handleProjectileHit(projectile); }, 500);\n\n      return projectile;\n    };\n\n    // Spawn a zone-based enemy using the selected zone\n    const spawnTestEnemy = state => {\n      console.log(`🎯 SPAWNING ENEMY: Attempting to spawn enemy from selected zone`);\n\n      // Get zone enemy from ZoneContext\n      const zoneEnemy = spawnZoneEnemy();\n      if (!zoneEnemy) {\n        console.log(`❌ No zone enemy available - falling back to test enemy`);\n        // Fallback to basic test enemy if zone system fails\n        spawnBasicTestEnemy(state);\n        return;\n      }\n      console.log(`🎯 ZONE ENEMY SPAWNED: ${zoneEnemy.name} (${zoneEnemy.typeId}) from Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n\n      // Convert zone enemy to combat enemy format\n      const combatEnemy = {\n        id: zoneEnemy.id,\n        name: zoneEnemy.name,\n        health: zoneEnemy.hp,\n        maxHealth: zoneEnemy.maxHP,\n        stats: {\n          attack: zoneEnemy.attack,\n          defense: 10,\n          // Default defense\n          health: zoneEnemy.hp,\n          maxHealth: zoneEnemy.maxHP,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: zoneEnemy.position,\n        lastDamaged: 0,\n        // Store zone info for kill tracking\n        zoneTypeId: zoneEnemy.typeId,\n        zoneXP: zoneEnemy.xp\n      };\n      console.log(`🐛 Added zone enemy: ${combatEnemy.name} with ${combatEnemy.health} HP at Zone ${currentZone?.id} Level ${currentZoneLevel?.level}`);\n      state.enemies.push(combatEnemy);\n    };\n\n    // Fallback basic enemy spawner\n    const spawnBasicTestEnemy = state => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140;\n      const ENEMY_SIZE = 35;\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `fallback_enemy_${Date.now()}_${Math.random()}`,\n        name: `Test Orc ${Math.floor(Math.random() * 100)}`,\n        health: 50,\n        maxHealth: 50,\n        stats: {\n          attack: 15,\n          defense: 10,\n          health: 50,\n          maxHealth: 50,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      console.log(`🐛 Fallback: Spawned ${enemy.name} at (${Math.round(x)}, ${Math.round(y)})`);\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    // Start combat - Memoized with stable dependencies\n    const startCombat = React.default.useCallback(() => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      console.log('🚀 Combat engine:', _engineCombatEngine.combatEngine);\n      console.log('🚀 Handle combat tick function:', handleCombatTick);\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n      console.log('🚀 Engine started successfully!');\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Stop combat - Memoized with stable dependencies\n    const stopCombat = React.default.useCallback(() => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    }, [_engineCombatEngine.combatEngine, handleCombatTick]);\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Clear all enemies (for level-up explosion)\n    const clearAllEnemies = () => {\n      console.log('💥 Clearing all enemies for level-up explosion!');\n      setCombatState(prev => ({\n        ...prev,\n        enemies: []\n      }));\n    };\n\n    // REMOVED: Level up explosion disabled for performance with ultra-fast XP system\n    // const triggerLevelUpExplosion = () => { ... }\n\n    // Enhanced enemy spawning function\n    const spawnEnemy = position => {\n      const SCREEN_WIDTH = 390;\n      const GAME_AREA_HEIGHT = 844 - 140; // Smaller top bar + compact abilities bar\n      const ENEMY_SIZE = 35;\n\n      // Use provided position or generate random position\n      const x = position?.x ?? Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const y = position?.y ?? Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE;\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [...prev.enemies, enemy]\n      }));\n      return enemy;\n    };\n\n    // Spawn boss enemy function\n    const spawnBoss = bossEnemy => {\n      console.log(`🐉 Spawning boss: ${bossEnemy.name} - clearing all other enemies first`);\n      setCombatState(prev => ({\n        ...prev,\n        enemies: [bossEnemy] // Replace all enemies with just the boss\n      }));\n    };\n\n    // Clear specific enemy by ID\n    const clearSpecificEnemy = enemyId => {\n      setCombatState(prev => ({\n        ...prev,\n        enemies: prev.enemies.filter(enemy => enemy.id !== enemyId)\n      }));\n    };\n\n    // MOBILE FIX: Manual ability casting for UI buttons - allows players to trigger abilities directly\n    const useAbilityManually = _s3((0, _react.useCallback)(_s3(slotIndex => {\n      _s3();\n      console.log(`🔥🔥🔥 MANUAL ABILITY BUTTON TAPPED - SLOT ${slotIndex} 🔥🔥🔥`);\n      console.log(`🚨 ABILITY TRIGGERED: Manual cast from slot ${slotIndex}`);\n      console.log(`🎮 Manual cast attempt for slot ${slotIndex}`);\n\n      // CRITICAL: Check if player is alive first\n      if (!game.gameState.isAlive) {\n        console.log(`💀 Manual ability cast blocked - player is dead!`);\n        return false;\n      }\n\n      // Check if ability is ready and cast it\n      const isReady = combatState.abilityManager.isAbilityReady(slotIndex);\n      if (!isReady) {\n        console.log(`⏳ Ability in slot ${slotIndex} is not ready (still on cooldown)`);\n        return false;\n      }\n\n      // Check if there are enemies to target\n      if (combatState.enemies.length === 0) {\n        console.log(`🎯 No enemies to target for manual ability cast`);\n        return false;\n      }\n\n      // Use the ability through the ability manager\n      const currentTick = _engineCombatEngine.combatEngine.getCurrentTick();\n      const success = combatState.abilityManager.useAbility(slotIndex, currentTick);\n      if (success) {\n        // Cast the ability immediately using the same casting logic as auto-cast\n        setCombatState(prev => {\n          const newState = {\n            ...prev\n          };\n          castAbility(newState, slotIndex);\n          return newState;\n        });\n        console.log(`✨ Manual ability cast successful for slot ${slotIndex}`);\n        return true;\n      } else {\n        console.log(`❌ Manual ability cast failed for slot ${slotIndex}`);\n        return false;\n      }\n    }, \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true), [combatState.abilityManager, combatState.enemies]), \"TeV43wHbXm0ccgu+R8urb3GYmh8=\", true);\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // MOBILE FIX: Don't override default ability equipment - let AbilityManager constructor handle it\n      // The AbilityManager already equips all 5 abilities by default in its constructor\n      console.log('🎯 Combat engine started, using default ability equipment from AbilityManager');\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n\n    // CRITICAL FIX: Add missing combat tick timer - MOBILE OPTIMIZED\n    (0, _react.useEffect)(() => {\n      // Mobile React Native performance optimization - slower tick rate for mobile\n      const tickInterval = Platform.default.OS === 'web' ? 100 : 250; // 10 TPS web, 4 TPS mobile\n      console.log(`🎯 STARTING COMBAT TICK TIMER - handleCombatTick will be called every ${tickInterval}ms on ${Platform.default.OS}`);\n      const combatTickInterval = setInterval(handleCombatTick, tickInterval);\n      return () => {\n        console.log('🛑 STOPPING COMBAT TICK TIMER');\n        clearInterval(combatTickInterval);\n      };\n    }, [handleCombatTick]);\n\n    // CRITICAL FIX: Handle projectile impacts separately from animation loop\n    (0, _react.useEffect)(() => {\n      const processProjectileImpacts = () => {\n        setProjectiles(currentProjectiles => {\n          return currentProjectiles.map(projectile => {\n            if (!projectile) return null;\n\n            // Calculate progress\n            const currentTime = Date.now();\n            const startTime = projectile.startTime || currentTime;\n            const elapsedTime = currentTime - startTime;\n            const progress = Math.min(elapsedTime / (projectile.duration || 500), 1);\n\n            // Apply damage when projectile completes\n            if (progress >= 1 && !projectile.hasHit) {\n              // FIXED: Don't mutate state directly - mark as hit via state update instead\n              console.log(`🎯 PROJECTILE IMPACT: ${projectile.abilityName} projectile hit target`);\n              setCombatState(prev => {\n                const newState = {\n                  ...prev\n                };\n                if (projectile.isAOE && projectile.aoeRadius && projectile.aoeRadius > 0) {\n                  // AOE PROJECTILE: Damage all enemies within radius of impact point\n                  console.log(`💥 AOE PROJECTILE IMPACT: ${projectile.abilityName} with radius ${projectile.aoeRadius}`);\n                  const impactX = projectile.targetX;\n                  const impactY = projectile.targetY;\n                  const enemiesKilled = [];\n\n                  // Find all enemies within AOE radius of impact\n                  newState.enemies = newState.enemies.map(enemy => {\n                    if (enemy.health <= 0 || enemy.markedForDeath) return enemy;\n                    const enemyX = enemy.position.x + 17.5; // Center of enemy\n                    const enemyY = enemy.position.y + 17.5;\n                    const distance = Math.sqrt(Math.pow(enemyX - impactX, 2) + Math.pow(enemyY - impactY, 2));\n                    console.log(`🎯 AOE DISTANCE CHECK: ${enemy.name} at (${enemyX}, ${enemyY}) vs impact (${impactX}, ${impactY}) = ${distance.toFixed(1)}px (radius: ${projectile.aoeRadius}px)`);\n                    if (distance <= projectile.aoeRadius) {\n                      // Use the projectile's pre-calculated damage (already includes all modifiers)\n                      const newHealth = Math.max(0, enemy.health - projectile.damage);\n                      console.log(`💥 AOE DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} -> ${newHealth})`);\n\n                      // Check if enemy dies from AOE damage\n                      if (newHealth <= 0 && enemy.health > 0) {\n                        console.log(`💀 AOE KILL: ${enemy.name} killed by ${projectile.abilityName}!`);\n                        enemiesKilled.push(enemy); // Store original enemy for XP awarding\n\n                        return {\n                          ...enemy,\n                          health: 0,\n                          markedForDeath: true,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      } else {\n                        return {\n                          ...enemy,\n                          health: newHealth,\n                          lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                        };\n                      }\n                    }\n                    return enemy; // Enemy outside AOE radius - no damage\n                  });\n\n                  // Award XP for all killed enemies SYNCHRONOUSLY - no setTimeout to avoid state conflicts\n                  if (enemiesKilled.length > 0) {\n                    console.log(`🎯 AOE XP AWARD: ${enemiesKilled.length} enemies killed by ${projectile.abilityName}`);\n                    // Process XP immediately within this state update to prevent conflicts\n                    enemiesKilled.forEach(enemy => handleEnemyKill(enemy));\n                  }\n                } else {\n                  // SINGLE TARGET PROJECTILE: Original logic\n                  const enemyIndex = newState.enemies.findIndex(e => e.id === projectile.targetEnemyId);\n                  if (enemyIndex >= 0 && newState.enemies[enemyIndex].health > 0 && !newState.enemies[enemyIndex].markedForDeath) {\n                    newState.enemies = [...newState.enemies];\n                    const enemy = newState.enemies[enemyIndex];\n                    const newHealth = Math.max(0, enemy.health - projectile.damage);\n                    newState.enemies[enemyIndex] = {\n                      ...enemy,\n                      health: newHealth,\n                      lastDamaged: _engineCombatEngine.combatEngine.getCurrentTick()\n                    };\n                    console.log(`🎯 SINGLE TARGET DAMAGE: ${enemy.name} health: ${newHealth}/${enemy.maxHealth}`);\n\n                    // FAST XP SYSTEM: Mark enemies for ultra-fast batch processing\n                    if (newHealth <= 0 && enemy.health > 0) {\n                      console.log(`💀 FAST XP KILL: ${enemy.name} killed by ${projectile.abilityName}! Marked for immediate batch XP...`);\n\n                      // Mark enemy as killed - batch system will process XP within 16ms\n                      newState.enemies[enemyIndex] = {\n                        ...newState.enemies[enemyIndex],\n                        health: 0,\n                        isDying: true,\n                        deathStartTime: Date.now()\n                      };\n                    } else if (enemy.health > 0) {\n                      console.log(`🎯 DAMAGE: ${enemy.name} hit for ${projectile.damage} damage (${enemy.health} → ${newHealth})`);\n                    }\n                  }\n                }\n                return newState;\n              });\n\n              // FIXED: Move projectile hit marking into the same state cycle - no separate setProjectiles call\n              // The projectile cleanup will handle marking and removal in the next iteration\n            }\n\n            // Clean up completed projectiles - FIX: Use 1.0 threshold since progress is capped at 1.0\n            // Also add fallback time-based cleanup for safety\n            const timeBasedCleanup = elapsedTime > 2000; // 2 second fallback\n            if (progress >= 1.0 || timeBasedCleanup) {\n              if (timeBasedCleanup) {\n                console.log(`⚠️ FALLBACK CLEANUP: Projectile ${projectile.id} cleaned up after 2 seconds`);\n              }\n              return null;\n            }\n            return projectile;\n          }).filter(Boolean);\n        });\n      };\n\n      // Process impacts independently from visual animation at 30fps\n      const impactInterval = setInterval(processProjectileImpacts, 33);\n      return () => clearInterval(impactInterval);\n    }, []); // FIXED: Empty dependency array to prevent interval recreation\n\n    // Manual save ability data function - called when abilities are modified\n    const saveAbilityData = (0, _react.useCallback)(() => {\n      if (combatState.abilityManager) {\n        const abilityData = combatState.abilityManager.getSaveData();\n        console.log('💾 MANUALLY SAVING ABILITY DATA TO GAME CONTEXT:', abilityData);\n        game.updateAbilityData(abilityData);\n      }\n    }, [combatState.abilityManager, game.updateAbilityData]);\n    const contextValue = React.default.useMemo(() => ({\n      combatState,\n      projectiles,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      handleEnemyKill,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility,\n      spawnEnemy,\n      spawnBoss,\n      clearAllEnemies,\n      clearSpecificEnemy,\n      // triggerLevelUpExplosion, // REMOVED: Level up explosion disabled for performance\n      findClosestEnemy,\n      updateNinjaPosition,\n      setManualControlActive,\n      lastExplosionTime,\n      useAbilityManually,\n      // MOBILE FIX: Add manual ability casting\n      saveAbilityData,\n      // Expose save function to UI components\n      shadowClone: combatState.shadowClone // Expose shadow clone state for rendering\n    }), [\n    // Only include primitive values and state to prevent infinite loop\n    // Remove function dependencies that recreate and cause circular refs\n    combatState, projectiles, lastExplosionTime,\n    // MOBILE PERFORMANCE FIX: Add missing dependencies for proper state synchronization\n    combatState.abilityManager, combatState.enemies, combatState.shadowClone,\n    // Add shadow clone state to dependencies\n    useAbilityManually,\n    // Add the callback to dependencies\n    saveAbilityData // Add saveAbilityData to dependencies\n    ]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 5\n    }, this);\n  };\n  _s4(CombatProvider, \"/Al0O4dWjeluJCM+3yYBwpX/SSI=\", false, function () {\n    return [_GameContext.useGame, _ZoneContext.useZone];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":1166,"map":[[15,2,96,0,"Object"],[15,8,96,0],[15,9,96,0,"defineProperty"],[15,23,96,0],[15,24,96,0,"exports"],[15,31,96,0],[16,4,96,0,"enumerable"],[16,14,96,0],[17,4,96,0,"get"],[17,7,96,0],[17,18,96,0,"get"],[17,19,96,0],[18,6,96,0],[18,13,96,0,"useCombat"],[18,22,96,0],[19,4,96,0],[20,2,96,0],[21,2,106,0,"Object"],[21,8,106,0],[21,9,106,0,"defineProperty"],[21,23,106,0],[21,24,106,0,"exports"],[21,31,106,0],[22,4,106,0,"enumerable"],[22,14,106,0],[23,4,106,0,"get"],[23,7,106,0],[23,18,106,0,"get"],[23,19,106,0],[24,6,106,0],[24,13,106,0,"CombatProvider"],[24,27,106,0],[25,4,106,0],[26,2,106,0],[27,2,1,0],[27,6,1,0,"_react"],[27,12,1,0],[27,15,1,0,"require"],[27,22,1,0],[27,23,1,0,"_dependencyMap"],[27,37,1,0],[28,2,1,0],[28,6,1,0,"React"],[28,11,1,0],[28,14,1,0,"_interopDefault"],[28,29,1,0],[28,30,1,0,"_react"],[28,36,1,0],[29,2,1,110],[29,6,1,110,"_reactNativeWebDistExportsPlatform"],[29,40,1,110],[29,43,1,110,"require"],[29,50,1,110],[29,51,1,110,"_dependencyMap"],[29,65,1,110],[30,2,1,110],[30,6,1,110,"Platform"],[30,14,1,110],[30,17,1,110,"_interopDefault"],[30,32,1,110],[30,33,1,110,"_reactNativeWebDistExportsPlatform"],[30,67,1,110],[31,2,3,0],[31,6,3,0,"_engineCombatEngine"],[31,25,3,0],[31,28,3,0,"require"],[31,35,3,0],[31,36,3,0,"_dependencyMap"],[31,50,3,0],[32,2,4,0],[32,6,4,0,"_typesAbilityTypes"],[32,24,4,0],[32,27,4,0,"require"],[32,34,4,0],[32,35,4,0,"_dependencyMap"],[32,49,4,0],[33,2,5,0],[33,6,5,0,"_GameContext"],[33,18,5,0],[33,21,5,0,"require"],[33,28,5,0],[33,29,5,0,"_dependencyMap"],[33,43,5,0],[34,2,6,0],[34,6,6,0,"_ZoneContext"],[34,18,6,0],[34,21,6,0,"require"],[34,28,6,0],[34,29,6,0,"_dependencyMap"],[34,43,6,0],[35,2,6,40],[35,6,6,40,"_reactJsxDevRuntime"],[35,25,6,40],[35,28,6,40,"require"],[35,35,6,40],[35,36,6,40,"_dependencyMap"],[35,50,6,40],[36,2,94,0],[36,8,94,6,"CombatContext"],[36,21,94,19],[36,37,94,22],[36,41,94,22,"createContext"],[36,47,94,35],[36,48,94,35,"createContext"],[36,61,94,35],[36,63,94,67,"undefined"],[36,72,94,76],[36,73,94,77],[37,2,96,7],[37,8,96,13,"useCombat"],[37,17,96,22],[37,20,96,25,"useCombat"],[37,21,96,25],[37,26,96,50],[38,4,96,50,"_s"],[38,6,96,50],[39,4,97,2],[39,10,97,8,"context"],[39,17,97,15],[39,20,97,18],[39,24,97,18,"useContext"],[39,30,97,28],[39,31,97,28,"useContext"],[39,41,97,28],[39,43,97,29,"CombatContext"],[39,56,97,42],[39,57,97,43],[40,4,98,2],[40,8,98,6],[40,9,98,7,"context"],[40,16,98,14],[40,18,98,16],[41,6,99,4],[41,12,99,10],[41,16,99,14,"Error"],[41,21,99,19],[41,22,99,20],[41,70,99,68],[41,71,99,69],[42,4,100,2],[43,4,101,2],[43,11,101,9,"context"],[43,18,101,16],[44,2,102,0],[44,3,102,1],[45,2,102,2,"_s"],[45,4,102,2],[45,5,96,13,"useCombat"],[45,14,96,22],[46,2,104,0],[46,6,104,4,"enemyCounter"],[46,18,104,16],[46,21,104,19],[46,22,104,20],[46,23,104,21],[46,24,104,22],[48,2,106,7],[48,8,106,13,"CombatProvider"],[48,22,106,27],[48,25,106,30,"CombatProvider"],[48,26,106,31],[49,4,106,33,"children"],[50,2,106,67],[50,3,106,68],[50,8,106,73],[51,4,106,73,"_s4"],[51,7,106,73],[52,4,106,73],[52,8,106,73,"_s3"],[52,11,106,73],[52,14,106,73,"$RefreshSig$"],[52,26,106,73],[53,4,107,2],[53,10,107,8,"game"],[53,14,107,12],[53,17,107,15],[53,21,107,15,"useGame"],[53,33,107,22],[53,34,107,22,"useGame"],[53,41,107,22],[53,43,107,23],[53,44,107,24],[54,4,108,2],[54,10,108,8],[55,6,108,10,"currentZone"],[55,17,108,21],[56,6,108,23,"currentZoneLevel"],[56,22,108,39],[57,6,108,41,"recordEnemyKill"],[57,21,108,56],[58,6,108,58,"spawnZoneEnemy"],[59,4,108,73],[59,5,108,74],[59,8,108,77],[59,12,108,77,"useZone"],[59,24,108,84],[59,25,108,84,"useZone"],[59,32,108,84],[59,34,108,85],[59,35,108,86],[61,4,110,2],[62,4,111,2],[62,10,111,8,"initialCombatState"],[62,28,111,39],[62,31,111,42],[63,6,112,4,"isInCombat"],[63,16,112,14],[63,18,112,16],[63,23,112,21],[64,6,113,4,"currentTick"],[64,17,113,15],[64,19,113,17],[64,20,113,18],[65,6,114,4,"enemies"],[65,13,114,11],[65,15,114,13],[65,17,114,15],[66,6,115,4,"abilityManager"],[66,20,115,18],[66,22,115,20],[66,26,115,24,"AbilityManager"],[66,44,115,38],[66,45,115,38,"AbilityManager"],[66,59,115,38],[66,60,115,39],[66,61,115,40],[67,6,116,4,"statusEffects"],[67,19,116,17],[67,21,116,19],[67,25,116,23,"StatusEffectManager"],[67,44,116,42],[67,45,116,42,"StatusEffectManager"],[67,64,116,42],[67,65,116,43],[67,66,116,44],[68,6,117,4,"playerStats"],[68,17,117,15],[68,19,117,17],[69,8,118,6,"attack"],[69,14,118,12],[69,16,118,14],[69,18,118,16],[70,8,118,18],[71,8,119,6,"defense"],[71,15,119,13],[71,17,119,15],[71,18,119,16],[72,8,120,6,"health"],[72,14,120,12],[72,16,120,14],[72,19,120,17],[73,8,121,6,"maxHealth"],[73,17,121,15],[73,19,121,17],[73,22,121,20],[74,8,122,6,"critChance"],[74,18,122,16],[74,20,122,18],[74,21,122,19],[75,8,123,6,"critDamage"],[75,18,123,16],[75,20,123,18],[75,23,123,21],[76,8,124,6,"cooldownReduction"],[76,25,124,23],[76,27,124,25],[77,6,125,4],[78,4,126,2],[78,5,126,3],[79,4,128,2],[79,10,128,8],[79,11,128,9,"combatState"],[79,22,128,20],[79,24,128,22,"setCombatState"],[79,38,128,36],[79,39,128,37],[79,42,128,40],[79,46,128,40,"useState"],[79,52,128,48],[79,53,128,48,"useState"],[79,61,128,48],[79,63,128,62,"initialCombatState"],[79,81,128,80],[79,82,128,81],[81,4,130,2],[82,4,131,2],[82,8,131,2,"useEffect"],[82,14,131,11],[82,15,131,11,"useEffect"],[82,24,131,11],[82,26,131,12],[82,32,131,18],[83,6,132,4],[83,10,132,8,"game"],[83,14,132,12],[83,15,132,13,"gameState"],[83,24,132,22],[83,25,132,23,"abilityData"],[83,36,132,34],[83,40,132,38,"combatState"],[83,51,132,49],[83,52,132,50,"abilityManager"],[83,66,132,64],[83,68,132,66],[84,8,133,6,"console"],[84,15,133,13],[84,16,133,14,"log"],[84,19,133,17],[84,20,133,18],[84,68,133,66],[84,70,133,68,"game"],[84,74,133,72],[84,75,133,73,"gameState"],[84,84,133,82],[84,85,133,83,"abilityData"],[84,96,133,94],[84,97,133,95],[85,8,134,6,"combatState"],[85,19,134,17],[85,20,134,18,"abilityManager"],[85,34,134,32],[85,35,134,33,"restoreFromSaveData"],[85,54,134,52],[85,55,134,53,"game"],[85,59,134,57],[85,60,134,58,"gameState"],[85,69,134,67],[85,70,134,68,"abilityData"],[85,81,134,79],[85,82,134,80],[87,8,136,6],[88,8,137,6,"setCombatState"],[88,22,137,20],[88,23,137,21,"prev"],[88,27,137,25],[88,32,137,30],[89,10,137,32],[89,13,137,35,"prev"],[90,8,137,40],[90,9,137,41],[90,10,137,42],[90,11,137,43],[91,6,138,4],[92,4,139,2],[92,5,139,3],[92,7,139,5],[92,8,139,6,"game"],[92,12,139,10],[92,13,139,11,"gameState"],[92,22,139,20],[92,23,139,21,"abilityData"],[92,34,139,32],[92,36,139,34,"combatState"],[92,47,139,45],[92,48,139,46,"abilityManager"],[92,62,139,60],[92,63,139,61],[92,64,139,62],[94,4,141,2],[95,4,142,2],[95,8,142,2,"useEffect"],[95,14,142,11],[95,15,142,11,"useEffect"],[95,24,142,11],[95,26,142,12],[95,32,142,18],[96,6,143,4],[96,10,143,8,"game"],[96,14,143,12],[96,15,143,13,"gameState"],[96,24,143,22],[96,25,143,23,"ninja"],[96,30,143,28],[96,32,143,30],[97,8,144,6],[97,14,144,12,"effectiveStats"],[97,28,144,26],[97,31,144,29,"game"],[97,35,144,33],[97,36,144,34,"getEffectiveStats"],[97,53,144,51],[97,54,144,52],[97,55,144,53],[98,8,146,6,"setCombatState"],[98,22,146,20],[98,23,146,21,"prev"],[98,27,146,25],[98,31,146,29],[99,10,147,8],[100,10,148,8],[100,14,148,12,"prev"],[100,18,148,16],[100,19,148,17,"playerStats"],[100,30,148,28],[100,31,148,29,"maxHealth"],[100,40,148,38],[100,45,148,43],[100,48,148,46],[100,52,148,50,"prev"],[100,56,148,54],[100,57,148,55,"playerStats"],[100,68,148,66],[100,69,148,67,"attack"],[100,75,148,73],[100,80,148,78],[100,82,148,80],[100,84,148,82],[101,12,149,10,"console"],[101,19,149,17],[101,20,149,18,"log"],[101,23,149,21],[101,24,149,22],[101,60,149,58,"effectiveStats"],[101,74,149,72],[101,75,149,73,"health"],[101,81,149,79],[101,93,149,91,"effectiveStats"],[101,107,149,105],[101,108,149,106,"attack"],[101,114,149,112],[101,127,149,125,"effectiveStats"],[101,141,149,139],[101,142,149,140,"defense"],[101,149,149,147],[101,151,149,149],[101,152,149,150],[102,12,151,10],[102,19,151,17],[103,14,152,12],[103,17,152,15,"prev"],[103,21,152,19],[104,14,153,12,"playerStats"],[104,25,153,23],[104,27,153,25],[105,16,154,14,"attack"],[105,22,154,20],[105,24,154,22,"effectiveStats"],[105,38,154,36],[105,39,154,37,"attack"],[105,45,154,43],[106,16,155,14,"defense"],[106,23,155,21],[106,25,155,23,"effectiveStats"],[106,39,155,37],[106,40,155,38,"defense"],[106,47,155,45],[107,16,156,14,"health"],[107,22,156,20],[107,24,156,22,"effectiveStats"],[107,38,156,36],[107,39,156,37,"health"],[107,45,156,43],[108,16,156,45],[109,16,157,14,"maxHealth"],[109,25,157,23],[109,27,157,25,"effectiveStats"],[109,41,157,39],[109,42,157,40,"health"],[109,48,157,46],[110,16,158,14,"critChance"],[110,26,158,24],[110,28,158,26,"effectiveStats"],[110,42,158,40],[110,43,158,41,"critChance"],[110,53,158,51],[110,57,158,55],[110,58,158,56],[111,16,159,14,"critDamage"],[111,26,159,24],[111,28,159,26,"effectiveStats"],[111,42,159,40],[111,43,159,41,"critDamage"],[111,53,159,51],[111,57,159,55],[111,60,159,58],[112,16,160,14,"cooldownReduction"],[112,33,160,31],[112,35,160,33,"effectiveStats"],[112,49,160,47],[112,50,160,48,"cooldownReduction"],[112,67,160,65],[112,71,160,69],[113,14,161,12],[114,12,162,10],[114,13,162,11],[115,10,163,8],[116,10,164,8],[116,17,164,15,"prev"],[116,21,164,19],[117,8,165,6],[117,9,165,7],[117,10,165,8],[118,6,166,4],[119,4,167,2],[119,5,167,3],[119,7,167,5],[119,8,167,6,"game"],[119,12,167,10],[119,13,167,11,"gameState"],[119,22,167,20],[119,23,167,21,"ninja"],[119,28,167,26],[119,29,167,27],[119,30,167,28],[120,4,169,2],[120,10,169,8],[120,11,169,9,"projectiles"],[120,22,169,20],[120,24,169,22,"setProjectiles"],[120,38,169,36],[120,39,169,37],[120,42,169,40],[120,46,169,40,"useState"],[120,52,169,48],[120,53,169,48,"useState"],[120,61,169,48],[120,63,169,69],[120,65,169,71],[120,66,169,72],[121,4,170,2],[121,10,170,8],[121,11,170,9,"lastExplosionTime"],[121,28,170,26],[121,30,170,28,"setLastExplosionTime"],[121,50,170,48],[121,51,170,49],[121,54,170,52],[121,58,170,52,"useState"],[121,64,170,60],[121,65,170,60,"useState"],[121,73,170,60],[121,75,170,69],[121,76,170,70],[121,77,170,71],[122,4,171,2],[123,4,172,2],[125,4,174,2],[126,4,175,2],[126,10,175,8,"handleEnemyKill"],[126,25,175,23],[126,28,175,26],[126,32,175,26,"useCallback"],[126,38,175,37],[126,39,175,37,"useCallback"],[126,50,175,37],[126,52,175,39,"enemy"],[126,57,175,57],[126,61,175,62],[127,6,176,4],[128,6,177,4],[128,12,177,10,"xpReward"],[128,20,177,18],[128,23,177,21],[128,24,177,22,"enemy"],[128,29,177,27],[128,30,177,28,"zoneXP"],[128,36,177,34],[128,40,177,38],[128,41,177,39],[128,46,177,44,"game"],[128,50,177,48],[128,51,177,49,"gameState"],[128,60,177,58],[128,61,177,59,"subscriptionBenefits"],[128,81,177,79],[128,83,177,81,"xp_multiplier"],[128,96,177,94],[128,100,177,98],[128,103,177,101],[128,104,177,102],[129,6,178,4],[129,12,178,10,"goldReward"],[129,22,178,20],[129,25,178,23],[129,27,178,25],[129,31,178,29,"game"],[129,35,178,33],[129,36,178,34,"gameState"],[129,45,178,43],[129,46,178,44,"subscriptionBenefits"],[129,66,178,64],[129,68,178,66,"drop_multiplier"],[129,83,178,81],[129,87,178,85],[129,90,178,88],[129,91,178,89],[130,6,180,4,"console"],[130,13,180,11],[130,14,180,12,"log"],[130,17,180,15],[130,18,180,16],[130,46,180,44,"xpReward"],[130,54,180,52],[130,65,180,63,"goldReward"],[130,75,180,73],[130,88,180,86,"enemy"],[130,93,180,91],[130,94,180,92,"name"],[130,98,180,96],[130,100,180,98],[130,101,180,99],[132,6,182,4],[133,6,183,4,"game"],[133,10,183,8],[133,11,183,9,"updateNinja"],[133,22,183,20],[133,23,183,21,"prev"],[133,27,183,25],[133,32,183,30],[134,8,184,6,"experience"],[134,18,184,16],[134,20,184,18,"prev"],[134,24,184,22],[134,25,184,23,"experience"],[134,35,184,33],[134,38,184,36,"xpReward"],[134,46,184,44],[135,8,185,6,"gold"],[135,12,185,10],[135,14,185,12,"prev"],[135,18,185,16],[135,19,185,17,"gold"],[135,23,185,21],[135,26,185,24,"goldReward"],[136,6,186,4],[136,7,186,5],[136,8,186,6],[136,9,186,7],[138,6,188,4],[139,6,189,4,"setCombatState"],[139,20,189,18],[139,21,189,19,"prevState"],[139,30,189,28],[139,35,189,33],[140,8,190,6],[140,11,190,9,"prevState"],[140,20,190,18],[141,8,191,6,"enemies"],[141,15,191,13],[141,17,191,15,"prevState"],[141,26,191,24],[141,27,191,25,"enemies"],[141,34,191,32],[141,35,191,33,"map"],[141,38,191,36],[141,39,191,37,"e"],[141,40,191,38],[141,44,192,8,"e"],[141,45,192,9],[141,46,192,10,"id"],[141,48,192,12],[141,53,192,17,"enemy"],[141,58,192,22],[141,59,192,23,"id"],[141,61,192,25],[141,64,192,28],[142,10,192,30],[142,13,192,33,"e"],[142,14,192,34],[143,10,192,36,"xpAwarded"],[143,19,192,45],[143,21,192,47],[144,8,192,52],[144,9,192,53],[144,12,192,56,"e"],[144,13,193,6],[145,6,194,4],[145,7,194,5],[145,8,194,6],[145,9,194,7],[147,6,196,4],[148,6,197,4],[148,10,197,8,"enemy"],[148,15,197,13],[148,16,197,14,"zoneTypeId"],[148,26,197,24],[148,28,197,26],[149,8,198,6,"recordEnemyKill"],[149,23,198,21],[149,24,198,22],[150,10,199,8,"id"],[150,12,199,10],[150,14,199,12,"enemy"],[150,19,199,17],[150,20,199,18,"id"],[150,22,199,20],[151,10,200,8,"typeId"],[151,16,200,14],[151,18,200,16,"enemy"],[151,23,200,21],[151,24,200,22,"zoneTypeId"],[151,34,200,32],[152,10,201,8,"name"],[152,14,201,12],[152,16,201,14,"enemy"],[152,21,201,19],[152,22,201,20,"name"],[152,26,201,24],[153,10,202,8,"icon"],[153,14,202,12],[153,16,202,14],[153,20,202,18],[154,10,203,8,"hp"],[154,12,203,10],[154,14,203,12],[154,15,203,13],[155,10,204,8,"maxHP"],[155,15,204,13],[155,17,204,15,"enemy"],[155,22,204,20],[155,23,204,21,"maxHealth"],[155,32,204,30],[156,10,205,8,"attack"],[156,16,205,14],[156,18,205,16,"enemy"],[156,23,205,21],[156,24,205,22,"stats"],[156,29,205,27],[156,30,205,28,"attack"],[156,36,205,34],[157,10,206,8,"xp"],[157,12,206,10],[157,14,206,12,"enemy"],[157,19,206,17],[157,20,206,18,"zoneXP"],[157,26,206,24],[157,30,206,28],[157,31,206,29],[158,10,207,8,"position"],[158,18,207,16],[158,20,207,18,"enemy"],[158,25,207,23],[158,26,207,24,"position"],[159,8,208,6],[159,9,208,7],[159,10,208,8],[160,6,209,4],[161,4,210,2],[161,5,210,3],[161,7,210,5],[161,8,210,6,"game"],[161,12,210,10],[161,13,210,11,"updateNinja"],[161,24,210,22],[161,26,210,24,"game"],[161,30,210,28],[161,31,210,29,"gameState"],[161,40,210,38],[161,41,210,39,"subscriptionBenefits"],[161,61,210,59],[161,63,210,61,"recordEnemyKill"],[161,78,210,76],[161,79,210,77],[161,80,210,78],[163,4,212,2],[164,4,213,2],[165,4,214,2],[165,10,214,8,"handleCombatTick"],[165,26,214,24],[165,29,214,27,"React"],[165,34,214,32],[165,35,214,32,"default"],[165,42,214,32],[165,43,214,33,"useCallback"],[165,54,214,44],[165,55,214,45],[165,61,214,51],[166,6,214,51],[166,10,214,51,"_s2"],[166,13,214,51],[166,16,214,51,"$RefreshSig$"],[166,28,214,51],[167,6,215,4,"console"],[167,13,215,11],[167,14,215,12,"log"],[167,17,215,15],[167,18,215,16],[167,87,215,85],[167,88,215,86],[168,6,216,4,"console"],[168,13,216,11],[168,14,216,12,"log"],[168,17,216,15],[168,18,216,16],[168,65,216,63,"isManualControlActive"],[168,86,216,84],[168,99,216,97,"game"],[168,103,216,101],[168,104,216,102,"gameState"],[168,113,216,111],[168,114,216,112,"isAlive"],[168,121,216,119],[168,123,216,121],[168,124,216,122],[169,6,218,4],[169,10,218,8,"enemiesToKill"],[169,23,218,36],[169,26,218,39],[169,28,218,41],[169,29,218,42],[169,30,218,43],[171,6,220,4,"_s2"],[171,9,220,4],[171,10,220,4,"setCombatState"],[171,24,220,18],[171,25,220,18,"_s2"],[171,28,220,18],[171,29,220,19,"prev"],[171,33,220,23],[171,37,220,27],[172,8,220,27,"_s2"],[172,11,220,27],[173,8,221,6],[173,14,221,12,"newTick"],[173,21,221,19],[173,24,221,22,"combatEngine"],[173,43,221,34],[173,44,221,34,"combatEngine"],[173,56,221,34],[173,57,221,35,"getCurrentTick"],[173,71,221,49],[173,72,221,50],[173,73,221,51],[174,8,222,6],[174,14,222,12,"newState"],[174,22,222,20],[174,25,222,23],[175,10,222,25],[175,13,222,28,"prev"],[175,17,222,32],[176,10,222,34,"currentTick"],[176,21,222,45],[176,23,222,47,"newTick"],[177,8,222,55],[177,9,222,56],[178,8,224,6],[178,12,224,10],[178,13,224,11,"newState"],[178,21,224,19],[178,22,224,20,"isInCombat"],[178,32,224,30],[178,34,224,32],[178,41,224,39,"newState"],[178,49,224,47],[180,8,226,6],[181,8,227,6,"newState"],[181,16,227,14],[181,17,227,15,"abilityManager"],[181,31,227,29],[181,32,227,30,"updateCooldowns"],[181,47,227,45],[181,48,227,46,"newTick"],[181,55,227,53],[181,56,227,54],[183,8,229,6],[184,8,230,6],[184,14,230,12,"effectResults"],[184,27,230,25],[184,30,230,28,"newState"],[184,38,230,36],[184,39,230,37,"statusEffects"],[184,52,230,50],[184,53,230,51,"processTick"],[184,64,230,62],[184,65,230,63,"newTick"],[184,72,230,70],[184,73,230,71],[186,8,232,6],[187,8,233,6,"effectResults"],[187,21,233,19],[187,22,233,20,"forEach"],[187,29,233,27],[187,30,233,28],[187,31,233,29,"results"],[187,38,233,36],[187,40,233,38,"entityId"],[187,48,233,46],[187,53,233,51],[188,10,234,8],[188,16,234,14,"enemyIndex"],[188,26,234,24],[188,29,234,27,"newState"],[188,37,234,35],[188,38,234,36,"enemies"],[188,45,234,43],[188,46,234,44,"findIndex"],[188,55,234,53],[188,56,234,54,"e"],[188,57,234,55],[188,61,234,59,"e"],[188,62,234,60],[188,63,234,61,"id"],[188,65,234,63],[188,70,234,68,"entityId"],[188,78,234,76],[188,79,234,77],[189,10,235,8],[189,14,235,12,"enemyIndex"],[189,24,235,22],[189,28,235,26],[189,29,235,27],[189,31,235,29],[190,12,236,10,"results"],[190,19,236,17],[190,20,236,18,"forEach"],[190,27,236,25],[190,28,236,26,"result"],[190,34,236,32],[190,38,236,36],[191,14,237,12,"newState"],[191,22,237,20],[191,23,237,21,"enemies"],[191,30,237,28],[191,31,237,29,"enemyIndex"],[191,41,237,39],[191,42,237,40],[191,43,237,41,"health"],[191,49,237,47],[191,53,237,51,"result"],[191,59,237,57],[191,60,237,58,"damage"],[191,66,237,64],[192,14,238,12,"newState"],[192,22,238,20],[192,23,238,21,"enemies"],[192,30,238,28],[192,31,238,29,"enemyIndex"],[192,41,238,39],[192,42,238,40],[192,43,238,41,"lastDamaged"],[192,54,238,52],[192,57,238,55,"newTick"],[192,64,238,62],[193,12,239,10],[193,13,239,11],[193,14,239,12],[194,10,240,8],[195,8,241,6],[195,9,241,7],[195,10,241,8],[197,8,243,6],[198,8,244,6],[199,8,245,6],[199,12,245,10,"newState"],[199,20,245,18],[199,21,245,19,"playerStats"],[199,32,245,30],[199,36,245,34,"game"],[199,40,245,38],[199,41,245,39,"gameState"],[199,50,245,48],[199,51,245,49,"ninja"],[199,56,245,54],[199,58,245,56],[200,10,246,8],[200,16,246,14,"effectiveStats"],[200,30,246,28],[200,33,246,31,"game"],[200,37,246,35],[200,38,246,36,"getEffectiveStats"],[200,55,246,53],[200,56,246,54],[200,57,246,55],[202,10,248,8],[203,10,249,8],[203,14,249,12,"newState"],[203,22,249,20],[203,23,249,21,"playerStats"],[203,34,249,32],[203,35,249,33,"attack"],[203,41,249,39],[203,46,249,44,"effectiveStats"],[203,60,249,58],[203,61,249,59,"attack"],[203,67,249,65],[203,71,250,12,"newState"],[203,79,250,20],[203,80,250,21,"playerStats"],[203,91,250,32],[203,92,250,33,"defense"],[203,99,250,40],[203,104,250,45,"effectiveStats"],[203,118,250,59],[203,119,250,60,"defense"],[203,126,250,67],[203,130,251,12,"newState"],[203,138,251,20],[203,139,251,21,"playerStats"],[203,150,251,32],[203,151,251,33,"maxHealth"],[203,160,251,42],[203,165,251,47,"effectiveStats"],[203,179,251,61],[203,180,251,62,"maxHealth"],[203,189,251,71],[203,191,251,73],[204,12,253,10,"console"],[204,19,253,17],[204,20,253,18,"log"],[204,23,253,21],[204,24,253,22],[204,58,253,56,"newState"],[204,66,253,64],[204,67,253,65,"playerStats"],[204,78,253,76],[204,79,253,77,"attack"],[204,85,253,83],[204,91,253,89,"effectiveStats"],[204,105,253,103],[204,106,253,104,"attack"],[204,112,253,110],[204,125,253,123,"newState"],[204,133,253,131],[204,134,253,132,"playerStats"],[204,145,253,143],[204,146,253,144,"defense"],[204,153,253,151],[204,159,253,157,"effectiveStats"],[204,173,253,171],[204,174,253,172,"defense"],[204,181,253,179],[204,192,253,190,"newState"],[204,200,253,198],[204,201,253,199,"playerStats"],[204,212,253,210],[204,213,253,211,"maxHealth"],[204,222,253,220],[204,228,253,226,"effectiveStats"],[204,242,253,240],[204,243,253,241,"maxHealth"],[204,252,253,250],[204,254,253,252],[204,255,253,253],[206,12,255,10],[207,12,256,10],[207,16,256,14,"newHealth"],[207,25,256,23],[207,28,256,26,"newState"],[207,36,256,34],[207,37,256,35,"playerStats"],[207,48,256,46],[207,49,256,47,"health"],[207,55,256,53],[208,12,257,10],[208,16,257,14,"newState"],[208,24,257,22],[208,25,257,23,"playerStats"],[208,36,257,34],[208,37,257,35,"maxHealth"],[208,46,257,44],[208,51,257,49,"effectiveStats"],[208,65,257,63],[208,66,257,64,"maxHealth"],[208,75,257,73],[208,77,257,75],[209,14,258,12],[210,14,259,12],[210,18,259,16,"effectiveStats"],[210,32,259,30],[210,33,259,31,"maxHealth"],[210,42,259,40],[210,45,259,43,"newState"],[210,53,259,51],[210,54,259,52,"playerStats"],[210,65,259,63],[210,66,259,64,"maxHealth"],[210,75,259,73],[210,78,259,76],[210,81,259,79],[210,83,259,81],[211,16,260,14],[212,16,261,14],[212,22,261,20,"healthRatio"],[212,33,261,31],[212,36,261,34,"newState"],[212,44,261,42],[212,45,261,43,"playerStats"],[212,56,261,54],[212,57,261,55,"maxHealth"],[212,66,261,64],[212,69,261,67],[212,70,261,68],[212,73,262,16,"newState"],[212,81,262,24],[212,82,262,25,"playerStats"],[212,93,262,36],[212,94,262,37,"health"],[212,100,262,43],[212,103,262,46,"newState"],[212,111,262,54],[212,112,262,55,"playerStats"],[212,123,262,66],[212,124,262,67,"maxHealth"],[212,133,262,76],[212,136,262,79],[212,137,262,80],[213,16,263,14,"newHealth"],[213,25,263,23],[213,28,263,26,"Math"],[213,32,263,30],[213,33,263,31,"floor"],[213,38,263,36],[213,39,263,37,"effectiveStats"],[213,53,263,51],[213,54,263,52,"maxHealth"],[213,63,263,61],[213,66,263,64,"healthRatio"],[213,77,263,75],[213,78,263,76],[214,14,264,12],[214,15,264,13],[214,21,264,19],[214,25,264,23,"newState"],[214,33,264,31],[214,34,264,32,"playerStats"],[214,45,264,43],[214,46,264,44,"health"],[214,52,264,50],[214,55,264,53,"effectiveStats"],[214,69,264,67],[214,70,264,68,"maxHealth"],[214,79,264,77],[214,81,264,79],[215,16,265,14],[216,16,266,14,"newHealth"],[216,25,266,23],[216,28,266,26,"effectiveStats"],[216,42,266,40],[216,43,266,41,"maxHealth"],[216,52,266,50],[217,14,267,12],[218,14,268,12],[219,12,269,10],[220,12,271,10,"newState"],[220,20,271,18],[220,21,271,19,"playerStats"],[220,32,271,30],[220,35,271,33],[221,14,272,12],[221,17,272,15,"newState"],[221,25,272,23],[221,26,272,24,"playerStats"],[221,37,272,35],[222,14,273,12,"attack"],[222,20,273,18],[222,22,273,20,"effectiveStats"],[222,36,273,34],[222,37,273,35,"attack"],[222,43,273,41],[223,14,274,12,"defense"],[223,21,274,19],[223,23,274,21,"effectiveStats"],[223,37,274,35],[223,38,274,36,"defense"],[223,45,274,43],[224,14,275,12,"maxHealth"],[224,23,275,21],[224,25,275,23,"effectiveStats"],[224,39,275,37],[224,40,275,38,"maxHealth"],[224,49,275,47],[225,14,275,49],[226,14,276,12,"health"],[226,20,276,18],[226,22,276,20,"newHealth"],[226,31,276,29],[227,14,276,31],[228,14,277,12,"critChance"],[228,24,277,22],[228,26,277,24,"effectiveStats"],[228,40,277,38],[228,41,277,39,"critChance"],[228,51,277,49],[228,55,277,53,"newState"],[228,63,277,61],[228,64,277,62,"playerStats"],[228,75,277,73],[228,76,277,74,"critChance"],[228,86,277,84],[229,14,278,12,"critDamage"],[229,24,278,22],[229,26,278,24,"effectiveStats"],[229,40,278,38],[229,41,278,39,"critDamage"],[229,51,278,49],[229,55,278,53,"newState"],[229,63,278,61],[229,64,278,62,"playerStats"],[229,75,278,73],[229,76,278,74,"critDamage"],[229,86,278,84],[230,14,279,12,"cooldownReduction"],[230,31,279,29],[230,33,279,31,"effectiveStats"],[230,47,279,45],[230,48,279,46,"cooldownReduction"],[230,65,279,63],[230,69,279,67,"newState"],[230,77,279,75],[230,78,279,76,"playerStats"],[230,89,279,87],[230,90,279,88,"cooldownReduction"],[231,12,280,10],[231,13,280,11],[232,10,281,8],[234,10,283,8],[235,10,284,8],[235,14,284,12,"game"],[235,18,284,16],[235,19,284,17,"gameState"],[235,28,284,26],[235,29,284,27,"isAlive"],[235,36,284,34],[235,40,285,12,"game"],[235,44,285,16],[235,45,285,17,"gameState"],[235,54,285,26],[235,55,285,27,"ninja"],[235,60,285,32],[235,61,285,33,"health"],[235,67,285,39],[235,72,285,44,"effectiveStats"],[235,86,285,58],[235,87,285,59,"maxHealth"],[235,96,285,68],[235,100,286,12,"newState"],[235,108,286,20],[235,109,286,21,"playerStats"],[235,120,286,32],[235,121,286,33,"health"],[235,127,286,39],[235,130,286,42,"effectiveStats"],[235,144,286,56],[235,145,286,57,"maxHealth"],[235,154,286,66],[235,157,286,69],[235,160,286,72],[235,162,286,74],[236,12,287,10,"console"],[236,19,287,17],[236,20,287,18,"log"],[236,23,287,21],[236,24,287,22],[236,58,287,56,"newState"],[236,66,287,64],[236,67,287,65,"playerStats"],[236,78,287,76],[236,79,287,77,"health"],[236,85,287,83],[236,91,287,89,"game"],[236,95,287,93],[236,96,287,94,"gameState"],[236,105,287,103],[236,106,287,104,"ninja"],[236,111,287,109],[236,112,287,110,"health"],[236,118,287,116],[236,139,287,137],[236,140,287,138],[237,12,288,10,"newState"],[237,20,288,18],[237,21,288,19,"playerStats"],[237,32,288,30],[237,33,288,31,"health"],[237,39,288,37],[237,42,288,40,"game"],[237,46,288,44],[237,47,288,45,"gameState"],[237,56,288,54],[237,57,288,55,"ninja"],[237,62,288,60],[237,63,288,61,"health"],[237,69,288,67],[238,10,289,8],[239,8,290,6],[241,8,292,6],[242,8,293,6,"newState"],[242,16,293,14],[242,17,293,15,"enemies"],[242,24,293,22],[242,25,293,23,"forEach"],[242,32,293,30],[242,33,293,31,"enemy"],[242,38,293,36],[242,42,293,40],[243,10,294,8],[243,14,294,12],[243,15,294,13,"enemy"],[243,20,294,18],[243,21,294,19,"isBoss"],[243,27,294,25],[243,29,294,27],[244,12,294,29],[245,12,295,10],[246,12,296,10],[246,18,296,16,"MOVEMENT_SPEED"],[246,32,296,30],[246,35,296,33],[246,39,296,37],[246,40,296,38],[246,41,296,39],[247,12,297,10],[247,18,297,16,"SCREEN_WIDTH"],[247,30,297,28],[247,33,297,31],[247,36,297,34],[248,12,298,10],[248,18,298,16,"GAME_AREA_HEIGHT"],[248,34,298,32],[248,37,298,35],[248,40,298,38],[248,41,298,39],[248,42,298,40],[249,12,299,10],[249,18,299,16,"ENEMY_SIZE"],[249,28,299,26],[249,31,299,29],[249,33,299,31],[251,12,301,10],[252,12,302,10],[252,18,302,16,"playerX"],[252,25,302,23],[252,28,302,26,"currentNinjaPosition"],[252,48,302,46],[252,49,302,47,"x"],[252,50,302,48],[253,12,303,10],[253,18,303,16,"playerY"],[253,25,303,23],[253,28,303,26,"currentNinjaPosition"],[253,48,303,46],[253,49,303,47,"y"],[253,50,303,48],[255,12,305,10],[256,12,306,10],[256,18,306,16,"deltaX"],[256,24,306,22],[256,27,306,25,"playerX"],[256,34,306,32],[256,37,306,35,"enemy"],[256,42,306,40],[256,43,306,41,"position"],[256,51,306,49],[256,52,306,50,"x"],[256,53,306,51],[257,12,307,10],[257,18,307,16,"deltaY"],[257,24,307,22],[257,27,307,25,"playerY"],[257,34,307,32],[257,37,307,35,"enemy"],[257,42,307,40],[257,43,307,41,"position"],[257,51,307,49],[257,52,307,50,"y"],[257,53,307,51],[258,12,308,10],[258,18,308,16,"distance"],[258,26,308,24],[258,29,308,27,"Math"],[258,33,308,31],[258,34,308,32,"sqrt"],[258,38,308,36],[258,39,308,37,"deltaX"],[258,45,308,43],[258,48,308,46,"deltaX"],[258,54,308,52],[258,57,308,55,"deltaY"],[258,63,308,61],[258,66,308,64,"deltaY"],[258,72,308,70],[258,73,308,71],[260,12,310,10],[261,12,311,10],[261,18,311,16,"ATTACK_RANGE"],[261,30,311,28],[261,33,311,31],[261,35,311,33],[261,36,311,34],[261,37,311,35],[262,12,312,10],[262,18,312,16,"ATTACK_COOLDOWN"],[262,33,312,31],[262,36,312,34],[262,38,312,36],[262,39,312,37],[262,40,312,38],[264,12,314,10],[264,16,314,14,"distance"],[264,24,314,22],[264,28,314,26,"ATTACK_RANGE"],[264,40,314,38],[264,42,314,40],[265,14,315,12],[266,14,316,12],[266,18,316,16],[266,19,316,17,"enemy"],[266,24,316,22],[266,25,316,23,"lastAttackTick"],[266,39,316,37],[266,41,316,39,"enemy"],[266,46,316,44],[266,47,316,45,"lastAttackTick"],[266,61,316,59],[266,64,316,62],[266,65,316,63],[267,14,318,12],[267,18,318,16,"newState"],[267,26,318,24],[267,27,318,25,"currentTick"],[267,38,318,36],[267,41,318,39,"enemy"],[267,46,318,44],[267,47,318,45,"lastAttackTick"],[267,61,318,59],[267,65,318,63,"ATTACK_COOLDOWN"],[267,80,318,78],[267,82,318,80],[268,16,319,14],[269,16,320,14],[269,20,320,18],[269,21,320,19,"game"],[269,25,320,23],[269,26,320,24,"gameState"],[269,35,320,33],[269,36,320,34,"isAlive"],[269,43,320,41],[269,45,320,43],[270,18,321,16,"console"],[270,25,321,23],[270,26,321,24,"log"],[270,29,321,27],[270,30,321,28],[270,49,321,47,"enemy"],[270,54,321,52],[270,55,321,53,"name"],[270,59,321,57],[270,93,321,91],[270,94,321,92],[271,18,322,16],[272,18,323,16,"enemy"],[272,23,323,21],[272,24,323,22,"lastAttackTick"],[272,38,323,36],[272,41,323,39,"newState"],[272,49,323,47],[272,50,323,48,"currentTick"],[272,61,323,59],[273,16,324,14],[273,17,324,15],[273,23,324,21],[274,18,325,16],[275,18,326,16],[275,24,326,22,"isPlayerInvincible"],[275,42,326,40],[275,45,326,43,"game"],[275,49,326,47],[275,50,326,48,"gameState"],[275,59,326,57],[275,60,326,58,"isInvincible"],[275,72,326,70],[275,76,327,41,"game"],[275,80,327,45],[275,81,327,46,"gameState"],[275,90,327,55],[275,91,327,56,"invincibilityEndTime"],[275,111,327,76],[275,115,328,41,"Date"],[275,119,328,45],[275,120,328,46,"now"],[275,123,328,49],[275,124,328,50],[275,125,328,51],[275,128,328,54,"game"],[275,132,328,58],[275,133,328,59,"gameState"],[275,142,328,68],[275,143,328,69,"invincibilityEndTime"],[275,163,328,89],[276,18,330,16],[276,22,330,20,"isPlayerInvincible"],[276,40,330,38],[276,42,330,40],[277,20,331,18,"console"],[277,27,331,25],[277,28,331,26,"log"],[277,31,331,29],[277,32,331,30],[277,51,331,49,"enemy"],[277,56,331,54],[277,57,331,55,"name"],[277,61,331,59],[277,101,331,99],[277,102,331,100],[278,20,332,18],[279,20,333,18,"enemy"],[279,25,333,23],[279,26,333,24,"lastAttackTick"],[279,40,333,38],[279,43,333,41,"newState"],[279,51,333,49],[279,52,333,50,"currentTick"],[279,63,333,61],[280,18,334,16],[280,19,334,17],[280,25,334,23],[281,20,335,16],[282,20,336,16],[282,26,336,22,"baseAttack"],[282,36,336,32],[282,39,336,35,"enemy"],[282,44,336,40],[282,45,336,41,"stats"],[282,50,336,46],[282,51,336,47,"attack"],[282,57,336,53],[282,60,336,56],[282,63,336,59],[282,64,336,60],[282,65,336,61],[283,20,337,16],[283,26,337,22,"attackDamage"],[283,38,337,34],[283,41,337,37,"Math"],[283,45,337,41],[283,46,337,42,"floor"],[283,51,337,47],[283,52,337,48,"baseAttack"],[283,62,337,58],[283,66,337,62],[283,69,337,65],[283,72,337,68,"Math"],[283,76,337,72],[283,77,337,73,"random"],[283,83,337,79],[283,84,337,80],[283,85,337,81],[283,88,337,84],[283,91,337,87],[283,92,337,88],[283,93,337,89],[283,94,337,90],[283,95,337,91],[284,20,338,16],[284,26,338,22,"playerDefense"],[284,39,338,35],[284,42,338,38,"newState"],[284,50,338,46],[284,51,338,47,"playerStats"],[284,62,338,58],[284,63,338,59,"defense"],[284,70,338,66],[285,20,339,16],[285,26,339,22,"finalDamage"],[285,37,339,33],[285,40,339,36,"Math"],[285,44,339,40],[285,45,339,41,"max"],[285,48,339,44],[285,49,339,45],[285,50,339,46],[285,52,339,48,"attackDamage"],[285,64,339,60],[285,67,339,63,"Math"],[285,71,339,67],[285,72,339,68,"floor"],[285,77,339,73],[285,78,339,74,"playerDefense"],[285,91,339,87],[285,94,339,90],[285,97,339,93],[285,98,339,94],[285,99,339,95],[285,100,339,96],[285,101,339,97],[287,20,341,16,"console"],[287,27,341,23],[287,28,341,24,"log"],[287,31,341,27],[287,32,341,28],[287,53,341,49,"enemy"],[287,58,341,54],[287,59,341,55,"name"],[287,63,341,59],[287,86,341,82,"finalDamage"],[287,97,341,93],[287,109,341,105,"attackDamage"],[287,121,341,117],[287,132,341,128,"Math"],[287,136,341,132],[287,137,341,133,"floor"],[287,142,341,138],[287,143,341,139,"playerDefense"],[287,156,341,152],[287,159,341,155],[287,162,341,158],[287,163,341,159],[287,184,341,180],[287,185,341,181],[289,20,343,16],[290,20,344,16],[290,26,344,22,"newPlayerHealth"],[290,41,344,37],[290,44,344,40,"Math"],[290,48,344,44],[290,49,344,45,"max"],[290,52,344,48],[290,53,344,49],[290,54,344,50],[290,56,344,52,"newState"],[290,64,344,60],[290,65,344,61,"playerStats"],[290,76,344,72],[290,77,344,73,"health"],[290,83,344,79],[290,86,344,82,"finalDamage"],[290,97,344,93],[290,98,344,94],[291,20,345,16,"newState"],[291,28,345,24],[291,29,345,25,"playerStats"],[291,40,345,36],[291,41,345,37,"health"],[291,47,345,43],[291,50,345,46,"newPlayerHealth"],[291,65,345,61],[292,20,347,16,"console"],[292,27,347,23],[292,28,347,24,"log"],[292,31,347,27],[292,32,347,28],[292,53,347,49,"newState"],[292,61,347,57],[292,62,347,58,"playerStats"],[292,73,347,69],[292,74,347,70,"health"],[292,80,347,76],[292,84,347,80,"newState"],[292,92,347,88],[292,93,347,89,"playerStats"],[292,104,347,100],[292,105,347,101,"maxHealth"],[292,114,347,110],[292,124,347,120,"finalDamage"],[292,135,347,131],[292,145,347,141],[292,146,347,142],[294,20,349,16],[295,20,350,16,"enemy"],[295,25,350,21],[295,26,350,22,"lastAttackTick"],[295,40,350,36],[295,43,350,39,"newState"],[295,51,350,47],[295,52,350,48,"currentTick"],[295,63,350,59],[297,20,352,16],[298,20,353,16],[298,24,353,20,"newPlayerHealth"],[298,39,353,35],[298,43,353,39],[298,44,353,40],[298,46,353,42],[299,22,354,18,"console"],[299,29,354,25],[299,30,354,26,"log"],[299,33,354,29],[299,34,354,30],[299,84,354,80],[299,85,354,81],[300,22,355,18],[301,22,356,18,"game"],[301,26,356,22],[301,27,356,23,"updateGameState"],[301,42,356,38],[301,43,356,39],[302,24,356,41,"isAlive"],[302,31,356,48],[302,33,356,50],[303,22,356,56],[303,23,356,57],[303,24,356,58],[304,20,357,16],[305,18,358,16],[306,16,359,14],[307,14,360,12],[308,12,361,10],[308,13,361,11],[308,19,361,17],[309,14,362,12],[310,14,363,12],[311,14,364,12],[311,18,364,16,"distance"],[311,26,364,24],[311,29,364,27],[311,31,364,29],[311,33,364,31],[312,16,365,14],[313,16,366,14],[313,22,366,20,"normalizedX"],[313,33,366,31],[313,36,366,34,"deltaX"],[313,42,366,40],[313,45,366,43,"distance"],[313,53,366,51],[314,16,367,14],[314,22,367,20,"normalizedY"],[314,33,367,31],[314,36,367,34,"deltaY"],[314,42,367,40],[314,45,367,43,"distance"],[314,53,367,51],[316,16,369,14],[317,16,370,14],[317,22,370,20,"randomFactor"],[317,34,370,32],[317,37,370,35],[317,40,370,38],[317,41,370,39],[317,42,370,40],[318,16,371,14],[318,22,371,20,"finalX"],[318,28,371,26],[318,31,371,29,"normalizedX"],[318,42,371,40],[318,45,371,43],[318,46,371,44,"Math"],[318,50,371,48],[318,51,371,49,"random"],[318,57,371,55],[318,58,371,56],[318,59,371,57],[318,62,371,60],[318,65,371,63],[318,69,371,67,"randomFactor"],[318,81,371,79],[319,16,372,14],[319,22,372,20,"finalY"],[319,28,372,26],[319,31,372,29,"normalizedY"],[319,42,372,40],[319,45,372,43],[319,46,372,44,"Math"],[319,50,372,48],[319,51,372,49,"random"],[319,57,372,55],[319,58,372,56],[319,59,372,57],[319,62,372,60],[319,65,372,63],[319,69,372,67,"randomFactor"],[319,81,372,79],[321,16,374,14],[322,16,375,14],[322,20,375,18,"newX"],[322,24,375,22],[322,27,375,25,"enemy"],[322,32,375,30],[322,33,375,31,"position"],[322,41,375,39],[322,42,375,40,"x"],[322,43,375,41],[322,46,375,45,"finalX"],[322,52,375,51],[322,55,375,54,"MOVEMENT_SPEED"],[322,69,375,69],[323,16,376,14],[323,20,376,18,"newY"],[323,24,376,22],[323,27,376,25,"enemy"],[323,32,376,30],[323,33,376,31,"position"],[323,41,376,39],[323,42,376,40,"y"],[323,43,376,41],[323,46,376,45,"finalY"],[323,52,376,51],[323,55,376,54,"MOVEMENT_SPEED"],[323,69,376,69],[325,16,378,14],[326,16,379,14,"newX"],[326,20,379,18],[326,23,379,21,"Math"],[326,27,379,25],[326,28,379,26,"max"],[326,31,379,29],[326,32,379,30],[326,33,379,31],[326,35,379,33,"Math"],[326,39,379,37],[326,40,379,38,"min"],[326,43,379,41],[326,44,379,42,"SCREEN_WIDTH"],[326,56,379,54],[326,59,379,57,"ENEMY_SIZE"],[326,69,379,67],[326,71,379,69,"newX"],[326,75,379,73],[326,76,379,74],[326,77,379,75],[327,16,380,14,"newY"],[327,20,380,18],[327,23,380,21,"Math"],[327,27,380,25],[327,28,380,26,"max"],[327,31,380,29],[327,32,380,30],[327,33,380,31],[327,35,380,33,"Math"],[327,39,380,37],[327,40,380,38,"min"],[327,43,380,41],[327,44,380,42,"GAME_AREA_HEIGHT"],[327,60,380,58],[327,63,380,61,"ENEMY_SIZE"],[327,73,380,71],[327,75,380,73,"newY"],[327,79,380,77],[327,80,380,78],[327,81,380,79],[329,16,382,14],[330,16,383,14,"enemy"],[330,21,383,19],[330,22,383,20,"position"],[330,30,383,28],[330,31,383,29,"x"],[330,32,383,30],[330,35,383,33,"newX"],[330,39,383,37],[331,16,384,14,"enemy"],[331,21,384,19],[331,22,384,20,"position"],[331,30,384,28],[331,31,384,29,"y"],[331,32,384,30],[331,35,384,33,"newY"],[331,39,384,37],[332,14,385,12],[333,14,386,12],[334,12,387,10],[335,10,388,8],[336,8,389,6],[336,9,389,7],[336,10,389,8],[338,8,391,6],[339,8,392,6],[339,12,392,10,"newState"],[339,20,392,18],[339,21,392,19,"shadowClone"],[339,32,392,30],[339,34,392,32],[340,10,393,8],[341,10,394,8,"newState"],[341,18,394,16],[341,19,394,17,"shadowClone"],[341,30,394,28],[341,31,394,29,"remainingTicks"],[341,45,394,43],[341,47,394,45],[343,10,396,8],[344,10,397,8],[344,16,397,14,"cloneOffset"],[344,27,397,25],[344,30,397,28],[344,32,397,30],[344,33,397,31],[344,34,397,32],[345,10,398,8,"newState"],[345,18,398,16],[345,19,398,17,"shadowClone"],[345,30,398,28],[345,31,398,29,"position"],[345,39,398,37],[345,40,398,38,"x"],[345,41,398,39],[345,44,398,42,"currentNinjaPosition"],[345,64,398,62],[345,65,398,63,"x"],[345,66,398,64],[345,69,398,67,"cloneOffset"],[345,80,398,78],[346,10,399,8,"newState"],[346,18,399,16],[346,19,399,17,"shadowClone"],[346,30,399,28],[346,31,399,29,"position"],[346,39,399,37],[346,40,399,38,"y"],[346,41,399,39],[346,44,399,42,"currentNinjaPosition"],[346,64,399,62],[346,65,399,63,"y"],[346,66,399,64],[346,69,399,67],[346,71,399,69],[348,10,401,8],[349,10,402,8],[349,14,402,12,"newState"],[349,22,402,20],[349,23,402,21,"shadowClone"],[349,34,402,32],[349,35,402,33,"remainingTicks"],[349,49,402,47],[349,53,402,51],[349,54,402,52],[349,56,402,54],[350,12,403,10,"console"],[350,19,403,17],[350,20,403,18,"log"],[350,23,403,21],[350,24,403,22],[350,75,403,73],[350,76,403,74],[351,12,404,10,"newState"],[351,20,404,18],[351,21,404,19,"shadowClone"],[351,32,404,30],[351,35,404,33,"undefined"],[351,44,404,42],[352,10,405,8],[352,11,405,9],[352,17,405,15],[353,12,406,10],[354,12,407,10],[355,12,408,10],[355,18,408,16,"CLONE_ATTACK_INTERVAL"],[355,39,408,37],[355,42,408,40],[355,44,408,42],[356,12,409,10],[356,16,409,14,"newState"],[356,24,409,22],[356,25,409,23,"currentTick"],[356,36,409,34],[356,39,409,37,"CLONE_ATTACK_INTERVAL"],[356,60,409,58],[356,65,409,63],[356,66,409,64],[356,70,409,68,"newState"],[356,78,409,76],[356,79,409,77,"enemies"],[356,86,409,84],[356,87,409,85,"length"],[356,93,409,91],[356,96,409,94],[356,97,409,95],[356,99,409,97],[357,14,410,12,"console"],[357,21,410,19],[357,22,410,20,"log"],[357,25,410,23],[357,26,410,24],[357,83,410,81],[357,84,410,82],[359,14,412,12],[360,14,413,12],[360,20,413,18,"target"],[360,26,413,24],[360,29,413,27,"findClosestEnemyInternal"],[360,53,413,51],[360,54,413,52,"newState"],[360,62,413,60],[360,63,413,61,"enemies"],[360,70,413,68],[360,71,413,69],[361,14,414,12],[361,18,414,16,"target"],[361,24,414,22],[361,26,414,24],[362,16,415,14],[363,16,416,14],[363,22,416,20,"cloneDamage"],[363,33,416,31],[363,36,416,34,"Math"],[363,40,416,38],[363,41,416,39,"floor"],[363,46,416,44],[363,47,416,45,"newState"],[363,55,416,53],[363,56,416,54,"playerStats"],[363,67,416,65],[363,68,416,66,"attack"],[363,74,416,72],[363,77,416,75],[363,80,416,78],[363,81,416,79],[365,16,418,14],[366,16,419,14,"createProjectile"],[366,32,419,30],[366,33,419,31,"target"],[366,39,419,37],[366,41,419,39,"cloneDamage"],[366,52,419,50],[366,54,419,52,"newState"],[366,62,419,60],[366,63,419,61,"shadowClone"],[366,74,419,72],[366,75,419,73,"position"],[366,83,419,81],[366,85,419,83],[367,18,420,16,"id"],[367,20,420,18],[367,22,420,20],[367,43,420,41],[368,18,421,16,"name"],[368,22,421,20],[368,24,421,22],[368,45,421,43],[369,18,422,16,"icon"],[369,22,422,20],[369,24,422,22],[370,16,423,14],[370,17,423,15],[370,18,423,16],[371,14,424,12],[372,12,425,10],[373,10,426,8],[374,8,427,6],[376,8,429,6],[377,8,430,6],[378,8,431,6,"console"],[378,15,431,13],[378,16,431,14,"log"],[378,19,431,17],[378,20,431,18],[378,63,431,61,"isManualControlActive"],[378,84,431,82],[378,97,431,95,"game"],[378,101,431,99],[378,102,431,100,"gameState"],[378,111,431,109],[378,112,431,110,"isAlive"],[378,119,431,117],[378,121,431,119],[378,122,431,120],[379,8,432,6],[379,12,432,10],[379,13,432,11,"isManualControlActive"],[379,34,432,32],[379,38,432,36,"game"],[379,42,432,40],[379,43,432,41,"gameState"],[379,52,432,50],[379,53,432,51,"isAlive"],[379,60,432,58],[379,62,432,60],[380,10,433,8],[380,15,433,13],[380,19,433,17,"i"],[380,20,433,18],[380,23,433,21],[380,24,433,22],[380,26,433,24,"i"],[380,27,433,25],[380,30,433,28],[380,31,433,29],[380,33,433,31,"i"],[380,34,433,32],[380,36,433,34],[380,38,433,36],[381,12,434,10],[381,16,434,14,"newState"],[381,24,434,22],[381,25,434,23,"abilityManager"],[381,39,434,37],[381,40,434,38,"isAbilityReady"],[381,54,434,52],[381,55,434,53,"i"],[381,56,434,54],[381,57,434,55],[381,61,434,59,"newState"],[381,69,434,67],[381,70,434,68,"enemies"],[381,77,434,75],[381,78,434,76,"length"],[381,84,434,82],[381,87,434,85],[381,88,434,86],[381,90,434,88],[382,14,435,12],[382,18,435,16,"newState"],[382,26,435,24],[382,27,435,25,"abilityManager"],[382,41,435,39],[382,42,435,40,"useAbility"],[382,52,435,50],[382,53,435,51,"i"],[382,54,435,52],[382,56,435,54,"newTick"],[382,63,435,61],[382,64,435,62],[382,66,435,64],[383,16,436,14,"console"],[383,23,436,21],[383,24,436,22,"log"],[383,27,436,25],[383,28,436,26],[383,73,436,71,"i"],[383,74,436,72],[383,76,436,74],[383,77,436,75],[384,16,437,14,"castAbility"],[384,27,437,25],[384,28,437,26,"newState"],[384,36,437,34],[384,38,437,36,"i"],[384,39,437,37],[384,40,437,38],[385,14,438,12],[386,12,439,10],[387,10,440,8],[388,8,441,6],[390,8,443,6],[391,8,444,6],[392,8,445,6],[392,14,445,12,"allDeadEnemies"],[392,28,445,26],[392,31,445,29,"newState"],[392,39,445,37],[392,40,445,38,"enemies"],[392,47,445,45],[392,48,445,46,"filter"],[392,54,445,52],[392,55,445,53,"enemy"],[392,60,445,58],[392,64,445,62,"enemy"],[392,69,445,67],[392,70,445,68,"health"],[392,76,445,74],[392,80,445,78],[392,81,445,79],[392,82,445,80],[394,8,447,6],[395,8,448,6,"enemiesToKill"],[395,21,448,19],[395,24,448,22],[395,25,448,23],[395,28,448,26,"allDeadEnemies"],[395,42,448,40],[395,43,448,41],[395,44,448,42],[395,45,448,43],[397,8,450,6],[398,8,451,6],[398,12,451,10,"allDeadEnemies"],[398,26,451,24],[398,27,451,25,"length"],[398,33,451,31],[398,36,451,34],[398,37,451,35],[398,39,451,37],[399,10,452,8,"console"],[399,17,452,15],[399,18,452,16,"log"],[399,21,452,19],[399,22,452,20],[399,34,452,32,"allDeadEnemies"],[399,48,452,46],[399,49,452,47,"length"],[399,55,452,53],[399,83,452,81],[399,85,452,83,"allDeadEnemies"],[399,99,452,97],[399,100,452,98,"map"],[399,103,452,101],[399,104,452,102,"e"],[399,105,452,103],[399,109,452,107],[399,112,452,110,"e"],[399,113,452,111],[399,114,452,112,"name"],[399,118,452,116],[399,122,452,120,"e"],[399,123,452,121],[399,124,452,122,"health"],[399,130,452,128],[399,145,452,143,"e"],[399,146,452,144],[399,147,452,145,"isDying"],[399,154,452,152],[399,157,452,155],[399,158,452,156],[399,159,452,157],[400,8,453,6],[402,8,455,6],[403,8,456,6],[403,14,456,12,"currentTime"],[403,25,456,23],[403,28,456,26,"Date"],[403,32,456,30],[403,33,456,31,"now"],[403,36,456,34],[403,37,456,35],[403,38,456,36],[404,8,457,6,"newState"],[404,16,457,14],[404,17,457,15,"enemies"],[404,24,457,22],[404,27,457,25,"newState"],[404,35,457,33],[404,36,457,34,"enemies"],[404,43,457,41],[404,44,457,42,"filter"],[404,50,457,48],[404,51,457,49,"enemy"],[404,56,457,54],[404,60,457,58],[405,10,458,8],[405,14,458,12,"enemy"],[405,19,458,17],[405,20,458,18,"isDying"],[405,27,458,25],[405,31,458,29,"enemy"],[405,36,458,34],[405,37,458,35,"deathStartTime"],[405,51,458,49],[405,53,458,51],[406,12,459,10],[406,18,459,16,"animationDuration"],[406,35,459,33],[406,38,459,36],[406,41,459,39],[406,42,459,40],[406,43,459,41],[407,12,460,10],[407,18,460,16,"isAnimationComplete"],[407,37,460,35],[407,40,460,38,"currentTime"],[407,51,460,49],[407,54,460,52,"enemy"],[407,59,460,57],[407,60,460,58,"deathStartTime"],[407,74,460,72],[407,78,460,76,"animationDuration"],[407,95,460,93],[408,12,461,10],[408,16,461,14,"isAnimationComplete"],[408,35,461,33],[408,37,461,35],[409,14,462,12,"console"],[409,21,462,19],[409,22,462,20,"log"],[409,25,462,23],[409,26,462,24],[409,58,462,56,"enemy"],[409,63,462,61],[409,64,462,62,"name"],[409,68,462,66],[409,86,462,84,"currentTime"],[409,97,462,95],[409,100,462,98,"enemy"],[409,105,462,103],[409,106,462,104,"deathStartTime"],[409,120,462,118],[409,129,462,127],[409,130,462,128],[410,14,463,12],[410,21,463,19],[410,26,463,24],[410,27,463,25],[410,28,463,26],[411,12,464,10],[412,10,465,8],[413,10,466,8],[413,17,466,15],[413,21,466,19],[413,22,466,20],[413,23,466,21],[414,8,467,6],[414,9,467,7],[414,10,467,8],[416,8,469,6],[417,8,470,6],[417,12,470,10,"allDeadEnemies"],[417,26,470,24],[417,27,470,25,"length"],[417,33,470,31],[417,36,470,34],[417,37,470,35],[417,39,470,37],[418,10,471,8,"console"],[418,17,471,15],[418,18,471,16,"log"],[418,21,471,19],[418,22,471,20],[418,49,471,47,"allDeadEnemies"],[418,63,471,61],[418,64,471,62,"length"],[418,70,471,68],[418,86,471,84],[418,88,471,86,"allDeadEnemies"],[418,102,471,100],[418,103,471,101,"map"],[418,106,471,104],[418,107,471,105,"e"],[418,108,471,106],[418,112,471,110],[418,115,471,113,"e"],[418,116,471,114],[418,117,471,115,"id"],[418,119,471,117],[418,123,471,121,"e"],[418,124,471,122],[418,125,471,123,"health"],[418,131,471,129],[418,136,471,134],[418,137,471,135],[418,138,471,136],[419,8,472,6],[421,8,474,6],[422,8,475,6],[422,14,475,12,"lowHealthEnemies"],[422,30,475,28],[422,33,475,31,"newState"],[422,41,475,39],[422,42,475,40,"enemies"],[422,49,475,47],[422,50,475,48,"filter"],[422,56,475,54],[422,57,475,55,"enemy"],[422,62,475,60],[422,66,475,64,"enemy"],[422,71,475,69],[422,72,475,70,"health"],[422,78,475,76],[422,82,475,80],[422,84,475,82],[422,88,475,86,"enemy"],[422,93,475,91],[422,94,475,92,"health"],[422,100,475,98],[422,103,475,101],[422,104,475,102],[422,105,475,103],[423,8,476,6],[423,12,476,10,"lowHealthEnemies"],[423,28,476,26],[423,29,476,27,"length"],[423,35,476,33],[423,38,476,36],[423,39,476,37],[423,41,476,39],[424,10,477,8,"console"],[424,17,477,15],[424,18,477,16,"log"],[424,21,477,19],[424,22,477,20],[424,61,477,59],[424,63,477,61,"lowHealthEnemies"],[424,79,477,77],[424,80,477,78,"map"],[424,83,477,81],[424,84,477,82,"e"],[424,85,477,83],[424,89,477,87],[424,92,477,90,"e"],[424,93,477,91],[424,94,477,92,"id"],[424,96,477,94],[424,100,477,98,"e"],[424,101,477,99],[424,102,477,100,"health"],[424,108,477,106],[424,112,477,110,"e"],[424,113,477,111],[424,114,477,112,"maxHealth"],[424,123,477,121],[424,128,477,126],[424,129,477,127],[424,130,477,128],[425,8,478,6],[427,8,480,6],[428,8,481,6],[428,14,481,12,"beforeCount"],[428,25,481,23],[428,28,481,26,"newState"],[428,36,481,34],[428,37,481,35,"enemies"],[428,44,481,42],[428,45,481,43,"length"],[428,51,481,49],[429,8,482,6,"newState"],[429,16,482,14],[429,17,482,15,"enemies"],[429,24,482,22],[429,27,482,25,"newState"],[429,35,482,33],[429,36,482,34,"enemies"],[429,43,482,41],[429,44,482,42,"filter"],[429,50,482,48],[429,51,482,49,"enemy"],[429,56,482,54],[429,60,482,58,"enemy"],[429,65,482,63],[429,66,482,64,"health"],[429,72,482,70],[429,75,482,73],[429,76,482,74],[429,77,482,75],[430,8,483,6],[430,14,483,12,"afterCount"],[430,24,483,22],[430,27,483,25,"newState"],[430,35,483,33],[430,36,483,34,"enemies"],[430,43,483,41],[430,44,483,42,"length"],[430,50,483,48],[431,8,485,6],[431,12,485,10,"beforeCount"],[431,23,485,21],[431,28,485,26,"afterCount"],[431,38,485,36],[431,40,485,38],[432,10,486,8,"console"],[432,17,486,15],[432,18,486,16,"log"],[432,21,486,19],[432,22,486,20],[432,52,486,50,"beforeCount"],[432,63,486,61],[432,66,486,64,"afterCount"],[432,76,486,74],[432,102,486,100],[432,103,486,101],[433,8,487,6],[435,8,489,6],[436,8,490,6],[437,8,491,6],[437,14,491,12,"MAX_ENEMIES"],[437,25,491,23],[437,28,491,26],[437,30,491,28],[437,31,491,29],[437,32,491,30],[438,8,492,6],[438,14,492,12,"MIN_SPAWN_DELAY"],[438,29,492,27],[438,32,492,30],[438,35,492,33],[438,36,492,34],[438,37,492,35],[439,8,493,6],[439,14,493,12,"now"],[439,17,493,15],[439,20,493,18,"Date"],[439,24,493,22],[439,25,493,23,"now"],[439,28,493,26],[439,29,493,27],[439,30,493,28],[440,8,494,6],[440,14,494,12,"hasBoss"],[440,21,494,19],[440,24,494,22,"newState"],[440,32,494,30],[440,33,494,31,"enemies"],[440,40,494,38],[440,41,494,39,"some"],[440,45,494,43],[440,46,494,44,"enemy"],[440,51,494,49],[440,55,494,53,"enemy"],[440,60,494,58],[440,61,494,59,"isBoss"],[440,67,494,65],[440,68,494,66],[442,8,496,6],[443,8,497,6],[443,12,497,10],[443,13,497,11,"newState"],[443,21,497,19],[443,22,497,20,"lastSpawnTime"],[443,35,497,33],[443,37,497,35],[444,10,498,8,"newState"],[444,18,498,16],[444,19,498,17,"lastSpawnTime"],[444,32,498,30],[444,35,498,33,"now"],[444,38,498,36],[445,8,499,6],[446,8,501,6,"console"],[446,15,501,13],[446,16,501,14,"log"],[446,19,501,17],[446,20,501,18],[446,53,501,51,"newState"],[446,61,501,59],[446,62,501,60,"enemies"],[446,69,501,67],[446,70,501,68,"length"],[446,76,501,74],[446,85,501,83,"MAX_ENEMIES"],[446,96,501,94],[446,109,501,107,"hasBoss"],[446,116,501,114],[446,118,501,116],[446,119,501,117],[448,8,503,6],[449,8,504,6],[449,12,504,10],[449,13,504,11,"hasBoss"],[449,20,504,18],[449,24,504,22,"newState"],[449,32,504,30],[449,33,504,31,"enemies"],[449,40,504,38],[449,41,504,39,"length"],[449,47,504,45],[449,50,504,48,"MAX_ENEMIES"],[449,61,504,59],[449,65,504,64,"now"],[449,68,504,67],[449,71,504,70,"newState"],[449,79,504,78],[449,80,504,79,"lastSpawnTime"],[449,93,504,92],[449,97,504,97,"MIN_SPAWN_DELAY"],[449,112,504,112],[449,114,504,114],[450,10,505,8,"console"],[450,17,505,15],[450,18,505,16,"log"],[450,21,505,19],[450,22,505,20],[450,43,505,41,"newState"],[450,51,505,49],[450,52,505,50,"enemies"],[450,59,505,57],[450,60,505,58,"length"],[450,66,505,64],[450,69,505,67],[450,70,505,68],[450,74,505,72,"MAX_ENEMIES"],[450,85,505,83],[450,87,505,85],[450,88,505,86],[451,10,506,8,"spawnTestEnemy"],[451,24,506,22],[451,25,506,23,"newState"],[451,33,506,31],[451,34,506,32],[452,10,507,8,"newState"],[452,18,507,16],[452,19,507,17,"lastSpawnTime"],[452,32,507,30],[452,35,507,33,"now"],[452,38,507,36],[453,8,508,6],[454,8,510,6],[454,15,510,13,"newState"],[454,23,510,21],[455,6,511,4],[455,7,511,5],[455,47,511,6],[457,6,513,4],[458,6,514,4],[458,10,514,8,"enemiesToKill"],[458,23,514,21],[458,24,514,22,"length"],[458,30,514,28],[458,33,514,31],[458,34,514,32],[458,36,514,34],[459,8,515,6],[460,8,516,6],[461,8,517,6],[461,14,517,12,"unprocessedEnemies"],[461,32,517,30],[461,35,517,33,"enemiesToKill"],[461,48,517,46],[461,49,517,47],[461,50,517,48],[463,8,519,6],[464,8,520,6,"console"],[464,15,520,13],[464,16,520,14,"log"],[464,19,520,17],[464,20,520,18],[464,62,520,60],[464,64,520,62,"enemiesToKill"],[464,77,520,75],[464,78,520,76,"map"],[464,81,520,79],[464,82,520,80,"e"],[464,83,520,81],[464,88,520,86],[465,10,520,87,"id"],[465,12,520,89],[465,14,520,91,"e"],[465,15,520,92],[465,16,520,93,"id"],[465,18,520,95],[466,10,520,97,"name"],[466,14,520,101],[466,16,520,103,"e"],[466,17,520,104],[466,18,520,105,"name"],[466,22,520,109],[467,10,520,111,"xpAwarded"],[467,19,520,120],[467,21,520,122,"e"],[467,22,520,123],[467,23,520,124,"xpAwarded"],[468,8,520,133],[468,9,520,134],[468,10,520,135],[468,11,520,136],[468,12,520,137],[469,8,521,6,"console"],[469,15,521,13],[469,16,521,14,"log"],[469,19,521,17],[469,20,521,18],[469,43,521,41,"enemiesToKill"],[469,56,521,54],[469,57,521,55,"length"],[469,63,521,61],[469,80,521,78,"unprocessedEnemies"],[469,98,521,96],[469,99,521,97,"length"],[469,105,521,103],[469,119,521,117],[469,120,521,118],[470,8,523,6],[470,12,523,10,"unprocessedEnemies"],[470,30,523,28],[470,31,523,29,"length"],[470,37,523,35],[470,40,523,38],[470,41,523,39],[470,43,523,41],[471,10,524,8],[472,10,525,8],[472,14,525,12,"totalXP"],[472,21,525,19],[472,24,525,22],[472,25,525,23],[473,10,526,8],[473,14,526,12,"totalGold"],[473,23,526,21],[473,26,526,24],[473,27,526,25],[474,10,527,8],[474,16,527,14,"zoneKills"],[474,25,527,30],[474,28,527,33],[474,30,527,35],[475,10,529,8],[475,16,529,14,"xpMultiplier"],[475,28,529,26],[475,31,529,29,"game"],[475,35,529,33],[475,36,529,34,"gameState"],[475,45,529,43],[475,46,529,44,"subscriptionBenefits"],[475,66,529,64],[475,68,529,66,"xp_multiplier"],[475,81,529,79],[475,85,529,83],[475,88,529,86],[476,10,530,8],[476,16,530,14,"goldMultiplier"],[476,30,530,28],[476,33,530,31,"game"],[476,37,530,35],[476,38,530,36,"gameState"],[476,47,530,45],[476,48,530,46,"subscriptionBenefits"],[476,68,530,66],[476,70,530,68,"drop_multiplier"],[476,85,530,83],[476,89,530,87],[476,92,530,90],[477,10,532,8,"unprocessedEnemies"],[477,28,532,26],[477,29,532,27,"forEach"],[477,36,532,34],[477,37,532,35,"enemy"],[477,42,532,40],[477,46,532,44],[478,12,533,10,"totalXP"],[478,19,533,17],[478,23,533,21],[478,24,533,22,"enemy"],[478,29,533,27],[478,30,533,28,"zoneXP"],[478,36,533,34],[478,40,533,38],[478,41,533,39],[478,45,533,43,"xpMultiplier"],[478,57,533,55],[479,12,534,10,"totalGold"],[479,21,534,19],[479,25,534,23],[479,27,534,25],[479,30,534,28,"goldMultiplier"],[479,44,534,42],[480,12,536,10],[480,16,536,14,"enemy"],[480,21,536,19],[480,22,536,20,"zoneTypeId"],[480,32,536,30],[480,34,536,32],[481,14,537,12,"zoneKills"],[481,23,537,21],[481,24,537,22,"push"],[481,28,537,26],[481,29,537,27],[482,16,538,14,"id"],[482,18,538,16],[482,20,538,18,"enemy"],[482,25,538,23],[482,26,538,24,"id"],[482,28,538,26],[483,16,539,14,"typeId"],[483,22,539,20],[483,24,539,22,"enemy"],[483,29,539,27],[483,30,539,28,"zoneTypeId"],[483,40,539,38],[484,16,540,14,"name"],[484,20,540,18],[484,22,540,20,"enemy"],[484,27,540,25],[484,28,540,26,"name"],[484,32,540,30],[485,16,541,14,"icon"],[485,20,541,18],[485,22,541,20],[485,26,541,24],[486,16,542,14,"hp"],[486,18,542,16],[486,20,542,18],[486,21,542,19],[487,16,543,14,"maxHP"],[487,21,543,19],[487,23,543,21,"enemy"],[487,28,543,26],[487,29,543,27,"maxHealth"],[487,38,543,36],[488,16,544,14,"attack"],[488,22,544,20],[488,24,544,22,"enemy"],[488,29,544,27],[488,30,544,28,"stats"],[488,35,544,33],[488,36,544,34,"attack"],[488,42,544,40],[489,16,545,14,"xp"],[489,18,545,16],[489,20,545,18,"enemy"],[489,25,545,23],[489,26,545,24,"zoneXP"],[489,32,545,30],[489,36,545,34],[489,37,545,35],[490,16,546,14,"position"],[490,24,546,22],[490,26,546,24,"enemy"],[490,31,546,29],[490,32,546,30,"position"],[491,14,547,12],[491,15,547,13],[491,16,547,14],[492,12,548,10],[493,10,549,8],[493,11,549,9],[493,12,549,10],[495,10,551,8],[496,10,552,8,"game"],[496,14,552,12],[496,15,552,13,"updateNinja"],[496,26,552,24],[496,27,552,25,"prev"],[496,31,552,29],[496,36,552,34],[497,12,553,10,"experience"],[497,22,553,20],[497,24,553,22,"prev"],[497,28,553,26],[497,29,553,27,"experience"],[497,39,553,37],[497,42,553,40,"totalXP"],[497,49,553,47],[498,12,554,10,"gold"],[498,16,554,14],[498,18,554,16,"prev"],[498,22,554,20],[498,23,554,21,"gold"],[498,27,554,25],[498,30,554,28,"totalGold"],[499,10,555,8],[499,11,555,9],[499,12,555,10],[499,13,555,11],[501,10,557,8],[502,10,558,8,"zoneKills"],[502,19,558,17],[502,20,558,18,"forEach"],[502,27,558,25],[502,28,558,26,"zoneEnemy"],[502,37,558,35],[502,41,558,39,"recordEnemyKill"],[502,56,558,54],[502,57,558,55,"zoneEnemy"],[502,66,558,64],[502,67,558,65],[502,68,558,66],[504,10,560,8],[505,10,561,8,"setCombatState"],[505,24,561,22],[505,25,561,23,"prev"],[505,29,561,27],[505,34,561,32],[506,12,562,10],[506,15,562,13,"prev"],[506,19,562,17],[507,12,563,10,"enemies"],[507,19,563,17],[507,21,563,19,"prev"],[507,25,563,23],[507,26,563,24,"enemies"],[507,33,563,31],[507,34,563,32,"map"],[507,37,563,35],[507,38,563,36,"enemy"],[507,43,563,41],[507,47,563,45],[508,14,564,12],[508,20,564,18,"wasProcessed"],[508,32,564,30],[508,35,564,33,"unprocessedEnemies"],[508,53,564,51],[508,54,564,52,"find"],[508,58,564,56],[508,59,564,57,"processed"],[508,68,564,66],[508,72,564,70,"processed"],[508,81,564,79],[508,82,564,80,"id"],[508,84,564,82],[508,89,564,87,"enemy"],[508,94,564,92],[508,95,564,93,"id"],[508,97,564,95],[508,98,564,96],[509,14,565,12],[509,21,565,19,"wasProcessed"],[509,33,565,31],[509,36,565,34],[510,16,565,36],[510,19,565,39,"enemy"],[510,24,565,44],[511,16,565,46,"xpAwarded"],[511,25,565,55],[511,27,565,57],[512,14,565,62],[512,15,565,63],[512,18,565,66,"enemy"],[512,23,565,71],[513,12,566,10],[513,13,566,11],[514,10,567,8],[514,11,567,9],[514,12,567,10],[514,13,567,11],[515,8,568,6],[516,6,569,4],[517,4,570,2],[517,5,570,3],[517,7,570,5],[517,8,570,6,"game"],[517,12,570,10],[517,13,570,11,"updateNinja"],[517,24,570,22],[517,26,570,24,"game"],[517,30,570,28],[517,31,570,29,"gameState"],[517,40,570,38],[517,41,570,39,"subscriptionBenefits"],[517,61,570,59],[517,63,570,61,"recordEnemyKill"],[517,78,570,76],[517,80,570,78,"spawnTestEnemy"],[517,94,570,92],[517,96,570,94,"spawnZoneEnemy"],[517,110,570,108],[517,111,570,109],[517,112,570,110],[517,113,570,111],[517,114,570,112],[519,4,572,2],[520,4,573,2],[520,10,573,8,"findClosestEnemyInternal"],[520,34,573,32],[520,37,573,36,"enemies"],[520,44,573,58],[520,48,573,83],[521,6,574,4],[521,10,574,8,"enemies"],[521,17,574,15],[521,18,574,16,"length"],[521,24,574,22],[521,29,574,27],[521,30,574,28],[521,32,574,30],[521,39,574,37],[521,43,574,41],[523,6,576,4],[524,6,577,4],[524,12,577,10,"SCREEN_WIDTH"],[524,24,577,22],[524,27,577,25],[524,30,577,28],[525,6,578,4],[525,12,578,10,"GAME_AREA_HEIGHT"],[525,28,578,26],[525,31,578,29],[525,34,578,32],[525,37,578,35],[525,40,578,38],[525,41,578,39],[525,42,578,40],[526,6,579,4],[526,12,579,10,"ninjaX"],[526,18,579,16],[526,21,579,19,"SCREEN_WIDTH"],[526,33,579,31],[526,36,579,34],[526,37,579,35],[527,6,580,4],[527,12,580,10,"ninjaY"],[527,18,580,16],[527,21,580,19,"GAME_AREA_HEIGHT"],[527,37,580,35],[527,40,580,38],[527,41,580,39],[528,6,582,4],[528,10,582,8,"closestEnemy"],[528,22,582,20],[528,25,582,23,"enemies"],[528,32,582,30],[528,33,582,31],[528,34,582,32],[528,35,582,33],[529,6,583,4],[529,10,583,8,"closestDistance"],[529,25,583,23],[529,28,583,26,"Infinity"],[529,36,583,34],[530,6,585,4,"enemies"],[530,13,585,11],[530,14,585,12,"forEach"],[530,21,585,19],[530,22,585,20,"enemy"],[530,27,585,25],[530,31,585,29],[531,8,586,6],[531,14,586,12,"distance"],[531,22,586,20],[531,25,586,23,"Math"],[531,29,586,27],[531,30,586,28,"sqrt"],[531,34,586,32],[531,35,587,8,"Math"],[531,39,587,12],[531,40,587,13,"pow"],[531,43,587,16],[531,44,587,17,"enemy"],[531,49,587,22],[531,50,587,23,"position"],[531,58,587,31],[531,59,587,32,"x"],[531,60,587,33],[531,63,587,36,"ninjaX"],[531,69,587,42],[531,71,587,44],[531,72,587,45],[531,73,587,46],[531,76,588,8,"Math"],[531,80,588,12],[531,81,588,13,"pow"],[531,84,588,16],[531,85,588,17,"enemy"],[531,90,588,22],[531,91,588,23,"position"],[531,99,588,31],[531,100,588,32,"y"],[531,101,588,33],[531,104,588,36,"ninjaY"],[531,110,588,42],[531,112,588,44],[531,113,588,45],[531,114,589,6],[531,115,589,7],[532,8,591,6],[532,12,591,10,"distance"],[532,20,591,18],[532,23,591,21,"closestDistance"],[532,38,591,36],[532,40,591,38],[533,10,592,8,"closestDistance"],[533,25,592,23],[533,28,592,26,"distance"],[533,36,592,34],[534,10,593,8,"closestEnemy"],[534,22,593,20],[534,25,593,23,"enemy"],[534,30,593,28],[535,8,594,6],[536,6,595,4],[536,7,595,5],[536,8,595,6],[537,6,597,4,"console"],[537,13,597,11],[537,14,597,12,"log"],[537,17,597,15],[537,18,597,16],[537,60,597,58,"closestDistance"],[537,75,597,73],[537,76,597,74,"toFixed"],[537,83,597,81],[537,84,597,82],[537,85,597,83],[537,86,597,84],[537,88,597,86],[537,89,597,87],[538,6,598,4],[538,13,598,11,"closestEnemy"],[538,25,598,23],[539,4,599,2],[539,5,599,3],[541,4,601,2],[542,4,602,2],[542,10,602,8,"findClosestEnemy"],[542,26,602,24],[542,29,602,27,"findClosestEnemy"],[542,30,602,27],[542,35,602,53],[543,6,603,4],[543,13,603,11,"findClosestEnemyInternal"],[543,37,603,35],[543,38,603,36,"combatState"],[543,49,603,47],[543,50,603,48,"enemies"],[543,57,603,55],[543,58,603,56],[544,4,604,2],[544,5,604,3],[546,4,606,2],[547,4,607,2],[548,4,608,2],[548,10,608,8],[548,11,608,9,"currentNinjaPosition"],[548,31,608,29],[548,33,608,31,"setCurrentNinjaPosition"],[548,56,608,54],[548,57,608,55],[548,60,608,58],[548,64,608,58,"useState"],[548,70,608,66],[548,71,608,66,"useState"],[548,79,608,66],[548,81,608,91],[549,6,608,93,"x"],[549,7,608,94],[549,9,608,96],[549,12,608,99],[550,6,608,101,"y"],[550,7,608,102],[550,9,608,104],[551,4,608,108],[551,5,608,109],[551,6,608,110],[552,4,609,2],[552,10,609,8],[552,11,609,9,"isManualControlActive"],[552,32,609,30],[552,34,609,32,"setIsManualControlActive"],[552,58,609,56],[552,59,609,57],[552,62,609,60],[552,66,609,60,"useState"],[552,72,609,68],[552,73,609,68,"useState"],[552,81,609,68],[552,83,609,69],[552,88,609,74],[552,89,609,75],[554,4,611,2],[555,4,612,2],[555,10,612,8,"updateNinjaPosition"],[555,29,612,27],[555,32,612,30],[555,36,612,30,"useCallback"],[555,42,612,41],[555,43,612,41,"useCallback"],[555,54,612,41],[555,56,612,43,"newPosition"],[555,67,612,78],[555,71,612,83],[556,6,613,4,"setCurrentNinjaPosition"],[556,29,613,27],[556,30,613,28,"newPosition"],[556,41,613,39],[556,42,613,40],[557,4,614,2],[557,5,614,3],[557,7,614,5],[557,9,614,7],[557,10,614,8],[559,4,616,2],[560,4,617,2],[560,10,617,8,"setManualControlActive"],[560,32,617,30],[560,35,617,33],[560,39,617,33,"useCallback"],[560,45,617,44],[560,46,617,44,"useCallback"],[560,57,617,44],[560,59,617,46,"active"],[560,65,617,61],[560,69,617,66],[561,6,618,4,"setIsManualControlActive"],[561,30,618,28],[561,31,618,29,"active"],[561,37,618,35],[561,38,618,36],[562,6,619,4,"console"],[562,13,619,11],[562,14,619,12,"log"],[562,17,619,15],[562,18,619,16],[562,39,619,37,"active"],[562,45,619,43],[562,48,619,46],[562,59,619,57],[562,62,619,60],[562,75,619,73],[562,88,619,86,"active"],[562,94,619,92],[562,97,619,95],[562,105,619,103],[562,108,619,106],[562,117,619,115],[562,119,619,117],[562,120,619,118],[563,4,620,2],[563,5,620,3],[563,7,620,5],[563,9,620,7],[563,10,620,8],[565,4,622,2],[566,4,623,2],[567,4,624,2],[569,4,626,2],[570,4,627,2],[570,10,627,8,"castAbility"],[570,21,627,19],[570,24,627,22,"castAbility"],[570,25,627,23,"state"],[570,30,627,41],[570,32,627,43,"slotIndex"],[570,41,627,60],[570,46,627,65],[571,6,628,4],[571,12,628,10,"deck"],[571,16,628,14],[571,19,628,17,"state"],[571,24,628,22],[571,25,628,23,"abilityManager"],[571,39,628,37],[571,40,628,38,"getDeck"],[571,47,628,45],[571,48,628,46],[571,49,628,47],[572,6,629,4],[572,12,629,10,"ability"],[572,19,629,17],[572,22,629,20,"deck"],[572,26,629,24],[572,27,629,25,"slots"],[572,32,629,30],[572,33,629,31,"slotIndex"],[572,42,629,40],[572,43,629,41],[573,6,630,4],[573,10,630,8],[573,11,630,9,"ability"],[573,18,630,16],[573,20,630,18],[574,6,632,4,"console"],[574,13,632,11],[574,14,632,12,"log"],[574,17,632,15],[574,18,632,16],[574,43,632,41,"ability"],[574,50,632,48],[574,51,632,49,"id"],[574,53,632,51],[574,67,632,65,"slotIndex"],[574,76,632,74],[574,78,632,76],[574,79,632,77],[576,6,634,4],[577,6,635,4],[577,10,635,8,"damage"],[577,16,635,14],[577,19,635,17,"ability"],[577,26,635,24],[577,27,635,25,"stats"],[577,32,635,30],[577,33,635,31,"baseDamage"],[577,43,635,41],[579,6,637,4],[580,6,638,4,"deck"],[580,10,638,8],[580,11,638,9,"activeSynergies"],[580,26,638,24],[580,27,638,25,"forEach"],[580,34,638,32],[580,35,638,33,"synergy"],[580,42,638,40],[580,46,638,44],[581,8,639,6],[581,12,639,10,"synergy"],[581,19,639,17],[581,20,639,18,"bonus"],[581,25,639,23],[581,26,639,24,"damageBonus"],[581,37,639,35],[581,41,640,10,"synergy"],[581,48,640,17],[581,49,640,18,"requiredTags"],[581,61,640,30],[581,62,640,31,"some"],[581,66,640,35],[581,67,640,36,"tag"],[581,70,640,39],[581,74,640,43,"ability"],[581,81,640,50],[581,82,640,51,"tags"],[581,86,640,55],[581,87,640,56,"includes"],[581,95,640,64],[581,96,640,65,"tag"],[581,99,640,68],[581,100,640,69],[581,101,640,70],[581,103,640,72],[582,10,641,8,"damage"],[582,16,641,14],[582,20,641,19],[582,21,641,20],[582,24,641,23,"synergy"],[582,31,641,30],[582,32,641,31,"bonus"],[582,37,641,36],[582,38,641,37,"damageBonus"],[582,49,641,48],[582,52,641,51],[582,55,641,55],[583,8,642,6],[584,6,643,4],[584,7,643,5],[584,8,643,6],[586,6,645,4],[587,6,646,4],[587,12,646,10,"isAOE"],[587,17,646,15],[587,20,646,18,"ability"],[587,27,646,25],[587,28,646,26,"effects"],[587,35,646,33],[587,36,646,34,"includes"],[587,44,646,42],[587,45,646,43],[587,50,646,48],[587,51,646,49],[587,55,646,53,"ability"],[587,62,646,60],[587,63,646,61,"stats"],[587,68,646,66],[587,69,646,67,"aoeRadius"],[587,78,646,76],[588,6,647,4,"console"],[588,13,647,11],[588,14,647,12,"log"],[588,17,647,15],[588,18,647,16],[588,39,647,37,"ability"],[588,46,647,44],[588,47,647,45,"name"],[588,51,647,49],[588,66,647,64,"JSON"],[588,70,647,68],[588,71,647,69,"stringify"],[588,80,647,78],[588,81,647,79,"ability"],[588,88,647,86],[588,89,647,87,"effects"],[588,96,647,94],[588,97,647,95],[588,113,647,111,"ability"],[588,120,647,118],[588,121,647,119,"stats"],[588,126,647,124],[588,127,647,125,"aoeRadius"],[588,136,647,134],[588,148,647,146,"isAOE"],[588,153,647,151],[588,155,647,153],[588,156,647,154],[589,6,649,4],[589,10,649,8,"isAOE"],[589,15,649,13],[589,17,649,15],[590,8,650,6,"console"],[590,15,650,13],[590,16,650,14,"log"],[590,19,650,17],[590,20,650,18],[590,39,650,37,"ability"],[590,46,650,44],[590,47,650,45,"name"],[590,51,650,49],[590,67,650,65,"ability"],[590,74,650,72],[590,75,650,73,"stats"],[590,80,650,78],[590,81,650,79,"aoeRadius"],[590,90,650,88],[590,92,650,90],[590,93,650,91],[592,8,652,6],[593,8,653,6],[594,8,654,6],[594,14,654,12,"ninjaX"],[594,20,654,18],[594,23,654,21,"currentNinjaPosition"],[594,43,654,41],[594,44,654,42,"x"],[594,45,654,43],[594,48,654,46],[594,50,654,48],[594,51,654,49],[594,52,654,50],[595,8,655,6],[595,14,655,12,"ninjaY"],[595,20,655,18],[595,23,655,21,"currentNinjaPosition"],[595,43,655,41],[595,44,655,42,"y"],[595,45,655,43],[595,48,655,46],[595,50,655,48],[596,8,656,6],[596,14,656,12,"aoeRadius"],[596,23,656,21],[596,26,656,24,"ability"],[596,33,656,31],[596,34,656,32,"stats"],[596,39,656,37],[596,40,656,38,"aoeRadius"],[596,49,656,47],[597,8,658,6],[597,14,658,12,"enemiesInRange"],[597,28,658,26],[597,31,658,29,"state"],[597,36,658,34],[597,37,658,35,"enemies"],[597,44,658,42],[597,45,658,43,"filter"],[597,51,658,49],[597,52,658,50,"enemy"],[597,57,658,55],[597,61,658,59],[598,10,659,8],[598,16,659,14,"enemyX"],[598,22,659,20],[598,25,659,23,"enemy"],[598,30,659,28],[598,31,659,29,"position"],[598,39,659,37],[598,40,659,38,"x"],[598,41,659,39],[598,44,659,42],[598,48,659,46],[598,49,659,47],[598,50,659,48],[599,10,660,8],[599,16,660,14,"enemyY"],[599,22,660,20],[599,25,660,23,"enemy"],[599,30,660,28],[599,31,660,29,"position"],[599,39,660,37],[599,40,660,38,"y"],[599,41,660,39],[599,44,660,42],[599,48,660,46],[600,10,661,8],[600,16,661,14,"distance"],[600,24,661,22],[600,27,661,25,"Math"],[600,31,661,29],[600,32,661,30,"sqrt"],[600,36,661,34],[600,37,661,35,"Math"],[600,41,661,39],[600,42,661,40,"pow"],[600,45,661,43],[600,46,661,44,"enemyX"],[600,52,661,50],[600,55,661,53,"ninjaX"],[600,61,661,59],[600,63,661,61],[600,64,661,62],[600,65,661,63],[600,68,661,66,"Math"],[600,72,661,70],[600,73,661,71,"pow"],[600,76,661,74],[600,77,661,75,"enemyY"],[600,83,661,81],[600,86,661,84,"ninjaY"],[600,92,661,90],[600,94,661,92],[600,95,661,93],[600,96,661,94],[600,97,661,95],[601,10,662,8],[601,17,662,15,"distance"],[601,25,662,23],[601,29,662,27,"aoeRadius"],[601,38,662,36],[602,8,663,6],[602,9,663,7],[602,10,663,8],[603,8,665,6,"console"],[603,15,665,13],[603,16,665,14,"log"],[603,19,665,17],[603,20,665,18],[603,45,665,43,"enemiesInRange"],[603,59,665,57],[603,60,665,58,"length"],[603,66,665,64],[603,88,665,86,"aoeRadius"],[603,97,665,95],[603,107,665,105],[603,108,665,106],[605,8,667,6],[606,8,668,6,"enemiesInRange"],[606,22,668,20],[606,23,668,21,"forEach"],[606,30,668,28],[606,31,668,29,"enemy"],[606,36,668,34],[606,40,668,38],[607,10,669,8],[607,16,669,14,"damageResult"],[607,28,669,26],[607,31,669,29,"DamageCalculator"],[607,50,669,45],[607,51,669,45,"DamageCalculator"],[607,67,669,45],[607,68,669,46,"calculateDamage"],[607,83,669,61],[607,84,669,62,"damage"],[607,90,669,68],[607,92,669,70,"state"],[607,97,669,75],[607,98,669,76,"playerStats"],[607,109,669,87],[607,111,669,89,"enemy"],[607,116,669,94],[607,117,669,95,"stats"],[607,122,669,100],[607,123,669,101],[608,10,670,8,"createProjectile"],[608,26,670,24],[608,27,670,25,"enemy"],[608,32,670,30],[608,34,670,32,"damageResult"],[608,46,670,44],[608,47,670,45,"damage"],[608,53,670,51],[608,55,670,53,"currentNinjaPosition"],[608,75,670,73],[608,77,670,75],[609,12,671,10,"id"],[609,14,671,12],[609,16,671,14,"ability"],[609,23,671,21],[609,24,671,22,"id"],[609,26,671,24],[610,12,672,10,"name"],[610,16,672,14],[610,18,672,16,"ability"],[610,25,672,23],[610,26,672,24,"name"],[610,30,672,28],[611,12,673,10,"icon"],[611,16,673,14],[611,18,673,16,"ability"],[611,25,673,23],[611,26,673,24,"icon"],[612,10,674,8],[612,11,674,9],[612,12,674,10],[613,10,675,8,"console"],[613,17,675,15],[613,18,675,16,"log"],[613,21,675,19],[613,22,675,20],[613,37,675,35,"enemy"],[613,42,675,40],[613,43,675,41,"name"],[613,47,675,45],[613,55,675,53,"damageResult"],[613,67,675,65],[613,68,675,66,"damage"],[613,74,675,72],[613,83,675,81],[613,84,675,82],[615,10,677,8],[616,10,678,8],[616,14,678,12,"damageResult"],[616,26,678,24],[616,27,678,25,"damage"],[616,33,678,31],[616,37,678,35,"enemy"],[616,42,678,40],[616,43,678,41,"health"],[616,49,678,47],[616,51,678,49],[617,12,679,10,"console"],[617,19,679,17],[617,20,679,18,"log"],[617,23,679,21],[617,24,679,22],[617,67,679,65,"enemy"],[617,72,679,70],[617,73,679,71,"name"],[617,77,679,75],[617,90,679,88,"damageResult"],[617,102,679,100],[617,103,679,101,"damage"],[617,109,679,107],[617,124,679,122,"enemy"],[617,129,679,127],[617,130,679,128,"health"],[617,136,679,134],[617,139,679,137],[617,140,679,138],[618,10,680,8],[619,8,681,6],[619,9,681,7],[619,10,681,8],[620,8,683,6,"console"],[620,15,683,13],[620,16,683,14,"log"],[620,19,683,17],[620,20,683,18],[620,26,683,24,"ability"],[620,33,683,31],[620,34,683,32,"name"],[620,38,683,36],[620,56,683,54,"enemiesInRange"],[620,70,683,68],[620,71,683,69,"length"],[620,77,683,75],[620,93,683,91,"damage"],[620,99,683,97],[620,118,683,116],[620,119,683,117],[621,6,685,4],[621,7,685,5],[621,13,685,11],[622,8,686,6],[623,8,687,6],[623,14,687,12,"target"],[623,20,687,18],[623,23,687,21,"findClosestEnemyInternal"],[623,47,687,45],[623,48,687,46,"state"],[623,53,687,51],[623,54,687,52,"enemies"],[623,61,687,59],[623,62,687,60],[624,8,688,6],[624,12,688,10],[624,13,688,11,"target"],[624,19,688,17],[624,21,688,19],[625,8,690,6],[625,14,690,12,"damageResult"],[625,26,690,24],[625,29,690,27,"DamageCalculator"],[625,48,690,43],[625,49,690,43,"DamageCalculator"],[625,65,690,43],[625,66,690,44,"calculateDamage"],[625,81,690,59],[625,82,690,60,"damage"],[625,88,690,66],[625,90,690,68,"state"],[625,95,690,73],[625,96,690,74,"playerStats"],[625,107,690,85],[625,109,690,87,"target"],[625,115,690,93],[625,116,690,94,"stats"],[625,121,690,99],[625,122,690,100],[627,8,692,6],[628,8,693,6,"console"],[628,15,693,13],[628,16,693,14,"log"],[628,19,693,17],[628,20,693,18],[628,71,693,69,"target"],[628,77,693,75],[628,78,693,76,"name"],[628,82,693,80],[628,91,693,89,"damageResult"],[628,103,693,101],[628,104,693,102,"damage"],[628,110,693,108],[628,119,693,117],[628,120,693,118],[629,8,694,6,"createProjectile"],[629,24,694,22],[629,25,694,23,"target"],[629,31,694,29],[629,33,694,31,"damageResult"],[629,45,694,43],[629,46,694,44,"damage"],[629,52,694,50],[629,54,694,52,"currentNinjaPosition"],[629,74,694,72],[629,76,694,74],[630,10,695,8,"id"],[630,12,695,10],[630,14,695,12,"ability"],[630,21,695,19],[630,22,695,20,"id"],[630,24,695,22],[631,10,696,8,"name"],[631,14,696,12],[631,16,696,14,"ability"],[631,23,696,21],[631,24,696,22,"name"],[631,28,696,26],[632,10,697,8,"icon"],[632,14,697,12],[632,16,697,14,"ability"],[632,23,697,21],[632,24,697,22,"icon"],[633,8,698,6],[633,9,698,7],[633,10,698,8],[634,8,700,6,"console"],[634,15,700,13],[634,16,700,14,"log"],[634,19,700,17],[634,20,700,18],[634,26,700,24,"ability"],[634,33,700,31],[634,34,700,32,"name"],[634,38,700,36],[634,66,700,64,"damageResult"],[634,78,700,76],[634,79,700,77,"damage"],[634,85,700,83],[634,95,700,93,"damageResult"],[634,107,700,105],[634,108,700,106,"isCritical"],[634,118,700,116],[634,121,700,119],[634,131,700,129],[634,134,700,132],[634,136,700,134],[634,138,700,136],[634,139,700,137],[636,8,702,6],[637,8,703,6],[637,12,703,10,"damageResult"],[637,24,703,22],[637,25,703,23,"damage"],[637,31,703,29],[637,35,703,33,"target"],[637,41,703,39],[637,42,703,40,"health"],[637,48,703,46],[637,50,703,48],[638,10,704,8,"console"],[638,17,704,15],[638,18,704,16,"log"],[638,21,704,19],[638,22,704,20],[638,75,704,73,"target"],[638,81,704,79],[638,82,704,80,"name"],[638,86,704,84],[638,99,704,97,"damageResult"],[638,111,704,109],[638,112,704,110,"damage"],[638,118,704,116],[638,133,704,131,"target"],[638,139,704,137],[638,140,704,138,"health"],[638,146,704,144],[638,149,704,147],[638,150,704,148],[639,8,705,6],[640,6,706,4],[642,6,708,4],[643,6,709,4],[643,10,709,8,"ability"],[643,17,709,15],[643,18,709,16,"effects"],[643,25,709,23],[643,26,709,24,"includes"],[643,34,709,32],[643,35,709,33],[643,40,709,38],[643,41,709,39],[643,45,709,43,"ability"],[643,52,709,50],[643,53,709,51,"stats"],[643,58,709,56],[643,59,709,57,"duration"],[643,67,709,65],[643,69,709,67],[644,8,710,6],[644,14,710,12,"targets"],[644,21,710,19],[644,24,710,22,"isAOE"],[644,29,710,27],[644,32,711,8,"state"],[644,37,711,13],[644,38,711,14,"enemies"],[644,45,711,21],[644,46,711,22,"filter"],[644,52,711,28],[644,53,711,29,"enemy"],[644,58,711,34],[644,62,711,38],[645,10,712,10],[645,16,712,16,"ninjaX"],[645,22,712,22],[645,25,712,25,"currentNinjaPosition"],[645,45,712,45],[645,46,712,46,"x"],[645,47,712,47],[645,50,712,50],[645,52,712,52],[646,10,713,10],[646,16,713,16,"ninjaY"],[646,22,713,22],[646,25,713,25,"currentNinjaPosition"],[646,45,713,45],[646,46,713,46,"y"],[646,47,713,47],[646,50,713,50],[646,52,713,52],[647,10,714,10],[647,16,714,16,"enemyX"],[647,22,714,22],[647,25,714,25,"enemy"],[647,30,714,30],[647,31,714,31,"position"],[647,39,714,39],[647,40,714,40,"x"],[647,41,714,41],[647,44,714,44],[647,48,714,48],[648,10,715,10],[648,16,715,16,"enemyY"],[648,22,715,22],[648,25,715,25,"enemy"],[648,30,715,30],[648,31,715,31,"position"],[648,39,715,39],[648,40,715,40,"y"],[648,41,715,41],[648,44,715,44],[648,48,715,48],[649,10,716,10],[649,16,716,16,"distance"],[649,24,716,24],[649,27,716,27,"Math"],[649,31,716,31],[649,32,716,32,"sqrt"],[649,36,716,36],[649,37,716,37,"Math"],[649,41,716,41],[649,42,716,42,"pow"],[649,45,716,45],[649,46,716,46,"enemyX"],[649,52,716,52],[649,55,716,55,"ninjaX"],[649,61,716,61],[649,63,716,63],[649,64,716,64],[649,65,716,65],[649,68,716,68,"Math"],[649,72,716,72],[649,73,716,73,"pow"],[649,76,716,76],[649,77,716,77,"enemyY"],[649,83,716,83],[649,86,716,86,"ninjaY"],[649,92,716,92],[649,94,716,94],[649,95,716,95],[649,96,716,96],[649,97,716,97],[650,10,717,10],[650,17,717,17,"distance"],[650,25,717,25],[650,29,717,29,"ability"],[650,36,717,36],[650,37,717,37,"stats"],[650,42,717,42],[650,43,717,43,"aoeRadius"],[650,52,717,52],[651,8,718,8],[651,9,718,9],[651,10,718,10],[651,13,719,8],[651,14,719,9,"findClosestEnemyInternal"],[651,38,719,33],[651,39,719,34,"state"],[651,44,719,39],[651,45,719,40,"enemies"],[651,52,719,47],[651,53,719,48],[651,54,719,49],[651,55,719,50,"filter"],[651,61,719,56],[651,62,719,57,"Boolean"],[651,69,719,64],[651,70,719,65],[652,8,721,6,"targets"],[652,15,721,13],[652,16,721,14,"forEach"],[652,23,721,21],[652,24,721,22,"target"],[652,30,721,28],[652,34,721,32],[653,10,722,8,"state"],[653,15,722,13],[653,16,722,14,"statusEffects"],[653,29,722,27],[653,30,722,28,"addEffect"],[653,39,722,37],[653,40,722,38,"target"],[653,46,722,44],[653,47,722,45,"id"],[653,49,722,47],[653,51,722,49],[654,12,723,10,"id"],[654,14,723,12],[654,16,723,14],[654,19,723,17,"ability"],[654,26,723,24],[654,27,723,25,"id"],[654,29,723,27],[654,35,723,33],[655,12,724,10,"type"],[655,16,724,14],[655,18,724,16],[655,23,724,21],[656,12,725,10,"remainingTicks"],[656,26,725,24],[656,28,725,26,"Math"],[656,32,725,30],[656,33,725,31,"floor"],[656,38,725,36],[656,39,725,37,"ability"],[656,46,725,44],[656,47,725,45,"stats"],[656,52,725,50],[656,53,725,51,"duration"],[656,61,725,59],[656,64,725,62],[656,66,725,64],[656,67,725,65],[657,12,726,10,"tickInterval"],[657,24,726,22],[657,26,726,24],[657,28,726,26],[658,12,727,10,"lastTick"],[658,20,727,18],[658,22,727,20,"state"],[658,27,727,25],[658,28,727,26,"currentTick"],[658,39,727,37],[659,12,728,10,"value"],[659,17,728,15],[659,19,728,17,"Math"],[659,23,728,21],[659,24,728,22,"floor"],[659,29,728,27],[659,30,728,28,"damage"],[659,36,728,34],[659,39,728,37],[659,42,728,40],[659,43,728,41],[660,12,729,10,"stackable"],[660,21,729,19],[660,23,729,21],[661,10,730,8],[661,11,730,9],[661,12,730,10],[662,8,731,6],[662,9,731,7],[662,10,731,8],[663,6,732,4],[665,6,734,4],[666,6,735,4],[666,10,735,8,"ability"],[666,17,735,15],[666,18,735,16,"effects"],[666,25,735,23],[666,26,735,24,"includes"],[666,34,735,32],[666,35,735,33],[666,41,735,39],[666,42,735,40],[666,46,735,44,"ability"],[666,53,735,51],[666,54,735,52,"id"],[666,56,735,54],[666,61,735,59],[666,75,735,73],[666,77,735,75],[667,8,736,6,"console"],[667,15,736,13],[667,16,736,14,"log"],[667,19,736,17],[667,20,736,18],[667,66,736,64,"ability"],[667,73,736,71],[667,74,736,72,"stats"],[667,79,736,77],[667,80,736,78,"duration"],[667,88,736,86],[667,98,736,96],[667,99,736,97],[669,8,738,6],[670,8,739,6],[670,14,739,12,"cloneX"],[670,20,739,18],[670,23,739,21,"currentNinjaPosition"],[670,43,739,41],[670,44,739,42,"x"],[670,45,739,43],[670,48,739,46],[670,50,739,48],[670,51,739,49],[670,52,739,50],[671,8,740,6],[671,14,740,12,"cloneY"],[671,20,740,18],[671,23,740,21,"currentNinjaPosition"],[671,43,740,41],[671,44,740,42,"y"],[671,45,740,43],[671,48,740,46],[671,50,740,48],[671,51,740,49],[671,52,740,50],[673,8,742,6,"state"],[673,13,742,11],[673,14,742,12,"shadowClone"],[673,25,742,23],[673,28,742,26],[674,10,743,8,"id"],[674,12,743,10],[674,14,743,12],[674,30,743,28,"Date"],[674,34,743,32],[674,35,743,33,"now"],[674,38,743,36],[674,39,743,37],[674,40,743,38],[674,42,743,40],[675,10,744,8,"remainingTicks"],[675,24,744,22],[675,26,744,24,"Math"],[675,30,744,28],[675,31,744,29,"floor"],[675,36,744,34],[675,37,744,35,"ability"],[675,44,744,42],[675,45,744,43,"stats"],[675,50,744,48],[675,51,744,49,"duration"],[675,59,744,57],[675,62,744,60],[675,64,744,62],[675,65,744,63],[676,10,744,65],[677,10,745,8,"position"],[677,18,745,16],[677,20,745,18],[678,12,745,20,"x"],[678,13,745,21],[678,15,745,23,"cloneX"],[678,21,745,29],[679,12,745,31,"y"],[679,13,745,32],[679,15,745,34,"cloneY"],[680,10,745,41],[680,11,745,42],[681,10,746,8,"damageMultiplier"],[681,26,746,24],[681,28,746,26],[681,31,746,29],[681,32,746,31],[682,8,747,6],[682,9,747,7],[683,8,749,6,"console"],[683,15,749,13],[683,16,749,14,"log"],[683,19,749,17],[683,20,749,18],[683,63,749,61,"ability"],[683,70,749,68],[683,71,749,69,"stats"],[683,76,749,74],[683,77,749,75,"duration"],[683,85,749,83],[683,108,749,106],[683,109,749,107],[684,6,750,4],[685,4,751,2],[685,5,751,3],[687,4,753,2],[688,4,754,2],[688,10,754,8,"createProjectile"],[688,26,754,24],[688,29,754,27,"createProjectile"],[688,30,754,28,"targetEnemy"],[688,41,754,52],[688,43,754,54,"damage"],[688,49,754,68],[688,51,754,70,"ninjaPos"],[688,59,754,103],[688,61,754,105,"abilityInfo"],[688,72,754,159],[688,74,754,161,"isAOE"],[688,79,754,176],[688,81,754,178,"aoeRadius"],[688,90,754,196],[688,95,754,201],[689,6,755,4],[689,10,755,8],[689,11,755,9,"targetEnemy"],[689,22,755,20],[689,24,755,22],[690,8,756,6,"console"],[690,15,756,13],[690,16,756,14,"log"],[690,19,756,17],[690,20,756,18],[690,65,756,63],[690,66,756,64],[691,8,757,6],[691,15,757,13],[691,19,757,17],[692,6,758,4],[694,6,760,4],[695,6,761,4,"console"],[695,13,761,11],[695,14,761,12,"log"],[695,17,761,15],[695,18,761,16],[695,52,761,50,"damage"],[695,58,761,56],[695,70,761,68,"targetEnemy"],[695,81,761,79],[695,82,761,80,"name"],[695,86,761,84],[695,91,761,89,"targetEnemy"],[695,102,761,100],[695,103,761,101,"health"],[695,109,761,107],[695,113,761,111,"targetEnemy"],[695,124,761,122],[695,125,761,123,"maxHealth"],[695,134,761,132],[695,140,761,138],[695,141,761,139],[696,6,763,4],[696,12,763,10,"SCREEN_WIDTH"],[696,24,763,22],[696,27,763,25],[696,30,763,28],[697,6,764,4],[697,12,764,10,"GAME_AREA_HEIGHT"],[697,28,764,26],[697,31,764,29],[697,34,764,32],[697,37,764,35],[697,40,764,38],[697,41,764,39],[697,42,764,40],[698,6,765,4],[698,12,765,10,"NINJA_SIZE"],[698,22,765,20],[698,25,765,23],[698,27,765,25],[700,6,767,4],[701,6,768,4],[701,12,768,10,"ninjaX"],[701,18,768,16],[701,21,768,19,"ninjaPos"],[701,29,768,27],[701,32,768,30,"ninjaPos"],[701,40,768,38],[701,41,768,39,"x"],[701,42,768,40],[701,45,768,43,"NINJA_SIZE"],[701,55,768,53],[701,58,768,56],[701,59,768,57],[701,62,768,60,"SCREEN_WIDTH"],[701,74,768,72],[701,77,768,75],[701,78,768,76],[702,6,769,4],[702,12,769,10,"ninjaY"],[702,18,769,16],[702,21,769,19,"ninjaPos"],[702,29,769,27],[702,32,769,30,"ninjaPos"],[702,40,769,38],[702,41,769,39,"y"],[702,42,769,40],[702,45,769,43,"NINJA_SIZE"],[702,55,769,53],[702,58,769,56],[702,59,769,57],[702,62,769,60,"GAME_AREA_HEIGHT"],[702,78,769,76],[702,81,769,79],[702,82,769,80],[703,6,770,4],[703,12,770,10,"ENEMY_SIZE"],[703,22,770,20],[703,25,770,23],[703,27,770,25],[704,6,772,4],[704,12,772,10,"projectileId"],[704,24,772,22],[704,27,772,25],[704,35,772,33,"Date"],[704,39,772,37],[704,40,772,38,"now"],[704,43,772,41],[704,44,772,42],[704,45,772,43],[704,49,772,47,"Math"],[704,53,772,51],[704,54,772,52,"random"],[704,60,772,58],[704,61,772,59],[704,62,772,60],[704,64,772,62],[705,6,774,4],[705,12,774,10,"projectile"],[705,22,774,38],[705,25,774,41],[706,8,775,6,"id"],[706,10,775,8],[706,12,775,10,"projectileId"],[706,24,775,22],[707,8,776,6,"x"],[707,9,776,7],[707,11,776,9,"ninjaX"],[707,17,776,15],[708,8,777,6,"y"],[708,9,777,7],[708,11,777,9,"ninjaY"],[708,17,777,15],[709,8,778,6,"targetX"],[709,15,778,13],[709,17,778,15,"targetEnemy"],[709,28,778,26],[709,29,778,27,"position"],[709,37,778,35],[709,38,778,36,"x"],[709,39,778,37],[709,42,778,40,"ENEMY_SIZE"],[709,52,778,50],[709,55,778,53],[709,56,778,54],[710,8,779,6,"targetY"],[710,15,779,13],[710,17,779,15,"targetEnemy"],[710,28,779,26],[710,29,779,27,"position"],[710,37,779,35],[710,38,779,36,"y"],[710,39,779,37],[710,42,779,40,"ENEMY_SIZE"],[710,52,779,50],[710,55,779,53],[710,56,779,54],[711,8,780,6,"targetEnemyId"],[711,21,780,19],[711,23,780,21,"targetEnemy"],[711,34,780,32],[711,35,780,33,"id"],[711,37,780,35],[712,8,781,6,"damage"],[712,14,781,12],[712,16,781,14,"damage"],[712,22,781,20],[713,8,782,6,"startTime"],[713,17,782,15],[713,19,782,17,"Date"],[713,23,782,21],[713,24,782,22,"now"],[713,27,782,25],[713,28,782,26],[713,29,782,27],[714,8,783,6,"duration"],[714,16,783,14],[714,18,783,16],[714,21,783,19],[715,8,783,21],[716,8,784,6],[717,8,785,6,"abilityId"],[717,17,785,15],[717,19,785,17,"abilityInfo"],[717,30,785,28],[717,32,785,30,"id"],[717,34,785,32],[717,38,785,36],[717,54,785,52],[718,8,786,6,"abilityName"],[718,19,786,17],[718,21,786,19,"abilityInfo"],[718,32,786,30],[718,34,786,32,"name"],[718,38,786,36],[718,42,786,40],[718,58,786,56],[719,8,787,6,"abilityIcon"],[719,19,787,17],[719,21,787,19,"abilityInfo"],[719,32,787,30],[719,34,787,32,"icon"],[719,38,787,36],[719,42,787,40],[719,46,787,44],[720,8,787,46],[721,8,788,6],[722,8,789,6,"isAOE"],[722,13,789,11],[722,15,789,13,"isAOE"],[722,20,789,18],[722,24,789,22],[722,29,789,27],[723,8,790,6,"aoeRadius"],[723,17,790,15],[723,19,790,17,"aoeRadius"],[723,28,790,26],[723,32,790,30],[724,6,791,4],[724,7,791,5],[725,6,793,4,"console"],[725,13,793,11],[725,14,793,12,"log"],[725,17,793,15],[725,18,793,16],[725,44,793,42,"abilityInfo"],[725,55,793,53],[725,57,793,55,"name"],[725,61,793,59],[725,65,793,63],[725,81,793,79],[725,101,793,99,"projectileId"],[725,113,793,111],[725,128,793,126,"targetEnemy"],[725,139,793,137],[725,140,793,138,"name"],[725,144,793,142],[725,152,793,150,"damage"],[725,158,793,156],[725,167,793,165],[725,168,793,166],[726,6,794,4,"console"],[726,13,794,11],[726,14,794,12,"log"],[726,17,794,15],[726,18,794,16],[726,48,794,46,"isAOE"],[726,53,794,51],[726,68,794,66,"aoeRadius"],[726,77,794,75],[726,89,794,87,"damage"],[726,95,794,93],[726,97,794,95],[726,98,794,96],[727,6,796,4,"console"],[727,13,796,11],[727,14,796,12,"log"],[727,17,796,15],[727,18,796,16],[727,53,796,51,"targetEnemy"],[727,64,796,62],[727,65,796,63,"id"],[727,67,796,65],[727,75,796,73,"damage"],[727,81,796,79],[727,90,796,88],[727,91,796,89],[728,6,797,4,"console"],[728,13,797,11],[728,14,797,12,"log"],[728,17,797,15],[728,18,797,16],[728,53,797,51,"ninjaX"],[728,59,797,57],[728,64,797,62,"ninjaY"],[728,70,797,68],[728,87,797,85,"projectile"],[728,97,797,95],[728,98,797,96,"targetX"],[728,105,797,103],[728,110,797,108,"projectile"],[728,120,797,118],[728,121,797,119,"targetY"],[728,128,797,126],[728,131,797,129],[728,132,797,130],[729,6,799,4,"setProjectiles"],[729,20,799,18],[729,21,799,19,"prev"],[729,25,799,23],[729,29,799,27],[729,30,799,28],[729,33,799,31,"prev"],[729,37,799,35],[729,39,799,37,"projectile"],[729,49,799,47],[729,50,799,48],[729,51,799,49],[731,6,801,4],[732,6,802,4],[734,6,804,4],[734,13,804,11,"projectile"],[734,23,804,21],[735,4,805,2],[735,5,805,3],[737,4,807,2],[738,4,808,2],[738,10,808,8,"spawnTestEnemy"],[738,24,808,22],[738,27,808,26,"state"],[738,32,808,44],[738,36,808,49],[739,6,809,4,"console"],[739,13,809,11],[739,14,809,12,"log"],[739,17,809,15],[739,18,809,16],[739,83,809,81],[739,84,809,82],[741,6,811,4],[742,6,812,4],[742,12,812,10,"zoneEnemy"],[742,21,812,19],[742,24,812,22,"spawnZoneEnemy"],[742,38,812,36],[742,39,812,37],[742,40,812,38],[743,6,813,4],[743,10,813,8],[743,11,813,9,"zoneEnemy"],[743,20,813,18],[743,22,813,20],[744,8,814,6,"console"],[744,15,814,13],[744,16,814,14,"log"],[744,19,814,17],[744,20,814,18],[744,76,814,74],[744,77,814,75],[745,8,815,6],[746,8,816,6,"spawnBasicTestEnemy"],[746,27,816,25],[746,28,816,26,"state"],[746,33,816,31],[746,34,816,32],[747,8,817,6],[748,6,818,4],[749,6,820,4,"console"],[749,13,820,11],[749,14,820,12,"log"],[749,17,820,15],[749,18,820,16],[749,44,820,42,"zoneEnemy"],[749,53,820,51],[749,54,820,52,"name"],[749,58,820,56],[749,63,820,61,"zoneEnemy"],[749,72,820,70],[749,73,820,71,"typeId"],[749,79,820,77],[749,94,820,92,"currentZone"],[749,105,820,103],[749,107,820,105,"id"],[749,109,820,107],[749,119,820,117,"currentZoneLevel"],[749,135,820,133],[749,137,820,135,"level"],[749,142,820,140],[749,144,820,142],[749,145,820,143],[751,6,822,4],[752,6,823,4],[752,12,823,10,"combatEnemy"],[752,23,823,34],[752,26,823,37],[753,8,824,6,"id"],[753,10,824,8],[753,12,824,10,"zoneEnemy"],[753,21,824,19],[753,22,824,20,"id"],[753,24,824,22],[754,8,825,6,"name"],[754,12,825,10],[754,14,825,12,"zoneEnemy"],[754,23,825,21],[754,24,825,22,"name"],[754,28,825,26],[755,8,826,6,"health"],[755,14,826,12],[755,16,826,14,"zoneEnemy"],[755,25,826,23],[755,26,826,24,"hp"],[755,28,826,26],[756,8,827,6,"maxHealth"],[756,17,827,15],[756,19,827,17,"zoneEnemy"],[756,28,827,26],[756,29,827,27,"maxHP"],[756,34,827,32],[757,8,828,6,"stats"],[757,13,828,11],[757,15,828,13],[758,10,829,8,"attack"],[758,16,829,14],[758,18,829,16,"zoneEnemy"],[758,27,829,25],[758,28,829,26,"attack"],[758,34,829,32],[759,10,830,8,"defense"],[759,17,830,15],[759,19,830,17],[759,21,830,19],[760,10,830,21],[761,10,831,8,"health"],[761,16,831,14],[761,18,831,16,"zoneEnemy"],[761,27,831,25],[761,28,831,26,"hp"],[761,30,831,28],[762,10,832,8,"maxHealth"],[762,19,832,17],[762,21,832,19,"zoneEnemy"],[762,30,832,28],[762,31,832,29,"maxHP"],[762,36,832,34],[763,10,833,8,"critChance"],[763,20,833,18],[763,22,833,20],[763,23,833,21],[764,10,834,8,"critDamage"],[764,20,834,18],[764,22,834,20],[764,25,834,23],[765,10,835,8,"cooldownReduction"],[765,27,835,25],[765,29,835,27],[766,8,836,6],[766,9,836,7],[767,8,837,6,"position"],[767,16,837,14],[767,18,837,16,"zoneEnemy"],[767,27,837,25],[767,28,837,26,"position"],[767,36,837,34],[768,8,838,6,"lastDamaged"],[768,19,838,17],[768,21,838,19],[768,22,838,20],[769,8,839,6],[770,8,840,6,"zoneTypeId"],[770,18,840,16],[770,20,840,18,"zoneEnemy"],[770,29,840,27],[770,30,840,28,"typeId"],[770,36,840,34],[771,8,841,6,"zoneXP"],[771,14,841,12],[771,16,841,14,"zoneEnemy"],[771,25,841,23],[771,26,841,24,"xp"],[772,6,842,4],[772,7,842,5],[773,6,844,4,"console"],[773,13,844,11],[773,14,844,12,"log"],[773,17,844,15],[773,18,844,16],[773,42,844,40,"combatEnemy"],[773,53,844,51],[773,54,844,52,"name"],[773,58,844,56],[773,67,844,65,"combatEnemy"],[773,78,844,76],[773,79,844,77,"health"],[773,85,844,83],[773,100,844,98,"currentZone"],[773,111,844,109],[773,113,844,111,"id"],[773,115,844,113],[773,125,844,123,"currentZoneLevel"],[773,141,844,139],[773,143,844,141,"level"],[773,148,844,146],[773,150,844,148],[773,151,844,149],[774,6,845,4,"state"],[774,11,845,9],[774,12,845,10,"enemies"],[774,19,845,17],[774,20,845,18,"push"],[774,24,845,22],[774,25,845,23,"combatEnemy"],[774,36,845,34],[774,37,845,35],[775,4,846,2],[775,5,846,3],[777,4,848,2],[778,4,849,2],[778,10,849,8,"spawnBasicTestEnemy"],[778,29,849,27],[778,32,849,31,"state"],[778,37,849,49],[778,41,849,54],[779,6,850,4],[779,12,850,10,"SCREEN_WIDTH"],[779,24,850,22],[779,27,850,25],[779,30,850,28],[780,6,851,4],[780,12,851,10,"GAME_AREA_HEIGHT"],[780,28,851,26],[780,31,851,29],[780,34,851,32],[780,37,851,35],[780,40,851,38],[781,6,852,4],[781,12,852,10,"ENEMY_SIZE"],[781,22,852,20],[781,25,852,23],[781,27,852,25],[782,6,854,4],[782,12,854,10,"x"],[782,13,854,11],[782,16,854,14,"Math"],[782,20,854,18],[782,21,854,19,"random"],[782,27,854,25],[782,28,854,26],[782,29,854,27],[782,33,854,31,"SCREEN_WIDTH"],[782,45,854,43],[782,48,854,46,"ENEMY_SIZE"],[782,58,854,56],[782,61,854,59],[782,62,854,60],[782,63,854,61],[782,66,854,64,"ENEMY_SIZE"],[782,76,854,74],[783,6,855,4],[783,12,855,10,"y"],[783,13,855,11],[783,16,855,14,"Math"],[783,20,855,18],[783,21,855,19,"random"],[783,27,855,25],[783,28,855,26],[783,29,855,27],[783,33,855,31,"GAME_AREA_HEIGHT"],[783,49,855,47],[783,52,855,50,"ENEMY_SIZE"],[783,62,855,60],[783,65,855,63],[783,66,855,64],[783,67,855,65],[783,70,855,68,"ENEMY_SIZE"],[783,80,855,78],[784,6,857,4],[784,12,857,10,"enemy"],[784,17,857,28],[784,20,857,31],[785,8,858,6,"id"],[785,10,858,8],[785,12,858,10],[785,30,858,28,"Date"],[785,34,858,32],[785,35,858,33,"now"],[785,38,858,36],[785,39,858,37],[785,40,858,38],[785,44,858,42,"Math"],[785,48,858,46],[785,49,858,47,"random"],[785,55,858,53],[785,56,858,54],[785,57,858,55],[785,59,858,57],[786,8,859,6,"name"],[786,12,859,10],[786,14,859,12],[786,26,859,24,"Math"],[786,30,859,28],[786,31,859,29,"floor"],[786,36,859,34],[786,37,859,35,"Math"],[786,41,859,39],[786,42,859,40,"random"],[786,48,859,46],[786,49,859,47],[786,50,859,48],[786,53,859,51],[786,56,859,54],[786,57,859,55],[786,59,859,57],[787,8,860,6,"health"],[787,14,860,12],[787,16,860,14],[787,18,860,16],[788,8,861,6,"maxHealth"],[788,17,861,15],[788,19,861,17],[788,21,861,19],[789,8,862,6,"stats"],[789,13,862,11],[789,15,862,13],[790,10,863,8,"attack"],[790,16,863,14],[790,18,863,16],[790,20,863,18],[791,10,864,8,"defense"],[791,17,864,15],[791,19,864,17],[791,21,864,19],[792,10,865,8,"health"],[792,16,865,14],[792,18,865,16],[792,20,865,18],[793,10,866,8,"maxHealth"],[793,19,866,17],[793,21,866,19],[793,23,866,21],[794,10,867,8,"critChance"],[794,20,867,18],[794,22,867,20],[794,23,867,21],[795,10,868,8,"critDamage"],[795,20,868,18],[795,22,868,20],[795,25,868,23],[796,10,869,8,"cooldownReduction"],[796,27,869,25],[796,29,869,27],[797,8,870,6],[797,9,870,7],[798,8,871,6,"position"],[798,16,871,14],[798,18,871,16],[799,10,871,18,"x"],[799,11,871,19],[800,10,871,21,"y"],[801,8,871,23],[801,9,871,24],[802,8,872,6,"lastDamaged"],[802,19,872,17],[802,21,872,19],[803,6,873,4],[803,7,873,5],[804,6,875,4,"console"],[804,13,875,11],[804,14,875,12,"log"],[804,17,875,15],[804,18,875,16],[804,42,875,40,"enemy"],[804,47,875,45],[804,48,875,46,"name"],[804,52,875,50],[804,60,875,58,"Math"],[804,64,875,62],[804,65,875,63,"round"],[804,70,875,68],[804,71,875,69,"x"],[804,72,875,70],[804,73,875,71],[804,78,875,76,"Math"],[804,82,875,80],[804,83,875,81,"round"],[804,88,875,86],[804,89,875,87,"y"],[804,90,875,88],[804,91,875,89],[804,94,875,92],[804,95,875,93],[805,6,876,4,"state"],[805,11,876,9],[805,12,876,10,"enemies"],[805,19,876,17],[805,20,876,18,"push"],[805,24,876,22],[805,25,876,23,"enemy"],[805,30,876,28],[805,31,876,29],[806,4,877,2],[806,5,877,3],[808,4,879,2],[809,4,880,2],[810,4,881,2],[810,10,881,8,"startCombat"],[810,21,881,19],[810,24,881,22,"React"],[810,29,881,27],[810,30,881,27,"default"],[810,37,881,27],[810,38,881,28,"useCallback"],[810,49,881,39],[810,50,881,40],[810,56,881,46],[811,6,882,4,"console"],[811,13,882,11],[811,14,882,12,"log"],[811,17,882,15],[811,18,882,16],[811,63,882,61],[811,64,882,62],[812,6,883,4,"console"],[812,13,883,11],[812,14,883,12,"log"],[812,17,883,15],[812,18,883,16],[812,37,883,35],[812,39,883,37,"combatEngine"],[812,58,883,49],[812,59,883,49,"combatEngine"],[812,71,883,49],[812,72,883,50],[813,6,884,4,"console"],[813,13,884,11],[813,14,884,12,"log"],[813,17,884,15],[813,18,884,16],[813,51,884,49],[813,53,884,51,"handleCombatTick"],[813,69,884,67],[813,70,884,68],[814,6,885,4,"setCombatState"],[814,20,885,18],[814,21,885,19,"prev"],[814,25,885,23],[814,30,885,28],[815,8,885,30],[815,11,885,33,"prev"],[815,15,885,37],[816,8,885,39,"isInCombat"],[816,18,885,49],[816,20,885,51],[817,6,885,56],[817,7,885,57],[817,8,885,58],[817,9,885,59],[819,6,887,4],[820,6,888,4,"combatEngine"],[820,25,888,16],[820,26,888,16,"combatEngine"],[820,38,888,16],[820,39,888,17,"addTickCallback"],[820,54,888,32],[820,55,888,33,"handleCombatTick"],[820,71,888,49],[820,72,888,50],[821,6,889,4,"console"],[821,13,889,11],[821,14,889,12,"log"],[821,17,889,15],[821,18,889,16],[821,62,889,60],[821,63,889,61],[823,6,891,4],[824,6,892,4,"combatEngine"],[824,25,892,16],[824,26,892,16,"combatEngine"],[824,38,892,16],[824,39,892,17,"start"],[824,44,892,22],[824,45,892,23],[824,46,892,24],[825,6,893,4,"console"],[825,13,893,11],[825,14,893,12,"log"],[825,17,893,15],[825,18,893,16],[825,51,893,49],[825,52,893,50],[826,4,894,2],[826,5,894,3],[826,7,894,5],[826,8,894,6,"combatEngine"],[826,27,894,18],[826,28,894,18,"combatEngine"],[826,40,894,18],[826,42,894,20,"handleCombatTick"],[826,58,894,36],[826,59,894,37],[826,60,894,38],[828,4,896,2],[829,4,897,2],[829,10,897,8,"stopCombat"],[829,20,897,18],[829,23,897,21,"React"],[829,28,897,26],[829,29,897,26,"default"],[829,36,897,26],[829,37,897,27,"useCallback"],[829,48,897,38],[829,49,897,39],[829,55,897,45],[830,6,898,4,"setCombatState"],[830,20,898,18],[830,21,898,19,"prev"],[830,25,898,23],[830,30,898,28],[831,8,898,30],[831,11,898,33,"prev"],[831,15,898,37],[832,8,898,39,"isInCombat"],[832,18,898,49],[832,20,898,51],[833,6,898,57],[833,7,898,58],[833,8,898,59],[833,9,898,60],[834,6,899,4,"combatEngine"],[834,25,899,16],[834,26,899,16,"combatEngine"],[834,38,899,16],[834,39,899,17,"removeTickCallback"],[834,57,899,35],[834,58,899,36,"handleCombatTick"],[834,74,899,52],[834,75,899,53],[835,4,900,2],[835,5,900,3],[835,7,900,5],[835,8,900,6,"combatEngine"],[835,27,900,18],[835,28,900,18,"combatEngine"],[835,40,900,18],[835,42,900,20,"handleCombatTick"],[835,58,900,36],[835,59,900,37],[835,60,900,38],[837,4,902,2],[838,4,903,2],[838,10,903,8,"equipAbility"],[838,22,903,20],[838,25,903,23,"equipAbility"],[838,26,903,24,"abilityId"],[838,35,903,41],[838,37,903,43,"slotIndex"],[838,46,903,60],[838,51,903,74],[839,6,904,4],[839,13,904,11,"combatState"],[839,24,904,22],[839,25,904,23,"abilityManager"],[839,39,904,37],[839,40,904,38,"equipAbility"],[839,52,904,50],[839,53,904,51,"abilityId"],[839,62,904,60],[839,64,904,62,"slotIndex"],[839,73,904,71],[839,74,904,72],[840,4,905,2],[840,5,905,3],[841,4,907,2],[841,10,907,8,"getDeck"],[841,17,907,15],[841,20,907,18,"getDeck"],[841,21,907,18],[841,26,907,24],[842,6,908,4],[842,13,908,11,"combatState"],[842,24,908,22],[842,25,908,23,"abilityManager"],[842,39,908,37],[842,40,908,38,"getDeck"],[842,47,908,45],[842,48,908,46],[842,49,908,47],[843,4,909,2],[843,5,909,3],[844,4,911,2],[844,10,911,8,"getAvailableAbilities"],[844,31,911,29],[844,34,911,32,"getAvailableAbilities"],[844,35,911,32],[844,40,911,38],[845,6,912,4],[845,13,912,11,"combatState"],[845,24,912,22],[845,25,912,23,"abilityManager"],[845,39,912,37],[845,40,912,38,"getAvailableAbilities"],[845,61,912,59],[845,62,912,60],[845,63,912,61],[846,4,913,2],[846,5,913,3],[847,4,915,2],[847,10,915,8,"upgradeAbility"],[847,24,915,22],[847,27,915,26,"abilityId"],[847,36,915,43],[847,40,915,57],[848,6,916,4],[848,13,916,11,"combatState"],[848,24,916,22],[848,25,916,23,"abilityManager"],[848,39,916,37],[848,40,916,38,"upgradeAbility"],[848,54,916,52],[848,55,916,53,"abilityId"],[848,64,916,62],[848,65,916,63],[849,4,917,2],[849,5,917,3],[851,4,919,2],[852,4,920,2],[852,10,920,8,"clearAllEnemies"],[852,25,920,23],[852,28,920,26,"clearAllEnemies"],[852,29,920,26],[852,34,920,32],[853,6,921,4,"console"],[853,13,921,11],[853,14,921,12,"log"],[853,17,921,15],[853,18,921,16],[853,67,921,65],[853,68,921,66],[854,6,922,4,"setCombatState"],[854,20,922,18],[854,21,922,19,"prev"],[854,25,922,23],[854,30,922,28],[855,8,923,6],[855,11,923,9,"prev"],[855,15,923,13],[856,8,924,6,"enemies"],[856,15,924,13],[856,17,924,15],[857,6,925,4],[857,7,925,5],[857,8,925,6],[857,9,925,7],[858,4,926,2],[858,5,926,3],[860,4,928,2],[861,4,929,2],[863,4,931,2],[864,4,932,2],[864,10,932,8,"spawnEnemy"],[864,20,932,18],[864,23,932,22,"position"],[864,31,932,57],[864,35,932,75],[865,6,933,4],[865,12,933,10,"SCREEN_WIDTH"],[865,24,933,22],[865,27,933,25],[865,30,933,28],[866,6,934,4],[866,12,934,10,"GAME_AREA_HEIGHT"],[866,28,934,26],[866,31,934,29],[866,34,934,32],[866,37,934,35],[866,40,934,38],[866,41,934,39],[866,42,934,40],[867,6,935,4],[867,12,935,10,"ENEMY_SIZE"],[867,22,935,20],[867,25,935,23],[867,27,935,25],[869,6,937,4],[870,6,938,4],[870,12,938,10,"x"],[870,13,938,11],[870,16,938,14,"position"],[870,24,938,22],[870,26,938,24,"x"],[870,27,938,25],[870,31,938,29,"Math"],[870,35,938,33],[870,36,938,34,"random"],[870,42,938,40],[870,43,938,41],[870,44,938,42],[870,48,938,46,"SCREEN_WIDTH"],[870,60,938,58],[870,63,938,61,"ENEMY_SIZE"],[870,73,938,71],[870,76,938,74],[870,77,938,75],[870,78,938,76],[870,81,938,79,"ENEMY_SIZE"],[870,91,938,89],[871,6,939,4],[871,12,939,10,"y"],[871,13,939,11],[871,16,939,14,"position"],[871,24,939,22],[871,26,939,24,"y"],[871,27,939,25],[871,31,939,29,"Math"],[871,35,939,33],[871,36,939,34,"random"],[871,42,939,40],[871,43,939,41],[871,44,939,42],[871,48,939,46,"GAME_AREA_HEIGHT"],[871,64,939,62],[871,67,939,65,"ENEMY_SIZE"],[871,77,939,75],[871,80,939,78],[871,81,939,79],[871,82,939,80],[871,85,939,83,"ENEMY_SIZE"],[871,95,939,93],[872,6,941,4],[872,12,941,10,"enemy"],[872,17,941,28],[872,20,941,31],[873,8,942,6,"id"],[873,10,942,8],[873,12,942,10],[873,21,942,19],[873,23,942,21,"enemyCounter"],[873,35,942,33],[873,37,942,35],[874,8,943,6,"name"],[874,12,943,10],[874,14,943,12],[874,24,943,22],[875,8,944,6,"health"],[875,14,944,12],[875,16,944,14],[875,19,944,17],[876,8,945,6,"maxHealth"],[876,17,945,15],[876,19,945,17],[876,22,945,20],[877,8,946,6,"stats"],[877,13,946,11],[877,15,946,13],[878,10,947,8,"attack"],[878,16,947,14],[878,18,947,16],[878,20,947,18],[879,10,948,8,"defense"],[879,17,948,15],[879,19,948,17],[879,21,948,19],[880,10,949,8,"health"],[880,16,949,14],[880,18,949,16],[880,21,949,19],[881,10,950,8,"maxHealth"],[881,19,950,17],[881,21,950,19],[881,24,950,22],[882,10,951,8,"critChance"],[882,20,951,18],[882,22,951,20],[882,23,951,21],[883,10,952,8,"critDamage"],[883,20,952,18],[883,22,952,20],[883,25,952,23],[884,10,953,8,"cooldownReduction"],[884,27,953,25],[884,29,953,27],[885,8,954,6],[885,9,954,7],[886,8,955,6,"position"],[886,16,955,14],[886,18,955,16],[887,10,955,18,"x"],[887,11,955,19],[888,10,955,21,"y"],[889,8,955,23],[889,9,955,24],[890,8,956,6,"lastDamaged"],[890,19,956,17],[890,21,956,19],[891,6,957,4],[891,7,957,5],[892,6,959,4,"setCombatState"],[892,20,959,18],[892,21,959,19,"prev"],[892,25,959,23],[892,30,959,28],[893,8,960,6],[893,11,960,9,"prev"],[893,15,960,13],[894,8,961,6,"enemies"],[894,15,961,13],[894,17,961,15],[894,18,961,16],[894,21,961,19,"prev"],[894,25,961,23],[894,26,961,24,"enemies"],[894,33,961,31],[894,35,961,33,"enemy"],[894,40,961,38],[895,6,962,4],[895,7,962,5],[895,8,962,6],[895,9,962,7],[896,6,964,4],[896,13,964,11,"enemy"],[896,18,964,16],[897,4,965,2],[897,5,965,3],[899,4,967,2],[900,4,968,2],[900,10,968,8,"spawnBoss"],[900,19,968,17],[900,22,968,21,"bossEnemy"],[900,31,968,43],[900,35,968,48],[901,6,969,4,"console"],[901,13,969,11],[901,14,969,12,"log"],[901,17,969,15],[901,18,969,16],[901,39,969,37,"bossEnemy"],[901,48,969,46],[901,49,969,47,"name"],[901,53,969,51],[901,90,969,88],[901,91,969,89],[902,6,970,4,"setCombatState"],[902,20,970,18],[902,21,970,19,"prev"],[902,25,970,23],[902,30,970,28],[903,8,971,6],[903,11,971,9,"prev"],[903,15,971,13],[904,8,972,6,"enemies"],[904,15,972,13],[904,17,972,15],[904,18,972,16,"bossEnemy"],[904,27,972,25],[904,28,972,26],[904,29,972,27],[905,6,973,4],[905,7,973,5],[905,8,973,6],[905,9,973,7],[906,4,974,2],[906,5,974,3],[908,4,976,2],[909,4,977,2],[909,10,977,8,"clearSpecificEnemy"],[909,28,977,26],[909,31,977,30,"enemyId"],[909,38,977,45],[909,42,977,50],[910,6,978,4,"setCombatState"],[910,20,978,18],[910,21,978,19,"prev"],[910,25,978,23],[910,30,978,28],[911,8,979,6],[911,11,979,9,"prev"],[911,15,979,13],[912,8,980,6,"enemies"],[912,15,980,13],[912,17,980,15,"prev"],[912,21,980,19],[912,22,980,20,"enemies"],[912,29,980,27],[912,30,980,28,"filter"],[912,36,980,34],[912,37,980,35,"enemy"],[912,42,980,40],[912,46,980,44,"enemy"],[912,51,980,49],[912,52,980,50,"id"],[912,54,980,52],[912,59,980,57,"enemyId"],[912,66,980,64],[913,6,981,4],[913,7,981,5],[913,8,981,6],[913,9,981,7],[914,4,982,2],[914,5,982,3],[916,4,984,2],[917,4,985,2],[917,10,985,8,"useAbilityManually"],[917,28,985,26],[917,31,985,26,"_s3"],[917,34,985,26],[917,35,985,29],[917,39,985,29,"useCallback"],[917,45,985,40],[917,46,985,40,"useCallback"],[917,57,985,40],[917,59,985,40,"_s3"],[917,62,985,40],[917,63,985,42,"slotIndex"],[917,72,985,59],[917,76,985,73],[918,6,985,73,"_s3"],[918,9,985,73],[919,6,986,4,"console"],[919,13,986,11],[919,14,986,12,"log"],[919,17,986,15],[919,18,986,16],[919,64,986,62,"slotIndex"],[919,73,986,71],[919,82,986,80],[919,83,986,81],[920,6,987,4,"console"],[920,13,987,11],[920,14,987,12,"log"],[920,17,987,15],[920,18,987,16],[920,65,987,63,"slotIndex"],[920,74,987,72],[920,76,987,74],[920,77,987,75],[921,6,988,4,"console"],[921,13,988,11],[921,14,988,12,"log"],[921,17,988,15],[921,18,988,16],[921,53,988,51,"slotIndex"],[921,62,988,60],[921,64,988,62],[921,65,988,63],[923,6,990,4],[924,6,991,4],[924,10,991,8],[924,11,991,9,"game"],[924,15,991,13],[924,16,991,14,"gameState"],[924,25,991,23],[924,26,991,24,"isAlive"],[924,33,991,31],[924,35,991,33],[925,8,992,6,"console"],[925,15,992,13],[925,16,992,14,"log"],[925,19,992,17],[925,20,992,18],[925,70,992,68],[925,71,992,69],[926,8,993,6],[926,15,993,13],[926,20,993,18],[927,6,994,4],[929,6,996,4],[930,6,997,4],[930,12,997,10,"isReady"],[930,19,997,17],[930,22,997,20,"combatState"],[930,33,997,31],[930,34,997,32,"abilityManager"],[930,48,997,46],[930,49,997,47,"isAbilityReady"],[930,63,997,61],[930,64,997,62,"slotIndex"],[930,73,997,71],[930,74,997,72],[931,6,998,4],[931,10,998,8],[931,11,998,9,"isReady"],[931,18,998,16],[931,20,998,18],[932,8,999,6,"console"],[932,15,999,13],[932,16,999,14,"log"],[932,19,999,17],[932,20,999,18],[932,41,999,39,"slotIndex"],[932,50,999,48],[932,85,999,83],[932,86,999,84],[933,8,1000,6],[933,15,1000,13],[933,20,1000,18],[934,6,1001,4],[936,6,1003,4],[937,6,1004,4],[937,10,1004,8,"combatState"],[937,21,1004,19],[937,22,1004,20,"enemies"],[937,29,1004,27],[937,30,1004,28,"length"],[937,36,1004,34],[937,41,1004,39],[937,42,1004,40],[937,44,1004,42],[938,8,1005,6,"console"],[938,15,1005,13],[938,16,1005,14,"log"],[938,19,1005,17],[938,20,1005,18],[938,69,1005,67],[938,70,1005,68],[939,8,1006,6],[939,15,1006,13],[939,20,1006,18],[940,6,1007,4],[942,6,1009,4],[943,6,1010,4],[943,12,1010,10,"currentTick"],[943,23,1010,21],[943,26,1010,24,"combatEngine"],[943,45,1010,36],[943,46,1010,36,"combatEngine"],[943,58,1010,36],[943,59,1010,37,"getCurrentTick"],[943,73,1010,51],[943,74,1010,52],[943,75,1010,53],[944,6,1011,4],[944,12,1011,10,"success"],[944,19,1011,17],[944,22,1011,20,"combatState"],[944,33,1011,31],[944,34,1011,32,"abilityManager"],[944,48,1011,46],[944,49,1011,47,"useAbility"],[944,59,1011,57],[944,60,1011,58,"slotIndex"],[944,69,1011,67],[944,71,1011,69,"currentTick"],[944,82,1011,80],[944,83,1011,81],[945,6,1013,4],[945,10,1013,8,"success"],[945,17,1013,15],[945,19,1013,17],[946,8,1014,6],[947,8,1015,6,"setCombatState"],[947,22,1015,20],[947,23,1015,21,"prev"],[947,27,1015,25],[947,31,1015,29],[948,10,1016,8],[948,16,1016,14,"newState"],[948,24,1016,22],[948,27,1016,25],[949,12,1016,27],[949,15,1016,30,"prev"],[950,10,1016,35],[950,11,1016,36],[951,10,1017,8,"castAbility"],[951,21,1017,19],[951,22,1017,20,"newState"],[951,30,1017,28],[951,32,1017,30,"slotIndex"],[951,41,1017,39],[951,42,1017,40],[952,10,1018,8],[952,17,1018,15,"newState"],[952,25,1018,23],[953,8,1019,6],[953,9,1019,7],[953,10,1019,8],[954,8,1021,6,"console"],[954,15,1021,13],[954,16,1021,14,"log"],[954,19,1021,17],[954,20,1021,18],[954,65,1021,63,"slotIndex"],[954,74,1021,72],[954,76,1021,74],[954,77,1021,75],[955,8,1022,6],[955,15,1022,13],[955,19,1022,17],[956,6,1023,4],[956,7,1023,5],[956,13,1023,11],[957,8,1024,6,"console"],[957,15,1024,13],[957,16,1024,14,"log"],[957,19,1024,17],[957,20,1024,18],[957,61,1024,59,"slotIndex"],[957,70,1024,68],[957,72,1024,70],[957,73,1024,71],[958,8,1025,6],[958,15,1025,13],[958,20,1025,18],[959,6,1026,4],[960,4,1027,2],[960,5,1027,3],[960,46,1027,5],[960,47,1027,6,"combatState"],[960,58,1027,17],[960,59,1027,18,"abilityManager"],[960,73,1027,32],[960,75,1027,34,"combatState"],[960,86,1027,45],[960,87,1027,46,"enemies"],[960,94,1027,53],[960,95,1027,54],[960,96,1027,55],[961,4,1028,2],[961,8,1028,2,"useEffect"],[961,14,1028,11],[961,15,1028,11,"useEffect"],[961,24,1028,11],[961,26,1028,12],[961,32,1028,18],[962,6,1029,4,"combatEngine"],[962,25,1029,16],[962,26,1029,16,"combatEngine"],[962,38,1029,16],[962,39,1029,17,"start"],[962,44,1029,22],[962,45,1029,23],[962,46,1029,24],[964,6,1031,4],[965,6,1032,4],[966,6,1033,4,"console"],[966,13,1033,11],[966,14,1033,12,"log"],[966,17,1033,15],[966,18,1033,16],[966,97,1033,95],[966,98,1033,96],[967,6,1035,4],[967,13,1035,11],[967,19,1035,17],[968,8,1036,6,"combatEngine"],[968,27,1036,18],[968,28,1036,18,"combatEngine"],[968,40,1036,18],[968,41,1036,19,"stop"],[968,45,1036,23],[968,46,1036,24],[968,47,1036,25],[969,6,1037,4],[969,7,1037,5],[970,4,1038,2],[970,5,1038,3],[970,7,1038,5],[970,9,1038,7],[970,10,1038,8],[972,4,1040,2],[973,4,1041,2],[973,8,1041,2,"useEffect"],[973,14,1041,11],[973,15,1041,11,"useEffect"],[973,24,1041,11],[973,26,1041,12],[973,32,1041,18],[974,6,1042,4],[975,6,1043,4],[975,12,1043,10,"tickInterval"],[975,24,1043,22],[975,27,1043,25,"Platform"],[975,35,1043,33],[975,36,1043,33,"default"],[975,43,1043,33],[975,44,1043,34,"OS"],[975,46,1043,36],[975,51,1043,41],[975,56,1043,46],[975,59,1043,49],[975,62,1043,52],[975,65,1043,55],[975,68,1043,58],[975,69,1043,59],[975,70,1043,60],[976,6,1044,4,"console"],[976,13,1044,11],[976,14,1044,12,"log"],[976,17,1044,15],[976,18,1044,16],[976,91,1044,89,"tickInterval"],[976,103,1044,101],[976,112,1044,110,"Platform"],[976,120,1044,118],[976,121,1044,118,"default"],[976,128,1044,118],[976,129,1044,119,"OS"],[976,131,1044,121],[976,133,1044,123],[976,134,1044,124],[977,6,1045,4],[977,12,1045,10,"combatTickInterval"],[977,30,1045,28],[977,33,1045,31,"setInterval"],[977,44,1045,42],[977,45,1045,43,"handleCombatTick"],[977,61,1045,59],[977,63,1045,61,"tickInterval"],[977,75,1045,73],[977,76,1045,74],[978,6,1047,4],[978,13,1047,11],[978,19,1047,17],[979,8,1048,6,"console"],[979,15,1048,13],[979,16,1048,14,"log"],[979,19,1048,17],[979,20,1048,18],[979,51,1048,49],[979,52,1048,50],[980,8,1049,6,"clearInterval"],[980,21,1049,19],[980,22,1049,20,"combatTickInterval"],[980,40,1049,38],[980,41,1049,39],[981,6,1050,4],[981,7,1050,5],[982,4,1051,2],[982,5,1051,3],[982,7,1051,5],[982,8,1051,6,"handleCombatTick"],[982,24,1051,22],[982,25,1051,23],[982,26,1051,24],[984,4,1053,2],[985,4,1054,2],[985,8,1054,2,"useEffect"],[985,14,1054,11],[985,15,1054,11,"useEffect"],[985,24,1054,11],[985,26,1054,12],[985,32,1054,18],[986,6,1055,4],[986,12,1055,10,"processProjectileImpacts"],[986,36,1055,34],[986,39,1055,37,"processProjectileImpacts"],[986,40,1055,37],[986,45,1055,43],[987,8,1056,6,"setProjectiles"],[987,22,1056,20],[987,23,1056,21,"currentProjectiles"],[987,41,1056,39],[987,45,1056,43],[988,10,1057,8],[988,17,1057,15,"currentProjectiles"],[988,35,1057,33],[988,36,1057,34,"map"],[988,39,1057,37],[988,40,1057,38,"projectile"],[988,50,1057,48],[988,54,1057,52],[989,12,1058,10],[989,16,1058,14],[989,17,1058,15,"projectile"],[989,27,1058,25],[989,29,1058,27],[989,36,1058,34],[989,40,1058,38],[991,12,1060,10],[992,12,1061,10],[992,18,1061,16,"currentTime"],[992,29,1061,27],[992,32,1061,30,"Date"],[992,36,1061,34],[992,37,1061,35,"now"],[992,40,1061,38],[992,41,1061,39],[992,42,1061,40],[993,12,1062,10],[993,18,1062,16,"startTime"],[993,27,1062,25],[993,30,1062,28,"projectile"],[993,40,1062,38],[993,41,1062,39,"startTime"],[993,50,1062,48],[993,54,1062,52,"currentTime"],[993,65,1062,63],[994,12,1063,10],[994,18,1063,16,"elapsedTime"],[994,29,1063,27],[994,32,1063,30,"currentTime"],[994,43,1063,41],[994,46,1063,44,"startTime"],[994,55,1063,53],[995,12,1064,10],[995,18,1064,16,"progress"],[995,26,1064,24],[995,29,1064,27,"Math"],[995,33,1064,31],[995,34,1064,32,"min"],[995,37,1064,35],[995,38,1064,36,"elapsedTime"],[995,49,1064,47],[995,53,1064,51,"projectile"],[995,63,1064,61],[995,64,1064,62,"duration"],[995,72,1064,70],[995,76,1064,74],[995,79,1064,77],[995,80,1064,78],[995,82,1064,80],[995,83,1064,81],[995,84,1064,82],[997,12,1066,10],[998,12,1067,10],[998,16,1067,14,"progress"],[998,24,1067,22],[998,28,1067,26],[998,29,1067,27],[998,33,1067,31],[998,34,1067,32,"projectile"],[998,44,1067,42],[998,45,1067,43,"hasHit"],[998,51,1067,49],[998,53,1067,51],[999,14,1068,12],[1000,14,1069,12,"console"],[1000,21,1069,19],[1000,22,1069,20,"log"],[1000,25,1069,23],[1000,26,1069,24],[1000,51,1069,49,"projectile"],[1000,61,1069,59],[1000,62,1069,60,"abilityName"],[1000,73,1069,71],[1000,97,1069,95],[1000,98,1069,96],[1001,14,1071,12,"setCombatState"],[1001,28,1071,26],[1001,29,1071,27,"prev"],[1001,33,1071,31],[1001,37,1071,35],[1002,16,1072,14],[1002,22,1072,20,"newState"],[1002,30,1072,28],[1002,33,1072,31],[1003,18,1072,33],[1003,21,1072,36,"prev"],[1004,16,1072,41],[1004,17,1072,42],[1005,16,1074,14],[1005,20,1074,18,"projectile"],[1005,30,1074,28],[1005,31,1074,29,"isAOE"],[1005,36,1074,34],[1005,40,1074,38,"projectile"],[1005,50,1074,48],[1005,51,1074,49,"aoeRadius"],[1005,60,1074,58],[1005,64,1074,62,"projectile"],[1005,74,1074,72],[1005,75,1074,73,"aoeRadius"],[1005,84,1074,82],[1005,87,1074,85],[1005,88,1074,86],[1005,90,1074,88],[1006,18,1075,16],[1007,18,1076,16,"console"],[1007,25,1076,23],[1007,26,1076,24,"log"],[1007,29,1076,27],[1007,30,1076,28],[1007,59,1076,57,"projectile"],[1007,69,1076,67],[1007,70,1076,68,"abilityName"],[1007,81,1076,79],[1007,97,1076,95,"projectile"],[1007,107,1076,105],[1007,108,1076,106,"aoeRadius"],[1007,117,1076,115],[1007,119,1076,117],[1007,120,1076,118],[1008,18,1078,16],[1008,24,1078,22,"impactX"],[1008,31,1078,29],[1008,34,1078,32,"projectile"],[1008,44,1078,42],[1008,45,1078,43,"targetX"],[1008,52,1078,50],[1009,18,1079,16],[1009,24,1079,22,"impactY"],[1009,31,1079,29],[1009,34,1079,32,"projectile"],[1009,44,1079,42],[1009,45,1079,43,"targetY"],[1009,52,1079,50],[1010,18,1080,16],[1010,24,1080,22,"enemiesKilled"],[1010,37,1080,50],[1010,40,1080,53],[1010,42,1080,55],[1012,18,1082,16],[1013,18,1083,16,"newState"],[1013,26,1083,24],[1013,27,1083,25,"enemies"],[1013,34,1083,32],[1013,37,1083,35,"newState"],[1013,45,1083,43],[1013,46,1083,44,"enemies"],[1013,53,1083,51],[1013,54,1083,52,"map"],[1013,57,1083,55],[1013,58,1083,56,"enemy"],[1013,63,1083,61],[1013,67,1083,65],[1014,20,1084,18],[1014,24,1084,22,"enemy"],[1014,29,1084,27],[1014,30,1084,28,"health"],[1014,36,1084,34],[1014,40,1084,38],[1014,41,1084,39],[1014,45,1084,43,"enemy"],[1014,50,1084,48],[1014,51,1084,49,"markedForDeath"],[1014,65,1084,63],[1014,67,1084,65],[1014,74,1084,72,"enemy"],[1014,79,1084,77],[1015,20,1086,18],[1015,26,1086,24,"enemyX"],[1015,32,1086,30],[1015,35,1086,33,"enemy"],[1015,40,1086,38],[1015,41,1086,39,"position"],[1015,49,1086,47],[1015,50,1086,48,"x"],[1015,51,1086,49],[1015,54,1086,52],[1015,58,1086,56],[1015,59,1086,57],[1015,60,1086,58],[1016,20,1087,18],[1016,26,1087,24,"enemyY"],[1016,32,1087,30],[1016,35,1087,33,"enemy"],[1016,40,1087,38],[1016,41,1087,39,"position"],[1016,49,1087,47],[1016,50,1087,48,"y"],[1016,51,1087,49],[1016,54,1087,52],[1016,58,1087,56],[1017,20,1088,18],[1017,26,1088,24,"distance"],[1017,34,1088,32],[1017,37,1088,35,"Math"],[1017,41,1088,39],[1017,42,1088,40,"sqrt"],[1017,46,1088,44],[1017,47,1088,45,"Math"],[1017,51,1088,49],[1017,52,1088,50,"pow"],[1017,55,1088,53],[1017,56,1088,54,"enemyX"],[1017,62,1088,60],[1017,65,1088,63,"impactX"],[1017,72,1088,70],[1017,74,1088,72],[1017,75,1088,73],[1017,76,1088,74],[1017,79,1088,77,"Math"],[1017,83,1088,81],[1017,84,1088,82,"pow"],[1017,87,1088,85],[1017,88,1088,86,"enemyY"],[1017,94,1088,92],[1017,97,1088,95,"impactY"],[1017,104,1088,102],[1017,106,1088,104],[1017,107,1088,105],[1017,108,1088,106],[1017,109,1088,107],[1018,20,1090,18,"console"],[1018,27,1090,25],[1018,28,1090,26,"log"],[1018,31,1090,29],[1018,32,1090,30],[1018,58,1090,56,"enemy"],[1018,63,1090,61],[1018,64,1090,62,"name"],[1018,68,1090,66],[1018,76,1090,74,"enemyX"],[1018,82,1090,80],[1018,87,1090,85,"enemyY"],[1018,93,1090,91],[1018,109,1090,107,"impactX"],[1018,116,1090,114],[1018,121,1090,119,"impactY"],[1018,128,1090,126],[1018,135,1090,133,"distance"],[1018,143,1090,141],[1018,144,1090,142,"toFixed"],[1018,151,1090,149],[1018,152,1090,150],[1018,153,1090,151],[1018,154,1090,152],[1018,169,1090,167,"projectile"],[1018,179,1090,177],[1018,180,1090,178,"aoeRadius"],[1018,189,1090,187],[1018,194,1090,192],[1018,195,1090,193],[1019,20,1092,18],[1019,24,1092,22,"distance"],[1019,32,1092,30],[1019,36,1092,34,"projectile"],[1019,46,1092,44],[1019,47,1092,45,"aoeRadius"],[1019,56,1092,54],[1019,58,1092,56],[1020,22,1093,20],[1021,22,1094,20],[1021,28,1094,26,"newHealth"],[1021,37,1094,35],[1021,40,1094,38,"Math"],[1021,44,1094,42],[1021,45,1094,43,"max"],[1021,48,1094,46],[1021,49,1094,47],[1021,50,1094,48],[1021,52,1094,50,"enemy"],[1021,57,1094,55],[1021,58,1094,56,"health"],[1021,64,1094,62],[1021,67,1094,65,"projectile"],[1021,77,1094,75],[1021,78,1094,76,"damage"],[1021,84,1094,82],[1021,85,1094,83],[1022,22,1096,20,"console"],[1022,29,1096,27],[1022,30,1096,28,"log"],[1022,33,1096,31],[1022,34,1096,32],[1022,52,1096,50,"enemy"],[1022,57,1096,55],[1022,58,1096,56,"name"],[1022,62,1096,60],[1022,74,1096,72,"projectile"],[1022,84,1096,82],[1022,85,1096,83,"damage"],[1022,91,1096,89],[1022,103,1096,101,"enemy"],[1022,108,1096,106],[1022,109,1096,107,"health"],[1022,115,1096,113],[1022,122,1096,120,"newHealth"],[1022,131,1096,129],[1022,134,1096,132],[1022,135,1096,133],[1024,22,1098,20],[1025,22,1099,20],[1025,26,1099,24,"newHealth"],[1025,35,1099,33],[1025,39,1099,37],[1025,40,1099,38],[1025,44,1099,42,"enemy"],[1025,49,1099,47],[1025,50,1099,48,"health"],[1025,56,1099,54],[1025,59,1099,57],[1025,60,1099,58],[1025,62,1099,60],[1026,24,1100,22,"console"],[1026,31,1100,29],[1026,32,1100,30,"log"],[1026,35,1100,33],[1026,36,1100,34],[1026,52,1100,50,"enemy"],[1026,57,1100,55],[1026,58,1100,56,"name"],[1026,62,1100,60],[1026,76,1100,74,"projectile"],[1026,86,1100,84],[1026,87,1100,85,"abilityName"],[1026,98,1100,96],[1026,101,1100,99],[1026,102,1100,100],[1027,24,1101,22,"enemiesKilled"],[1027,37,1101,35],[1027,38,1101,36,"push"],[1027,42,1101,40],[1027,43,1101,41,"enemy"],[1027,48,1101,46],[1027,49,1101,47],[1027,50,1101,48],[1027,51,1101,49],[1029,24,1103,22],[1029,31,1103,29],[1030,26,1104,24],[1030,29,1104,27,"enemy"],[1030,34,1104,32],[1031,26,1105,24,"health"],[1031,32,1105,30],[1031,34,1105,32],[1031,35,1105,33],[1032,26,1106,24,"markedForDeath"],[1032,40,1106,38],[1032,42,1106,40],[1032,46,1106,44],[1033,26,1107,24,"lastDamaged"],[1033,37,1107,35],[1033,39,1107,37,"combatEngine"],[1033,58,1107,49],[1033,59,1107,49,"combatEngine"],[1033,71,1107,49],[1033,72,1107,50,"getCurrentTick"],[1033,86,1107,64],[1033,87,1107,65],[1034,24,1108,22],[1034,25,1108,23],[1035,22,1109,20],[1035,23,1109,21],[1035,29,1109,27],[1036,24,1110,22],[1036,31,1110,29],[1037,26,1111,24],[1037,29,1111,27,"enemy"],[1037,34,1111,32],[1038,26,1112,24,"health"],[1038,32,1112,30],[1038,34,1112,32,"newHealth"],[1038,43,1112,41],[1039,26,1113,24,"lastDamaged"],[1039,37,1113,35],[1039,39,1113,37,"combatEngine"],[1039,58,1113,49],[1039,59,1113,49,"combatEngine"],[1039,71,1113,49],[1039,72,1113,50,"getCurrentTick"],[1039,86,1113,64],[1039,87,1113,65],[1040,24,1114,22],[1040,25,1114,23],[1041,22,1115,20],[1042,20,1116,18],[1043,20,1118,18],[1043,27,1118,25,"enemy"],[1043,32,1118,30],[1043,33,1118,31],[1043,34,1118,32],[1044,18,1119,16],[1044,19,1119,17],[1044,20,1119,18],[1046,18,1121,16],[1047,18,1122,16],[1047,22,1122,20,"enemiesKilled"],[1047,35,1122,33],[1047,36,1122,34,"length"],[1047,42,1122,40],[1047,45,1122,43],[1047,46,1122,44],[1047,48,1122,46],[1048,20,1123,18,"console"],[1048,27,1123,25],[1048,28,1123,26,"log"],[1048,31,1123,29],[1048,32,1123,30],[1048,52,1123,50,"enemiesKilled"],[1048,65,1123,63],[1048,66,1123,64,"length"],[1048,72,1123,70],[1048,94,1123,92,"projectile"],[1048,104,1123,102],[1048,105,1123,103,"abilityName"],[1048,116,1123,114],[1048,118,1123,116],[1048,119,1123,117],[1049,20,1124,18],[1050,20,1125,18,"enemiesKilled"],[1050,33,1125,31],[1050,34,1125,32,"forEach"],[1050,41,1125,39],[1050,42,1125,40,"enemy"],[1050,47,1125,45],[1050,51,1125,49,"handleEnemyKill"],[1050,66,1125,64],[1050,67,1125,65,"enemy"],[1050,72,1125,70],[1050,73,1125,71],[1050,74,1125,72],[1051,18,1126,16],[1052,16,1128,14],[1052,17,1128,15],[1052,23,1128,21],[1053,18,1129,16],[1054,18,1130,16],[1054,24,1130,22,"enemyIndex"],[1054,34,1130,32],[1054,37,1130,35,"newState"],[1054,45,1130,43],[1054,46,1130,44,"enemies"],[1054,53,1130,51],[1054,54,1130,52,"findIndex"],[1054,63,1130,61],[1054,64,1130,62,"e"],[1054,65,1130,63],[1054,69,1130,67,"e"],[1054,70,1130,68],[1054,71,1130,69,"id"],[1054,73,1130,71],[1054,78,1130,76,"projectile"],[1054,88,1130,86],[1054,89,1130,87,"targetEnemyId"],[1054,102,1130,100],[1054,103,1130,101],[1055,18,1132,16],[1055,22,1132,20,"enemyIndex"],[1055,32,1132,30],[1055,36,1132,34],[1055,37,1132,35],[1055,41,1132,39,"newState"],[1055,49,1132,47],[1055,50,1132,48,"enemies"],[1055,57,1132,55],[1055,58,1132,56,"enemyIndex"],[1055,68,1132,66],[1055,69,1132,67],[1055,70,1132,68,"health"],[1055,76,1132,74],[1055,79,1132,77],[1055,80,1132,78],[1055,84,1132,82],[1055,85,1132,83,"newState"],[1055,93,1132,91],[1055,94,1132,92,"enemies"],[1055,101,1132,99],[1055,102,1132,100,"enemyIndex"],[1055,112,1132,110],[1055,113,1132,111],[1055,114,1132,112,"markedForDeath"],[1055,128,1132,126],[1055,130,1132,128],[1056,20,1133,18,"newState"],[1056,28,1133,26],[1056,29,1133,27,"enemies"],[1056,36,1133,34],[1056,39,1133,37],[1056,40,1133,38],[1056,43,1133,41,"newState"],[1056,51,1133,49],[1056,52,1133,50,"enemies"],[1056,59,1133,57],[1056,60,1133,58],[1057,20,1134,18],[1057,26,1134,24,"enemy"],[1057,31,1134,29],[1057,34,1134,32,"newState"],[1057,42,1134,40],[1057,43,1134,41,"enemies"],[1057,50,1134,48],[1057,51,1134,49,"enemyIndex"],[1057,61,1134,59],[1057,62,1134,60],[1058,20,1135,18],[1058,26,1135,24,"newHealth"],[1058,35,1135,33],[1058,38,1135,36,"Math"],[1058,42,1135,40],[1058,43,1135,41,"max"],[1058,46,1135,44],[1058,47,1135,45],[1058,48,1135,46],[1058,50,1135,48,"enemy"],[1058,55,1135,53],[1058,56,1135,54,"health"],[1058,62,1135,60],[1058,65,1135,63,"projectile"],[1058,75,1135,73],[1058,76,1135,74,"damage"],[1058,82,1135,80],[1058,83,1135,81],[1059,20,1137,18,"newState"],[1059,28,1137,26],[1059,29,1137,27,"enemies"],[1059,36,1137,34],[1059,37,1137,35,"enemyIndex"],[1059,47,1137,45],[1059,48,1137,46],[1059,51,1137,49],[1060,22,1138,20],[1060,25,1138,23,"enemy"],[1060,30,1138,28],[1061,22,1139,20,"health"],[1061,28,1139,26],[1061,30,1139,28,"newHealth"],[1061,39,1139,37],[1062,22,1140,20,"lastDamaged"],[1062,33,1140,31],[1062,35,1140,33,"combatEngine"],[1062,54,1140,45],[1062,55,1140,45,"combatEngine"],[1062,67,1140,45],[1062,68,1140,46,"getCurrentTick"],[1062,82,1140,60],[1062,83,1140,61],[1063,20,1141,18],[1063,21,1141,19],[1064,20,1143,18,"console"],[1064,27,1143,25],[1064,28,1143,26,"log"],[1064,31,1143,29],[1064,32,1143,30],[1064,60,1143,58,"enemy"],[1064,65,1143,63],[1064,66,1143,64,"name"],[1064,70,1143,68],[1064,82,1143,80,"newHealth"],[1064,91,1143,89],[1064,95,1143,93,"enemy"],[1064,100,1143,98],[1064,101,1143,99,"maxHealth"],[1064,110,1143,108],[1064,112,1143,110],[1064,113,1143,111],[1066,20,1145,18],[1067,20,1146,18],[1067,24,1146,22,"newHealth"],[1067,33,1146,31],[1067,37,1146,35],[1067,38,1146,36],[1067,42,1146,40,"enemy"],[1067,47,1146,45],[1067,48,1146,46,"health"],[1067,54,1146,52],[1067,57,1146,55],[1067,58,1146,56],[1067,60,1146,58],[1068,22,1147,20,"console"],[1068,29,1147,27],[1068,30,1147,28,"log"],[1068,33,1147,31],[1068,34,1147,32],[1068,54,1147,52,"enemy"],[1068,59,1147,57],[1068,60,1147,58,"name"],[1068,64,1147,62],[1068,78,1147,76,"projectile"],[1068,88,1147,86],[1068,89,1147,87,"abilityName"],[1068,100,1147,98],[1068,136,1147,134],[1068,137,1147,135],[1070,22,1149,20],[1071,22,1150,20,"newState"],[1071,30,1150,28],[1071,31,1150,29,"enemies"],[1071,38,1150,36],[1071,39,1150,37,"enemyIndex"],[1071,49,1150,47],[1071,50,1150,48],[1071,53,1150,51],[1072,24,1151,22],[1072,27,1151,25,"newState"],[1072,35,1151,33],[1072,36,1151,34,"enemies"],[1072,43,1151,41],[1072,44,1151,42,"enemyIndex"],[1072,54,1151,52],[1072,55,1151,53],[1073,24,1152,22,"health"],[1073,30,1152,28],[1073,32,1152,30],[1073,33,1152,31],[1074,24,1153,22,"isDying"],[1074,31,1153,29],[1074,33,1153,31],[1074,37,1153,35],[1075,24,1154,22,"deathStartTime"],[1075,38,1154,36],[1075,40,1154,38,"Date"],[1075,44,1154,42],[1075,45,1154,43,"now"],[1075,48,1154,46],[1075,49,1154,47],[1076,22,1155,20],[1076,23,1155,21],[1077,20,1156,18],[1077,21,1156,19],[1077,27,1156,25],[1077,31,1156,29,"enemy"],[1077,36,1156,34],[1077,37,1156,35,"health"],[1077,43,1156,41],[1077,46,1156,44],[1077,47,1156,45],[1077,49,1156,47],[1078,22,1157,20,"console"],[1078,29,1157,27],[1078,30,1157,28,"log"],[1078,33,1157,31],[1078,34,1157,32],[1078,48,1157,46,"enemy"],[1078,53,1157,51],[1078,54,1157,52,"name"],[1078,58,1157,56],[1078,70,1157,68,"projectile"],[1078,80,1157,78],[1078,81,1157,79,"damage"],[1078,87,1157,85],[1078,99,1157,97,"enemy"],[1078,104,1157,102],[1078,105,1157,103,"health"],[1078,111,1157,109],[1078,117,1157,115,"newHealth"],[1078,126,1157,124],[1078,129,1157,127],[1078,130,1157,128],[1079,20,1158,18],[1080,18,1159,16],[1081,16,1160,14],[1082,16,1162,14],[1082,23,1162,21,"newState"],[1082,31,1162,29],[1083,14,1163,12],[1083,15,1163,13],[1083,16,1163,14],[1085,14,1165,12],[1086,14,1166,12],[1087,12,1167,10],[1089,12,1169,10],[1090,12,1170,10],[1091,12,1171,10],[1091,18,1171,16,"timeBasedCleanup"],[1091,34,1171,32],[1091,37,1171,35,"elapsedTime"],[1091,48,1171,46],[1091,51,1171,49],[1091,55,1171,53],[1091,56,1171,54],[1091,57,1171,55],[1092,12,1172,10],[1092,16,1172,14,"progress"],[1092,24,1172,22],[1092,28,1172,26],[1092,31,1172,29],[1092,35,1172,33,"timeBasedCleanup"],[1092,51,1172,49],[1092,53,1172,51],[1093,14,1173,12],[1093,18,1173,16,"timeBasedCleanup"],[1093,34,1173,32],[1093,36,1173,34],[1094,16,1174,14,"console"],[1094,23,1174,21],[1094,24,1174,22,"log"],[1094,27,1174,25],[1094,28,1174,26],[1094,63,1174,61,"projectile"],[1094,73,1174,71],[1094,74,1174,72,"id"],[1094,76,1174,74],[1094,105,1174,103],[1094,106,1174,104],[1095,14,1175,12],[1096,14,1176,12],[1096,21,1176,19],[1096,25,1176,23],[1097,12,1177,10],[1098,12,1179,10],[1098,19,1179,17,"projectile"],[1098,29,1179,27],[1099,10,1180,8],[1099,11,1180,9],[1099,12,1180,10],[1099,13,1180,11,"filter"],[1099,19,1180,17],[1099,20,1180,18,"Boolean"],[1099,27,1180,25],[1099,28,1180,26],[1100,8,1181,6],[1100,9,1181,7],[1100,10,1181,8],[1101,6,1182,4],[1101,7,1182,5],[1103,6,1184,4],[1104,6,1185,4],[1104,12,1185,10,"impactInterval"],[1104,26,1185,24],[1104,29,1185,27,"setInterval"],[1104,40,1185,38],[1104,41,1185,39,"processProjectileImpacts"],[1104,65,1185,63],[1104,67,1185,65],[1104,69,1185,67],[1104,70,1185,68],[1105,6,1186,4],[1105,13,1186,11],[1105,19,1186,17,"clearInterval"],[1105,32,1186,30],[1105,33,1186,31,"impactInterval"],[1105,47,1186,45],[1105,48,1186,46],[1106,4,1187,2],[1106,5,1187,3],[1106,7,1187,5],[1106,9,1187,7],[1106,10,1187,8],[1106,11,1187,9],[1106,12,1187,10],[1108,4,1189,2],[1109,4,1190,2],[1109,10,1190,8,"saveAbilityData"],[1109,25,1190,23],[1109,28,1190,26],[1109,32,1190,26,"useCallback"],[1109,38,1190,37],[1109,39,1190,37,"useCallback"],[1109,50,1190,37],[1109,52,1190,38],[1109,58,1190,44],[1110,6,1191,4],[1110,10,1191,8,"combatState"],[1110,21,1191,19],[1110,22,1191,20,"abilityManager"],[1110,36,1191,34],[1110,38,1191,36],[1111,8,1192,6],[1111,14,1192,12,"abilityData"],[1111,25,1192,23],[1111,28,1192,26,"combatState"],[1111,39,1192,37],[1111,40,1192,38,"abilityManager"],[1111,54,1192,52],[1111,55,1192,53,"getSaveData"],[1111,66,1192,64],[1111,67,1192,65],[1111,68,1192,66],[1112,8,1193,6,"console"],[1112,15,1193,13],[1112,16,1193,14,"log"],[1112,19,1193,17],[1112,20,1193,18],[1112,70,1193,68],[1112,72,1193,70,"abilityData"],[1112,83,1193,81],[1112,84,1193,82],[1113,8,1194,6,"game"],[1113,12,1194,10],[1113,13,1194,11,"updateAbilityData"],[1113,30,1194,28],[1113,31,1194,29,"abilityData"],[1113,42,1194,40],[1113,43,1194,41],[1114,6,1195,4],[1115,4,1196,2],[1115,5,1196,3],[1115,7,1196,5],[1115,8,1196,6,"combatState"],[1115,19,1196,17],[1115,20,1196,18,"abilityManager"],[1115,34,1196,32],[1115,36,1196,34,"game"],[1115,40,1196,38],[1115,41,1196,39,"updateAbilityData"],[1115,58,1196,56],[1115,59,1196,57],[1115,60,1196,58],[1116,4,1198,2],[1116,10,1198,8,"contextValue"],[1116,22,1198,39],[1116,25,1198,42,"React"],[1116,30,1198,47],[1116,31,1198,47,"default"],[1116,38,1198,47],[1116,39,1198,48,"useMemo"],[1116,46,1198,55],[1116,47,1198,56],[1116,54,1198,63],[1117,6,1199,4,"combatState"],[1117,17,1199,15],[1118,6,1200,4,"projectiles"],[1118,17,1200,15],[1119,6,1201,4,"startCombat"],[1119,17,1201,15],[1120,6,1202,4,"stopCombat"],[1120,16,1202,14],[1121,6,1203,4,"equipAbility"],[1121,18,1203,16],[1122,6,1204,4,"handleEnemyKill"],[1122,21,1204,19],[1123,6,1205,4,"getDeck"],[1123,13,1205,11],[1124,6,1206,4,"getAvailableAbilities"],[1124,27,1206,25],[1125,6,1207,4,"upgradeAbility"],[1125,20,1207,18],[1126,6,1208,4,"spawnEnemy"],[1126,16,1208,14],[1127,6,1209,4,"spawnBoss"],[1127,15,1209,13],[1128,6,1210,4,"clearAllEnemies"],[1128,21,1210,19],[1129,6,1211,4,"clearSpecificEnemy"],[1129,24,1211,22],[1130,6,1212,4],[1131,6,1213,4,"findClosestEnemy"],[1131,22,1213,20],[1132,6,1214,4,"updateNinjaPosition"],[1132,25,1214,23],[1133,6,1215,4,"setManualControlActive"],[1133,28,1215,26],[1134,6,1216,4,"lastExplosionTime"],[1134,23,1216,21],[1135,6,1217,4,"useAbilityManually"],[1135,24,1217,22],[1136,6,1217,24],[1137,6,1218,4,"saveAbilityData"],[1137,21,1218,19],[1138,6,1218,21],[1139,6,1219,4,"shadowClone"],[1139,17,1219,15],[1139,19,1219,17,"combatState"],[1139,30,1219,28],[1139,31,1219,29,"shadowClone"],[1139,42,1219,40],[1139,43,1219,42],[1140,4,1220,2],[1140,5,1220,3],[1140,6,1220,4],[1140,8,1220,6],[1141,4,1221,4],[1142,4,1222,4],[1143,4,1223,4,"combatState"],[1143,15,1223,15],[1143,17,1224,4,"projectiles"],[1143,28,1224,15],[1143,30,1225,4,"lastExplosionTime"],[1143,47,1225,21],[1144,4,1226,4],[1145,4,1227,4,"combatState"],[1145,15,1227,15],[1145,16,1227,16,"abilityManager"],[1145,30,1227,30],[1145,32,1228,4,"combatState"],[1145,43,1228,15],[1145,44,1228,16,"enemies"],[1145,51,1228,23],[1145,53,1229,4,"combatState"],[1145,64,1229,15],[1145,65,1229,16,"shadowClone"],[1145,76,1229,27],[1146,4,1229,29],[1147,4,1230,4,"useAbilityManually"],[1147,22,1230,22],[1148,4,1230,24],[1149,4,1231,4,"saveAbilityData"],[1149,19,1231,19],[1149,20,1231,21],[1150,4,1231,21],[1150,5,1232,3],[1150,6,1232,4],[1151,4,1234,2],[1151,24,1235,4],[1151,28,1235,4,"_reactJsxDevRuntime"],[1151,47,1235,4],[1151,48,1235,4,"jsxDEV"],[1151,54,1235,4],[1151,56,1235,5,"CombatContext"],[1151,69,1235,18],[1151,70,1235,19,"Provider"],[1151,78,1235,27],[1152,6,1235,28,"value"],[1152,11,1235,33],[1152,13,1235,35,"contextValue"],[1152,25,1235,48],[1153,6,1235,48,"children"],[1153,14,1235,48],[1153,16,1236,7,"children"],[1154,4,1236,15],[1155,6,1236,15,"fileName"],[1155,14,1236,15],[1155,16,1236,15,"_jsxFileName"],[1155,28,1236,15],[1156,6,1236,15,"lineNumber"],[1156,16,1236,15],[1157,6,1236,15,"columnNumber"],[1157,18,1236,15],[1158,4,1236,15],[1158,11,1237,28],[1158,12,1237,29],[1159,2,1239,0],[1159,3,1239,1],[1160,2,1239,2,"_s4"],[1160,5,1239,2],[1160,6,106,13,"CombatProvider"],[1160,20,106,27],[1161,4,106,27],[1161,12,107,15,"useGame"],[1161,24,107,22],[1161,25,107,22,"useGame"],[1161,32,107,22],[1161,34,108,77,"useZone"],[1161,46,108,84],[1161,47,108,84,"useZone"],[1161,54,108,84],[1162,2,108,84],[1163,2,108,84,"_c"],[1163,4,108,84],[1163,7,106,13,"CombatProvider"],[1163,21,106,27],[1164,2,106,27],[1164,6,106,27,"_c"],[1164,8,106,27],[1165,2,106,27,"$RefreshReg$"],[1165,14,106,27],[1165,15,106,27,"_c"],[1165,17,106,27],[1166,0,106,27],[1166,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","useEffect$argument_0","setCombatState$argument_0","handleEnemyKill","game.updateNinja$argument_0","prevState.enemies.map$argument_0","handleCombatTick","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.forEach$argument_0","newState.enemies.filter$argument_0","allDeadEnemies.map$argument_0","lowHealthEnemies.map$argument_0","newState.enemies.some$argument_0","enemiesToKill.map$argument_0","unprocessedEnemies.forEach$argument_0","zoneKills.forEach$argument_0","prev.enemies.map$argument_0","unprocessedEnemies.find$argument_0","findClosestEnemyInternal","enemies.forEach$argument_0","findClosestEnemy","updateNinjaPosition","setManualControlActive","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.filter$argument_0","enemiesInRange.forEach$argument_0","targets.forEach$argument_0","createProjectile","setProjectiles$argument_0","spawnTestEnemy","spawnBasicTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","clearAllEnemies","spawnEnemy","spawnBoss","clearSpecificEnemy","prev.enemies.filter$argument_0","useAbilityManually","<anonymous>","processProjectileImpacts","currentProjectiles.map$argument_0","newState.enemies.map$argument_0","enemiesKilled.forEach$argument_0","saveAbilityData","React.useMemo$argument_0"],"mappings":"AAA;yBC+F;CDM;8BEI;YCyB;qBCM,qBD;GDE;YCG;qBCI;ODmB;GDE;sCGQ;qBCQ;MDG;mBDG;qCGE;yDHC;MCE;GHgB;6CMI;mBJM;4BKa;sDCC,sBD;0BEE;WFG;OLE;+BQoD;ORgG;qDSwD,0BT;sGUO,qDV;iDSK;OTU;yGUI,6BV;uDSI,+CT;kFWE,4CX;iDSK,yBT;4CYY,qBZ;KIiB;gFSS,uDT;mCUY;SViB;yBFG;UEG;0BWG,uCX;uBJG;oCgBE;yDCC,sCD;WhBE;UIC;GNG;mCoBG;oBCY;KDU;GpBI;2BsBG;GtBE;0CuBQ;GvBE;6CwBG;GxBG;sByBO;iCCW;oCCE,iCD;KDG;kDGe;OHK;6BIK;OJa;6BG8B;SHO;sBKG;OLU;GzBoB;2B+BG;mBC6C,6BD;G/BM;yBiCG;GjCsC;8BkCG;GlC4B;wCmCI;mBjCI,uCiC;GnCS;uCoCG;mBlCC,wCkC;GpCE;uBqCG;GrCE;kBsCE;GtCE;gCuCE;GvCE;yBwCE;GxCE;0ByCG;mBvCE;MuCG;GzCC;qB0CM;mBxC2B;MwCG;G1CG;oB2CG;mBzCE;MyCG;G3CC;6B4CG;mB1CC;mC2CE,6B3C;M0CC;G5CC;yC8CG;qB5C8B;O4CI;G9CQ;YCC;W8CO;K9CE;GDC;YCG;W8CM;K9CG;GDC;YCG;qC+CC;qBhBC;sCiBC;2B/Cc;wDgDY;iBhDoC;wCiDM,+BjD;8DMK,sCN;a+CiC;SjBiB;OgBC;K/CC;W8CI,mC9C;GDC;sCoDG;GpDM;wDqDE;IrDsB;CFmB"},"hasCjsExports":false},"type":"js/module"}]}