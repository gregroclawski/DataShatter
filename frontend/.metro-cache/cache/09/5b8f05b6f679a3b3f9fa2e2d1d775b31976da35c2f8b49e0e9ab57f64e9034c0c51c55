{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 50,\n        defense: 20,\n        health: 220,\n        maxHealth: 220,\n        critChance: 10,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Spawn new enemies if none remain (for testing)\n        if (newState.enemies.length === 0) {\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`ðŸŽ¯ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      const enemy = {\n        id: `enemy_${Date.now()}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x: 300,\n          y: 200\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      if (!_engineCombatEngine.combatEngine) {\n        _engineCombatEngine.combatEngine.start();\n      }\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"eU0ceafkOcVj0hF6EIbVysB+V0U=\");\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":254,"map":[[10,2,36,0,"Object"],[10,8,36,0],[10,9,36,0,"defineProperty"],[10,23,36,0],[10,24,36,0,"exports"],[10,31,36,0],[11,4,36,0,"enumerable"],[11,14,36,0],[12,4,36,0,"get"],[12,7,36,0],[12,18,36,0,"get"],[12,19,36,0],[13,6,36,0],[13,13,36,0,"useCombat"],[13,22,36,0],[14,4,36,0],[15,2,36,0],[16,2,44,0,"Object"],[16,8,44,0],[16,9,44,0,"defineProperty"],[16,23,44,0],[16,24,44,0,"exports"],[16,31,44,0],[17,4,44,0,"enumerable"],[17,14,44,0],[18,4,44,0,"get"],[18,7,44,0],[18,18,44,0,"get"],[18,19,44,0],[19,6,44,0],[19,13,44,0,"CombatProvider"],[19,27,44,0],[20,4,44,0],[21,2,44,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,3,85],[25,6,3,85,"_reactJsxDevRuntime"],[25,25,3,85],[25,28,3,85,"require"],[25,35,3,85],[25,36,3,85,"_dependencyMap"],[25,50,3,85],[26,2,34,0],[26,8,34,6,"CombatContext"],[26,21,34,19],[26,37,34,22],[26,41,34,22,"createContext"],[26,47,34,35],[26,48,34,35,"createContext"],[26,61,34,35],[26,63,34,67,"undefined"],[26,72,34,76],[26,73,34,77],[27,2,36,7],[27,8,36,13,"useCombat"],[27,17,36,22],[27,20,36,25,"useCombat"],[27,21,36,25],[27,26,36,50],[28,4,36,50,"_s"],[28,6,36,50],[29,4,37,2],[29,10,37,8,"context"],[29,17,37,15],[29,20,37,18],[29,24,37,18,"useContext"],[29,30,37,28],[29,31,37,28,"useContext"],[29,41,37,28],[29,43,37,29,"CombatContext"],[29,56,37,42],[29,57,37,43],[30,4,38,2],[30,8,38,6],[30,9,38,7,"context"],[30,16,38,14],[30,18,38,16],[31,6,39,4],[31,12,39,10],[31,16,39,14,"Error"],[31,21,39,19],[31,22,39,20],[31,70,39,68],[31,71,39,69],[32,4,40,2],[33,4,41,2],[33,11,41,9,"context"],[33,18,41,16],[34,2,42,0],[34,3,42,1],[35,2,42,2,"_s"],[35,4,42,2],[35,5,36,13,"useCombat"],[35,14,36,22],[36,2,44,7],[36,8,44,13,"CombatProvider"],[36,22,44,27],[36,25,44,30,"CombatProvider"],[36,26,44,31],[37,4,44,33,"children"],[38,2,44,67],[38,3,44,68],[38,8,44,73],[39,4,44,73,"_s3"],[39,7,44,73],[40,4,45,2],[40,10,45,8],[40,11,45,9,"combatState"],[40,22,45,20],[40,24,45,22,"setCombatState"],[40,38,45,36],[40,39,45,37],[40,42,45,40],[40,46,45,40,"useState"],[40,52,45,48],[40,53,45,48,"useState"],[40,61,45,48],[40,63,45,62],[41,6,46,4,"isInCombat"],[41,16,46,14],[41,18,46,16],[41,23,46,21],[42,6,47,4,"currentTick"],[42,17,47,15],[42,19,47,17],[42,20,47,18],[43,6,48,4,"enemies"],[43,13,48,11],[43,15,48,13],[43,17,48,15],[44,6,49,4,"abilityManager"],[44,20,49,18],[44,22,49,20],[44,26,49,24,"AbilityManager"],[44,44,49,38],[44,45,49,38,"AbilityManager"],[44,59,49,38],[44,60,49,39],[44,61,49,40],[45,6,50,4,"statusEffects"],[45,19,50,17],[45,21,50,19],[45,25,50,23,"StatusEffectManager"],[45,44,50,42],[45,45,50,42,"StatusEffectManager"],[45,64,50,42],[45,65,50,43],[45,66,50,44],[46,6,51,4,"playerStats"],[46,17,51,15],[46,19,51,17],[47,8,52,6,"attack"],[47,14,52,12],[47,16,52,14],[47,18,52,16],[48,8,53,6,"defense"],[48,15,53,13],[48,17,53,15],[48,19,53,17],[49,8,54,6,"health"],[49,14,54,12],[49,16,54,14],[49,19,54,17],[50,8,55,6,"maxHealth"],[50,17,55,15],[50,19,55,17],[50,22,55,20],[51,8,56,6,"critChance"],[51,18,56,16],[51,20,56,18],[51,22,56,20],[52,8,57,6,"critDamage"],[52,18,57,16],[52,20,57,18],[52,23,57,21],[53,8,58,6,"cooldownReduction"],[53,25,58,23],[53,27,58,25],[54,6,59,4],[55,4,60,2],[55,5,60,3],[55,6,60,4],[57,4,62,2],[58,4,63,2],[58,10,63,8,"handleCombatTick"],[58,26,63,24],[58,29,63,27,"handleCombatTick"],[58,30,63,27],[58,35,63,33],[59,6,63,33],[59,10,63,33,"_s2"],[59,13,63,33],[59,16,63,33,"$RefreshSig$"],[59,28,63,33],[60,6,64,4,"_s2"],[60,9,64,4],[60,10,64,4,"setCombatState"],[60,24,64,18],[60,25,64,18,"_s2"],[60,28,64,18],[60,29,64,19,"prev"],[60,33,64,23],[60,37,64,27],[61,8,64,27,"_s2"],[61,11,64,27],[62,8,65,6],[62,14,65,12,"newTick"],[62,21,65,19],[62,24,65,22,"combatEngine"],[62,43,65,34],[62,44,65,34,"combatEngine"],[62,56,65,34],[62,57,65,35,"getCurrentTick"],[62,71,65,49],[62,72,65,50],[62,73,65,51],[63,8,66,6],[63,14,66,12,"newState"],[63,22,66,20],[63,25,66,23],[64,10,66,25],[64,13,66,28,"prev"],[64,17,66,32],[65,10,66,34,"currentTick"],[65,21,66,45],[65,23,66,47,"newTick"],[66,8,66,55],[66,9,66,56],[67,8,68,6],[67,12,68,10],[67,13,68,11,"newState"],[67,21,68,19],[67,22,68,20,"isInCombat"],[67,32,68,30],[67,34,68,32],[67,41,68,39,"newState"],[67,49,68,47],[69,8,70,6],[70,8,71,6,"newState"],[70,16,71,14],[70,17,71,15,"abilityManager"],[70,31,71,29],[70,32,71,30,"updateCooldowns"],[70,47,71,45],[70,48,71,46,"newTick"],[70,55,71,53],[70,56,71,54],[72,8,73,6],[73,8,74,6],[73,14,74,12,"effectResults"],[73,27,74,25],[73,30,74,28,"newState"],[73,38,74,36],[73,39,74,37,"statusEffects"],[73,52,74,50],[73,53,74,51,"processTick"],[73,64,74,62],[73,65,74,63,"newTick"],[73,72,74,70],[73,73,74,71],[75,8,76,6],[76,8,77,6,"effectResults"],[76,21,77,19],[76,22,77,20,"forEach"],[76,29,77,27],[76,30,77,28],[76,31,77,29,"results"],[76,38,77,36],[76,40,77,38,"entityId"],[76,48,77,46],[76,53,77,51],[77,10,78,8],[77,16,78,14,"enemyIndex"],[77,26,78,24],[77,29,78,27,"newState"],[77,37,78,35],[77,38,78,36,"enemies"],[77,45,78,43],[77,46,78,44,"findIndex"],[77,55,78,53],[77,56,78,54,"e"],[77,57,78,55],[77,61,78,59,"e"],[77,62,78,60],[77,63,78,61,"id"],[77,65,78,63],[77,70,78,68,"entityId"],[77,78,78,76],[77,79,78,77],[78,10,79,8],[78,14,79,12,"enemyIndex"],[78,24,79,22],[78,28,79,26],[78,29,79,27],[78,31,79,29],[79,12,80,10,"results"],[79,19,80,17],[79,20,80,18,"forEach"],[79,27,80,25],[79,28,80,26,"result"],[79,34,80,32],[79,38,80,36],[80,14,81,12,"newState"],[80,22,81,20],[80,23,81,21,"enemies"],[80,30,81,28],[80,31,81,29,"enemyIndex"],[80,41,81,39],[80,42,81,40],[80,43,81,41,"health"],[80,49,81,47],[80,53,81,51,"result"],[80,59,81,57],[80,60,81,58,"damage"],[80,66,81,64],[81,14,82,12,"newState"],[81,22,82,20],[81,23,82,21,"enemies"],[81,30,82,28],[81,31,82,29,"enemyIndex"],[81,41,82,39],[81,42,82,40],[81,43,82,41,"lastDamaged"],[81,54,82,52],[81,57,82,55,"newTick"],[81,64,82,62],[82,12,83,10],[82,13,83,11],[82,14,83,12],[83,10,84,8],[84,8,85,6],[84,9,85,7],[84,10,85,8],[86,8,87,6],[87,8,88,6],[87,13,88,11],[87,17,88,15,"i"],[87,18,88,16],[87,21,88,19],[87,22,88,20],[87,24,88,22,"i"],[87,25,88,23],[87,28,88,26],[87,29,88,27],[87,31,88,29,"i"],[87,32,88,30],[87,34,88,32],[87,36,88,34],[88,10,89,8],[88,14,89,12,"newState"],[88,22,89,20],[88,23,89,21,"abilityManager"],[88,37,89,35],[88,38,89,36,"isAbilityReady"],[88,52,89,50],[88,53,89,51,"i"],[88,54,89,52],[88,55,89,53],[88,59,89,57,"newState"],[88,67,89,65],[88,68,89,66,"enemies"],[88,75,89,73],[88,76,89,74,"length"],[88,82,89,80],[88,85,89,83],[88,86,89,84],[88,88,89,86],[89,12,90,10],[89,16,90,14,"newState"],[89,24,90,22],[89,25,90,23,"abilityManager"],[89,39,90,37],[89,40,90,38,"useAbility"],[89,50,90,48],[89,51,90,49,"i"],[89,52,90,50],[89,54,90,52,"newTick"],[89,61,90,59],[89,62,90,60],[89,64,90,62],[90,14,91,12,"castAbility"],[90,25,91,23],[90,26,91,24,"newState"],[90,34,91,32],[90,36,91,34,"i"],[90,37,91,35],[90,38,91,36],[91,12,92,10],[92,10,93,8],[93,8,94,6],[95,8,96,6],[96,8,97,6,"newState"],[96,16,97,14],[96,17,97,15,"enemies"],[96,24,97,22],[96,27,97,25,"newState"],[96,35,97,33],[96,36,97,34,"enemies"],[96,43,97,41],[96,44,97,42,"filter"],[96,50,97,48],[96,51,97,49,"enemy"],[96,56,97,54],[96,60,97,58,"enemy"],[96,65,97,63],[96,66,97,64,"health"],[96,72,97,70],[96,75,97,73],[96,76,97,74],[96,77,97,75],[98,8,99,6],[99,8,100,6],[99,12,100,10,"newState"],[99,20,100,18],[99,21,100,19,"enemies"],[99,28,100,26],[99,29,100,27,"length"],[99,35,100,33],[99,40,100,38],[99,41,100,39],[99,43,100,41],[100,10,101,8,"spawnTestEnemy"],[100,24,101,22],[100,25,101,23,"newState"],[100,33,101,31],[100,34,101,32],[101,8,102,6],[102,8,104,6],[102,15,104,13,"newState"],[102,23,104,21],[103,6,105,4],[103,7,105,5],[103,47,105,6],[104,4,106,2],[104,5,106,3],[106,4,108,2],[107,4,109,2],[107,10,109,8,"castAbility"],[107,21,109,19],[107,24,109,22,"castAbility"],[107,25,109,23,"state"],[107,30,109,41],[107,32,109,43,"slotIndex"],[107,41,109,60],[107,46,109,65],[108,6,110,4],[108,12,110,10,"deck"],[108,16,110,14],[108,19,110,17,"state"],[108,24,110,22],[108,25,110,23,"abilityManager"],[108,39,110,37],[108,40,110,38,"getDeck"],[108,47,110,45],[108,48,110,46],[108,49,110,47],[109,6,111,4],[109,12,111,10,"ability"],[109,19,111,17],[109,22,111,20,"deck"],[109,26,111,24],[109,27,111,25,"slots"],[109,32,111,30],[109,33,111,31,"slotIndex"],[109,42,111,40],[109,43,111,41],[110,6,112,4],[110,10,112,8],[110,11,112,9,"ability"],[110,18,112,16],[110,20,112,18],[112,6,114,4],[113,6,115,4],[113,12,115,10,"target"],[113,18,115,16],[113,21,115,19,"state"],[113,26,115,24],[113,27,115,25,"enemies"],[113,34,115,32],[113,35,115,33],[113,36,115,34],[113,37,115,35],[114,6,116,4],[114,10,116,8],[114,11,116,9,"target"],[114,17,116,15],[114,19,116,17],[116,6,118,4],[117,6,119,4],[117,10,119,8,"damage"],[117,16,119,14],[117,19,119,17,"ability"],[117,26,119,24],[117,27,119,25,"stats"],[117,32,119,30],[117,33,119,31,"baseDamage"],[117,43,119,41],[119,6,121,4],[120,6,122,4,"deck"],[120,10,122,8],[120,11,122,9,"activeSynergies"],[120,26,122,24],[120,27,122,25,"forEach"],[120,34,122,32],[120,35,122,33,"synergy"],[120,42,122,40],[120,46,122,44],[121,8,123,6],[121,12,123,10,"synergy"],[121,19,123,17],[121,20,123,18,"bonus"],[121,25,123,23],[121,26,123,24,"damageBonus"],[121,37,123,35],[121,41,124,10,"synergy"],[121,48,124,17],[121,49,124,18,"requiredTags"],[121,61,124,30],[121,62,124,31,"some"],[121,66,124,35],[121,67,124,36,"tag"],[121,70,124,39],[121,74,124,43,"ability"],[121,81,124,50],[121,82,124,51,"tags"],[121,86,124,55],[121,87,124,56,"includes"],[121,95,124,64],[121,96,124,65,"tag"],[121,99,124,68],[121,100,124,69],[121,101,124,70],[121,103,124,72],[122,10,125,8,"damage"],[122,16,125,14],[122,20,125,19],[122,21,125,20],[122,24,125,23,"synergy"],[122,31,125,30],[122,32,125,31,"bonus"],[122,37,125,36],[122,38,125,37,"damageBonus"],[122,49,125,48],[122,52,125,51],[122,55,125,55],[123,8,126,6],[124,6,127,4],[124,7,127,5],[124,8,127,6],[126,6,129,4],[127,6,130,4],[127,12,130,10,"damageResult"],[127,24,130,22],[127,27,130,25,"DamageCalculator"],[127,46,130,41],[127,47,130,41,"DamageCalculator"],[127,63,130,41],[127,64,130,42,"calculateDamage"],[127,79,130,57],[127,80,130,58,"damage"],[127,86,130,64],[127,88,130,66,"state"],[127,93,130,71],[127,94,130,72,"playerStats"],[127,105,130,83],[127,107,130,85,"target"],[127,113,130,91],[127,114,130,92,"stats"],[127,119,130,97],[127,120,130,98],[129,6,132,4],[130,6,133,4],[130,10,133,8,"ability"],[130,17,133,15],[130,18,133,16,"effects"],[130,25,133,23],[130,26,133,24,"includes"],[130,34,133,32],[130,35,133,33],[130,49,133,47],[130,50,133,48],[130,52,133,50],[131,8,134,6,"target"],[131,14,134,12],[131,15,134,13,"health"],[131,21,134,19],[131,25,134,23,"damageResult"],[131,37,134,35],[131,38,134,36,"damage"],[131,44,134,42],[132,8,135,6,"target"],[132,14,135,12],[132,15,135,13,"lastDamaged"],[132,26,135,24],[132,29,135,27,"state"],[132,34,135,32],[132,35,135,33,"currentTick"],[132,46,135,44],[133,6,136,4],[133,7,136,5],[133,13,136,11],[133,17,136,15,"ability"],[133,24,136,22],[133,25,136,23,"effects"],[133,32,136,30],[133,33,136,31,"includes"],[133,41,136,39],[133,42,136,40],[133,47,136,45],[133,48,136,46],[133,50,136,48],[134,8,137,6],[135,8,138,6,"state"],[135,13,138,11],[135,14,138,12,"enemies"],[135,21,138,19],[135,22,138,20,"forEach"],[135,29,138,27],[135,30,138,28,"enemy"],[135,35,138,33],[135,39,138,37],[136,10,139,8,"enemy"],[136,15,139,13],[136,16,139,14,"health"],[136,22,139,20],[136,26,139,24,"Math"],[136,30,139,28],[136,31,139,29,"floor"],[136,36,139,34],[136,37,139,35,"damageResult"],[136,49,139,47],[136,50,139,48,"damage"],[136,56,139,54],[136,59,139,57],[136,62,139,60],[136,63,139,61],[136,64,139,62],[136,65,139,63],[137,10,140,8,"enemy"],[137,15,140,13],[137,16,140,14,"lastDamaged"],[137,27,140,25],[137,30,140,28,"state"],[137,35,140,33],[137,36,140,34,"currentTick"],[137,47,140,45],[138,8,141,6],[138,9,141,7],[138,10,141,8],[139,6,142,4],[141,6,144,4],[142,6,145,4],[142,10,145,8,"ability"],[142,17,145,15],[142,18,145,16,"effects"],[142,25,145,23],[142,26,145,24,"includes"],[142,34,145,32],[142,35,145,33],[142,40,145,38],[142,41,145,39],[142,45,145,43,"ability"],[142,52,145,50],[142,53,145,51,"stats"],[142,58,145,56],[142,59,145,57,"duration"],[142,67,145,65],[142,69,145,67],[143,8,146,6,"state"],[143,13,146,11],[143,14,146,12,"statusEffects"],[143,27,146,25],[143,28,146,26,"addEffect"],[143,37,146,35],[143,38,146,36,"target"],[143,44,146,42],[143,45,146,43,"id"],[143,47,146,45],[143,49,146,47],[144,10,147,8,"id"],[144,12,147,10],[144,14,147,12],[144,17,147,15,"ability"],[144,24,147,22],[144,25,147,23,"id"],[144,27,147,25],[144,33,147,31],[145,10,148,8,"type"],[145,14,148,12],[145,16,148,14],[145,21,148,19],[146,10,149,8,"remainingTicks"],[146,24,149,22],[146,26,149,24,"Math"],[146,30,149,28],[146,31,149,29,"floor"],[146,36,149,34],[146,37,149,35,"ability"],[146,44,149,42],[146,45,149,43,"stats"],[146,50,149,48],[146,51,149,49,"duration"],[146,59,149,57],[146,62,149,60],[146,64,149,62],[146,65,149,63],[147,10,149,65],[148,10,150,8,"tickInterval"],[148,22,150,20],[148,24,150,22],[148,26,150,24],[149,10,150,26],[150,10,151,8,"lastTick"],[150,18,151,16],[150,20,151,18,"state"],[150,25,151,23],[150,26,151,24,"currentTick"],[150,37,151,35],[151,10,152,8,"value"],[151,15,152,13],[151,17,152,15,"Math"],[151,21,152,19],[151,22,152,20,"floor"],[151,27,152,25],[151,28,152,26,"damage"],[151,34,152,32],[151,37,152,35],[151,40,152,38],[151,41,152,39],[152,10,152,41],[153,10,153,8,"stackable"],[153,19,153,17],[153,21,153,19],[154,8,154,6],[154,9,154,7],[154,10,154,8],[155,6,155,4],[156,6,157,4,"console"],[156,13,157,11],[156,14,157,12,"log"],[156,17,157,15],[156,18,157,16],[156,24,157,22,"ability"],[156,31,157,29],[156,32,157,30,"name"],[156,36,157,34],[156,54,157,52,"damageResult"],[156,66,157,64],[156,67,157,65,"damage"],[156,73,157,71],[156,76,157,74,"damageResult"],[156,88,157,86],[156,89,157,87,"isCritical"],[156,99,157,97],[156,102,157,100],[156,112,157,110],[156,115,157,113],[156,117,157,115],[156,119,157,117],[156,120,157,118],[157,4,158,2],[157,5,158,3],[159,4,160,2],[160,4,161,2],[160,10,161,8,"spawnTestEnemy"],[160,24,161,22],[160,27,161,26,"state"],[160,32,161,44],[160,36,161,49],[161,6,162,4],[161,12,162,10,"enemy"],[161,17,162,28],[161,20,162,31],[162,8,163,6,"id"],[162,10,163,8],[162,12,163,10],[162,21,163,19,"Date"],[162,25,163,23],[162,26,163,24,"now"],[162,29,163,27],[162,30,163,28],[162,31,163,29],[162,33,163,31],[163,8,164,6,"name"],[163,12,164,10],[163,14,164,12],[163,24,164,22],[164,8,165,6,"health"],[164,14,165,12],[164,16,165,14],[164,19,165,17],[165,8,166,6,"maxHealth"],[165,17,166,15],[165,19,166,17],[165,22,166,20],[166,8,167,6,"stats"],[166,13,167,11],[166,15,167,13],[167,10,168,8,"attack"],[167,16,168,14],[167,18,168,16],[167,20,168,18],[168,10,169,8,"defense"],[168,17,169,15],[168,19,169,17],[168,21,169,19],[169,10,170,8,"health"],[169,16,170,14],[169,18,170,16],[169,21,170,19],[170,10,171,8,"maxHealth"],[170,19,171,17],[170,21,171,19],[170,24,171,22],[171,10,172,8,"critChance"],[171,20,172,18],[171,22,172,20],[171,23,172,21],[172,10,173,8,"critDamage"],[172,20,173,18],[172,22,173,20],[172,25,173,23],[173,10,174,8,"cooldownReduction"],[173,27,174,25],[173,29,174,27],[174,8,175,6],[174,9,175,7],[175,8,176,6,"position"],[175,16,176,14],[175,18,176,16],[176,10,176,18,"x"],[176,11,176,19],[176,13,176,21],[176,16,176,24],[177,10,176,26,"y"],[177,11,176,27],[177,13,176,29],[178,8,176,33],[178,9,176,34],[179,8,177,6,"lastDamaged"],[179,19,177,17],[179,21,177,19],[180,6,178,4],[180,7,178,5],[181,6,180,4,"state"],[181,11,180,9],[181,12,180,10,"enemies"],[181,19,180,17],[181,20,180,18,"push"],[181,24,180,22],[181,25,180,23,"enemy"],[181,30,180,28],[181,31,180,29],[182,4,181,2],[182,5,181,3],[184,4,183,2],[185,4,184,2],[185,10,184,8,"startCombat"],[185,21,184,19],[185,24,184,22,"startCombat"],[185,25,184,22],[185,30,184,28],[186,6,185,4,"setCombatState"],[186,20,185,18],[186,21,185,19,"prev"],[186,25,185,23],[186,30,185,28],[187,8,185,30],[187,11,185,33,"prev"],[187,15,185,37],[188,8,185,39,"isInCombat"],[188,18,185,49],[188,20,185,51],[189,6,185,56],[189,7,185,57],[189,8,185,58],[189,9,185,59],[191,6,187,4],[192,6,188,4,"combatEngine"],[192,25,188,16],[192,26,188,16,"combatEngine"],[192,38,188,16],[192,39,188,17,"addTickCallback"],[192,54,188,32],[192,55,188,33,"handleCombatTick"],[192,71,188,49],[192,72,188,50],[193,6,190,4],[193,10,190,8],[193,11,190,9,"combatEngine"],[193,30,190,21],[193,31,190,21,"combatEngine"],[193,43,190,21],[193,45,190,23],[194,8,191,6,"combatEngine"],[194,27,191,18],[194,28,191,18,"combatEngine"],[194,40,191,18],[194,41,191,19,"start"],[194,46,191,24],[194,47,191,25],[194,48,191,26],[195,6,192,4],[196,4,193,2],[196,5,193,3],[198,4,195,2],[199,4,196,2],[199,10,196,8,"stopCombat"],[199,20,196,18],[199,23,196,21,"stopCombat"],[199,24,196,21],[199,29,196,27],[200,6,197,4,"setCombatState"],[200,20,197,18],[200,21,197,19,"prev"],[200,25,197,23],[200,30,197,28],[201,8,197,30],[201,11,197,33,"prev"],[201,15,197,37],[202,8,197,39,"isInCombat"],[202,18,197,49],[202,20,197,51],[203,6,197,57],[203,7,197,58],[203,8,197,59],[203,9,197,60],[204,6,198,4,"combatEngine"],[204,25,198,16],[204,26,198,16,"combatEngine"],[204,38,198,16],[204,39,198,17,"removeTickCallback"],[204,57,198,35],[204,58,198,36,"handleCombatTick"],[204,74,198,52],[204,75,198,53],[205,4,199,2],[205,5,199,3],[207,4,201,2],[208,4,202,2],[208,10,202,8,"equipAbility"],[208,22,202,20],[208,25,202,23,"equipAbility"],[208,26,202,24,"abilityId"],[208,35,202,41],[208,37,202,43,"slotIndex"],[208,46,202,60],[208,51,202,74],[209,6,203,4],[209,13,203,11,"combatState"],[209,24,203,22],[209,25,203,23,"abilityManager"],[209,39,203,37],[209,40,203,38,"equipAbility"],[209,52,203,50],[209,53,203,51,"abilityId"],[209,62,203,60],[209,64,203,62,"slotIndex"],[209,73,203,71],[209,74,203,72],[210,4,204,2],[210,5,204,3],[211,4,206,2],[211,10,206,8,"getDeck"],[211,17,206,15],[211,20,206,18,"getDeck"],[211,21,206,18],[211,26,206,24],[212,6,207,4],[212,13,207,11,"combatState"],[212,24,207,22],[212,25,207,23,"abilityManager"],[212,39,207,37],[212,40,207,38,"getDeck"],[212,47,207,45],[212,48,207,46],[212,49,207,47],[213,4,208,2],[213,5,208,3],[214,4,210,2],[214,10,210,8,"getAvailableAbilities"],[214,31,210,29],[214,34,210,32,"getAvailableAbilities"],[214,35,210,32],[214,40,210,38],[215,6,211,4],[215,13,211,11,"combatState"],[215,24,211,22],[215,25,211,23,"abilityManager"],[215,39,211,37],[215,40,211,38,"getAvailableAbilities"],[215,61,211,59],[215,62,211,60],[215,63,211,61],[216,4,212,2],[216,5,212,3],[217,4,214,2],[217,10,214,8,"upgradeAbility"],[217,24,214,22],[217,27,214,26,"abilityId"],[217,36,214,43],[217,40,214,57],[218,6,215,4],[218,13,215,11,"combatState"],[218,24,215,22],[218,25,215,23,"abilityManager"],[218,39,215,37],[218,40,215,38,"upgradeAbility"],[218,54,215,52],[218,55,215,53,"abilityId"],[218,64,215,62],[218,65,215,63],[219,4,216,2],[219,5,216,3],[221,4,218,2],[222,4,219,2],[222,8,219,2,"useEffect"],[222,14,219,11],[222,15,219,11,"useEffect"],[222,24,219,11],[222,26,219,12],[222,32,219,18],[223,6,220,4,"combatEngine"],[223,25,220,16],[223,26,220,16,"combatEngine"],[223,38,220,16],[223,39,220,17,"start"],[223,44,220,22],[223,45,220,23],[223,46,220,24],[225,6,222,4],[226,6,223,4,"combatState"],[226,17,223,15],[226,18,223,16,"abilityManager"],[226,32,223,30],[226,33,223,31,"equipAbility"],[226,45,223,43],[226,46,223,44],[226,62,223,60],[226,64,223,62],[226,65,223,63],[226,66,223,64],[227,6,224,4,"combatState"],[227,17,224,15],[227,18,224,16,"abilityManager"],[227,32,224,30],[227,33,224,31,"equipAbility"],[227,45,224,43],[227,46,224,44],[227,61,224,59],[227,63,224,61],[227,64,224,62],[227,65,224,63],[228,6,226,4],[228,13,226,11],[228,19,226,17],[229,8,227,6,"combatEngine"],[229,27,227,18],[229,28,227,18,"combatEngine"],[229,40,227,18],[229,41,227,19,"stop"],[229,45,227,23],[229,46,227,24],[229,47,227,25],[230,6,228,4],[230,7,228,5],[231,4,229,2],[231,5,229,3],[231,7,229,5],[231,9,229,7],[231,10,229,8],[232,4,231,2],[232,10,231,8,"contextValue"],[232,22,231,39],[232,25,231,42],[233,6,232,4,"combatState"],[233,17,232,15],[234,6,233,4,"startCombat"],[234,17,233,15],[235,6,234,4,"stopCombat"],[235,16,234,14],[236,6,235,4,"equipAbility"],[236,18,235,16],[237,6,236,4,"getDeck"],[237,13,236,11],[238,6,237,4,"getAvailableAbilities"],[238,27,237,25],[239,6,238,4,"upgradeAbility"],[240,4,239,2],[240,5,239,3],[241,4,241,2],[241,24,242,4],[241,28,242,4,"_reactJsxDevRuntime"],[241,47,242,4],[241,48,242,4,"jsxDEV"],[241,54,242,4],[241,56,242,5,"CombatContext"],[241,69,242,18],[241,70,242,19,"Provider"],[241,78,242,27],[242,6,242,28,"value"],[242,11,242,33],[242,13,242,35,"contextValue"],[242,25,242,48],[243,6,242,48,"children"],[243,14,242,48],[243,16,243,7,"children"],[244,4,243,15],[245,6,243,15,"fileName"],[245,14,243,15],[245,16,243,15,"_jsxFileName"],[245,28,243,15],[246,6,243,15,"lineNumber"],[246,16,243,15],[247,6,243,15,"columnNumber"],[247,18,243,15],[248,4,243,15],[248,11,244,28],[248,12,244,29],[249,2,246,0],[249,3,246,1],[250,2,246,2,"_s3"],[250,5,246,2],[250,6,44,13,"CombatProvider"],[250,20,44,27],[251,2,44,27,"_c"],[251,4,44,27],[251,7,44,13,"CombatProvider"],[251,21,44,27],[252,2,44,27],[252,6,44,27,"_c"],[252,8,44,27],[253,2,44,27,"$RefreshReg$"],[253,14,44,27],[253,15,44,27,"_c"],[253,17,44,27],[254,0,44,27],[254,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEE;2BCmB;mBCC;4BCa;sDCC,sBD;0BEE;WFG;ODE;iDIY,yBJ;KDQ;GDC;sBOG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GPiB;yBWG;GXoB;sBYG;mBVC,uCU;GZQ;qBaG;mBXC,wCW;GbE;uBcG;GdE;kBeE;GfE;gCgBE;GhBE;yBiBE;GjBE;YkBG;WCO;KDE;GlBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}