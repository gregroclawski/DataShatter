{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":283},"end":{"line":4,"column":40,"index":323}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[3], \"./GameContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[4], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const {\n      updateNinja\n    } = (0, _GameContext.useGame)();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`🎯 Enemy killed! Max HP: ${enemy.maxHealth}`);\n\n      // Award XP and gold directly using useGame hook\n      const xpReward = 50;\n      const goldReward = 10;\n      console.log(`💰 Awarding ${xpReward} XP and ${goldReward} gold for kill`);\n      updateNinja(prev => {\n        console.log(`📊 XP before: ${prev.experience}, after: ${prev.experience + xpReward}`);\n        return {\n          experience: prev.experience + xpReward,\n          gold: prev.gold + goldReward\n        };\n      });\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 Combat tick running...');\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`🎯 ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      // Get screen dimensions for proper positioning\n      const SCREEN_WIDTH = 390; // Mobile width\n      const GAME_AREA_HEIGHT = 844 - 250; // Screen height minus bottom tabs\n      const ENEMY_SIZE = 35;\n\n      // Random position within game area bounds (like ninja positioning)\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"9CsFzlzz4PHf1Q0yBRSmcIqP5fo=\", false, function () {\n    return [_GameContext.useGame];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":301,"map":[[10,2,37,0,"Object"],[10,8,37,0],[10,9,37,0,"defineProperty"],[10,23,37,0],[10,24,37,0,"exports"],[10,31,37,0],[11,4,37,0,"enumerable"],[11,14,37,0],[12,4,37,0,"get"],[12,7,37,0],[12,18,37,0,"get"],[12,19,37,0],[13,6,37,0],[13,13,37,0,"useCombat"],[13,22,37,0],[14,4,37,0],[15,2,37,0],[16,2,47,0,"Object"],[16,8,47,0],[16,9,47,0,"defineProperty"],[16,23,47,0],[16,24,47,0,"exports"],[16,31,47,0],[17,4,47,0,"enumerable"],[17,14,47,0],[18,4,47,0,"get"],[18,7,47,0],[18,18,47,0,"get"],[18,19,47,0],[19,6,47,0],[19,13,47,0,"CombatProvider"],[19,27,47,0],[20,4,47,0],[21,2,47,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,4,0],[25,6,4,0,"_GameContext"],[25,18,4,0],[25,21,4,0,"require"],[25,28,4,0],[25,29,4,0,"_dependencyMap"],[25,43,4,0],[26,2,4,40],[26,6,4,40,"_reactJsxDevRuntime"],[26,25,4,40],[26,28,4,40,"require"],[26,35,4,40],[26,36,4,40,"_dependencyMap"],[26,50,4,40],[27,2,35,0],[27,8,35,6,"CombatContext"],[27,21,35,19],[27,37,35,22],[27,41,35,22,"createContext"],[27,47,35,35],[27,48,35,35,"createContext"],[27,61,35,35],[27,63,35,67,"undefined"],[27,72,35,76],[27,73,35,77],[28,2,37,7],[28,8,37,13,"useCombat"],[28,17,37,22],[28,20,37,25,"useCombat"],[28,21,37,25],[28,26,37,50],[29,4,37,50,"_s"],[29,6,37,50],[30,4,38,2],[30,10,38,8,"context"],[30,17,38,15],[30,20,38,18],[30,24,38,18,"useContext"],[30,30,38,28],[30,31,38,28,"useContext"],[30,41,38,28],[30,43,38,29,"CombatContext"],[30,56,38,42],[30,57,38,43],[31,4,39,2],[31,8,39,6],[31,9,39,7,"context"],[31,16,39,14],[31,18,39,16],[32,6,40,4],[32,12,40,10],[32,16,40,14,"Error"],[32,21,40,19],[32,22,40,20],[32,70,40,68],[32,71,40,69],[33,4,41,2],[34,4,42,2],[34,11,42,9,"context"],[34,18,42,16],[35,2,43,0],[35,3,43,1],[36,2,43,2,"_s"],[36,4,43,2],[36,5,37,13,"useCombat"],[36,14,37,22],[37,2,45,0],[37,6,45,4,"enemyCounter"],[37,18,45,16],[37,21,45,19],[37,22,45,20],[37,23,45,21],[37,24,45,22],[39,2,47,7],[39,8,47,13,"CombatProvider"],[39,22,47,27],[39,25,47,30,"CombatProvider"],[39,26,47,31],[40,4,47,33,"children"],[41,2,47,67],[41,3,47,68],[41,8,47,73],[42,4,47,73,"_s3"],[42,7,47,73],[43,4,48,2],[43,10,48,8],[44,6,48,10,"updateNinja"],[45,4,48,22],[45,5,48,23],[45,8,48,26],[45,12,48,26,"useGame"],[45,24,48,33],[45,25,48,33,"useGame"],[45,32,48,33],[45,34,48,34],[45,35,48,35],[46,4,50,2],[46,10,50,8],[46,11,50,9,"combatState"],[46,22,50,20],[46,24,50,22,"setCombatState"],[46,38,50,36],[46,39,50,37],[46,42,50,40],[46,46,50,40,"useState"],[46,52,50,48],[46,53,50,48,"useState"],[46,61,50,48],[46,63,50,62],[47,6,51,4,"isInCombat"],[47,16,51,14],[47,18,51,16],[47,23,51,21],[48,6,52,4,"currentTick"],[48,17,52,15],[48,19,52,17],[48,20,52,18],[49,6,53,4,"enemies"],[49,13,53,11],[49,15,53,13],[49,17,53,15],[50,6,54,4,"abilityManager"],[50,20,54,18],[50,22,54,20],[50,26,54,24,"AbilityManager"],[50,44,54,38],[50,45,54,38,"AbilityManager"],[50,59,54,38],[50,60,54,39],[50,61,54,40],[51,6,55,4,"statusEffects"],[51,19,55,17],[51,21,55,19],[51,25,55,23,"StatusEffectManager"],[51,44,55,42],[51,45,55,42,"StatusEffectManager"],[51,64,55,42],[51,65,55,43],[51,66,55,44],[52,6,56,4,"playerStats"],[52,17,56,15],[52,19,56,17],[53,8,57,6,"attack"],[53,14,57,12],[53,16,57,14],[53,18,57,16],[54,8,57,18],[55,8,58,6,"defense"],[55,15,58,13],[55,17,58,15],[55,18,58,16],[56,8,59,6,"health"],[56,14,59,12],[56,16,59,14],[56,19,59,17],[57,8,60,6,"maxHealth"],[57,17,60,15],[57,19,60,17],[57,22,60,20],[58,8,61,6,"critChance"],[58,18,61,16],[58,20,61,18],[58,21,61,19],[59,8,62,6,"critDamage"],[59,18,62,16],[59,20,62,18],[59,23,62,21],[60,8,63,6,"cooldownReduction"],[60,25,63,23],[60,27,63,25],[61,6,64,4],[62,4,65,2],[62,5,65,3],[62,6,65,4],[64,4,67,2],[65,4,68,2],[65,10,68,8,"handleEnemyKill"],[65,25,68,23],[65,28,68,27,"enemy"],[65,33,68,45],[65,37,68,50],[66,6,69,4,"console"],[66,13,69,11],[66,14,69,12,"log"],[66,17,69,15],[66,18,69,16],[66,46,69,44,"enemy"],[66,51,69,49],[66,52,69,50,"maxHealth"],[66,61,69,59],[66,63,69,61],[66,64,69,62],[68,6,71,4],[69,6,72,4],[69,12,72,10,"xpReward"],[69,20,72,18],[69,23,72,21],[69,25,72,23],[70,6,73,4],[70,12,73,10,"goldReward"],[70,22,73,20],[70,25,73,23],[70,27,73,25],[71,6,75,4,"console"],[71,13,75,11],[71,14,75,12,"log"],[71,17,75,15],[71,18,75,16],[71,33,75,31,"xpReward"],[71,41,75,39],[71,52,75,50,"goldReward"],[71,62,75,60],[71,78,75,76],[71,79,75,77],[72,6,77,4,"updateNinja"],[72,17,77,15],[72,18,77,17,"prev"],[72,22,77,21],[72,26,77,26],[73,8,78,6,"console"],[73,15,78,13],[73,16,78,14,"log"],[73,19,78,17],[73,20,78,18],[73,37,78,35,"prev"],[73,41,78,39],[73,42,78,40,"experience"],[73,52,78,50],[73,64,78,62,"prev"],[73,68,78,66],[73,69,78,67,"experience"],[73,79,78,77],[73,82,78,80,"xpReward"],[73,90,78,88],[73,92,78,90],[73,93,78,91],[74,8,79,6],[74,15,79,13],[75,10,80,8,"experience"],[75,20,80,18],[75,22,80,20,"prev"],[75,26,80,24],[75,27,80,25,"experience"],[75,37,80,35],[75,40,80,38,"xpReward"],[75,48,80,46],[76,10,81,8,"gold"],[76,14,81,12],[76,16,81,14,"prev"],[76,20,81,18],[76,21,81,19,"gold"],[76,25,81,23],[76,28,81,26,"goldReward"],[77,8,82,6],[77,9,82,7],[78,6,83,4],[78,7,83,5],[78,8,83,6],[79,4,84,2],[79,5,84,3],[81,4,86,2],[82,4,87,2],[82,10,87,8,"handleCombatTick"],[82,26,87,24],[82,29,87,27,"handleCombatTick"],[82,30,87,27],[82,35,87,33],[83,6,87,33],[83,10,87,33,"_s2"],[83,13,87,33],[83,16,87,33,"$RefreshSig$"],[83,28,87,33],[84,6,88,4,"console"],[84,13,88,11],[84,14,88,12,"log"],[84,17,88,15],[84,18,88,16],[84,45,88,43],[84,46,88,44],[85,6,89,4,"_s2"],[85,9,89,4],[85,10,89,4,"setCombatState"],[85,24,89,18],[85,25,89,18,"_s2"],[85,28,89,18],[85,29,89,19,"prev"],[85,33,89,23],[85,37,89,27],[86,8,89,27,"_s2"],[86,11,89,27],[87,8,90,6],[87,14,90,12,"newTick"],[87,21,90,19],[87,24,90,22,"combatEngine"],[87,43,90,34],[87,44,90,34,"combatEngine"],[87,56,90,34],[87,57,90,35,"getCurrentTick"],[87,71,90,49],[87,72,90,50],[87,73,90,51],[88,8,91,6],[88,14,91,12,"newState"],[88,22,91,20],[88,25,91,23],[89,10,91,25],[89,13,91,28,"prev"],[89,17,91,32],[90,10,91,34,"currentTick"],[90,21,91,45],[90,23,91,47,"newTick"],[91,8,91,55],[91,9,91,56],[92,8,93,6],[92,12,93,10],[92,13,93,11,"newState"],[92,21,93,19],[92,22,93,20,"isInCombat"],[92,32,93,30],[92,34,93,32],[92,41,93,39,"newState"],[92,49,93,47],[94,8,95,6],[95,8,96,6,"newState"],[95,16,96,14],[95,17,96,15,"abilityManager"],[95,31,96,29],[95,32,96,30,"updateCooldowns"],[95,47,96,45],[95,48,96,46,"newTick"],[95,55,96,53],[95,56,96,54],[97,8,98,6],[98,8,99,6],[98,14,99,12,"effectResults"],[98,27,99,25],[98,30,99,28,"newState"],[98,38,99,36],[98,39,99,37,"statusEffects"],[98,52,99,50],[98,53,99,51,"processTick"],[98,64,99,62],[98,65,99,63,"newTick"],[98,72,99,70],[98,73,99,71],[100,8,101,6],[101,8,102,6,"effectResults"],[101,21,102,19],[101,22,102,20,"forEach"],[101,29,102,27],[101,30,102,28],[101,31,102,29,"results"],[101,38,102,36],[101,40,102,38,"entityId"],[101,48,102,46],[101,53,102,51],[102,10,103,8],[102,16,103,14,"enemyIndex"],[102,26,103,24],[102,29,103,27,"newState"],[102,37,103,35],[102,38,103,36,"enemies"],[102,45,103,43],[102,46,103,44,"findIndex"],[102,55,103,53],[102,56,103,54,"e"],[102,57,103,55],[102,61,103,59,"e"],[102,62,103,60],[102,63,103,61,"id"],[102,65,103,63],[102,70,103,68,"entityId"],[102,78,103,76],[102,79,103,77],[103,10,104,8],[103,14,104,12,"enemyIndex"],[103,24,104,22],[103,28,104,26],[103,29,104,27],[103,31,104,29],[104,12,105,10,"results"],[104,19,105,17],[104,20,105,18,"forEach"],[104,27,105,25],[104,28,105,26,"result"],[104,34,105,32],[104,38,105,36],[105,14,106,12,"newState"],[105,22,106,20],[105,23,106,21,"enemies"],[105,30,106,28],[105,31,106,29,"enemyIndex"],[105,41,106,39],[105,42,106,40],[105,43,106,41,"health"],[105,49,106,47],[105,53,106,51,"result"],[105,59,106,57],[105,60,106,58,"damage"],[105,66,106,64],[106,14,107,12,"newState"],[106,22,107,20],[106,23,107,21,"enemies"],[106,30,107,28],[106,31,107,29,"enemyIndex"],[106,41,107,39],[106,42,107,40],[106,43,107,41,"lastDamaged"],[106,54,107,52],[106,57,107,55,"newTick"],[106,64,107,62],[107,12,108,10],[107,13,108,11],[107,14,108,12],[108,10,109,8],[109,8,110,6],[109,9,110,7],[109,10,110,8],[111,8,112,6],[112,8,113,6],[112,13,113,11],[112,17,113,15,"i"],[112,18,113,16],[112,21,113,19],[112,22,113,20],[112,24,113,22,"i"],[112,25,113,23],[112,28,113,26],[112,29,113,27],[112,31,113,29,"i"],[112,32,113,30],[112,34,113,32],[112,36,113,34],[113,10,114,8],[113,14,114,12,"newState"],[113,22,114,20],[113,23,114,21,"abilityManager"],[113,37,114,35],[113,38,114,36,"isAbilityReady"],[113,52,114,50],[113,53,114,51,"i"],[113,54,114,52],[113,55,114,53],[113,59,114,57,"newState"],[113,67,114,65],[113,68,114,66,"enemies"],[113,75,114,73],[113,76,114,74,"length"],[113,82,114,80],[113,85,114,83],[113,86,114,84],[113,88,114,86],[114,12,115,10],[114,16,115,14,"newState"],[114,24,115,22],[114,25,115,23,"abilityManager"],[114,39,115,37],[114,40,115,38,"useAbility"],[114,50,115,48],[114,51,115,49,"i"],[114,52,115,50],[114,54,115,52,"newTick"],[114,61,115,59],[114,62,115,60],[114,64,115,62],[115,14,116,12,"castAbility"],[115,25,116,23],[115,26,116,24,"newState"],[115,34,116,32],[115,36,116,34,"i"],[115,37,116,35],[115,38,116,36],[116,12,117,10],[117,10,118,8],[118,8,119,6],[120,8,121,6],[121,8,122,6],[121,14,122,12,"deadEnemies"],[121,25,122,23],[121,28,122,26,"newState"],[121,36,122,34],[121,37,122,35,"enemies"],[121,44,122,42],[121,45,122,43,"filter"],[121,51,122,49],[121,52,122,50,"enemy"],[121,57,122,55],[121,61,122,59,"enemy"],[121,66,122,64],[121,67,122,65,"health"],[121,73,122,71],[121,77,122,75],[121,78,122,76],[121,79,122,77],[122,8,123,6,"deadEnemies"],[122,19,123,17],[122,20,123,18,"forEach"],[122,27,123,25],[122,28,123,26,"enemy"],[122,33,123,31],[122,37,123,35],[123,10,124,8,"handleEnemyKill"],[123,25,124,23],[123,26,124,24,"enemy"],[123,31,124,29],[123,32,124,30],[124,8,125,6],[124,9,125,7],[124,10,125,8],[126,8,127,6],[127,8,128,6,"newState"],[127,16,128,14],[127,17,128,15,"enemies"],[127,24,128,22],[127,27,128,25,"newState"],[127,35,128,33],[127,36,128,34,"enemies"],[127,43,128,41],[127,44,128,42,"filter"],[127,50,128,48],[127,51,128,49,"enemy"],[127,56,128,54],[127,60,128,58,"enemy"],[127,65,128,63],[127,66,128,64,"health"],[127,72,128,70],[127,75,128,73],[127,76,128,74],[127,77,128,75],[129,8,130,6],[130,8,131,6],[130,14,131,12,"MAX_ENEMIES"],[130,25,131,23],[130,28,131,26],[130,30,131,28],[131,8,132,6,"console"],[131,15,132,13],[131,16,132,14,"log"],[131,19,132,17],[131,20,132,18],[131,53,132,51,"newState"],[131,61,132,59],[131,62,132,60,"enemies"],[131,69,132,67],[131,70,132,68,"length"],[131,76,132,74],[131,85,132,83,"MAX_ENEMIES"],[131,96,132,94],[131,98,132,96],[131,99,132,97],[132,8,133,6],[132,15,133,13,"newState"],[132,23,133,21],[132,24,133,22,"enemies"],[132,31,133,29],[132,32,133,30,"length"],[132,38,133,36],[132,41,133,39,"MAX_ENEMIES"],[132,52,133,50],[132,54,133,52],[133,10,134,8,"console"],[133,17,134,15],[133,18,134,16,"log"],[133,21,134,19],[133,22,134,20],[133,43,134,41,"newState"],[133,51,134,49],[133,52,134,50,"enemies"],[133,59,134,57],[133,60,134,58,"length"],[133,66,134,64],[133,69,134,67],[133,70,134,68],[133,74,134,72,"MAX_ENEMIES"],[133,85,134,83],[133,87,134,85],[133,88,134,86],[134,10,135,8,"spawnTestEnemy"],[134,24,135,22],[134,25,135,23,"newState"],[134,33,135,31],[134,34,135,32],[135,8,136,6],[136,8,138,6],[136,15,138,13,"newState"],[136,23,138,21],[137,6,139,4],[137,7,139,5],[137,47,139,6],[138,4,140,2],[138,5,140,3],[140,4,142,2],[141,4,143,2],[141,10,143,8,"castAbility"],[141,21,143,19],[141,24,143,22,"castAbility"],[141,25,143,23,"state"],[141,30,143,41],[141,32,143,43,"slotIndex"],[141,41,143,60],[141,46,143,65],[142,6,144,4],[142,12,144,10,"deck"],[142,16,144,14],[142,19,144,17,"state"],[142,24,144,22],[142,25,144,23,"abilityManager"],[142,39,144,37],[142,40,144,38,"getDeck"],[142,47,144,45],[142,48,144,46],[142,49,144,47],[143,6,145,4],[143,12,145,10,"ability"],[143,19,145,17],[143,22,145,20,"deck"],[143,26,145,24],[143,27,145,25,"slots"],[143,32,145,30],[143,33,145,31,"slotIndex"],[143,42,145,40],[143,43,145,41],[144,6,146,4],[144,10,146,8],[144,11,146,9,"ability"],[144,18,146,16],[144,20,146,18],[146,6,148,4],[147,6,149,4],[147,12,149,10,"target"],[147,18,149,16],[147,21,149,19,"state"],[147,26,149,24],[147,27,149,25,"enemies"],[147,34,149,32],[147,35,149,33],[147,36,149,34],[147,37,149,35],[148,6,150,4],[148,10,150,8],[148,11,150,9,"target"],[148,17,150,15],[148,19,150,17],[150,6,152,4],[151,6,153,4],[151,10,153,8,"damage"],[151,16,153,14],[151,19,153,17,"ability"],[151,26,153,24],[151,27,153,25,"stats"],[151,32,153,30],[151,33,153,31,"baseDamage"],[151,43,153,41],[153,6,155,4],[154,6,156,4,"deck"],[154,10,156,8],[154,11,156,9,"activeSynergies"],[154,26,156,24],[154,27,156,25,"forEach"],[154,34,156,32],[154,35,156,33,"synergy"],[154,42,156,40],[154,46,156,44],[155,8,157,6],[155,12,157,10,"synergy"],[155,19,157,17],[155,20,157,18,"bonus"],[155,25,157,23],[155,26,157,24,"damageBonus"],[155,37,157,35],[155,41,158,10,"synergy"],[155,48,158,17],[155,49,158,18,"requiredTags"],[155,61,158,30],[155,62,158,31,"some"],[155,66,158,35],[155,67,158,36,"tag"],[155,70,158,39],[155,74,158,43,"ability"],[155,81,158,50],[155,82,158,51,"tags"],[155,86,158,55],[155,87,158,56,"includes"],[155,95,158,64],[155,96,158,65,"tag"],[155,99,158,68],[155,100,158,69],[155,101,158,70],[155,103,158,72],[156,10,159,8,"damage"],[156,16,159,14],[156,20,159,19],[156,21,159,20],[156,24,159,23,"synergy"],[156,31,159,30],[156,32,159,31,"bonus"],[156,37,159,36],[156,38,159,37,"damageBonus"],[156,49,159,48],[156,52,159,51],[156,55,159,55],[157,8,160,6],[158,6,161,4],[158,7,161,5],[158,8,161,6],[160,6,163,4],[161,6,164,4],[161,12,164,10,"damageResult"],[161,24,164,22],[161,27,164,25,"DamageCalculator"],[161,46,164,41],[161,47,164,41,"DamageCalculator"],[161,63,164,41],[161,64,164,42,"calculateDamage"],[161,79,164,57],[161,80,164,58,"damage"],[161,86,164,64],[161,88,164,66,"state"],[161,93,164,71],[161,94,164,72,"playerStats"],[161,105,164,83],[161,107,164,85,"target"],[161,113,164,91],[161,114,164,92,"stats"],[161,119,164,97],[161,120,164,98],[163,6,166,4],[164,6,167,4],[164,10,167,8,"ability"],[164,17,167,15],[164,18,167,16,"effects"],[164,25,167,23],[164,26,167,24,"includes"],[164,34,167,32],[164,35,167,33],[164,49,167,47],[164,50,167,48],[164,52,167,50],[165,8,168,6,"target"],[165,14,168,12],[165,15,168,13,"health"],[165,21,168,19],[165,25,168,23,"damageResult"],[165,37,168,35],[165,38,168,36,"damage"],[165,44,168,42],[166,8,169,6,"target"],[166,14,169,12],[166,15,169,13,"lastDamaged"],[166,26,169,24],[166,29,169,27,"state"],[166,34,169,32],[166,35,169,33,"currentTick"],[166,46,169,44],[167,6,170,4],[167,7,170,5],[167,13,170,11],[167,17,170,15,"ability"],[167,24,170,22],[167,25,170,23,"effects"],[167,32,170,30],[167,33,170,31,"includes"],[167,41,170,39],[167,42,170,40],[167,47,170,45],[167,48,170,46],[167,50,170,48],[168,8,171,6],[169,8,172,6,"state"],[169,13,172,11],[169,14,172,12,"enemies"],[169,21,172,19],[169,22,172,20,"forEach"],[169,29,172,27],[169,30,172,28,"enemy"],[169,35,172,33],[169,39,172,37],[170,10,173,8,"enemy"],[170,15,173,13],[170,16,173,14,"health"],[170,22,173,20],[170,26,173,24,"Math"],[170,30,173,28],[170,31,173,29,"floor"],[170,36,173,34],[170,37,173,35,"damageResult"],[170,49,173,47],[170,50,173,48,"damage"],[170,56,173,54],[170,59,173,57],[170,62,173,60],[170,63,173,61],[170,64,173,62],[170,65,173,63],[171,10,174,8,"enemy"],[171,15,174,13],[171,16,174,14,"lastDamaged"],[171,27,174,25],[171,30,174,28,"state"],[171,35,174,33],[171,36,174,34,"currentTick"],[171,47,174,45],[172,8,175,6],[172,9,175,7],[172,10,175,8],[173,6,176,4],[175,6,178,4],[176,6,179,4],[176,10,179,8,"ability"],[176,17,179,15],[176,18,179,16,"effects"],[176,25,179,23],[176,26,179,24,"includes"],[176,34,179,32],[176,35,179,33],[176,40,179,38],[176,41,179,39],[176,45,179,43,"ability"],[176,52,179,50],[176,53,179,51,"stats"],[176,58,179,56],[176,59,179,57,"duration"],[176,67,179,65],[176,69,179,67],[177,8,180,6,"state"],[177,13,180,11],[177,14,180,12,"statusEffects"],[177,27,180,25],[177,28,180,26,"addEffect"],[177,37,180,35],[177,38,180,36,"target"],[177,44,180,42],[177,45,180,43,"id"],[177,47,180,45],[177,49,180,47],[178,10,181,8,"id"],[178,12,181,10],[178,14,181,12],[178,17,181,15,"ability"],[178,24,181,22],[178,25,181,23,"id"],[178,27,181,25],[178,33,181,31],[179,10,182,8,"type"],[179,14,182,12],[179,16,182,14],[179,21,182,19],[180,10,183,8,"remainingTicks"],[180,24,183,22],[180,26,183,24,"Math"],[180,30,183,28],[180,31,183,29,"floor"],[180,36,183,34],[180,37,183,35,"ability"],[180,44,183,42],[180,45,183,43,"stats"],[180,50,183,48],[180,51,183,49,"duration"],[180,59,183,57],[180,62,183,60],[180,64,183,62],[180,65,183,63],[181,10,183,65],[182,10,184,8,"tickInterval"],[182,22,184,20],[182,24,184,22],[182,26,184,24],[183,10,184,26],[184,10,185,8,"lastTick"],[184,18,185,16],[184,20,185,18,"state"],[184,25,185,23],[184,26,185,24,"currentTick"],[184,37,185,35],[185,10,186,8,"value"],[185,15,186,13],[185,17,186,15,"Math"],[185,21,186,19],[185,22,186,20,"floor"],[185,27,186,25],[185,28,186,26,"damage"],[185,34,186,32],[185,37,186,35],[185,40,186,38],[185,41,186,39],[186,10,186,41],[187,10,187,8,"stackable"],[187,19,187,17],[187,21,187,19],[188,8,188,6],[188,9,188,7],[188,10,188,8],[189,6,189,4],[190,6,191,4,"console"],[190,13,191,11],[190,14,191,12,"log"],[190,17,191,15],[190,18,191,16],[190,24,191,22,"ability"],[190,31,191,29],[190,32,191,30,"name"],[190,36,191,34],[190,54,191,52,"damageResult"],[190,66,191,64],[190,67,191,65,"damage"],[190,73,191,71],[190,76,191,74,"damageResult"],[190,88,191,86],[190,89,191,87,"isCritical"],[190,99,191,97],[190,102,191,100],[190,112,191,110],[190,115,191,113],[190,117,191,115],[190,119,191,117],[190,120,191,118],[191,4,192,2],[191,5,192,3],[193,4,194,2],[194,4,195,2],[194,10,195,8,"spawnTestEnemy"],[194,24,195,22],[194,27,195,26,"state"],[194,32,195,44],[194,36,195,49],[195,6,196,4],[196,6,197,4],[196,12,197,10,"SCREEN_WIDTH"],[196,24,197,22],[196,27,197,25],[196,30,197,28],[196,31,197,29],[196,32,197,30],[197,6,198,4],[197,12,198,10,"GAME_AREA_HEIGHT"],[197,28,198,26],[197,31,198,29],[197,34,198,32],[197,37,198,35],[197,40,198,38],[197,41,198,39],[197,42,198,40],[198,6,199,4],[198,12,199,10,"ENEMY_SIZE"],[198,22,199,20],[198,25,199,23],[198,27,199,25],[200,6,201,4],[201,6,202,4],[201,12,202,10,"x"],[201,13,202,11],[201,16,202,14,"Math"],[201,20,202,18],[201,21,202,19,"random"],[201,27,202,25],[201,28,202,26],[201,29,202,27],[201,33,202,31,"SCREEN_WIDTH"],[201,45,202,43],[201,48,202,46,"ENEMY_SIZE"],[201,58,202,56],[201,61,202,59],[201,62,202,60],[201,63,202,61],[201,66,202,64,"ENEMY_SIZE"],[201,76,202,74],[201,77,202,75],[201,78,202,76],[202,6,203,4],[202,12,203,10,"y"],[202,13,203,11],[202,16,203,14,"Math"],[202,20,203,18],[202,21,203,19,"random"],[202,27,203,25],[202,28,203,26],[202,29,203,27],[202,33,203,31,"GAME_AREA_HEIGHT"],[202,49,203,47],[202,52,203,50,"ENEMY_SIZE"],[202,62,203,60],[202,65,203,63],[202,66,203,64],[202,67,203,65],[202,70,203,68,"ENEMY_SIZE"],[202,80,203,78],[202,81,203,79],[202,82,203,80],[204,6,205,4],[204,12,205,10,"enemy"],[204,17,205,28],[204,20,205,31],[205,8,206,6,"id"],[205,10,206,8],[205,12,206,10],[205,21,206,19],[205,23,206,21,"enemyCounter"],[205,35,206,33],[205,37,206,35],[206,8,207,6,"name"],[206,12,207,10],[206,14,207,12],[206,24,207,22],[207,8,208,6,"health"],[207,14,208,12],[207,16,208,14],[207,19,208,17],[208,8,209,6,"maxHealth"],[208,17,209,15],[208,19,209,17],[208,22,209,20],[209,8,210,6,"stats"],[209,13,210,11],[209,15,210,13],[210,10,211,8,"attack"],[210,16,211,14],[210,18,211,16],[210,20,211,18],[211,10,212,8,"defense"],[211,17,212,15],[211,19,212,17],[211,21,212,19],[212,10,213,8,"health"],[212,16,213,14],[212,18,213,16],[212,21,213,19],[213,10,214,8,"maxHealth"],[213,19,214,17],[213,21,214,19],[213,24,214,22],[214,10,215,8,"critChance"],[214,20,215,18],[214,22,215,20],[214,23,215,21],[215,10,216,8,"critDamage"],[215,20,216,18],[215,22,216,20],[215,25,216,23],[216,10,217,8,"cooldownReduction"],[216,27,217,25],[216,29,217,27],[217,8,218,6],[217,9,218,7],[218,8,219,6,"position"],[218,16,219,14],[218,18,219,16],[219,10,219,18,"x"],[219,11,219,19],[220,10,219,21,"y"],[221,8,219,23],[221,9,219,24],[222,8,220,6,"lastDamaged"],[222,19,220,17],[222,21,220,19],[223,6,221,4],[223,7,221,5],[224,6,223,4,"state"],[224,11,223,9],[224,12,223,10,"enemies"],[224,19,223,17],[224,20,223,18,"push"],[224,24,223,22],[224,25,223,23,"enemy"],[224,30,223,28],[224,31,223,29],[225,4,224,2],[225,5,224,3],[227,4,226,2],[228,4,227,2],[228,10,227,8,"startCombat"],[228,21,227,19],[228,24,227,22,"startCombat"],[228,25,227,22],[228,30,227,28],[229,6,228,4,"console"],[229,13,228,11],[229,14,228,12,"log"],[229,17,228,15],[229,18,228,16],[229,63,228,61],[229,64,228,62],[230,6,229,4,"setCombatState"],[230,20,229,18],[230,21,229,19,"prev"],[230,25,229,23],[230,30,229,28],[231,8,229,30],[231,11,229,33,"prev"],[231,15,229,37],[232,8,229,39,"isInCombat"],[232,18,229,49],[232,20,229,51],[233,6,229,56],[233,7,229,57],[233,8,229,58],[233,9,229,59],[235,6,231,4],[236,6,232,4,"combatEngine"],[236,25,232,16],[236,26,232,16,"combatEngine"],[236,38,232,16],[236,39,232,17,"addTickCallback"],[236,54,232,32],[236,55,232,33,"handleCombatTick"],[236,71,232,49],[236,72,232,50],[237,6,233,4,"console"],[237,13,233,11],[237,14,233,12,"log"],[237,17,233,15],[237,18,233,16],[237,62,233,60],[237,63,233,61],[239,6,235,4],[240,6,236,4,"combatEngine"],[240,25,236,16],[240,26,236,16,"combatEngine"],[240,38,236,16],[240,39,236,17,"start"],[240,44,236,22],[240,45,236,23],[240,46,236,24],[241,4,237,2],[241,5,237,3],[243,4,239,2],[244,4,240,2],[244,10,240,8,"stopCombat"],[244,20,240,18],[244,23,240,21,"stopCombat"],[244,24,240,21],[244,29,240,27],[245,6,241,4,"setCombatState"],[245,20,241,18],[245,21,241,19,"prev"],[245,25,241,23],[245,30,241,28],[246,8,241,30],[246,11,241,33,"prev"],[246,15,241,37],[247,8,241,39,"isInCombat"],[247,18,241,49],[247,20,241,51],[248,6,241,57],[248,7,241,58],[248,8,241,59],[248,9,241,60],[249,6,242,4,"combatEngine"],[249,25,242,16],[249,26,242,16,"combatEngine"],[249,38,242,16],[249,39,242,17,"removeTickCallback"],[249,57,242,35],[249,58,242,36,"handleCombatTick"],[249,74,242,52],[249,75,242,53],[250,4,243,2],[250,5,243,3],[252,4,245,2],[253,4,246,2],[253,10,246,8,"equipAbility"],[253,22,246,20],[253,25,246,23,"equipAbility"],[253,26,246,24,"abilityId"],[253,35,246,41],[253,37,246,43,"slotIndex"],[253,46,246,60],[253,51,246,74],[254,6,247,4],[254,13,247,11,"combatState"],[254,24,247,22],[254,25,247,23,"abilityManager"],[254,39,247,37],[254,40,247,38,"equipAbility"],[254,52,247,50],[254,53,247,51,"abilityId"],[254,62,247,60],[254,64,247,62,"slotIndex"],[254,73,247,71],[254,74,247,72],[255,4,248,2],[255,5,248,3],[256,4,250,2],[256,10,250,8,"getDeck"],[256,17,250,15],[256,20,250,18,"getDeck"],[256,21,250,18],[256,26,250,24],[257,6,251,4],[257,13,251,11,"combatState"],[257,24,251,22],[257,25,251,23,"abilityManager"],[257,39,251,37],[257,40,251,38,"getDeck"],[257,47,251,45],[257,48,251,46],[257,49,251,47],[258,4,252,2],[258,5,252,3],[259,4,254,2],[259,10,254,8,"getAvailableAbilities"],[259,31,254,29],[259,34,254,32,"getAvailableAbilities"],[259,35,254,32],[259,40,254,38],[260,6,255,4],[260,13,255,11,"combatState"],[260,24,255,22],[260,25,255,23,"abilityManager"],[260,39,255,37],[260,40,255,38,"getAvailableAbilities"],[260,61,255,59],[260,62,255,60],[260,63,255,61],[261,4,256,2],[261,5,256,3],[262,4,258,2],[262,10,258,8,"upgradeAbility"],[262,24,258,22],[262,27,258,26,"abilityId"],[262,36,258,43],[262,40,258,57],[263,6,259,4],[263,13,259,11,"combatState"],[263,24,259,22],[263,25,259,23,"abilityManager"],[263,39,259,37],[263,40,259,38,"upgradeAbility"],[263,54,259,52],[263,55,259,53,"abilityId"],[263,64,259,62],[263,65,259,63],[264,4,260,2],[264,5,260,3],[266,4,262,2],[267,4,263,2],[267,8,263,2,"useEffect"],[267,14,263,11],[267,15,263,11,"useEffect"],[267,24,263,11],[267,26,263,12],[267,32,263,18],[268,6,264,4,"combatEngine"],[268,25,264,16],[268,26,264,16,"combatEngine"],[268,38,264,16],[268,39,264,17,"start"],[268,44,264,22],[268,45,264,23],[268,46,264,24],[270,6,266,4],[271,6,267,4,"combatState"],[271,17,267,15],[271,18,267,16,"abilityManager"],[271,32,267,30],[271,33,267,31,"equipAbility"],[271,45,267,43],[271,46,267,44],[271,62,267,60],[271,64,267,62],[271,65,267,63],[271,66,267,64],[272,6,268,4,"combatState"],[272,17,268,15],[272,18,268,16,"abilityManager"],[272,32,268,30],[272,33,268,31,"equipAbility"],[272,45,268,43],[272,46,268,44],[272,61,268,59],[272,63,268,61],[272,64,268,62],[272,65,268,63],[273,6,270,4],[273,13,270,11],[273,19,270,17],[274,8,271,6,"combatEngine"],[274,27,271,18],[274,28,271,18,"combatEngine"],[274,40,271,18],[274,41,271,19,"stop"],[274,45,271,23],[274,46,271,24],[274,47,271,25],[275,6,272,4],[275,7,272,5],[276,4,273,2],[276,5,273,3],[276,7,273,5],[276,9,273,7],[276,10,273,8],[277,4,275,2],[277,10,275,8,"contextValue"],[277,22,275,39],[277,25,275,42],[278,6,276,4,"combatState"],[278,17,276,15],[279,6,277,4,"startCombat"],[279,17,277,15],[280,6,278,4,"stopCombat"],[280,16,278,14],[281,6,279,4,"equipAbility"],[281,18,279,16],[282,6,280,4,"getDeck"],[282,13,280,11],[283,6,281,4,"getAvailableAbilities"],[283,27,281,25],[284,6,282,4,"upgradeAbility"],[285,4,283,2],[285,5,283,3],[286,4,285,2],[286,24,286,4],[286,28,286,4,"_reactJsxDevRuntime"],[286,47,286,4],[286,48,286,4,"jsxDEV"],[286,54,286,4],[286,56,286,5,"CombatContext"],[286,69,286,18],[286,70,286,19,"Provider"],[286,78,286,27],[287,6,286,28,"value"],[287,11,286,33],[287,13,286,35,"contextValue"],[287,25,286,48],[288,6,286,48,"children"],[288,14,286,48],[288,16,287,7,"children"],[289,4,287,15],[290,6,287,15,"fileName"],[290,14,287,15],[290,16,287,15,"_jsxFileName"],[290,28,287,15],[291,6,287,15,"lineNumber"],[291,16,287,15],[292,6,287,15,"columnNumber"],[292,18,287,15],[293,4,287,15],[293,11,288,28],[293,12,288,29],[294,2,290,0],[294,3,290,1],[295,2,290,2,"_s3"],[295,5,290,2],[295,6,47,13,"CombatProvider"],[295,20,47,27],[296,4,47,27],[296,12,48,26,"useGame"],[296,24,48,33],[296,25,48,33,"useGame"],[296,32,48,33],[297,2,48,33],[298,2,48,33,"_c"],[298,4,48,33],[298,7,47,13,"CombatProvider"],[298,21,47,27],[299,2,47,27],[299,6,47,27,"_c"],[299,8,47,27],[300,2,47,27,"$RefreshReg$"],[300,14,47,27],[300,15,47,27,"_c"],[300,17,47,27],[301,0,47,27],[301,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","updateNinja$argument_0","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCoC;CDM;8BEI;0BCqB;gBCS;KDM;GDC;2BGG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GHC;sBUG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GViB;yBcG;Gd6B;sBeG;mBXE,uCW;GfQ;qBgBG;mBZC,wCY;GhBE;uBiBG;GjBE;kBkBE;GlBE;gCmBE;GnBE;yBoBE;GpBE;YqBG;WCO;KDE;GrBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}