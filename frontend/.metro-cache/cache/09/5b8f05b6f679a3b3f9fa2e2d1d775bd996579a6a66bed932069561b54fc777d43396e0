{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`🎯 Enemy killed! Max HP: ${enemy.maxHealth}`);\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 Combat tick running...');\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`🎯 ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      // Get screen dimensions for proper positioning\n      const SCREEN_WIDTH = 390; // Mobile width\n      const GAME_AREA_HEIGHT = 844 - 250; // Screen height minus bottom tabs\n      const ENEMY_SIZE = 35;\n\n      // Random position within game area bounds (like ninja positioning)\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"sjvsZ9aYnAcBXQDfT3kNLzJnF80=\");\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":283,"map":[[10,2,36,0,"Object"],[10,8,36,0],[10,9,36,0,"defineProperty"],[10,23,36,0],[10,24,36,0,"exports"],[10,31,36,0],[11,4,36,0,"enumerable"],[11,14,36,0],[12,4,36,0,"get"],[12,7,36,0],[12,18,36,0,"get"],[12,19,36,0],[13,6,36,0],[13,13,36,0,"useCombat"],[13,22,36,0],[14,4,36,0],[15,2,36,0],[16,2,46,0,"Object"],[16,8,46,0],[16,9,46,0,"defineProperty"],[16,23,46,0],[16,24,46,0,"exports"],[16,31,46,0],[17,4,46,0,"enumerable"],[17,14,46,0],[18,4,46,0,"get"],[18,7,46,0],[18,18,46,0,"get"],[18,19,46,0],[19,6,46,0],[19,13,46,0,"CombatProvider"],[19,27,46,0],[20,4,46,0],[21,2,46,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,3,85],[25,6,3,85,"_reactJsxDevRuntime"],[25,25,3,85],[25,28,3,85,"require"],[25,35,3,85],[25,36,3,85,"_dependencyMap"],[25,50,3,85],[26,2,34,0],[26,8,34,6,"CombatContext"],[26,21,34,19],[26,37,34,22],[26,41,34,22,"createContext"],[26,47,34,35],[26,48,34,35,"createContext"],[26,61,34,35],[26,63,34,67,"undefined"],[26,72,34,76],[26,73,34,77],[27,2,36,7],[27,8,36,13,"useCombat"],[27,17,36,22],[27,20,36,25,"useCombat"],[27,21,36,25],[27,26,36,50],[28,4,36,50,"_s"],[28,6,36,50],[29,4,37,2],[29,10,37,8,"context"],[29,17,37,15],[29,20,37,18],[29,24,37,18,"useContext"],[29,30,37,28],[29,31,37,28,"useContext"],[29,41,37,28],[29,43,37,29,"CombatContext"],[29,56,37,42],[29,57,37,43],[30,4,38,2],[30,8,38,6],[30,9,38,7,"context"],[30,16,38,14],[30,18,38,16],[31,6,39,4],[31,12,39,10],[31,16,39,14,"Error"],[31,21,39,19],[31,22,39,20],[31,70,39,68],[31,71,39,69],[32,4,40,2],[33,4,41,2],[33,11,41,9,"context"],[33,18,41,16],[34,2,42,0],[34,3,42,1],[35,2,42,2,"_s"],[35,4,42,2],[35,5,36,13,"useCombat"],[35,14,36,22],[36,2,44,0],[36,6,44,4,"enemyCounter"],[36,18,44,16],[36,21,44,19],[36,22,44,20],[36,23,44,21],[36,24,44,22],[38,2,46,7],[38,8,46,13,"CombatProvider"],[38,22,46,27],[38,25,46,30,"CombatProvider"],[38,26,46,31],[39,4,46,33,"children"],[40,2,46,67],[40,3,46,68],[40,8,46,73],[41,4,46,73,"_s3"],[41,7,46,73],[42,4,48,2],[42,10,48,8],[42,11,48,9,"combatState"],[42,22,48,20],[42,24,48,22,"setCombatState"],[42,38,48,36],[42,39,48,37],[42,42,48,40],[42,46,48,40,"useState"],[42,52,48,48],[42,53,48,48,"useState"],[42,61,48,48],[42,63,48,62],[43,6,49,4,"isInCombat"],[43,16,49,14],[43,18,49,16],[43,23,49,21],[44,6,50,4,"currentTick"],[44,17,50,15],[44,19,50,17],[44,20,50,18],[45,6,51,4,"enemies"],[45,13,51,11],[45,15,51,13],[45,17,51,15],[46,6,52,4,"abilityManager"],[46,20,52,18],[46,22,52,20],[46,26,52,24,"AbilityManager"],[46,44,52,38],[46,45,52,38,"AbilityManager"],[46,59,52,38],[46,60,52,39],[46,61,52,40],[47,6,53,4,"statusEffects"],[47,19,53,17],[47,21,53,19],[47,25,53,23,"StatusEffectManager"],[47,44,53,42],[47,45,53,42,"StatusEffectManager"],[47,64,53,42],[47,65,53,43],[47,66,53,44],[48,6,54,4,"playerStats"],[48,17,54,15],[48,19,54,17],[49,8,55,6,"attack"],[49,14,55,12],[49,16,55,14],[49,18,55,16],[50,8,55,18],[51,8,56,6,"defense"],[51,15,56,13],[51,17,56,15],[51,18,56,16],[52,8,57,6,"health"],[52,14,57,12],[52,16,57,14],[52,19,57,17],[53,8,58,6,"maxHealth"],[53,17,58,15],[53,19,58,17],[53,22,58,20],[54,8,59,6,"critChance"],[54,18,59,16],[54,20,59,18],[54,21,59,19],[55,8,60,6,"critDamage"],[55,18,60,16],[55,20,60,18],[55,23,60,21],[56,8,61,6,"cooldownReduction"],[56,25,61,23],[56,27,61,25],[57,6,62,4],[58,4,63,2],[58,5,63,3],[58,6,63,4],[60,4,65,2],[61,4,66,2],[61,10,66,8,"handleEnemyKill"],[61,25,66,23],[61,28,66,27,"enemy"],[61,33,66,45],[61,37,66,50],[62,6,67,4,"console"],[62,13,67,11],[62,14,67,12,"log"],[62,17,67,15],[62,18,67,16],[62,46,67,44,"enemy"],[62,51,67,49],[62,52,67,50,"maxHealth"],[62,61,67,59],[62,63,67,61],[62,64,67,62],[63,4,68,2],[63,5,68,3],[65,4,70,2],[66,4,71,2],[66,10,71,8,"handleCombatTick"],[66,26,71,24],[66,29,71,27,"handleCombatTick"],[66,30,71,27],[66,35,71,33],[67,6,71,33],[67,10,71,33,"_s2"],[67,13,71,33],[67,16,71,33,"$RefreshSig$"],[67,28,71,33],[68,6,72,4,"console"],[68,13,72,11],[68,14,72,12,"log"],[68,17,72,15],[68,18,72,16],[68,45,72,43],[68,46,72,44],[69,6,73,4,"_s2"],[69,9,73,4],[69,10,73,4,"setCombatState"],[69,24,73,18],[69,25,73,18,"_s2"],[69,28,73,18],[69,29,73,19,"prev"],[69,33,73,23],[69,37,73,27],[70,8,73,27,"_s2"],[70,11,73,27],[71,8,74,6],[71,14,74,12,"newTick"],[71,21,74,19],[71,24,74,22,"combatEngine"],[71,43,74,34],[71,44,74,34,"combatEngine"],[71,56,74,34],[71,57,74,35,"getCurrentTick"],[71,71,74,49],[71,72,74,50],[71,73,74,51],[72,8,75,6],[72,14,75,12,"newState"],[72,22,75,20],[72,25,75,23],[73,10,75,25],[73,13,75,28,"prev"],[73,17,75,32],[74,10,75,34,"currentTick"],[74,21,75,45],[74,23,75,47,"newTick"],[75,8,75,55],[75,9,75,56],[76,8,77,6],[76,12,77,10],[76,13,77,11,"newState"],[76,21,77,19],[76,22,77,20,"isInCombat"],[76,32,77,30],[76,34,77,32],[76,41,77,39,"newState"],[76,49,77,47],[78,8,79,6],[79,8,80,6,"newState"],[79,16,80,14],[79,17,80,15,"abilityManager"],[79,31,80,29],[79,32,80,30,"updateCooldowns"],[79,47,80,45],[79,48,80,46,"newTick"],[79,55,80,53],[79,56,80,54],[81,8,82,6],[82,8,83,6],[82,14,83,12,"effectResults"],[82,27,83,25],[82,30,83,28,"newState"],[82,38,83,36],[82,39,83,37,"statusEffects"],[82,52,83,50],[82,53,83,51,"processTick"],[82,64,83,62],[82,65,83,63,"newTick"],[82,72,83,70],[82,73,83,71],[84,8,85,6],[85,8,86,6,"effectResults"],[85,21,86,19],[85,22,86,20,"forEach"],[85,29,86,27],[85,30,86,28],[85,31,86,29,"results"],[85,38,86,36],[85,40,86,38,"entityId"],[85,48,86,46],[85,53,86,51],[86,10,87,8],[86,16,87,14,"enemyIndex"],[86,26,87,24],[86,29,87,27,"newState"],[86,37,87,35],[86,38,87,36,"enemies"],[86,45,87,43],[86,46,87,44,"findIndex"],[86,55,87,53],[86,56,87,54,"e"],[86,57,87,55],[86,61,87,59,"e"],[86,62,87,60],[86,63,87,61,"id"],[86,65,87,63],[86,70,87,68,"entityId"],[86,78,87,76],[86,79,87,77],[87,10,88,8],[87,14,88,12,"enemyIndex"],[87,24,88,22],[87,28,88,26],[87,29,88,27],[87,31,88,29],[88,12,89,10,"results"],[88,19,89,17],[88,20,89,18,"forEach"],[88,27,89,25],[88,28,89,26,"result"],[88,34,89,32],[88,38,89,36],[89,14,90,12,"newState"],[89,22,90,20],[89,23,90,21,"enemies"],[89,30,90,28],[89,31,90,29,"enemyIndex"],[89,41,90,39],[89,42,90,40],[89,43,90,41,"health"],[89,49,90,47],[89,53,90,51,"result"],[89,59,90,57],[89,60,90,58,"damage"],[89,66,90,64],[90,14,91,12,"newState"],[90,22,91,20],[90,23,91,21,"enemies"],[90,30,91,28],[90,31,91,29,"enemyIndex"],[90,41,91,39],[90,42,91,40],[90,43,91,41,"lastDamaged"],[90,54,91,52],[90,57,91,55,"newTick"],[90,64,91,62],[91,12,92,10],[91,13,92,11],[91,14,92,12],[92,10,93,8],[93,8,94,6],[93,9,94,7],[93,10,94,8],[95,8,96,6],[96,8,97,6],[96,13,97,11],[96,17,97,15,"i"],[96,18,97,16],[96,21,97,19],[96,22,97,20],[96,24,97,22,"i"],[96,25,97,23],[96,28,97,26],[96,29,97,27],[96,31,97,29,"i"],[96,32,97,30],[96,34,97,32],[96,36,97,34],[97,10,98,8],[97,14,98,12,"newState"],[97,22,98,20],[97,23,98,21,"abilityManager"],[97,37,98,35],[97,38,98,36,"isAbilityReady"],[97,52,98,50],[97,53,98,51,"i"],[97,54,98,52],[97,55,98,53],[97,59,98,57,"newState"],[97,67,98,65],[97,68,98,66,"enemies"],[97,75,98,73],[97,76,98,74,"length"],[97,82,98,80],[97,85,98,83],[97,86,98,84],[97,88,98,86],[98,12,99,10],[98,16,99,14,"newState"],[98,24,99,22],[98,25,99,23,"abilityManager"],[98,39,99,37],[98,40,99,38,"useAbility"],[98,50,99,48],[98,51,99,49,"i"],[98,52,99,50],[98,54,99,52,"newTick"],[98,61,99,59],[98,62,99,60],[98,64,99,62],[99,14,100,12,"castAbility"],[99,25,100,23],[99,26,100,24,"newState"],[99,34,100,32],[99,36,100,34,"i"],[99,37,100,35],[99,38,100,36],[100,12,101,10],[101,10,102,8],[102,8,103,6],[104,8,105,6],[105,8,106,6],[105,14,106,12,"deadEnemies"],[105,25,106,23],[105,28,106,26,"newState"],[105,36,106,34],[105,37,106,35,"enemies"],[105,44,106,42],[105,45,106,43,"filter"],[105,51,106,49],[105,52,106,50,"enemy"],[105,57,106,55],[105,61,106,59,"enemy"],[105,66,106,64],[105,67,106,65,"health"],[105,73,106,71],[105,77,106,75],[105,78,106,76],[105,79,106,77],[106,8,107,6,"deadEnemies"],[106,19,107,17],[106,20,107,18,"forEach"],[106,27,107,25],[106,28,107,26,"enemy"],[106,33,107,31],[106,37,107,35],[107,10,108,8,"handleEnemyKill"],[107,25,108,23],[107,26,108,24,"enemy"],[107,31,108,29],[107,32,108,30],[108,8,109,6],[108,9,109,7],[108,10,109,8],[110,8,111,6],[111,8,112,6,"newState"],[111,16,112,14],[111,17,112,15,"enemies"],[111,24,112,22],[111,27,112,25,"newState"],[111,35,112,33],[111,36,112,34,"enemies"],[111,43,112,41],[111,44,112,42,"filter"],[111,50,112,48],[111,51,112,49,"enemy"],[111,56,112,54],[111,60,112,58,"enemy"],[111,65,112,63],[111,66,112,64,"health"],[111,72,112,70],[111,75,112,73],[111,76,112,74],[111,77,112,75],[113,8,114,6],[114,8,115,6],[114,14,115,12,"MAX_ENEMIES"],[114,25,115,23],[114,28,115,26],[114,30,115,28],[115,8,116,6,"console"],[115,15,116,13],[115,16,116,14,"log"],[115,19,116,17],[115,20,116,18],[115,53,116,51,"newState"],[115,61,116,59],[115,62,116,60,"enemies"],[115,69,116,67],[115,70,116,68,"length"],[115,76,116,74],[115,85,116,83,"MAX_ENEMIES"],[115,96,116,94],[115,98,116,96],[115,99,116,97],[116,8,117,6],[116,15,117,13,"newState"],[116,23,117,21],[116,24,117,22,"enemies"],[116,31,117,29],[116,32,117,30,"length"],[116,38,117,36],[116,41,117,39,"MAX_ENEMIES"],[116,52,117,50],[116,54,117,52],[117,10,118,8,"console"],[117,17,118,15],[117,18,118,16,"log"],[117,21,118,19],[117,22,118,20],[117,43,118,41,"newState"],[117,51,118,49],[117,52,118,50,"enemies"],[117,59,118,57],[117,60,118,58,"length"],[117,66,118,64],[117,69,118,67],[117,70,118,68],[117,74,118,72,"MAX_ENEMIES"],[117,85,118,83],[117,87,118,85],[117,88,118,86],[118,10,119,8,"spawnTestEnemy"],[118,24,119,22],[118,25,119,23,"newState"],[118,33,119,31],[118,34,119,32],[119,8,120,6],[120,8,122,6],[120,15,122,13,"newState"],[120,23,122,21],[121,6,123,4],[121,7,123,5],[121,47,123,6],[122,4,124,2],[122,5,124,3],[124,4,126,2],[125,4,127,2],[125,10,127,8,"castAbility"],[125,21,127,19],[125,24,127,22,"castAbility"],[125,25,127,23,"state"],[125,30,127,41],[125,32,127,43,"slotIndex"],[125,41,127,60],[125,46,127,65],[126,6,128,4],[126,12,128,10,"deck"],[126,16,128,14],[126,19,128,17,"state"],[126,24,128,22],[126,25,128,23,"abilityManager"],[126,39,128,37],[126,40,128,38,"getDeck"],[126,47,128,45],[126,48,128,46],[126,49,128,47],[127,6,129,4],[127,12,129,10,"ability"],[127,19,129,17],[127,22,129,20,"deck"],[127,26,129,24],[127,27,129,25,"slots"],[127,32,129,30],[127,33,129,31,"slotIndex"],[127,42,129,40],[127,43,129,41],[128,6,130,4],[128,10,130,8],[128,11,130,9,"ability"],[128,18,130,16],[128,20,130,18],[130,6,132,4],[131,6,133,4],[131,12,133,10,"target"],[131,18,133,16],[131,21,133,19,"state"],[131,26,133,24],[131,27,133,25,"enemies"],[131,34,133,32],[131,35,133,33],[131,36,133,34],[131,37,133,35],[132,6,134,4],[132,10,134,8],[132,11,134,9,"target"],[132,17,134,15],[132,19,134,17],[134,6,136,4],[135,6,137,4],[135,10,137,8,"damage"],[135,16,137,14],[135,19,137,17,"ability"],[135,26,137,24],[135,27,137,25,"stats"],[135,32,137,30],[135,33,137,31,"baseDamage"],[135,43,137,41],[137,6,139,4],[138,6,140,4,"deck"],[138,10,140,8],[138,11,140,9,"activeSynergies"],[138,26,140,24],[138,27,140,25,"forEach"],[138,34,140,32],[138,35,140,33,"synergy"],[138,42,140,40],[138,46,140,44],[139,8,141,6],[139,12,141,10,"synergy"],[139,19,141,17],[139,20,141,18,"bonus"],[139,25,141,23],[139,26,141,24,"damageBonus"],[139,37,141,35],[139,41,142,10,"synergy"],[139,48,142,17],[139,49,142,18,"requiredTags"],[139,61,142,30],[139,62,142,31,"some"],[139,66,142,35],[139,67,142,36,"tag"],[139,70,142,39],[139,74,142,43,"ability"],[139,81,142,50],[139,82,142,51,"tags"],[139,86,142,55],[139,87,142,56,"includes"],[139,95,142,64],[139,96,142,65,"tag"],[139,99,142,68],[139,100,142,69],[139,101,142,70],[139,103,142,72],[140,10,143,8,"damage"],[140,16,143,14],[140,20,143,19],[140,21,143,20],[140,24,143,23,"synergy"],[140,31,143,30],[140,32,143,31,"bonus"],[140,37,143,36],[140,38,143,37,"damageBonus"],[140,49,143,48],[140,52,143,51],[140,55,143,55],[141,8,144,6],[142,6,145,4],[142,7,145,5],[142,8,145,6],[144,6,147,4],[145,6,148,4],[145,12,148,10,"damageResult"],[145,24,148,22],[145,27,148,25,"DamageCalculator"],[145,46,148,41],[145,47,148,41,"DamageCalculator"],[145,63,148,41],[145,64,148,42,"calculateDamage"],[145,79,148,57],[145,80,148,58,"damage"],[145,86,148,64],[145,88,148,66,"state"],[145,93,148,71],[145,94,148,72,"playerStats"],[145,105,148,83],[145,107,148,85,"target"],[145,113,148,91],[145,114,148,92,"stats"],[145,119,148,97],[145,120,148,98],[147,6,150,4],[148,6,151,4],[148,10,151,8,"ability"],[148,17,151,15],[148,18,151,16,"effects"],[148,25,151,23],[148,26,151,24,"includes"],[148,34,151,32],[148,35,151,33],[148,49,151,47],[148,50,151,48],[148,52,151,50],[149,8,152,6,"target"],[149,14,152,12],[149,15,152,13,"health"],[149,21,152,19],[149,25,152,23,"damageResult"],[149,37,152,35],[149,38,152,36,"damage"],[149,44,152,42],[150,8,153,6,"target"],[150,14,153,12],[150,15,153,13,"lastDamaged"],[150,26,153,24],[150,29,153,27,"state"],[150,34,153,32],[150,35,153,33,"currentTick"],[150,46,153,44],[151,6,154,4],[151,7,154,5],[151,13,154,11],[151,17,154,15,"ability"],[151,24,154,22],[151,25,154,23,"effects"],[151,32,154,30],[151,33,154,31,"includes"],[151,41,154,39],[151,42,154,40],[151,47,154,45],[151,48,154,46],[151,50,154,48],[152,8,155,6],[153,8,156,6,"state"],[153,13,156,11],[153,14,156,12,"enemies"],[153,21,156,19],[153,22,156,20,"forEach"],[153,29,156,27],[153,30,156,28,"enemy"],[153,35,156,33],[153,39,156,37],[154,10,157,8,"enemy"],[154,15,157,13],[154,16,157,14,"health"],[154,22,157,20],[154,26,157,24,"Math"],[154,30,157,28],[154,31,157,29,"floor"],[154,36,157,34],[154,37,157,35,"damageResult"],[154,49,157,47],[154,50,157,48,"damage"],[154,56,157,54],[154,59,157,57],[154,62,157,60],[154,63,157,61],[154,64,157,62],[154,65,157,63],[155,10,158,8,"enemy"],[155,15,158,13],[155,16,158,14,"lastDamaged"],[155,27,158,25],[155,30,158,28,"state"],[155,35,158,33],[155,36,158,34,"currentTick"],[155,47,158,45],[156,8,159,6],[156,9,159,7],[156,10,159,8],[157,6,160,4],[159,6,162,4],[160,6,163,4],[160,10,163,8,"ability"],[160,17,163,15],[160,18,163,16,"effects"],[160,25,163,23],[160,26,163,24,"includes"],[160,34,163,32],[160,35,163,33],[160,40,163,38],[160,41,163,39],[160,45,163,43,"ability"],[160,52,163,50],[160,53,163,51,"stats"],[160,58,163,56],[160,59,163,57,"duration"],[160,67,163,65],[160,69,163,67],[161,8,164,6,"state"],[161,13,164,11],[161,14,164,12,"statusEffects"],[161,27,164,25],[161,28,164,26,"addEffect"],[161,37,164,35],[161,38,164,36,"target"],[161,44,164,42],[161,45,164,43,"id"],[161,47,164,45],[161,49,164,47],[162,10,165,8,"id"],[162,12,165,10],[162,14,165,12],[162,17,165,15,"ability"],[162,24,165,22],[162,25,165,23,"id"],[162,27,165,25],[162,33,165,31],[163,10,166,8,"type"],[163,14,166,12],[163,16,166,14],[163,21,166,19],[164,10,167,8,"remainingTicks"],[164,24,167,22],[164,26,167,24,"Math"],[164,30,167,28],[164,31,167,29,"floor"],[164,36,167,34],[164,37,167,35,"ability"],[164,44,167,42],[164,45,167,43,"stats"],[164,50,167,48],[164,51,167,49,"duration"],[164,59,167,57],[164,62,167,60],[164,64,167,62],[164,65,167,63],[165,10,167,65],[166,10,168,8,"tickInterval"],[166,22,168,20],[166,24,168,22],[166,26,168,24],[167,10,168,26],[168,10,169,8,"lastTick"],[168,18,169,16],[168,20,169,18,"state"],[168,25,169,23],[168,26,169,24,"currentTick"],[168,37,169,35],[169,10,170,8,"value"],[169,15,170,13],[169,17,170,15,"Math"],[169,21,170,19],[169,22,170,20,"floor"],[169,27,170,25],[169,28,170,26,"damage"],[169,34,170,32],[169,37,170,35],[169,40,170,38],[169,41,170,39],[170,10,170,41],[171,10,171,8,"stackable"],[171,19,171,17],[171,21,171,19],[172,8,172,6],[172,9,172,7],[172,10,172,8],[173,6,173,4],[174,6,175,4,"console"],[174,13,175,11],[174,14,175,12,"log"],[174,17,175,15],[174,18,175,16],[174,24,175,22,"ability"],[174,31,175,29],[174,32,175,30,"name"],[174,36,175,34],[174,54,175,52,"damageResult"],[174,66,175,64],[174,67,175,65,"damage"],[174,73,175,71],[174,76,175,74,"damageResult"],[174,88,175,86],[174,89,175,87,"isCritical"],[174,99,175,97],[174,102,175,100],[174,112,175,110],[174,115,175,113],[174,117,175,115],[174,119,175,117],[174,120,175,118],[175,4,176,2],[175,5,176,3],[177,4,178,2],[178,4,179,2],[178,10,179,8,"spawnTestEnemy"],[178,24,179,22],[178,27,179,26,"state"],[178,32,179,44],[178,36,179,49],[179,6,180,4],[180,6,181,4],[180,12,181,10,"SCREEN_WIDTH"],[180,24,181,22],[180,27,181,25],[180,30,181,28],[180,31,181,29],[180,32,181,30],[181,6,182,4],[181,12,182,10,"GAME_AREA_HEIGHT"],[181,28,182,26],[181,31,182,29],[181,34,182,32],[181,37,182,35],[181,40,182,38],[181,41,182,39],[181,42,182,40],[182,6,183,4],[182,12,183,10,"ENEMY_SIZE"],[182,22,183,20],[182,25,183,23],[182,27,183,25],[184,6,185,4],[185,6,186,4],[185,12,186,10,"x"],[185,13,186,11],[185,16,186,14,"Math"],[185,20,186,18],[185,21,186,19,"random"],[185,27,186,25],[185,28,186,26],[185,29,186,27],[185,33,186,31,"SCREEN_WIDTH"],[185,45,186,43],[185,48,186,46,"ENEMY_SIZE"],[185,58,186,56],[185,61,186,59],[185,62,186,60],[185,63,186,61],[185,66,186,64,"ENEMY_SIZE"],[185,76,186,74],[185,77,186,75],[185,78,186,76],[186,6,187,4],[186,12,187,10,"y"],[186,13,187,11],[186,16,187,14,"Math"],[186,20,187,18],[186,21,187,19,"random"],[186,27,187,25],[186,28,187,26],[186,29,187,27],[186,33,187,31,"GAME_AREA_HEIGHT"],[186,49,187,47],[186,52,187,50,"ENEMY_SIZE"],[186,62,187,60],[186,65,187,63],[186,66,187,64],[186,67,187,65],[186,70,187,68,"ENEMY_SIZE"],[186,80,187,78],[186,81,187,79],[186,82,187,80],[188,6,189,4],[188,12,189,10,"enemy"],[188,17,189,28],[188,20,189,31],[189,8,190,6,"id"],[189,10,190,8],[189,12,190,10],[189,21,190,19],[189,23,190,21,"enemyCounter"],[189,35,190,33],[189,37,190,35],[190,8,191,6,"name"],[190,12,191,10],[190,14,191,12],[190,24,191,22],[191,8,192,6,"health"],[191,14,192,12],[191,16,192,14],[191,19,192,17],[192,8,193,6,"maxHealth"],[192,17,193,15],[192,19,193,17],[192,22,193,20],[193,8,194,6,"stats"],[193,13,194,11],[193,15,194,13],[194,10,195,8,"attack"],[194,16,195,14],[194,18,195,16],[194,20,195,18],[195,10,196,8,"defense"],[195,17,196,15],[195,19,196,17],[195,21,196,19],[196,10,197,8,"health"],[196,16,197,14],[196,18,197,16],[196,21,197,19],[197,10,198,8,"maxHealth"],[197,19,198,17],[197,21,198,19],[197,24,198,22],[198,10,199,8,"critChance"],[198,20,199,18],[198,22,199,20],[198,23,199,21],[199,10,200,8,"critDamage"],[199,20,200,18],[199,22,200,20],[199,25,200,23],[200,10,201,8,"cooldownReduction"],[200,27,201,25],[200,29,201,27],[201,8,202,6],[201,9,202,7],[202,8,203,6,"position"],[202,16,203,14],[202,18,203,16],[203,10,203,18,"x"],[203,11,203,19],[204,10,203,21,"y"],[205,8,203,23],[205,9,203,24],[206,8,204,6,"lastDamaged"],[206,19,204,17],[206,21,204,19],[207,6,205,4],[207,7,205,5],[208,6,207,4,"state"],[208,11,207,9],[208,12,207,10,"enemies"],[208,19,207,17],[208,20,207,18,"push"],[208,24,207,22],[208,25,207,23,"enemy"],[208,30,207,28],[208,31,207,29],[209,4,208,2],[209,5,208,3],[211,4,210,2],[212,4,211,2],[212,10,211,8,"startCombat"],[212,21,211,19],[212,24,211,22,"startCombat"],[212,25,211,22],[212,30,211,28],[213,6,212,4,"console"],[213,13,212,11],[213,14,212,12,"log"],[213,17,212,15],[213,18,212,16],[213,63,212,61],[213,64,212,62],[214,6,213,4,"setCombatState"],[214,20,213,18],[214,21,213,19,"prev"],[214,25,213,23],[214,30,213,28],[215,8,213,30],[215,11,213,33,"prev"],[215,15,213,37],[216,8,213,39,"isInCombat"],[216,18,213,49],[216,20,213,51],[217,6,213,56],[217,7,213,57],[217,8,213,58],[217,9,213,59],[219,6,215,4],[220,6,216,4,"combatEngine"],[220,25,216,16],[220,26,216,16,"combatEngine"],[220,38,216,16],[220,39,216,17,"addTickCallback"],[220,54,216,32],[220,55,216,33,"handleCombatTick"],[220,71,216,49],[220,72,216,50],[221,6,217,4,"console"],[221,13,217,11],[221,14,217,12,"log"],[221,17,217,15],[221,18,217,16],[221,62,217,60],[221,63,217,61],[223,6,219,4],[224,6,220,4,"combatEngine"],[224,25,220,16],[224,26,220,16,"combatEngine"],[224,38,220,16],[224,39,220,17,"start"],[224,44,220,22],[224,45,220,23],[224,46,220,24],[225,4,221,2],[225,5,221,3],[227,4,223,2],[228,4,224,2],[228,10,224,8,"stopCombat"],[228,20,224,18],[228,23,224,21,"stopCombat"],[228,24,224,21],[228,29,224,27],[229,6,225,4,"setCombatState"],[229,20,225,18],[229,21,225,19,"prev"],[229,25,225,23],[229,30,225,28],[230,8,225,30],[230,11,225,33,"prev"],[230,15,225,37],[231,8,225,39,"isInCombat"],[231,18,225,49],[231,20,225,51],[232,6,225,57],[232,7,225,58],[232,8,225,59],[232,9,225,60],[233,6,226,4,"combatEngine"],[233,25,226,16],[233,26,226,16,"combatEngine"],[233,38,226,16],[233,39,226,17,"removeTickCallback"],[233,57,226,35],[233,58,226,36,"handleCombatTick"],[233,74,226,52],[233,75,226,53],[234,4,227,2],[234,5,227,3],[236,4,229,2],[237,4,230,2],[237,10,230,8,"equipAbility"],[237,22,230,20],[237,25,230,23,"equipAbility"],[237,26,230,24,"abilityId"],[237,35,230,41],[237,37,230,43,"slotIndex"],[237,46,230,60],[237,51,230,74],[238,6,231,4],[238,13,231,11,"combatState"],[238,24,231,22],[238,25,231,23,"abilityManager"],[238,39,231,37],[238,40,231,38,"equipAbility"],[238,52,231,50],[238,53,231,51,"abilityId"],[238,62,231,60],[238,64,231,62,"slotIndex"],[238,73,231,71],[238,74,231,72],[239,4,232,2],[239,5,232,3],[240,4,234,2],[240,10,234,8,"getDeck"],[240,17,234,15],[240,20,234,18,"getDeck"],[240,21,234,18],[240,26,234,24],[241,6,235,4],[241,13,235,11,"combatState"],[241,24,235,22],[241,25,235,23,"abilityManager"],[241,39,235,37],[241,40,235,38,"getDeck"],[241,47,235,45],[241,48,235,46],[241,49,235,47],[242,4,236,2],[242,5,236,3],[243,4,238,2],[243,10,238,8,"getAvailableAbilities"],[243,31,238,29],[243,34,238,32,"getAvailableAbilities"],[243,35,238,32],[243,40,238,38],[244,6,239,4],[244,13,239,11,"combatState"],[244,24,239,22],[244,25,239,23,"abilityManager"],[244,39,239,37],[244,40,239,38,"getAvailableAbilities"],[244,61,239,59],[244,62,239,60],[244,63,239,61],[245,4,240,2],[245,5,240,3],[246,4,242,2],[246,10,242,8,"upgradeAbility"],[246,24,242,22],[246,27,242,26,"abilityId"],[246,36,242,43],[246,40,242,57],[247,6,243,4],[247,13,243,11,"combatState"],[247,24,243,22],[247,25,243,23,"abilityManager"],[247,39,243,37],[247,40,243,38,"upgradeAbility"],[247,54,243,52],[247,55,243,53,"abilityId"],[247,64,243,62],[247,65,243,63],[248,4,244,2],[248,5,244,3],[250,4,246,2],[251,4,247,2],[251,8,247,2,"useEffect"],[251,14,247,11],[251,15,247,11,"useEffect"],[251,24,247,11],[251,26,247,12],[251,32,247,18],[252,6,248,4,"combatEngine"],[252,25,248,16],[252,26,248,16,"combatEngine"],[252,38,248,16],[252,39,248,17,"start"],[252,44,248,22],[252,45,248,23],[252,46,248,24],[254,6,250,4],[255,6,251,4,"combatState"],[255,17,251,15],[255,18,251,16,"abilityManager"],[255,32,251,30],[255,33,251,31,"equipAbility"],[255,45,251,43],[255,46,251,44],[255,62,251,60],[255,64,251,62],[255,65,251,63],[255,66,251,64],[256,6,252,4,"combatState"],[256,17,252,15],[256,18,252,16,"abilityManager"],[256,32,252,30],[256,33,252,31,"equipAbility"],[256,45,252,43],[256,46,252,44],[256,61,252,59],[256,63,252,61],[256,64,252,62],[256,65,252,63],[257,6,254,4],[257,13,254,11],[257,19,254,17],[258,8,255,6,"combatEngine"],[258,27,255,18],[258,28,255,18,"combatEngine"],[258,40,255,18],[258,41,255,19,"stop"],[258,45,255,23],[258,46,255,24],[258,47,255,25],[259,6,256,4],[259,7,256,5],[260,4,257,2],[260,5,257,3],[260,7,257,5],[260,9,257,7],[260,10,257,8],[261,4,259,2],[261,10,259,8,"contextValue"],[261,22,259,39],[261,25,259,42],[262,6,260,4,"combatState"],[262,17,260,15],[263,6,261,4,"startCombat"],[263,17,261,15],[264,6,262,4,"stopCombat"],[264,16,262,14],[265,6,263,4,"equipAbility"],[265,18,263,16],[266,6,264,4,"getDeck"],[266,13,264,11],[267,6,265,4,"getAvailableAbilities"],[267,27,265,25],[268,6,266,4,"upgradeAbility"],[269,4,267,2],[269,5,267,3],[270,4,269,2],[270,24,270,4],[270,28,270,4,"_reactJsxDevRuntime"],[270,47,270,4],[270,48,270,4,"jsxDEV"],[270,54,270,4],[270,56,270,5,"CombatContext"],[270,69,270,18],[270,70,270,19,"Provider"],[270,78,270,27],[271,6,270,28,"value"],[271,11,270,33],[271,13,270,35,"contextValue"],[271,25,270,48],[272,6,270,48,"children"],[272,14,270,48],[272,16,271,7,"children"],[273,4,271,15],[274,6,271,15,"fileName"],[274,14,271,15],[274,16,271,15,"_jsxFileName"],[274,28,271,15],[275,6,271,15,"lineNumber"],[275,16,271,15],[276,6,271,15,"columnNumber"],[276,18,271,15],[277,4,271,15],[277,11,272,28],[277,12,272,29],[278,2,274,0],[278,3,274,1],[279,2,274,2,"_s3"],[279,5,274,2],[279,6,46,13,"CombatProvider"],[279,20,46,27],[280,2,46,27,"_c"],[280,4,46,27],[280,7,46,13,"CombatProvider"],[280,21,46,27],[281,2,46,27],[281,6,46,27,"_c"],[281,8,46,27],[282,2,46,27,"$RefreshReg$"],[282,14,46,27],[282,15,46,27,"_c"],[282,17,46,27],[283,0,46,27],[283,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEI;0BCoB;GDE;2BEG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GFC;sBSG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GTiB;yBaG;Gb6B;sBcG;mBXE,uCW;GdQ;qBeG;mBZC,wCY;GfE;uBgBG;GhBE;kBiBE;GjBE;gCkBE;GlBE;yBmBE;GnBE;YoBG;WCO;KDE;GpBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}