{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"ecknVzcUu1YLgoWzPEOnNKr2bTY=","exportNames":["*"],"imports":1}},{"name":"../index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":40,"index":87}}],"key":"CPXQFCpxvKPxDgTlt91zfW82bsU=","exportNames":["*"],"imports":1}},{"name":"./IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":45,"index":133}}],"key":"yU5HftgQ+HW+Cj5EoqioxXCPi1U=","exportNames":["*"],"imports":1}},{"name":"./BooleanEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":134},"end":{"line":4,"column":53,"index":187}}],"key":"jvND8JXlxjrnvXLvIdr+wATPG2w=","exportNames":["*"],"imports":1}},{"name":"./FixedVectorEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":188},"end":{"line":5,"column":61,"index":249}}],"key":"0FitYV5ynVYBJm3V8Pg9suKo+Lg=","exportNames":["*"],"imports":1}},{"name":"./VectorEncodingType.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":250},"end":{"line":6,"column":61,"index":311}}],"key":"byn44PumvC/QKEpocUDhJFHT6j0=","exportNames":["*"],"imports":1}},{"name":"../../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":312},"end":{"line":7,"column":54,"index":366}}],"key":"qHglNs3UH2C2wT8WJZubASIXHQ0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"VendorVectorEncoder\", {\n    enumerable: true,\n    get: function () {\n      return VendorVectorEncoder;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _modelIndexJs = require(_dependencyMap[2], \"../../model/index.js\");\n  var _indexJs = require(_dependencyMap[3], \"../index.js\");\n  var _IntEncoderJs = require(_dependencyMap[4], \"./IntEncoder.js\");\n  var _BooleanEncoderJs = require(_dependencyMap[5], \"./BooleanEncoder.js\");\n  var _FixedVectorEncoderJs = require(_dependencyMap[6], \"./FixedVectorEncoder.js\");\n  var _VectorEncodingTypeJs = require(_dependencyMap[7], \"./VectorEncodingType.js\");\n  var _errorsIndexJs = require(_dependencyMap[8], \"../../errors/index.js\");\n  var VendorVectorEncoder = /*#__PURE__*/function () {\n    function VendorVectorEncoder() {\n      (0, _classCallCheck.default)(this, VendorVectorEncoder);\n    }\n    return (0, _createClass.default)(VendorVectorEncoder, null, [{\n      key: \"encode\",\n      value: function encode(value) {\n        // collectors for range encoding\n        var ranges = [];\n        var range = [];\n        // since both encodings need the maxId, start with that\n        var retrString = _IntEncoderJs.IntEncoder.encode(value.maxId, _indexJs.BitLength.maxId);\n        // bit field will be just the vendors as we walk through the vector\n        var bitField = '';\n        var rangeIsSmaller;\n        // some math\n        var headerLength = _indexJs.BitLength.maxId + _indexJs.BitLength.encodingType;\n        var bitFieldLength = headerLength + value.maxId;\n        var minRangeLength = _indexJs.BitLength.vendorId * 2 + _indexJs.BitLength.singleOrRange + _indexJs.BitLength.numEntries;\n        // gets larger as we walk through the vector\n        var rangeLength = headerLength + _indexJs.BitLength.numEntries;\n        // walk through every value in the vector\n        value.forEach((curValue, i) => {\n          // build our bitfield no matter what\n          bitField += _BooleanEncoderJs.BooleanEncoder.encode(curValue);\n          /**\n           * A range is a minimum of 45 bits, if the number of vendors in this\n           * vector is less than 45 then we know that a bitfield encoding will be\n           * shorter than any range encoding.\n           *\n           * The second check checks while we walk through the vector and abandons\n           * building the ranges once it becomes larger\n           */\n          rangeIsSmaller = value.maxId > minRangeLength && rangeLength < bitFieldLength;\n          /**\n           * if the curValue is true and our rangeLength is less than the bitField\n           * length, we'll continue to push these ranges into the array.  Once the\n           * ranges become a larger encoding there is no reason to continue\n           * building the structure because we will be choosing the bitfield\n           * encoding\n           */\n          if (rangeIsSmaller && curValue) {\n            /**\n             * Look ahead to see if this is the last value in our range\n             */\n            var nextValue = value.has(i + 1);\n            // if there isn't a next value, then we'll wrap up this range\n            if (!nextValue) {\n              /**\n               * this is the last value of the range, so we'll push it on to the\n               * end into position 1\n               */\n              range.push(i);\n              // add to the range length the additional vendorId\n              rangeLength += _indexJs.BitLength.vendorId;\n              // store the array in our bigger array\n              ranges.push(range);\n              // clear the array for the next range\n              range = [];\n            } else if (range.length === 0) {\n              // this is the first  value for this range\n              range.push(i);\n              // update our count with new range overhead\n              rangeLength += _indexJs.BitLength.singleOrRange;\n              rangeLength += _indexJs.BitLength.vendorId;\n            }\n          }\n        });\n        if (rangeIsSmaller) {\n          retrString += String(_VectorEncodingTypeJs.VectorEncodingType.RANGE);\n          retrString += this.buildRangeEncoding(ranges);\n        } else {\n          retrString += String(_VectorEncodingTypeJs.VectorEncodingType.FIELD);\n          retrString += bitField;\n        }\n        return retrString;\n      }\n    }, {\n      key: \"decode\",\n      value: function decode(value, version) {\n        var vector;\n        var index = 0;\n        var maxId = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.maxId), _indexJs.BitLength.maxId);\n        index += _indexJs.BitLength.maxId;\n        var encodingType = _IntEncoderJs.IntEncoder.decode(value.charAt(index), _indexJs.BitLength.encodingType);\n        index += _indexJs.BitLength.encodingType;\n        /**\n         * Range is handled in batches so we'll need a different decoding scheme\n         */\n        if (encodingType === _VectorEncodingTypeJs.VectorEncodingType.RANGE) {\n          vector = new _modelIndexJs.Vector();\n          if (version === 1) {\n            if (value.substr(index, 1) === '1') {\n              throw new _errorsIndexJs.DecodingError('Unable to decode default consent=1');\n            }\n            // jump over the default encoding\n            index++;\n          }\n          var numEntries = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.numEntries), _indexJs.BitLength.numEntries);\n          index += _indexJs.BitLength.numEntries;\n          // loop through each group of entries\n          for (var i = 0; i < numEntries; i++) {\n            // Ranges can represent a single id or a range of ids.\n            var isIdRange = _BooleanEncoderJs.BooleanEncoder.decode(value.charAt(index));\n            index += _indexJs.BitLength.singleOrRange;\n            /**\n             * regardless of whether or not it's a single entry or range, the next\n             * set of bits is a vendor ID\n             */\n            var firstId = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.vendorId), _indexJs.BitLength.vendorId);\n            index += _indexJs.BitLength.vendorId;\n            // if it's a range, the next set of bits is the second id\n            if (isIdRange) {\n              var secondId = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.vendorId), _indexJs.BitLength.vendorId);\n              index += _indexJs.BitLength.vendorId;\n              // we'll need to set or unset all the vendor ids between the first and second\n              for (var j = firstId; j <= secondId; j++) {\n                vector.set(j);\n              }\n            } else {\n              vector.set(firstId);\n            }\n          }\n        } else {\n          var bitField = value.substr(index, maxId);\n          index += maxId;\n          vector = _FixedVectorEncoderJs.FixedVectorEncoder.decode(bitField, maxId);\n        }\n        vector.bitLength = index;\n        return vector;\n      }\n    }, {\n      key: \"buildRangeEncoding\",\n      value: function buildRangeEncoding(ranges) {\n        // describe the number of entries to follow\n        var numEntries = ranges.length;\n        var rangeString = _IntEncoderJs.IntEncoder.encode(numEntries, _indexJs.BitLength.numEntries);\n        // each range\n        ranges.forEach(range => {\n          // is this range a single?\n          var single = range.length === 1;\n          // first is the indicator of whether this is a single id or range (two)\n          // 0 is single and range is 1\n          rangeString += _BooleanEncoderJs.BooleanEncoder.encode(!single);\n          // second is the first (or only) vendorId\n          rangeString += _IntEncoderJs.IntEncoder.encode(range[0], _indexJs.BitLength.vendorId);\n          if (!single) {\n            // add the second id if it exists\n            rangeString += _IntEncoderJs.IntEncoder.encode(range[1], _indexJs.BitLength.vendorId);\n          }\n        });\n        return rangeString;\n      }\n    }]);\n  }();\n});","lineCount":184,"map":[[12,2,8,0,"Object"],[12,8,8,0],[12,9,8,0,"defineProperty"],[12,23,8,0],[12,24,8,0,"exports"],[12,31,8,0],[13,4,8,0,"enumerable"],[13,14,8,0],[14,4,8,0,"get"],[14,7,8,0],[14,18,8,0,"get"],[14,19,8,0],[15,6,8,0],[15,13,8,0,"VendorVectorEncoder"],[15,32,8,0],[16,4,8,0],[17,2,8,0],[18,2,156,1],[18,6,156,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,156,1],[18,43,156,1,"require"],[18,50,156,1],[18,51,156,1,"_dependencyMap"],[18,65,156,1],[19,2,156,1],[19,6,156,1,"_classCallCheck"],[19,21,156,1],[19,24,156,1,"_interopDefault"],[19,39,156,1],[19,40,156,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,156,1],[20,2,156,1],[20,6,156,1,"_babelRuntimeHelpersCreateClass"],[20,37,156,1],[20,40,156,1,"require"],[20,47,156,1],[20,48,156,1,"_dependencyMap"],[20,62,156,1],[21,2,156,1],[21,6,156,1,"_createClass"],[21,18,156,1],[21,21,156,1,"_interopDefault"],[21,36,156,1],[21,37,156,1,"_babelRuntimeHelpersCreateClass"],[21,68,156,1],[22,2,1,0],[22,6,1,0,"_modelIndexJs"],[22,19,1,0],[22,22,1,0,"require"],[22,29,1,0],[22,30,1,0,"_dependencyMap"],[22,44,1,0],[23,2,2,0],[23,6,2,0,"_indexJs"],[23,14,2,0],[23,17,2,0,"require"],[23,24,2,0],[23,25,2,0,"_dependencyMap"],[23,39,2,0],[24,2,3,0],[24,6,3,0,"_IntEncoderJs"],[24,19,3,0],[24,22,3,0,"require"],[24,29,3,0],[24,30,3,0,"_dependencyMap"],[24,44,3,0],[25,2,4,0],[25,6,4,0,"_BooleanEncoderJs"],[25,23,4,0],[25,26,4,0,"require"],[25,33,4,0],[25,34,4,0,"_dependencyMap"],[25,48,4,0],[26,2,5,0],[26,6,5,0,"_FixedVectorEncoderJs"],[26,27,5,0],[26,30,5,0,"require"],[26,37,5,0],[26,38,5,0,"_dependencyMap"],[26,52,5,0],[27,2,6,0],[27,6,6,0,"_VectorEncodingTypeJs"],[27,27,6,0],[27,30,6,0,"require"],[27,37,6,0],[27,38,6,0,"_dependencyMap"],[27,52,6,0],[28,2,7,0],[28,6,7,0,"_errorsIndexJs"],[28,20,7,0],[28,23,7,0,"require"],[28,30,7,0],[28,31,7,0,"_dependencyMap"],[28,45,7,0],[29,2,7,54],[29,6,8,13,"VendorVectorEncoder"],[29,25,8,32],[30,4,8,32],[30,13,8,32,"VendorVectorEncoder"],[30,33,8,32],[31,6,8,32],[31,10,8,32,"_classCallCheck"],[31,25,8,32],[31,26,8,32,"default"],[31,33,8,32],[31,41,8,32,"VendorVectorEncoder"],[31,60,8,32],[32,4,8,32],[33,4,8,32],[33,15,8,32,"_createClass"],[33,27,8,32],[33,28,8,32,"default"],[33,35,8,32],[33,37,8,32,"VendorVectorEncoder"],[33,56,8,32],[34,6,8,32,"key"],[34,9,8,32],[35,6,8,32,"value"],[35,11,8,32],[35,13,9,4],[35,22,9,11,"encode"],[35,28,9,17,"encode"],[35,29,9,18,"value"],[35,34,9,23],[35,36,9,25],[36,8,10,8],[37,8,11,8],[37,12,11,14,"ranges"],[37,18,11,20],[37,21,11,23],[37,23,11,25],[38,8,12,8],[38,12,12,12,"range"],[38,17,12,17],[38,20,12,20],[38,22,12,22],[39,8,13,8],[40,8,14,8],[40,12,14,12,"retrString"],[40,22,14,22],[40,25,14,25,"IntEncoder"],[40,38,14,35],[40,39,14,35,"IntEncoder"],[40,49,14,35],[40,50,14,36,"encode"],[40,56,14,42],[40,57,14,43,"value"],[40,62,14,48],[40,63,14,49,"maxId"],[40,68,14,54],[40,70,14,56,"BitLength"],[40,78,14,65],[40,79,14,65,"BitLength"],[40,88,14,65],[40,89,14,66,"maxId"],[40,94,14,71],[40,95,14,72],[41,8,15,8],[42,8,16,8],[42,12,16,12,"bitField"],[42,20,16,20],[42,23,16,23],[42,25,16,25],[43,8,17,8],[43,12,17,12,"rangeIsSmaller"],[43,26,17,26],[44,8,18,8],[45,8,19,8],[45,12,19,14,"headerLength"],[45,24,19,26],[45,27,19,29,"BitLength"],[45,35,19,38],[45,36,19,38,"BitLength"],[45,45,19,38],[45,46,19,39,"maxId"],[45,51,19,44],[45,54,19,47,"BitLength"],[45,62,19,56],[45,63,19,56,"BitLength"],[45,72,19,56],[45,73,19,57,"encodingType"],[45,85,19,69],[46,8,20,8],[46,12,20,14,"bitFieldLength"],[46,26,20,28],[46,29,20,31,"headerLength"],[46,41,20,43],[46,44,20,46,"value"],[46,49,20,51],[46,50,20,52,"maxId"],[46,55,20,57],[47,8,21,8],[47,12,21,14,"minRangeLength"],[47,26,21,28],[47,29,21,32,"BitLength"],[47,37,21,41],[47,38,21,41,"BitLength"],[47,47,21,41],[47,48,21,42,"vendorId"],[47,56,21,50],[47,59,21,53],[47,60,21,54],[47,63,21,57,"BitLength"],[47,71,21,66],[47,72,21,66,"BitLength"],[47,81,21,66],[47,82,21,67,"singleOrRange"],[47,95,21,80],[47,98,21,83,"BitLength"],[47,106,21,92],[47,107,21,92,"BitLength"],[47,116,21,92],[47,117,21,93,"numEntries"],[47,127,21,104],[48,8,22,8],[49,8,23,8],[49,12,23,12,"rangeLength"],[49,23,23,23],[49,26,23,26,"headerLength"],[49,38,23,38],[49,41,23,41,"BitLength"],[49,49,23,50],[49,50,23,50,"BitLength"],[49,59,23,50],[49,60,23,51,"numEntries"],[49,70,23,61],[50,8,24,8],[51,8,25,8,"value"],[51,13,25,13],[51,14,25,14,"forEach"],[51,21,25,21],[51,22,25,22],[51,23,25,23,"curValue"],[51,31,25,31],[51,33,25,33,"i"],[51,34,25,34],[51,39,25,39],[52,10,26,12],[53,10,27,12,"bitField"],[53,18,27,20],[53,22,27,24,"BooleanEncoder"],[53,39,27,38],[53,40,27,38,"BooleanEncoder"],[53,54,27,38],[53,55,27,39,"encode"],[53,61,27,45],[53,62,27,46,"curValue"],[53,70,27,54],[53,71,27,55],[54,10,28,12],[55,0,29,0],[56,0,30,0],[57,0,31,0],[58,0,32,0],[59,0,33,0],[60,0,34,0],[61,0,35,0],[62,10,36,12,"rangeIsSmaller"],[62,24,36,26],[62,27,36,30,"value"],[62,32,36,35],[62,33,36,36,"maxId"],[62,38,36,41],[62,41,36,44,"minRangeLength"],[62,55,36,58],[62,59,36,62,"rangeLength"],[62,70,36,73],[62,73,36,76,"bitFieldLength"],[62,87,36,91],[63,10,37,12],[64,0,38,0],[65,0,39,0],[66,0,40,0],[67,0,41,0],[68,0,42,0],[69,0,43,0],[70,10,44,12],[70,14,44,16,"rangeIsSmaller"],[70,28,44,30],[70,32,44,34,"curValue"],[70,40,44,42],[70,42,44,44],[71,12,45,16],[72,0,46,0],[73,0,47,0],[74,12,48,16],[74,16,48,22,"nextValue"],[74,25,48,31],[74,28,48,34,"value"],[74,33,48,39],[74,34,48,40,"has"],[74,37,48,43],[74,38,48,44,"i"],[74,39,48,45],[74,42,48,48],[74,43,48,49],[74,44,48,50],[75,12,49,16],[76,12,50,16],[76,16,50,20],[76,17,50,21,"nextValue"],[76,26,50,30],[76,28,50,32],[77,14,51,20],[78,0,52,0],[79,0,53,0],[80,0,54,0],[81,14,55,20,"range"],[81,19,55,25],[81,20,55,26,"push"],[81,24,55,30],[81,25,55,31,"i"],[81,26,55,32],[81,27,55,33],[82,14,56,20],[83,14,57,20,"rangeLength"],[83,25,57,31],[83,29,57,35,"BitLength"],[83,37,57,44],[83,38,57,44,"BitLength"],[83,47,57,44],[83,48,57,45,"vendorId"],[83,56,57,53],[84,14,58,20],[85,14,59,20,"ranges"],[85,20,59,26],[85,21,59,27,"push"],[85,25,59,31],[85,26,59,32,"range"],[85,31,59,37],[85,32,59,38],[86,14,60,20],[87,14,61,20,"range"],[87,19,61,25],[87,22,61,28],[87,24,61,30],[88,12,62,16],[88,13,62,17],[88,19,63,21],[88,23,63,25,"range"],[88,28,63,30],[88,29,63,31,"length"],[88,35,63,37],[88,40,63,42],[88,41,63,43],[88,43,63,45],[89,14,64,20],[90,14,65,20,"range"],[90,19,65,25],[90,20,65,26,"push"],[90,24,65,30],[90,25,65,31,"i"],[90,26,65,32],[90,27,65,33],[91,14,66,20],[92,14,67,20,"rangeLength"],[92,25,67,31],[92,29,67,35,"BitLength"],[92,37,67,44],[92,38,67,44,"BitLength"],[92,47,67,44],[92,48,67,45,"singleOrRange"],[92,61,67,58],[93,14,68,20,"rangeLength"],[93,25,68,31],[93,29,68,35,"BitLength"],[93,37,68,44],[93,38,68,44,"BitLength"],[93,47,68,44],[93,48,68,45,"vendorId"],[93,56,68,53],[94,12,69,16],[95,10,70,12],[96,8,71,8],[96,9,71,9],[96,10,71,10],[97,8,72,8],[97,12,72,12,"rangeIsSmaller"],[97,26,72,26],[97,28,72,28],[98,10,73,12,"retrString"],[98,20,73,22],[98,24,73,26,"String"],[98,30,73,32],[98,31,73,33,"VectorEncodingType"],[98,52,73,51],[98,53,73,51,"VectorEncodingType"],[98,71,73,51],[98,72,73,52,"RANGE"],[98,77,73,57],[98,78,73,58],[99,10,74,12,"retrString"],[99,20,74,22],[99,24,74,26],[99,28,74,30],[99,29,74,31,"buildRangeEncoding"],[99,47,74,49],[99,48,74,50,"ranges"],[99,54,74,56],[99,55,74,57],[100,8,75,8],[100,9,75,9],[100,15,76,13],[101,10,77,12,"retrString"],[101,20,77,22],[101,24,77,26,"String"],[101,30,77,32],[101,31,77,33,"VectorEncodingType"],[101,52,77,51],[101,53,77,51,"VectorEncodingType"],[101,71,77,51],[101,72,77,52,"FIELD"],[101,77,77,57],[101,78,77,58],[102,10,78,12,"retrString"],[102,20,78,22],[102,24,78,26,"bitField"],[102,32,78,34],[103,8,79,8],[104,8,80,8],[104,15,80,15,"retrString"],[104,25,80,25],[105,6,81,4],[106,4,81,5],[107,6,81,5,"key"],[107,9,81,5],[108,6,81,5,"value"],[108,11,81,5],[108,13,82,4],[108,22,82,11,"decode"],[108,28,82,17,"decode"],[108,29,82,18,"value"],[108,34,82,23],[108,36,82,25,"version"],[108,43,82,32],[108,45,82,34],[109,8,83,8],[109,12,83,12,"vector"],[109,18,83,18],[110,8,84,8],[110,12,84,12,"index"],[110,17,84,17],[110,20,84,20],[110,21,84,21],[111,8,85,8],[111,12,85,14,"maxId"],[111,17,85,19],[111,20,85,22,"IntEncoder"],[111,33,85,32],[111,34,85,32,"IntEncoder"],[111,44,85,32],[111,45,85,33,"decode"],[111,51,85,39],[111,52,85,40,"value"],[111,57,85,45],[111,58,85,46,"substr"],[111,64,85,52],[111,65,85,53,"index"],[111,70,85,58],[111,72,85,60,"BitLength"],[111,80,85,69],[111,81,85,69,"BitLength"],[111,90,85,69],[111,91,85,70,"maxId"],[111,96,85,75],[111,97,85,76],[111,99,85,78,"BitLength"],[111,107,85,87],[111,108,85,87,"BitLength"],[111,117,85,87],[111,118,85,88,"maxId"],[111,123,85,93],[111,124,85,94],[112,8,86,8,"index"],[112,13,86,13],[112,17,86,17,"BitLength"],[112,25,86,26],[112,26,86,26,"BitLength"],[112,35,86,26],[112,36,86,27,"maxId"],[112,41,86,32],[113,8,87,8],[113,12,87,14,"encodingType"],[113,24,87,26],[113,27,87,29,"IntEncoder"],[113,40,87,39],[113,41,87,39,"IntEncoder"],[113,51,87,39],[113,52,87,40,"decode"],[113,58,87,46],[113,59,87,47,"value"],[113,64,87,52],[113,65,87,53,"charAt"],[113,71,87,59],[113,72,87,60,"index"],[113,77,87,65],[113,78,87,66],[113,80,87,68,"BitLength"],[113,88,87,77],[113,89,87,77,"BitLength"],[113,98,87,77],[113,99,87,78,"encodingType"],[113,111,87,90],[113,112,87,91],[114,8,88,8,"index"],[114,13,88,13],[114,17,88,17,"BitLength"],[114,25,88,26],[114,26,88,26,"BitLength"],[114,35,88,26],[114,36,88,27,"encodingType"],[114,48,88,39],[115,8,89,8],[116,0,90,0],[117,0,91,0],[118,8,92,8],[118,12,92,12,"encodingType"],[118,24,92,24],[118,29,92,29,"VectorEncodingType"],[118,50,92,47],[118,51,92,47,"VectorEncodingType"],[118,69,92,47],[118,70,92,48,"RANGE"],[118,75,92,53],[118,77,92,55],[119,10,93,12,"vector"],[119,16,93,18],[119,19,93,21],[119,23,93,25,"Vector"],[119,36,93,31],[119,37,93,31,"Vector"],[119,43,93,31],[119,44,93,32],[119,45,93,33],[120,10,94,12],[120,14,94,16,"version"],[120,21,94,23],[120,26,94,28],[120,27,94,29],[120,29,94,31],[121,12,95,16],[121,16,95,20,"value"],[121,21,95,25],[121,22,95,26,"substr"],[121,28,95,32],[121,29,95,33,"index"],[121,34,95,38],[121,36,95,40],[121,37,95,41],[121,38,95,42],[121,43,95,47],[121,46,95,50],[121,48,95,52],[122,14,96,20],[122,20,96,26],[122,24,96,30,"DecodingError"],[122,38,96,43],[122,39,96,43,"DecodingError"],[122,52,96,43],[122,53,96,44],[122,89,96,80],[122,90,96,81],[123,12,97,16],[124,12,98,16],[125,12,99,16,"index"],[125,17,99,21],[125,19,99,23],[126,10,100,12],[127,10,101,12],[127,14,101,18,"numEntries"],[127,24,101,28],[127,27,101,31,"IntEncoder"],[127,40,101,41],[127,41,101,41,"IntEncoder"],[127,51,101,41],[127,52,101,42,"decode"],[127,58,101,48],[127,59,101,49,"value"],[127,64,101,54],[127,65,101,55,"substr"],[127,71,101,61],[127,72,101,62,"index"],[127,77,101,67],[127,79,101,69,"BitLength"],[127,87,101,78],[127,88,101,78,"BitLength"],[127,97,101,78],[127,98,101,79,"numEntries"],[127,108,101,89],[127,109,101,90],[127,111,101,92,"BitLength"],[127,119,101,101],[127,120,101,101,"BitLength"],[127,129,101,101],[127,130,101,102,"numEntries"],[127,140,101,112],[127,141,101,113],[128,10,102,12,"index"],[128,15,102,17],[128,19,102,21,"BitLength"],[128,27,102,30],[128,28,102,30,"BitLength"],[128,37,102,30],[128,38,102,31,"numEntries"],[128,48,102,41],[129,10,103,12],[130,10,104,12],[130,15,104,17],[130,19,104,21,"i"],[130,20,104,22],[130,23,104,25],[130,24,104,26],[130,26,104,28,"i"],[130,27,104,29],[130,30,104,32,"numEntries"],[130,40,104,42],[130,42,104,44,"i"],[130,43,104,45],[130,45,104,47],[130,47,104,49],[131,12,105,16],[132,12,106,16],[132,16,106,22,"isIdRange"],[132,25,106,31],[132,28,106,34,"BooleanEncoder"],[132,45,106,48],[132,46,106,48,"BooleanEncoder"],[132,60,106,48],[132,61,106,49,"decode"],[132,67,106,55],[132,68,106,56,"value"],[132,73,106,61],[132,74,106,62,"charAt"],[132,80,106,68],[132,81,106,69,"index"],[132,86,106,74],[132,87,106,75],[132,88,106,76],[133,12,107,16,"index"],[133,17,107,21],[133,21,107,25,"BitLength"],[133,29,107,34],[133,30,107,34,"BitLength"],[133,39,107,34],[133,40,107,35,"singleOrRange"],[133,53,107,48],[134,12,108,16],[135,0,109,0],[136,0,110,0],[137,0,111,0],[138,12,112,16],[138,16,112,22,"firstId"],[138,23,112,29],[138,26,112,32,"IntEncoder"],[138,39,112,42],[138,40,112,42,"IntEncoder"],[138,50,112,42],[138,51,112,43,"decode"],[138,57,112,49],[138,58,112,50,"value"],[138,63,112,55],[138,64,112,56,"substr"],[138,70,112,62],[138,71,112,63,"index"],[138,76,112,68],[138,78,112,70,"BitLength"],[138,86,112,79],[138,87,112,79,"BitLength"],[138,96,112,79],[138,97,112,80,"vendorId"],[138,105,112,88],[138,106,112,89],[138,108,112,91,"BitLength"],[138,116,112,100],[138,117,112,100,"BitLength"],[138,126,112,100],[138,127,112,101,"vendorId"],[138,135,112,109],[138,136,112,110],[139,12,113,16,"index"],[139,17,113,21],[139,21,113,25,"BitLength"],[139,29,113,34],[139,30,113,34,"BitLength"],[139,39,113,34],[139,40,113,35,"vendorId"],[139,48,113,43],[140,12,114,16],[141,12,115,16],[141,16,115,20,"isIdRange"],[141,25,115,29],[141,27,115,31],[142,14,116,20],[142,18,116,26,"secondId"],[142,26,116,34],[142,29,116,37,"IntEncoder"],[142,42,116,47],[142,43,116,47,"IntEncoder"],[142,53,116,47],[142,54,116,48,"decode"],[142,60,116,54],[142,61,116,55,"value"],[142,66,116,60],[142,67,116,61,"substr"],[142,73,116,67],[142,74,116,68,"index"],[142,79,116,73],[142,81,116,75,"BitLength"],[142,89,116,84],[142,90,116,84,"BitLength"],[142,99,116,84],[142,100,116,85,"vendorId"],[142,108,116,93],[142,109,116,94],[142,111,116,96,"BitLength"],[142,119,116,105],[142,120,116,105,"BitLength"],[142,129,116,105],[142,130,116,106,"vendorId"],[142,138,116,114],[142,139,116,115],[143,14,117,20,"index"],[143,19,117,25],[143,23,117,29,"BitLength"],[143,31,117,38],[143,32,117,38,"BitLength"],[143,41,117,38],[143,42,117,39,"vendorId"],[143,50,117,47],[144,14,118,20],[145,14,119,20],[145,19,119,25],[145,23,119,29,"j"],[145,24,119,30],[145,27,119,33,"firstId"],[145,34,119,40],[145,36,119,42,"j"],[145,37,119,43],[145,41,119,47,"secondId"],[145,49,119,55],[145,51,119,57,"j"],[145,52,119,58],[145,54,119,60],[145,56,119,62],[146,16,120,24,"vector"],[146,22,120,30],[146,23,120,31,"set"],[146,26,120,34],[146,27,120,35,"j"],[146,28,120,36],[146,29,120,37],[147,14,121,20],[148,12,122,16],[148,13,122,17],[148,19,123,21],[149,14,124,20,"vector"],[149,20,124,26],[149,21,124,27,"set"],[149,24,124,30],[149,25,124,31,"firstId"],[149,32,124,38],[149,33,124,39],[150,12,125,16],[151,10,126,12],[152,8,127,8],[152,9,127,9],[152,15,128,13],[153,10,129,12],[153,14,129,18,"bitField"],[153,22,129,26],[153,25,129,29,"value"],[153,30,129,34],[153,31,129,35,"substr"],[153,37,129,41],[153,38,129,42,"index"],[153,43,129,47],[153,45,129,49,"maxId"],[153,50,129,54],[153,51,129,55],[154,10,130,12,"index"],[154,15,130,17],[154,19,130,21,"maxId"],[154,24,130,26],[155,10,131,12,"vector"],[155,16,131,18],[155,19,131,21,"FixedVectorEncoder"],[155,40,131,39],[155,41,131,39,"FixedVectorEncoder"],[155,59,131,39],[155,60,131,40,"decode"],[155,66,131,46],[155,67,131,47,"bitField"],[155,75,131,55],[155,77,131,57,"maxId"],[155,82,131,62],[155,83,131,63],[156,8,132,8],[157,8,133,8,"vector"],[157,14,133,14],[157,15,133,15,"bitLength"],[157,24,133,24],[157,27,133,27,"index"],[157,32,133,32],[158,8,134,8],[158,15,134,15,"vector"],[158,21,134,21],[159,6,135,4],[160,4,135,5],[161,6,135,5,"key"],[161,9,135,5],[162,6,135,5,"value"],[162,11,135,5],[162,13,136,4],[162,22,136,11,"buildRangeEncoding"],[162,40,136,29,"buildRangeEncoding"],[162,41,136,30,"ranges"],[162,47,136,36],[162,49,136,38],[163,8,137,8],[164,8,138,8],[164,12,138,14,"numEntries"],[164,22,138,24],[164,25,138,27,"ranges"],[164,31,138,33],[164,32,138,34,"length"],[164,38,138,40],[165,8,139,8],[165,12,139,12,"rangeString"],[165,23,139,23],[165,26,139,26,"IntEncoder"],[165,39,139,36],[165,40,139,36,"IntEncoder"],[165,50,139,36],[165,51,139,37,"encode"],[165,57,139,43],[165,58,139,44,"numEntries"],[165,68,139,54],[165,70,139,56,"BitLength"],[165,78,139,65],[165,79,139,65,"BitLength"],[165,88,139,65],[165,89,139,66,"numEntries"],[165,99,139,76],[165,100,139,77],[166,8,140,8],[167,8,141,8,"ranges"],[167,14,141,14],[167,15,141,15,"forEach"],[167,22,141,22],[167,23,141,24,"range"],[167,28,141,29],[167,32,141,34],[168,10,142,12],[169,10,143,12],[169,14,143,18,"single"],[169,20,143,24],[169,23,143,28,"range"],[169,28,143,33],[169,29,143,34,"length"],[169,35,143,40],[169,40,143,45],[169,41,143,47],[170,10,144,12],[171,10,145,12],[172,10,146,12,"rangeString"],[172,21,146,23],[172,25,146,27,"BooleanEncoder"],[172,42,146,41],[172,43,146,41,"BooleanEncoder"],[172,57,146,41],[172,58,146,42,"encode"],[172,64,146,48],[172,65,146,49],[172,66,146,50,"single"],[172,72,146,56],[172,73,146,57],[173,10,147,12],[174,10,148,12,"rangeString"],[174,21,148,23],[174,25,148,27,"IntEncoder"],[174,38,148,37],[174,39,148,37,"IntEncoder"],[174,49,148,37],[174,50,148,38,"encode"],[174,56,148,44],[174,57,148,45,"range"],[174,62,148,50],[174,63,148,51],[174,64,148,52],[174,65,148,53],[174,67,148,55,"BitLength"],[174,75,148,64],[174,76,148,64,"BitLength"],[174,85,148,64],[174,86,148,65,"vendorId"],[174,94,148,73],[174,95,148,74],[175,10,149,12],[175,14,149,16],[175,15,149,17,"single"],[175,21,149,23],[175,23,149,25],[176,12,150,16],[177,12,151,16,"rangeString"],[177,23,151,27],[177,27,151,31,"IntEncoder"],[177,40,151,41],[177,41,151,41,"IntEncoder"],[177,51,151,41],[177,52,151,42,"encode"],[177,58,151,48],[177,59,151,49,"range"],[177,64,151,54],[177,65,151,55],[177,66,151,56],[177,67,151,57],[177,69,151,59,"BitLength"],[177,77,151,68],[177,78,151,68,"BitLength"],[177,87,151,68],[177,88,151,69,"vendorId"],[177,96,151,77],[177,97,151,78],[178,10,152,12],[179,8,153,8],[179,9,153,9],[179,10,153,10],[180,8,154,8],[180,15,154,15,"rangeString"],[180,26,154,26],[181,6,155,4],[182,4,155,5],[183,2,155,5],[184,0,155,5],[184,3]],"functionMap":{"names":["<global>","VendorVectorEncoder","encode","value.forEach$argument_0","decode","buildRangeEncoding","ranges.forEach$argument_0"],"mappings":"AAA;OCO;ICC;sBCgB;SD8C;KDU;IGC;KHqD;IIC;uBCK;SDY;KJE;CDC"},"hasCjsExports":false},"type":"js/module"}]}