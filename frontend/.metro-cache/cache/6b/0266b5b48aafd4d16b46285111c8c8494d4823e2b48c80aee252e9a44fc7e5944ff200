{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./encoder/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":112,"index":112}}],"key":"bONFB8PDrpZpnaO9IoSPKfVnetM=","exportNames":["*"],"imports":1}},{"name":"./model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":113},"end":{"line":2,"column":46,"index":159}}],"key":"f1espa074SpSruazfy8ml6aS0J8=","exportNames":["*"],"imports":1}},{"name":"./encoder/field/IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":160},"end":{"line":3,"column":59,"index":219}}],"key":"swX3hOqwWt9tYyv07BqtXqJYPL8=","exportNames":["*"],"imports":1}},{"name":"./TCModel.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":220},"end":{"line":4,"column":39,"index":259}}],"key":"muLZiH6qNf+DARcSuL6pIovOMBI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"TCString\", {\n    enumerable: true,\n    get: function () {\n      return TCString;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _encoderIndexJs = require(_dependencyMap[2], \"./encoder/index.js\");\n  var _modelIndexJs = require(_dependencyMap[3], \"./model/index.js\");\n  var _encoderFieldIntEncoderJs = require(_dependencyMap[4], \"./encoder/field/IntEncoder.js\");\n  var _TCModelJs = require(_dependencyMap[5], \"./TCModel.js\");\n  /**\n   * Main class for encoding and decoding a\n   * TCF Transparency and Consent String\n   */\n  var TCString = /*#__PURE__*/function () {\n    function TCString() {\n      (0, _classCallCheck.default)(this, TCString);\n    }\n    return (0, _createClass.default)(TCString, null, [{\n      key: \"encode\",\n      value:\n      /**\n       * encodes a model into a TCString\n       *\n       * @param {TCModel} tcModel - model to convert into encoded string\n       * @param {EncodingOptions} options - for encoding options other than default\n       * @return {string} - base64url encoded Transparency and Consent String\n       */\n      function encode(tcModel, options) {\n        var out = '';\n        var sequence;\n        tcModel = _encoderIndexJs.SemanticPreEncoder.process(tcModel, options);\n        /**\n           * If they pass in a special segment sequence.\n           */\n        if (Array.isArray(options?.segments)) {\n          sequence = options.segments;\n        } else {\n          sequence = new _encoderIndexJs.SegmentSequence(tcModel, options)['' + tcModel.version];\n        }\n        sequence.forEach((segment, idx) => {\n          var dotMaybe = '';\n          if (idx < sequence.length - 1) {\n            dotMaybe = '.';\n          }\n          out += _encoderIndexJs.SegmentEncoder.encode(tcModel, segment) + dotMaybe;\n        });\n        return out;\n      }\n      /**\n       * Decodes a string into a TCModel\n       *\n       * @param {string} encodedTCString - base64url encoded Transparency and\n       * Consent String to decode - can also be a single or group of segments of\n       * the string\n       * @param {string} [tcModel] - model to enhance with the information.  If\n       * none is passed a new instance of TCModel will be created.\n       * @return {TCModel} - Returns populated TCModel\n       */\n    }, {\n      key: \"decode\",\n      value: function decode(encodedTCString, tcModel) {\n        var segments = encodedTCString.split('.');\n        var len = segments.length;\n        if (!tcModel) {\n          tcModel = new _TCModelJs.TCModel();\n        }\n        for (var i = 0; i < len; i++) {\n          var segString = segments[i];\n          /**\n           * first char will contain 6 bits, we only need the first 3. In version 1\n           * and 2 of the TC string there is no segment type for the CORE string.\n           * Instead the first 6 bits are reserved for the encoding version, but\n           * because we're only on a maximum of encoding version 2 the first 3 bits\n           * in the core segment will evaluate to 0.\n           */\n          var firstChar = _encoderIndexJs.Base64Url.decode(segString.charAt(0));\n          var segTypeBits = firstChar.substr(0, _encoderIndexJs.BitLength.segmentType);\n          var segment = _modelIndexJs.SegmentIDs.ID_TO_KEY[_encoderFieldIntEncoderJs.IntEncoder.decode(segTypeBits, _encoderIndexJs.BitLength.segmentType).toString()];\n          _encoderIndexJs.SegmentEncoder.decode(segString, tcModel, segment);\n        }\n        return tcModel;\n      }\n    }]);\n  }();\n});","lineCount":101,"map":[[12,2,9,0,"Object"],[12,8,9,0],[12,9,9,0,"defineProperty"],[12,23,9,0],[12,24,9,0,"exports"],[12,31,9,0],[13,4,9,0,"enumerable"],[13,14,9,0],[14,4,9,0,"get"],[14,7,9,0],[14,18,9,0,"get"],[14,19,9,0],[15,6,9,0],[15,13,9,0,"TCString"],[15,21,9,0],[16,4,9,0],[17,2,9,0],[18,2,71,1],[18,6,71,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,71,1],[18,43,71,1,"require"],[18,50,71,1],[18,51,71,1,"_dependencyMap"],[18,65,71,1],[19,2,71,1],[19,6,71,1,"_classCallCheck"],[19,21,71,1],[19,24,71,1,"_interopDefault"],[19,39,71,1],[19,40,71,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,71,1],[20,2,71,1],[20,6,71,1,"_babelRuntimeHelpersCreateClass"],[20,37,71,1],[20,40,71,1,"require"],[20,47,71,1],[20,48,71,1,"_dependencyMap"],[20,62,71,1],[21,2,71,1],[21,6,71,1,"_createClass"],[21,18,71,1],[21,21,71,1,"_interopDefault"],[21,36,71,1],[21,37,71,1,"_babelRuntimeHelpersCreateClass"],[21,68,71,1],[22,2,1,0],[22,6,1,0,"_encoderIndexJs"],[22,21,1,0],[22,24,1,0,"require"],[22,31,1,0],[22,32,1,0,"_dependencyMap"],[22,46,1,0],[23,2,2,0],[23,6,2,0,"_modelIndexJs"],[23,19,2,0],[23,22,2,0,"require"],[23,29,2,0],[23,30,2,0,"_dependencyMap"],[23,44,2,0],[24,2,3,0],[24,6,3,0,"_encoderFieldIntEncoderJs"],[24,31,3,0],[24,34,3,0,"require"],[24,41,3,0],[24,42,3,0,"_dependencyMap"],[24,56,3,0],[25,2,4,0],[25,6,4,0,"_TCModelJs"],[25,16,4,0],[25,19,4,0,"require"],[25,26,4,0],[25,27,4,0,"_dependencyMap"],[25,41,4,0],[26,2,5,0],[27,0,6,0],[28,0,7,0],[29,0,8,0],[30,2,5,0],[30,6,9,13,"TCString"],[30,14,9,21],[31,4,9,21],[31,13,9,21,"TCString"],[31,22,9,21],[32,6,9,21],[32,10,9,21,"_classCallCheck"],[32,25,9,21],[32,26,9,21,"default"],[32,33,9,21],[32,41,9,21,"TCString"],[32,49,9,21],[33,4,9,21],[34,4,9,21],[34,15,9,21,"_createClass"],[34,27,9,21],[34,28,9,21,"default"],[34,35,9,21],[34,37,9,21,"TCString"],[34,45,9,21],[35,6,9,21,"key"],[35,9,9,21],[36,6,9,21,"value"],[36,11,9,21],[37,6,10,4],[38,0,11,0],[39,0,12,0],[40,0,13,0],[41,0,14,0],[42,0,15,0],[43,0,16,0],[44,6,17,4],[44,15,17,11,"encode"],[44,21,17,17,"encode"],[44,22,17,18,"tcModel"],[44,29,17,25],[44,31,17,27,"options"],[44,38,17,34],[44,40,17,36],[45,8,18,8],[45,12,18,12,"out"],[45,15,18,15],[45,18,18,18],[45,20,18,20],[46,8,19,8],[46,12,19,12,"sequence"],[46,20,19,20],[47,8,20,8,"tcModel"],[47,15,20,15],[47,18,20,18,"SemanticPreEncoder"],[47,33,20,36],[47,34,20,36,"SemanticPreEncoder"],[47,52,20,36],[47,53,20,37,"process"],[47,60,20,44],[47,61,20,45,"tcModel"],[47,68,20,52],[47,70,20,54,"options"],[47,77,20,61],[47,78,20,62],[48,8,21,8],[49,0,22,0],[50,0,23,0],[51,8,24,8],[51,12,24,12,"Array"],[51,17,24,17],[51,18,24,18,"isArray"],[51,25,24,25],[51,26,24,26,"options"],[51,33,24,33],[51,35,24,35,"segments"],[51,43,24,43],[51,44,24,44],[51,46,24,46],[52,10,25,12,"sequence"],[52,18,25,20],[52,21,25,23,"options"],[52,28,25,30],[52,29,25,31,"segments"],[52,37,25,39],[53,8,26,8],[53,9,26,9],[53,15,27,13],[54,10,28,12,"sequence"],[54,18,28,20],[54,21,28,23],[54,25,28,27,"SegmentSequence"],[54,40,28,42],[54,41,28,42,"SegmentSequence"],[54,56,28,42],[54,57,28,43,"tcModel"],[54,64,28,50],[54,66,28,52,"options"],[54,73,28,59],[54,74,28,60],[54,75,28,61],[54,77,28,63],[54,80,28,66,"tcModel"],[54,87,28,73],[54,88,28,74,"version"],[54,95,28,81],[54,96,28,82],[55,8,29,8],[56,8,30,8,"sequence"],[56,16,30,16],[56,17,30,17,"forEach"],[56,24,30,24],[56,25,30,25],[56,26,30,26,"segment"],[56,33,30,33],[56,35,30,35,"idx"],[56,38,30,38],[56,43,30,43],[57,10,31,12],[57,14,31,16,"dotMaybe"],[57,22,31,24],[57,25,31,27],[57,27,31,29],[58,10,32,12],[58,14,32,16,"idx"],[58,17,32,19],[58,20,32,22,"sequence"],[58,28,32,30],[58,29,32,31,"length"],[58,35,32,37],[58,38,32,40],[58,39,32,41],[58,41,32,43],[59,12,33,16,"dotMaybe"],[59,20,33,24],[59,23,33,27],[59,26,33,30],[60,10,34,12],[61,10,35,12,"out"],[61,13,35,15],[61,17,35,19,"SegmentEncoder"],[61,32,35,33],[61,33,35,33,"SegmentEncoder"],[61,47,35,33],[61,48,35,34,"encode"],[61,54,35,40],[61,55,35,41,"tcModel"],[61,62,35,48],[61,64,35,50,"segment"],[61,71,35,57],[61,72,35,58],[61,75,35,61,"dotMaybe"],[61,83,35,69],[62,8,36,8],[62,9,36,9],[62,10,36,10],[63,8,37,8],[63,15,37,15,"out"],[63,18,37,18],[64,6,38,4],[65,6,39,4],[66,0,40,0],[67,0,41,0],[68,0,42,0],[69,0,43,0],[70,0,44,0],[71,0,45,0],[72,0,46,0],[73,0,47,0],[74,0,48,0],[75,4,39,4],[76,6,39,4,"key"],[76,9,39,4],[77,6,39,4,"value"],[77,11,39,4],[77,13,49,4],[77,22,49,11,"decode"],[77,28,49,17,"decode"],[77,29,49,18,"encodedTCString"],[77,44,49,33],[77,46,49,35,"tcModel"],[77,53,49,42],[77,55,49,44],[78,8,50,8],[78,12,50,14,"segments"],[78,20,50,22],[78,23,50,25,"encodedTCString"],[78,38,50,40],[78,39,50,41,"split"],[78,44,50,46],[78,45,50,47],[78,48,50,50],[78,49,50,51],[79,8,51,8],[79,12,51,14,"len"],[79,15,51,17],[79,18,51,20,"segments"],[79,26,51,28],[79,27,51,29,"length"],[79,33,51,35],[80,8,52,8],[80,12,52,12],[80,13,52,13,"tcModel"],[80,20,52,20],[80,22,52,22],[81,10,53,12,"tcModel"],[81,17,53,19],[81,20,53,22],[81,24,53,26,"TCModel"],[81,34,53,33],[81,35,53,33,"TCModel"],[81,42,53,33],[81,43,53,34],[81,44,53,35],[82,8,54,8],[83,8,55,8],[83,13,55,13],[83,17,55,17,"i"],[83,18,55,18],[83,21,55,21],[83,22,55,22],[83,24,55,24,"i"],[83,25,55,25],[83,28,55,28,"len"],[83,31,55,31],[83,33,55,33,"i"],[83,34,55,34],[83,36,55,36],[83,38,55,38],[84,10,56,12],[84,14,56,18,"segString"],[84,23,56,27],[84,26,56,30,"segments"],[84,34,56,38],[84,35,56,39,"i"],[84,36,56,40],[84,37,56,41],[85,10,57,12],[86,0,58,0],[87,0,59,0],[88,0,60,0],[89,0,61,0],[90,0,62,0],[91,0,63,0],[92,10,64,12],[92,14,64,18,"firstChar"],[92,23,64,27],[92,26,64,30,"Base64Url"],[92,41,64,39],[92,42,64,39,"Base64Url"],[92,51,64,39],[92,52,64,40,"decode"],[92,58,64,46],[92,59,64,47,"segString"],[92,68,64,56],[92,69,64,57,"charAt"],[92,75,64,63],[92,76,64,64],[92,77,64,65],[92,78,64,66],[92,79,64,67],[93,10,65,12],[93,14,65,18,"segTypeBits"],[93,25,65,29],[93,28,65,32,"firstChar"],[93,37,65,41],[93,38,65,42,"substr"],[93,44,65,48],[93,45,65,49],[93,46,65,50],[93,48,65,52,"BitLength"],[93,63,65,61],[93,64,65,61,"BitLength"],[93,73,65,61],[93,74,65,62,"segmentType"],[93,85,65,73],[93,86,65,74],[94,10,66,12],[94,14,66,18,"segment"],[94,21,66,25],[94,24,66,28,"SegmentIDs"],[94,37,66,38],[94,38,66,38,"SegmentIDs"],[94,48,66,38],[94,49,66,39,"ID_TO_KEY"],[94,58,66,48],[94,59,66,49,"IntEncoder"],[94,84,66,59],[94,85,66,59,"IntEncoder"],[94,95,66,59],[94,96,66,60,"decode"],[94,102,66,66],[94,103,66,67,"segTypeBits"],[94,114,66,78],[94,116,66,80,"BitLength"],[94,131,66,89],[94,132,66,89,"BitLength"],[94,141,66,89],[94,142,66,90,"segmentType"],[94,153,66,101],[94,154,66,102],[94,155,66,103,"toString"],[94,163,66,111],[94,164,66,112],[94,165,66,113],[94,166,66,114],[95,10,67,12,"SegmentEncoder"],[95,25,67,26],[95,26,67,26,"SegmentEncoder"],[95,40,67,26],[95,41,67,27,"decode"],[95,47,67,33],[95,48,67,34,"segString"],[95,57,67,43],[95,59,67,45,"tcModel"],[95,66,67,52],[95,68,67,54,"segment"],[95,75,67,61],[95,76,67,62],[96,8,68,8],[97,8,69,8],[97,15,69,15,"tcModel"],[97,22,69,22],[98,6,70,4],[99,4,70,5],[100,2,70,5],[101,0,70,5],[101,3]],"functionMap":{"names":["<global>","TCString","encode","sequence.forEach$argument_0","decode"],"mappings":"AAA;OCQ;ICQ;yBCa;SDM;KDE;IGW;KHqB;CDC"},"hasCjsExports":false},"type":"js/module"}]}