{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"CombatEngine\", {\n    enumerable: true,\n    get: function () {\n      return CombatEngine;\n    }\n  });\n  Object.defineProperty(exports, \"DamageCalculator\", {\n    enumerable: true,\n    get: function () {\n      return DamageCalculator;\n    }\n  });\n  Object.defineProperty(exports, \"StatusEffectManager\", {\n    enumerable: true,\n    get: function () {\n      return StatusEffectManager;\n    }\n  });\n  Object.defineProperty(exports, \"combatEngine\", {\n    enumerable: true,\n    get: function () {\n      return combatEngine;\n    }\n  });\n  // Core Combat Engine - Tick-based system running at 10 TPS\n  class CombatEngine {\n    tickRate = 10; // 10 ticks per second\n    tickInterval = 1000 / this.tickRate; // 100ms per tick\n    lastTick = 0;\n    isRunning = false;\n    tickCallbacks = [];\n    constructor() {\n      this.lastTick = Date.now();\n    }\n\n    // Start the combat engine\n    start() {\n      if (this.isRunning) return;\n      this.isRunning = true;\n      this.lastTick = Date.now();\n      this.gameLoop();\n    }\n\n    // Stop the combat engine\n    stop() {\n      this.isRunning = false;\n    }\n\n    // Add callback to be called every tick\n    addTickCallback(callback) {\n      this.tickCallbacks.push(callback);\n    }\n\n    // Remove tick callback\n    removeTickCallback(callback) {\n      const index = this.tickCallbacks.indexOf(callback);\n      if (index > -1) {\n        this.tickCallbacks.splice(index, 1);\n      }\n    }\n\n    // Main game loop - runs at 10 TPS\n    gameLoop() {\n      if (!this.isRunning) return;\n      const now = Date.now();\n      const deltaTime = now - this.lastTick;\n\n      // Only process if enough time has passed for next tick\n      if (deltaTime >= this.tickInterval) {\n        // Execute all tick callbacks\n        this.tickCallbacks.forEach(callback => {\n          try {\n            callback();\n          } catch (error) {\n            console.error('Error in tick callback:', error);\n          }\n        });\n        this.lastTick = now;\n      }\n\n      // Schedule next frame\n      requestAnimationFrame(() => this.gameLoop());\n    }\n\n    // Get current tick timestamp for cooldown calculations\n    getCurrentTick() {\n      return Math.floor(this.lastTick / this.tickInterval);\n    }\n\n    // Convert seconds to ticks\n    secondsToTicks(seconds) {\n      return Math.floor(seconds * this.tickRate);\n    }\n\n    // Convert ticks to seconds\n    ticksToSeconds(ticks) {\n      return ticks / this.tickRate;\n    }\n  }\n\n  // Damage calculation system\n\n  class DamageCalculator {\n    // Calculate base damage with crit chance\n    static calculateDamage(baseDamage, attackerStats, defenderStats) {\n      let finalDamage = baseDamage;\n      let isCritical = false;\n\n      // Apply attack stat bonus\n      finalDamage *= 1 + attackerStats.attack / 100;\n\n      // Check for critical hit\n      if (Math.random() < attackerStats.critChance / 100) {\n        finalDamage *= 1 + attackerStats.critDamage / 100;\n        isCritical = true;\n      }\n\n      // Apply defense reduction\n      const damageReduction = defenderStats.defense / (defenderStats.defense + 100);\n      finalDamage *= 1 - damageReduction;\n\n      // Minimum damage is 1\n      finalDamage = Math.max(1, Math.floor(finalDamage));\n      return {\n        damage: finalDamage,\n        isCritical,\n        damageType: 'physical'\n      };\n    }\n\n    // Calculate DoT damage per tick\n    static calculateDoTDamage(effect, attackerStats) {\n      let damage = effect.value;\n      damage *= 1 + attackerStats.attack / 100;\n      return Math.max(1, Math.floor(damage));\n    }\n  }\n\n  // Combat stats interface\n\n  // Status effect system\n\n  class StatusEffectManager {\n    effects = new Map();\n\n    // Add status effect to entity\n    addEffect(entityId, effect) {\n      if (!this.effects.has(entityId)) {\n        this.effects.set(entityId, []);\n      }\n      const entityEffects = this.effects.get(entityId);\n\n      // Check if effect is stackable or should replace existing\n      const existingIndex = entityEffects.findIndex(e => e.id === effect.id);\n      if (existingIndex >= 0) {\n        const existing = entityEffects[existingIndex];\n        if (effect.stackable && existing.stacks && existing.stacks < 10) {\n          existing.stacks++;\n          existing.remainingTicks = Math.max(existing.remainingTicks, effect.remainingTicks);\n        } else {\n          // Replace existing effect\n          entityEffects[existingIndex] = effect;\n        }\n      } else {\n        entityEffects.push(effect);\n      }\n    }\n\n    // Process status effects for all entities each tick\n    processTick(currentTick) {\n      const tickResults = new Map();\n      this.effects.forEach((entityEffects, entityId) => {\n        const results = [];\n\n        // Process each effect\n        for (let i = entityEffects.length - 1; i >= 0; i--) {\n          const effect = entityEffects[i];\n\n          // Check if it's time to trigger this effect\n          if (currentTick >= effect.lastTick + effect.tickInterval) {\n            // Apply effect\n            const result = this.applyEffect(effect);\n            if (result) {\n              results.push(result);\n            }\n            effect.lastTick = currentTick;\n            effect.remainingTicks--;\n          }\n\n          // Remove expired effects\n          if (effect.remainingTicks <= 0) {\n            entityEffects.splice(i, 1);\n          }\n        }\n        if (results.length > 0) {\n          tickResults.set(entityId, results);\n        }\n      });\n      return tickResults;\n    }\n\n    // Apply individual status effect\n    applyEffect(effect) {\n      switch (effect.type) {\n        case 'dot':\n          const stacks = effect.stacks || 1;\n          return {\n            damage: effect.value * stacks,\n            isCritical: false,\n            damageType: 'magical'\n          };\n        case 'heal':\n          return {\n            damage: -effect.value,\n            // negative damage = healing\n            isCritical: false,\n            damageType: 'true'\n          };\n        default:\n          return null;\n      }\n    }\n\n    // Get all effects for an entity\n    getEffects(entityId) {\n      return this.effects.get(entityId) || [];\n    }\n\n    // Clear all effects for an entity\n    clearEffects(entityId) {\n      this.effects.delete(entityId);\n    }\n  }\n\n  // Global combat engine instance\n  const combatEngine = new CombatEngine();\n});","lineCount":243,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"CombatEngine"],[10,25,2,0],[11,4,2,0],[12,2,2,0],[13,2,96,0,"Object"],[13,8,96,0],[13,9,96,0,"defineProperty"],[13,23,96,0],[13,24,96,0,"exports"],[13,31,96,0],[14,4,96,0,"enumerable"],[14,14,96,0],[15,4,96,0,"get"],[15,7,96,0],[15,18,96,0,"get"],[15,19,96,0],[16,6,96,0],[16,13,96,0,"DamageCalculator"],[16,29,96,0],[17,4,96,0],[18,2,96,0],[19,2,161,0,"Object"],[19,8,161,0],[19,9,161,0,"defineProperty"],[19,23,161,0],[19,24,161,0,"exports"],[19,31,161,0],[20,4,161,0,"enumerable"],[20,14,161,0],[21,4,161,0,"get"],[21,7,161,0],[21,18,161,0,"get"],[21,19,161,0],[22,6,161,0],[22,13,161,0,"StatusEffectManager"],[22,32,161,0],[23,4,161,0],[24,2,161,0],[25,2,261,0,"Object"],[25,8,261,0],[25,9,261,0,"defineProperty"],[25,23,261,0],[25,24,261,0,"exports"],[25,31,261,0],[26,4,261,0,"enumerable"],[26,14,261,0],[27,4,261,0,"get"],[27,7,261,0],[27,18,261,0,"get"],[27,19,261,0],[28,6,261,0],[28,13,261,0,"combatEngine"],[28,25,261,0],[29,4,261,0],[30,2,261,0],[31,2,1,0],[32,2,2,7],[32,8,2,13,"CombatEngine"],[32,20,2,25],[32,21,2,26],[33,4,3,10,"tickRate"],[33,12,3,18],[33,15,3,21],[33,17,3,23],[33,18,3,24],[33,19,3,25],[34,4,4,10,"tickInterval"],[34,16,4,22],[34,19,4,33],[34,23,4,37],[34,26,4,40],[34,30,4,44],[34,31,4,45,"tickRate"],[34,39,4,53],[34,40,4,54],[34,41,4,55],[35,4,5,10,"lastTick"],[35,12,5,18],[35,15,5,29],[35,16,5,30],[36,4,6,10,"isRunning"],[36,13,6,19],[36,16,6,31],[36,21,6,36],[37,4,7,10,"tickCallbacks"],[37,17,7,23],[37,20,7,45],[37,22,7,47],[38,4,9,2,"constructor"],[38,15,9,13,"constructor"],[38,16,9,13],[38,18,9,16],[39,6,10,4],[39,10,10,8],[39,11,10,9,"lastTick"],[39,19,10,17],[39,22,10,20,"Date"],[39,26,10,24],[39,27,10,25,"now"],[39,30,10,28],[39,31,10,29],[39,32,10,30],[40,4,11,2],[42,4,13,2],[43,4,14,2,"start"],[43,9,14,7,"start"],[43,10,14,7],[43,12,14,16],[44,6,15,4],[44,10,15,8],[44,14,15,12],[44,15,15,13,"isRunning"],[44,24,15,22],[44,26,15,24],[45,6,17,4],[45,10,17,8],[45,11,17,9,"isRunning"],[45,20,17,18],[45,23,17,21],[45,27,17,25],[46,6,18,4],[46,10,18,8],[46,11,18,9,"lastTick"],[46,19,18,17],[46,22,18,20,"Date"],[46,26,18,24],[46,27,18,25,"now"],[46,30,18,28],[46,31,18,29],[46,32,18,30],[47,6,19,4],[47,10,19,8],[47,11,19,9,"gameLoop"],[47,19,19,17],[47,20,19,18],[47,21,19,19],[48,4,20,2],[50,4,22,2],[51,4,23,2,"stop"],[51,8,23,6,"stop"],[51,9,23,6],[51,11,23,15],[52,6,24,4],[52,10,24,8],[52,11,24,9,"isRunning"],[52,20,24,18],[52,23,24,21],[52,28,24,26],[53,4,25,2],[55,4,27,2],[56,4,28,2,"addTickCallback"],[56,19,28,17,"addTickCallback"],[56,20,28,18,"callback"],[56,28,28,38],[56,30,28,46],[57,6,29,4],[57,10,29,8],[57,11,29,9,"tickCallbacks"],[57,24,29,22],[57,25,29,23,"push"],[57,29,29,27],[57,30,29,28,"callback"],[57,38,29,36],[57,39,29,37],[58,4,30,2],[60,4,32,2],[61,4,33,2,"removeTickCallback"],[61,22,33,20,"removeTickCallback"],[61,23,33,21,"callback"],[61,31,33,41],[61,33,33,49],[62,6,34,4],[62,12,34,10,"index"],[62,17,34,15],[62,20,34,18],[62,24,34,22],[62,25,34,23,"tickCallbacks"],[62,38,34,36],[62,39,34,37,"indexOf"],[62,46,34,44],[62,47,34,45,"callback"],[62,55,34,53],[62,56,34,54],[63,6,35,4],[63,10,35,8,"index"],[63,15,35,13],[63,18,35,16],[63,19,35,17],[63,20,35,18],[63,22,35,20],[64,8,36,6],[64,12,36,10],[64,13,36,11,"tickCallbacks"],[64,26,36,24],[64,27,36,25,"splice"],[64,33,36,31],[64,34,36,32,"index"],[64,39,36,37],[64,41,36,39],[64,42,36,40],[64,43,36,41],[65,6,37,4],[66,4,38,2],[68,4,40,2],[69,4,41,10,"gameLoop"],[69,12,41,18,"gameLoop"],[69,13,41,18],[69,15,41,27],[70,6,42,4],[70,10,42,8],[70,11,42,9],[70,15,42,13],[70,16,42,14,"isRunning"],[70,25,42,23],[70,27,42,25],[71,6,44,4],[71,12,44,10,"now"],[71,15,44,13],[71,18,44,16,"Date"],[71,22,44,20],[71,23,44,21,"now"],[71,26,44,24],[71,27,44,25],[71,28,44,26],[72,6,45,4],[72,12,45,10,"deltaTime"],[72,21,45,19],[72,24,45,22,"now"],[72,27,45,25],[72,30,45,28],[72,34,45,32],[72,35,45,33,"lastTick"],[72,43,45,41],[74,6,47,4],[75,6,48,4],[75,10,48,8,"deltaTime"],[75,19,48,17],[75,23,48,21],[75,27,48,25],[75,28,48,26,"tickInterval"],[75,40,48,38],[75,42,48,40],[76,8,49,6],[77,8,50,6],[77,12,50,10],[77,13,50,11,"tickCallbacks"],[77,26,50,24],[77,27,50,25,"forEach"],[77,34,50,32],[77,35,50,33,"callback"],[77,43,50,41],[77,47,50,45],[78,10,51,8],[78,14,51,12],[79,12,52,10,"callback"],[79,20,52,18],[79,21,52,19],[79,22,52,20],[80,10,53,8],[80,11,53,9],[80,12,53,10],[80,19,53,17,"error"],[80,24,53,22],[80,26,53,24],[81,12,54,10,"console"],[81,19,54,17],[81,20,54,18,"error"],[81,25,54,23],[81,26,54,24],[81,51,54,49],[81,53,54,51,"error"],[81,58,54,56],[81,59,54,57],[82,10,55,8],[83,8,56,6],[83,9,56,7],[83,10,56,8],[84,8,58,6],[84,12,58,10],[84,13,58,11,"lastTick"],[84,21,58,19],[84,24,58,22,"now"],[84,27,58,25],[85,6,59,4],[87,6,61,4],[88,6,62,4,"requestAnimationFrame"],[88,27,62,25],[88,28,62,26],[88,34,62,32],[88,38,62,36],[88,39,62,37,"gameLoop"],[88,47,62,45],[88,48,62,46],[88,49,62,47],[88,50,62,48],[89,4,63,2],[91,4,65,2],[92,4,66,2,"getCurrentTick"],[92,18,66,16,"getCurrentTick"],[92,19,66,16],[92,21,66,27],[93,6,67,4],[93,13,67,11,"Math"],[93,17,67,15],[93,18,67,16,"floor"],[93,23,67,21],[93,24,67,22],[93,28,67,26],[93,29,67,27,"lastTick"],[93,37,67,35],[93,40,67,38],[93,44,67,42],[93,45,67,43,"tickInterval"],[93,57,67,55],[93,58,67,56],[94,4,68,2],[96,4,70,2],[97,4,71,2,"secondsToTicks"],[97,18,71,16,"secondsToTicks"],[97,19,71,17,"seconds"],[97,26,71,32],[97,28,71,42],[98,6,72,4],[98,13,72,11,"Math"],[98,17,72,15],[98,18,72,16,"floor"],[98,23,72,21],[98,24,72,22,"seconds"],[98,31,72,29],[98,34,72,32],[98,38,72,36],[98,39,72,37,"tickRate"],[98,47,72,45],[98,48,72,46],[99,4,73,2],[101,4,75,2],[102,4,76,2,"ticksToSeconds"],[102,18,76,16,"ticksToSeconds"],[102,19,76,17,"ticks"],[102,24,76,30],[102,26,76,40],[103,6,77,4],[103,13,77,11,"ticks"],[103,18,77,16],[103,21,77,19],[103,25,77,23],[103,26,77,24,"tickRate"],[103,34,77,32],[104,4,78,2],[105,2,79,0],[107,2,81,0],[109,2,96,7],[109,8,96,13,"DamageCalculator"],[109,24,96,29],[109,25,96,30],[110,4,97,2],[111,4,98,2],[111,11,98,9,"calculateDamage"],[111,26,98,24,"calculateDamage"],[111,27,99,4,"baseDamage"],[111,37,99,22],[111,39,100,4,"attackerStats"],[111,52,100,30],[111,54,101,4,"defenderStats"],[111,67,101,30],[111,69,102,18],[112,6,103,4],[112,10,103,8,"finalDamage"],[112,21,103,19],[112,24,103,22,"baseDamage"],[112,34,103,32],[113,6,104,4],[113,10,104,8,"isCritical"],[113,20,104,18],[113,23,104,21],[113,28,104,26],[115,6,106,4],[116,6,107,4,"finalDamage"],[116,17,107,15],[116,21,107,20],[116,22,107,21],[116,25,107,24,"attackerStats"],[116,38,107,37],[116,39,107,38,"attack"],[116,45,107,44],[116,48,107,47],[116,51,107,51],[118,6,109,4],[119,6,110,4],[119,10,110,8,"Math"],[119,14,110,12],[119,15,110,13,"random"],[119,21,110,19],[119,22,110,20],[119,23,110,21],[119,26,110,24,"attackerStats"],[119,39,110,37],[119,40,110,38,"critChance"],[119,50,110,48],[119,53,110,51],[119,56,110,54],[119,58,110,56],[120,8,111,6,"finalDamage"],[120,19,111,17],[120,23,111,22],[120,24,111,23],[120,27,111,26,"attackerStats"],[120,40,111,39],[120,41,111,40,"critDamage"],[120,51,111,50],[120,54,111,53],[120,57,111,57],[121,8,112,6,"isCritical"],[121,18,112,16],[121,21,112,19],[121,25,112,23],[122,6,113,4],[124,6,115,4],[125,6,116,4],[125,12,116,10,"damageReduction"],[125,27,116,25],[125,30,116,28,"defenderStats"],[125,43,116,41],[125,44,116,42,"defense"],[125,51,116,49],[125,55,116,53,"defenderStats"],[125,68,116,66],[125,69,116,67,"defense"],[125,76,116,74],[125,79,116,77],[125,82,116,80],[125,83,116,81],[126,6,117,4,"finalDamage"],[126,17,117,15],[126,21,117,20],[126,22,117,21],[126,25,117,24,"damageReduction"],[126,40,117,40],[128,6,119,4],[129,6,120,4,"finalDamage"],[129,17,120,15],[129,20,120,18,"Math"],[129,24,120,22],[129,25,120,23,"max"],[129,28,120,26],[129,29,120,27],[129,30,120,28],[129,32,120,30,"Math"],[129,36,120,34],[129,37,120,35,"floor"],[129,42,120,40],[129,43,120,41,"finalDamage"],[129,54,120,52],[129,55,120,53],[129,56,120,54],[130,6,122,4],[130,13,122,11],[131,8,123,6,"damage"],[131,14,123,12],[131,16,123,14,"finalDamage"],[131,27,123,25],[132,8,124,6,"isCritical"],[132,18,124,16],[133,8,125,6,"damageType"],[133,18,125,16],[133,20,125,18],[134,6,126,4],[134,7,126,5],[135,4,127,2],[137,4,129,2],[138,4,130,2],[138,11,130,9,"calculateDoTDamage"],[138,29,130,27,"calculateDoTDamage"],[138,30,130,28,"effect"],[138,36,130,48],[138,38,130,50,"attackerStats"],[138,51,130,76],[138,53,130,86],[139,6,131,4],[139,10,131,8,"damage"],[139,16,131,14],[139,19,131,17,"effect"],[139,25,131,23],[139,26,131,24,"value"],[139,31,131,29],[140,6,132,4,"damage"],[140,12,132,10],[140,16,132,15],[140,17,132,16],[140,20,132,19,"attackerStats"],[140,33,132,32],[140,34,132,33,"attack"],[140,40,132,39],[140,43,132,42],[140,46,132,46],[141,6,133,4],[141,13,133,11,"Math"],[141,17,133,15],[141,18,133,16,"max"],[141,21,133,19],[141,22,133,20],[141,23,133,21],[141,25,133,23,"Math"],[141,29,133,27],[141,30,133,28,"floor"],[141,35,133,33],[141,36,133,34,"damage"],[141,42,133,40],[141,43,133,41],[141,44,133,42],[142,4,134,2],[143,2,135,0],[145,2,137,0],[147,2,149,0],[149,2,161,7],[149,8,161,13,"StatusEffectManager"],[149,27,161,32],[149,28,161,33],[150,4,162,10,"effects"],[150,11,162,17],[150,14,162,49],[150,18,162,53,"Map"],[150,21,162,56],[150,22,162,57],[150,23,162,58],[152,4,164,2],[153,4,165,2,"addEffect"],[153,13,165,11,"addEffect"],[153,14,165,12,"entityId"],[153,22,165,28],[153,24,165,30,"effect"],[153,30,165,50],[153,32,165,58],[154,6,166,4],[154,10,166,8],[154,11,166,9],[154,15,166,13],[154,16,166,14,"effects"],[154,23,166,21],[154,24,166,22,"has"],[154,27,166,25],[154,28,166,26,"entityId"],[154,36,166,34],[154,37,166,35],[154,39,166,37],[155,8,167,6],[155,12,167,10],[155,13,167,11,"effects"],[155,20,167,18],[155,21,167,19,"set"],[155,24,167,22],[155,25,167,23,"entityId"],[155,33,167,31],[155,35,167,33],[155,37,167,35],[155,38,167,36],[156,6,168,4],[157,6,170,4],[157,12,170,10,"entityEffects"],[157,25,170,23],[157,28,170,26],[157,32,170,30],[157,33,170,31,"effects"],[157,40,170,38],[157,41,170,39,"get"],[157,44,170,42],[157,45,170,43,"entityId"],[157,53,170,51],[157,54,170,53],[159,6,172,4],[160,6,173,4],[160,12,173,10,"existingIndex"],[160,25,173,23],[160,28,173,26,"entityEffects"],[160,41,173,39],[160,42,173,40,"findIndex"],[160,51,173,49],[160,52,173,50,"e"],[160,53,173,51],[160,57,173,55,"e"],[160,58,173,56],[160,59,173,57,"id"],[160,61,173,59],[160,66,173,64,"effect"],[160,72,173,70],[160,73,173,71,"id"],[160,75,173,73],[160,76,173,74],[161,6,175,4],[161,10,175,8,"existingIndex"],[161,23,175,21],[161,27,175,25],[161,28,175,26],[161,30,175,28],[162,8,176,6],[162,14,176,12,"existing"],[162,22,176,20],[162,25,176,23,"entityEffects"],[162,38,176,36],[162,39,176,37,"existingIndex"],[162,52,176,50],[162,53,176,51],[163,8,177,6],[163,12,177,10,"effect"],[163,18,177,16],[163,19,177,17,"stackable"],[163,28,177,26],[163,32,177,30,"existing"],[163,40,177,38],[163,41,177,39,"stacks"],[163,47,177,45],[163,51,177,49,"existing"],[163,59,177,57],[163,60,177,58,"stacks"],[163,66,177,64],[163,69,177,67],[163,71,177,69],[163,73,177,71],[164,10,178,8,"existing"],[164,18,178,16],[164,19,178,17,"stacks"],[164,25,178,23],[164,27,178,25],[165,10,179,8,"existing"],[165,18,179,16],[165,19,179,17,"remainingTicks"],[165,33,179,31],[165,36,179,34,"Math"],[165,40,179,38],[165,41,179,39,"max"],[165,44,179,42],[165,45,179,43,"existing"],[165,53,179,51],[165,54,179,52,"remainingTicks"],[165,68,179,66],[165,70,179,68,"effect"],[165,76,179,74],[165,77,179,75,"remainingTicks"],[165,91,179,89],[165,92,179,90],[166,8,180,6],[166,9,180,7],[166,15,180,13],[167,10,181,8],[168,10,182,8,"entityEffects"],[168,23,182,21],[168,24,182,22,"existingIndex"],[168,37,182,35],[168,38,182,36],[168,41,182,39,"effect"],[168,47,182,45],[169,8,183,6],[170,6,184,4],[170,7,184,5],[170,13,184,11],[171,8,185,6,"entityEffects"],[171,21,185,19],[171,22,185,20,"push"],[171,26,185,24],[171,27,185,25,"effect"],[171,33,185,31],[171,34,185,32],[172,6,186,4],[173,4,187,2],[175,4,189,2],[176,4,190,2,"processTick"],[176,15,190,13,"processTick"],[176,16,190,14,"currentTick"],[176,27,190,33],[176,29,190,64],[177,6,191,4],[177,12,191,10,"tickResults"],[177,23,191,21],[177,26,191,24],[177,30,191,28,"Map"],[177,33,191,31],[177,34,191,56],[177,35,191,57],[178,6,193,4],[178,10,193,8],[178,11,193,9,"effects"],[178,18,193,16],[178,19,193,17,"forEach"],[178,26,193,24],[178,27,193,25],[178,28,193,26,"entityEffects"],[178,41,193,39],[178,43,193,41,"entityId"],[178,51,193,49],[178,56,193,54],[179,8,194,6],[179,14,194,12,"results"],[179,21,194,35],[179,24,194,38],[179,26,194,40],[181,8,196,6],[182,8,197,6],[182,13,197,11],[182,17,197,15,"i"],[182,18,197,16],[182,21,197,19,"entityEffects"],[182,34,197,32],[182,35,197,33,"length"],[182,41,197,39],[182,44,197,42],[182,45,197,43],[182,47,197,45,"i"],[182,48,197,46],[182,52,197,50],[182,53,197,51],[182,55,197,53,"i"],[182,56,197,54],[182,58,197,56],[182,60,197,58],[183,10,198,8],[183,16,198,14,"effect"],[183,22,198,20],[183,25,198,23,"entityEffects"],[183,38,198,36],[183,39,198,37,"i"],[183,40,198,38],[183,41,198,39],[185,10,200,8],[186,10,201,8],[186,14,201,12,"currentTick"],[186,25,201,23],[186,29,201,27,"effect"],[186,35,201,33],[186,36,201,34,"lastTick"],[186,44,201,42],[186,47,201,45,"effect"],[186,53,201,51],[186,54,201,52,"tickInterval"],[186,66,201,64],[186,68,201,66],[187,12,202,10],[188,12,203,10],[188,18,203,16,"result"],[188,24,203,22],[188,27,203,25],[188,31,203,29],[188,32,203,30,"applyEffect"],[188,43,203,41],[188,44,203,42,"effect"],[188,50,203,48],[188,51,203,49],[189,12,204,10],[189,16,204,14,"result"],[189,22,204,20],[189,24,204,22],[190,14,205,12,"results"],[190,21,205,19],[190,22,205,20,"push"],[190,26,205,24],[190,27,205,25,"result"],[190,33,205,31],[190,34,205,32],[191,12,206,10],[192,12,208,10,"effect"],[192,18,208,16],[192,19,208,17,"lastTick"],[192,27,208,25],[192,30,208,28,"currentTick"],[192,41,208,39],[193,12,209,10,"effect"],[193,18,209,16],[193,19,209,17,"remainingTicks"],[193,33,209,31],[193,35,209,33],[194,10,210,8],[196,10,212,8],[197,10,213,8],[197,14,213,12,"effect"],[197,20,213,18],[197,21,213,19,"remainingTicks"],[197,35,213,33],[197,39,213,37],[197,40,213,38],[197,42,213,40],[198,12,214,10,"entityEffects"],[198,25,214,23],[198,26,214,24,"splice"],[198,32,214,30],[198,33,214,31,"i"],[198,34,214,32],[198,36,214,34],[198,37,214,35],[198,38,214,36],[199,10,215,8],[200,8,216,6],[201,8,218,6],[201,12,218,10,"results"],[201,19,218,17],[201,20,218,18,"length"],[201,26,218,24],[201,29,218,27],[201,30,218,28],[201,32,218,30],[202,10,219,8,"tickResults"],[202,21,219,19],[202,22,219,20,"set"],[202,25,219,23],[202,26,219,24,"entityId"],[202,34,219,32],[202,36,219,34,"results"],[202,43,219,41],[202,44,219,42],[203,8,220,6],[204,6,221,4],[204,7,221,5],[204,8,221,6],[205,6,223,4],[205,13,223,11,"tickResults"],[205,24,223,22],[206,4,224,2],[208,4,226,2],[209,4,227,10,"applyEffect"],[209,15,227,21,"applyEffect"],[209,16,227,22,"effect"],[209,22,227,42],[209,24,227,65],[210,6,228,4],[210,14,228,12,"effect"],[210,20,228,18],[210,21,228,19,"type"],[210,25,228,23],[211,8,229,6],[211,13,229,11],[211,18,229,16],[212,10,230,8],[212,16,230,14,"stacks"],[212,22,230,20],[212,25,230,23,"effect"],[212,31,230,29],[212,32,230,30,"stacks"],[212,38,230,36],[212,42,230,40],[212,43,230,41],[213,10,231,8],[213,17,231,15],[214,12,232,10,"damage"],[214,18,232,16],[214,20,232,18,"effect"],[214,26,232,24],[214,27,232,25,"value"],[214,32,232,30],[214,35,232,33,"stacks"],[214,41,232,39],[215,12,233,10,"isCritical"],[215,22,233,20],[215,24,233,22],[215,29,233,27],[216,12,234,10,"damageType"],[216,22,234,20],[216,24,234,22],[217,10,235,8],[217,11,235,9],[218,8,237,6],[218,13,237,11],[218,19,237,17],[219,10,238,8],[219,17,238,15],[220,12,239,10,"damage"],[220,18,239,16],[220,20,239,18],[220,21,239,19,"effect"],[220,27,239,25],[220,28,239,26,"value"],[220,33,239,31],[221,12,239,33],[222,12,240,10,"isCritical"],[222,22,240,20],[222,24,240,22],[222,29,240,27],[223,12,241,10,"damageType"],[223,22,241,20],[223,24,241,22],[224,10,242,8],[224,11,242,9],[225,8,244,6],[226,10,245,8],[226,17,245,15],[226,21,245,19],[227,6,246,4],[228,4,247,2],[230,4,249,2],[231,4,250,2,"getEffects"],[231,14,250,12,"getEffects"],[231,15,250,13,"entityId"],[231,23,250,29],[231,25,250,47],[232,6,251,4],[232,13,251,11],[232,17,251,15],[232,18,251,16,"effects"],[232,25,251,23],[232,26,251,24,"get"],[232,29,251,27],[232,30,251,28,"entityId"],[232,38,251,36],[232,39,251,37],[232,43,251,41],[232,45,251,43],[233,4,252,2],[235,4,254,2],[236,4,255,2,"clearEffects"],[236,16,255,14,"clearEffects"],[236,17,255,15,"entityId"],[236,25,255,31],[236,27,255,39],[237,6,256,4],[237,10,256,8],[237,11,256,9,"effects"],[237,18,256,16],[237,19,256,17,"delete"],[237,25,256,23],[237,26,256,24,"entityId"],[237,34,256,32],[237,35,256,33],[238,4,257,2],[239,2,258,0],[241,2,260,0],[242,2,261,7],[242,8,261,13,"combatEngine"],[242,20,261,25],[242,23,261,28],[242,27,261,32,"CombatEngine"],[242,39,261,44],[242,40,261,45],[242,41,261,46],[243,0,261,47],[243,3]],"functionMap":{"names":["<global>","CombatEngine","constructor","start","stop","addTickCallback","removeTickCallback","gameLoop","tickCallbacks.forEach$argument_0","requestAnimationFrame$argument_0","getCurrentTick","secondsToTicks","ticksToSeconds","DamageCalculator","DamageCalculator.calculateDamage","DamageCalculator.calculateDoTDamage","StatusEffectManager","StatusEffectManager#addEffect","entityEffects.findIndex$argument_0","StatusEffectManager#processTick","effects.forEach$argument_0","StatusEffectManager#applyEffect","StatusEffectManager#getEffects","StatusEffectManager#clearEffects"],"mappings":"AAA;OCC;ECO;GDE;EEG;GFM;EGG;GHE;EIG;GJE;EKG;GLK;EMG;iCCS;ODM;0BEM,qBF;GNC;ESG;GTE;EUG;GVE;EWG;GXE;CDC;OaiB;ECE;GD6B;EEG;GFI;CbC;OgB0B;ECI;kDCQ,uBD;GDc;EGG;yBCG;KD4B;GHG;EKG;GLoB;EMG;GNE;EOG;GPE;ChBC"},"hasCjsExports":false},"type":"js/module"}]}