{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"./PurposeRestriction.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"FdlahdeOvwZ9R2ec1GwiLKv3Nus=","exportNames":["*"],"imports":1}},{"name":"./BinarySearchTree.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":62},"end":{"line":2,"column":57,"index":119}}],"key":"UNAjMrSqUeogaCkegxlbh00zeCM=","exportNames":["*"],"imports":1}},{"name":"./RestrictionType.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":120},"end":{"line":3,"column":55,"index":175}}],"key":"QvzwagpQEHyUHt2gmf30kTBSy2A=","exportNames":["*"],"imports":1}},{"name":"../Cloneable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":176},"end":{"line":4,"column":44,"index":220}}],"key":"FJQ7sPyD2S04pmlIJS/Y7IUPNDY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"PurposeRestrictionVector\", {\n    enumerable: true,\n    get: function () {\n      return PurposeRestrictionVector;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersCallSuper = require(_dependencyMap[2], \"@babel/runtime/helpers/callSuper\");\n  var _callSuper = _interopDefault(_babelRuntimeHelpersCallSuper);\n  var _babelRuntimeHelpersInherits = require(_dependencyMap[3], \"@babel/runtime/helpers/inherits\");\n  var _inherits = _interopDefault(_babelRuntimeHelpersInherits);\n  var _PurposeRestrictionJs = require(_dependencyMap[4], \"./PurposeRestriction.js\");\n  var _BinarySearchTreeJs = require(_dependencyMap[5], \"./BinarySearchTree.js\");\n  var _RestrictionTypeJs = require(_dependencyMap[6], \"./RestrictionType.js\");\n  var _CloneableJs = require(_dependencyMap[7], \"../Cloneable.js\");\n  var PurposeRestrictionVector = /*#__PURE__*/function (_Cloneable) {\n    function PurposeRestrictionVector() {\n      var _this;\n      (0, _classCallCheck.default)(this, PurposeRestrictionVector);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = (0, _callSuper.default)(this, PurposeRestrictionVector, [...args]);\n      /**\n       * if this originatd from an encoded string we'll need a place to store the\n       * bit length; it can be set and got from here\n       */\n      _this.bitLength = 0;\n      /**\n       * a map indexed by a string which will be a 'hash' of the purpose and\n       * restriction type.\n       *\n       * Using a BST to keep vendors in a sorted order for encoding later\n       */\n      _this.map = new Map();\n      return _this;\n    }\n    (0, _inherits.default)(PurposeRestrictionVector, _Cloneable);\n    return (0, _createClass.default)(PurposeRestrictionVector, [{\n      key: \"has\",\n      value: function has(hash) {\n        return this.map.has(hash);\n      }\n    }, {\n      key: \"isOkToHave\",\n      value: function isOkToHave(restrictionType, purposeId, vendorId) {\n        var result = true;\n        /**\n         * without a gvl set, there's no way to know... in that case we'll return\n         * true but once the GVL is set later we'll go through these and clean up\n         * the mess.\n         */\n        if (this.gvl?.vendors) {\n          var vendor = this.gvl.vendors[vendorId];\n          if (vendor) {\n            if (restrictionType === _RestrictionTypeJs.RestrictionType.NOT_ALLOWED) {\n              /**\n               * if it's \"not allowed\" then flexible declaration is ignored but if\n               * if it isn't even listed as one of the purposes the vendor uses,\n               * then there is no reason to encode the value so check both arrays\n               * to see if it exists.  If it does then we can restrict it.\n               */\n              result = vendor.legIntPurposes.includes(purposeId) || vendor.purposes.includes(purposeId);\n            } else if (vendor.flexiblePurposes.length) {\n              switch (restrictionType) {\n                /**\n                 * If the vendor has the purposeId in flexiblePurposes and it is\n                 * listed as a legitimate interest purpose we can set the\n                 * override to require consent.\n                 */\n                case _RestrictionTypeJs.RestrictionType.REQUIRE_CONSENT:\n                  result = vendor.flexiblePurposes.includes(purposeId) && vendor.legIntPurposes.includes(purposeId);\n                  break;\n                /**\n                 * If the vendor has the purposeId in flexiblePurposes and it is\n                 * listed as a consent purpose we can set the\n                 * override to require legitimate interest.\n                 */\n                case _RestrictionTypeJs.RestrictionType.REQUIRE_LI:\n                  result = vendor.flexiblePurposes.includes(purposeId) && vendor.purposes.includes(purposeId);\n                  break;\n              }\n            } else {\n              result = false;\n            }\n          } else {\n            // this vendor doesn't exist\n            result = false;\n          }\n        }\n        // if the gvl isn't defined, we can't do anything until later\n        return result;\n      }\n      /**\n       * add - adds a given Vendor ID under a given Purpose Restriction\n       *\n       * @param {number} vendorId\n       * @param {PurposeRestriction} purposeRestriction\n       * @return {void}\n       */\n    }, {\n      key: \"add\",\n      value: function add(vendorId, purposeRestriction) {\n        if (this.isOkToHave(purposeRestriction.restrictionType, purposeRestriction.purposeId, vendorId)) {\n          var hash = purposeRestriction.hash;\n          if (!this.has(hash)) {\n            this.map.set(hash, new _BinarySearchTreeJs.BinarySearchTree());\n            this.bitLength = 0;\n          }\n          /**\n           * Previously I had a check here to remove a duplicate value, but because\n           * we're using a tree the value is guaranteed to be unique so there is no\n           * need to add an additional de-duplication here.\n           */\n          this.map.get(hash).add(vendorId);\n        }\n      }\n      /**\n       * restrictPurposeToLegalBasis - adds all Vendors under a given Purpose Restriction\n       *\n       * @param {PurposeRestriction} purposeRestriction\n       * @return {void}\n       */\n    }, {\n      key: \"restrictPurposeToLegalBasis\",\n      value: function restrictPurposeToLegalBasis(purposeRestriction) {\n        var vendors = this.gvl.vendorIds;\n        var hash = purposeRestriction.hash;\n        var lastEntry = function () {\n          var value;\n          for (value of vendors);\n          return value;\n        }();\n        /**\n         * Create an ordered array of vendor IDs from `1` (the minimum value for Vendor ID) to `lastEntry`\n         */\n        var values = [...Array(lastEntry).keys()].map(i => i + 1);\n        for (var i = 1; i <= lastEntry; i++) {\n          if (!this.has(hash)) {\n            this.map.set(hash, _BinarySearchTreeJs.BinarySearchTree.build(values)); // use static method `build` to create a `BST` from the ordered array of IDs\n            this.bitLength = 0;\n          }\n          /**\n           * Previously I had a check here to remove a duplicate value, but because\n           * we're using a tree the value is guaranteed to be unique so there is no\n           * need to add an additional de-duplication here.\n           */\n          this.map.get(hash).add(i);\n        }\n      }\n      /**\n       * getVendors - returns array of vendor ids optionally narrowed by a given\n       * Purpose Restriction.  If no purpose restriction is passed then all vendor\n       * ids will be returned.  One can expect this result to be a unique set of\n       * ids no duplicates.\n       *\n       * @param {PurposeRestriction} [purposeRestriction] - optionally passed to\n       * get only Vendor IDs restricted under the given Purpose Restriction\n       * @return {number[]} - Unique ID set of vendors\n       */\n    }, {\n      key: \"getVendors\",\n      value: function getVendors(purposeRestriction) {\n        var vendorIds = [];\n        if (purposeRestriction) {\n          var hash = purposeRestriction.hash;\n          if (this.has(hash)) {\n            vendorIds = this.map.get(hash).get();\n          }\n        } else {\n          var vendorSet = new Set();\n          this.map.forEach(bst => {\n            bst.get().forEach(vendorId => {\n              vendorSet.add(vendorId);\n            });\n          });\n          vendorIds = Array.from(vendorSet);\n        }\n        return vendorIds;\n      }\n    }, {\n      key: \"getRestrictionType\",\n      value: function getRestrictionType(vendorId, purposeId) {\n        var rType;\n        this.getRestrictions(vendorId).forEach(purposeRestriction => {\n          if (purposeRestriction.purposeId === purposeId) {\n            if (rType === undefined || rType > purposeRestriction.restrictionType) {\n              rType = purposeRestriction.restrictionType;\n            }\n          }\n        });\n        return rType;\n      }\n      /**\n       * vendorHasRestriction - determines whether a given Vendor ID is under a\n       * given Purpose Restriction\n       *\n       * @param {number} vendorId\n       * @param {PurposeRestriction} purposeRestriction\n       * @return {boolean} - true if the give Vendor ID is under the given Purpose\n       * Restriction\n       */\n    }, {\n      key: \"vendorHasRestriction\",\n      value: function vendorHasRestriction(vendorId, purposeRestriction) {\n        var has = false;\n        var restrictions = this.getRestrictions(vendorId);\n        for (var i = 0; i < restrictions.length && !has; i++) {\n          has = purposeRestriction.isSameAs(restrictions[i]);\n        }\n        return has;\n      }\n      /**\n       * getMaxVendorId - gets the Maximum Vendor ID regardless of Purpose\n       * Restriction\n       *\n       * @return {number} - maximum Vendor ID\n       */\n    }, {\n      key: \"getMaxVendorId\",\n      value: function getMaxVendorId() {\n        var retr = 0;\n        this.map.forEach(bst => {\n          retr = Math.max(bst.max(), retr);\n        });\n        return retr;\n      }\n    }, {\n      key: \"getRestrictions\",\n      value: function getRestrictions(vendorId) {\n        var retr = [];\n        this.map.forEach((bst, hash) => {\n          if (vendorId) {\n            if (bst.contains(vendorId)) {\n              retr.push(_PurposeRestrictionJs.PurposeRestriction.unHash(hash));\n            }\n          } else {\n            retr.push(_PurposeRestrictionJs.PurposeRestriction.unHash(hash));\n          }\n        });\n        return retr;\n      }\n    }, {\n      key: \"getPurposes\",\n      value: function getPurposes() {\n        var purposeIds = new Set();\n        this.map.forEach((bst, hash) => {\n          purposeIds.add(_PurposeRestrictionJs.PurposeRestriction.unHash(hash).purposeId);\n        });\n        return Array.from(purposeIds);\n      }\n      /**\n       * remove - removes Vendor ID from a Purpose Restriction\n       *\n       * @param {number} vendorId\n       * @param {PurposeRestriction} purposeRestriction\n       * @return {void}\n       */\n    }, {\n      key: \"remove\",\n      value: function remove(vendorId, purposeRestriction) {\n        var hash = purposeRestriction.hash;\n        var bst = this.map.get(hash);\n        if (bst) {\n          bst.remove(vendorId);\n          // if it's empty let's delete the key so it doesn't show up empty\n          if (bst.isEmpty()) {\n            this.map.delete(hash);\n            this.bitLength = 0;\n          }\n        }\n      }\n      /**\n       * Essential for being able to determine whether we can actually set a\n       * purpose restriction since they have to have a flexible legal basis\n       *\n       * @param {GVL} value - the GVL instance\n       */\n    }, {\n      key: \"gvl\",\n      get:\n      /**\n       * gvl returns local copy of the GVL these restrictions apply to\n       *\n       * @return {GVL}\n       */\n      function () {\n        return this.gvl_;\n      }\n      /**\n       * isEmpty - whether or not this vector has any restrictions in it\n       *\n       * @return {boolean}\n       */,\n      set: function (value) {\n        if (!this.gvl_) {\n          this.gvl_ = value;\n          /**\n           * if we have restrictions set before the gvl is set then we'll have to\n           * go through and remove some if they're not valid\n           */\n          this.map.forEach((bst, hash) => {\n            var purposeRestriction = _PurposeRestrictionJs.PurposeRestriction.unHash(hash);\n            var vendors = bst.get();\n            vendors.forEach(vendorId => {\n              if (!this.isOkToHave(purposeRestriction.restrictionType, purposeRestriction.purposeId, vendorId)) {\n                bst.remove(vendorId);\n              }\n            });\n          });\n        }\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        return this.map.size === 0;\n      }\n    }, {\n      key: \"numRestrictions\",\n      get:\n      /**\n       * numRestrictions - returns the number of Purpose Restrictions.\n       *\n       * @return {number}\n       */\n      function () {\n        return this.map.size;\n      }\n    }]);\n  }(_CloneableJs.Cloneable);\n});","lineCount":345,"map":[[12,2,5,0,"Object"],[12,8,5,0],[12,9,5,0,"defineProperty"],[12,23,5,0],[12,24,5,0,"exports"],[12,31,5,0],[13,4,5,0,"enumerable"],[13,14,5,0],[14,4,5,0,"get"],[14,7,5,0],[14,18,5,0,"get"],[14,19,5,0],[15,6,5,0],[15,13,5,0,"PurposeRestrictionVector"],[15,37,5,0],[16,4,5,0],[17,2,5,0],[18,2,286,1],[18,6,286,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,286,1],[18,43,286,1,"require"],[18,50,286,1],[18,51,286,1,"_dependencyMap"],[18,65,286,1],[19,2,286,1],[19,6,286,1,"_classCallCheck"],[19,21,286,1],[19,24,286,1,"_interopDefault"],[19,39,286,1],[19,40,286,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,286,1],[20,2,286,1],[20,6,286,1,"_babelRuntimeHelpersCreateClass"],[20,37,286,1],[20,40,286,1,"require"],[20,47,286,1],[20,48,286,1,"_dependencyMap"],[20,62,286,1],[21,2,286,1],[21,6,286,1,"_createClass"],[21,18,286,1],[21,21,286,1,"_interopDefault"],[21,36,286,1],[21,37,286,1,"_babelRuntimeHelpersCreateClass"],[21,68,286,1],[22,2,286,1],[22,6,286,1,"_babelRuntimeHelpersCallSuper"],[22,35,286,1],[22,38,286,1,"require"],[22,45,286,1],[22,46,286,1,"_dependencyMap"],[22,60,286,1],[23,2,286,1],[23,6,286,1,"_callSuper"],[23,16,286,1],[23,19,286,1,"_interopDefault"],[23,34,286,1],[23,35,286,1,"_babelRuntimeHelpersCallSuper"],[23,64,286,1],[24,2,286,1],[24,6,286,1,"_babelRuntimeHelpersInherits"],[24,34,286,1],[24,37,286,1,"require"],[24,44,286,1],[24,45,286,1,"_dependencyMap"],[24,59,286,1],[25,2,286,1],[25,6,286,1,"_inherits"],[25,15,286,1],[25,18,286,1,"_interopDefault"],[25,33,286,1],[25,34,286,1,"_babelRuntimeHelpersInherits"],[25,62,286,1],[26,2,1,0],[26,6,1,0,"_PurposeRestrictionJs"],[26,27,1,0],[26,30,1,0,"require"],[26,37,1,0],[26,38,1,0,"_dependencyMap"],[26,52,1,0],[27,2,2,0],[27,6,2,0,"_BinarySearchTreeJs"],[27,25,2,0],[27,28,2,0,"require"],[27,35,2,0],[27,36,2,0,"_dependencyMap"],[27,50,2,0],[28,2,3,0],[28,6,3,0,"_RestrictionTypeJs"],[28,24,3,0],[28,27,3,0,"require"],[28,34,3,0],[28,35,3,0,"_dependencyMap"],[28,49,3,0],[29,2,4,0],[29,6,4,0,"_CloneableJs"],[29,18,4,0],[29,21,4,0,"require"],[29,28,4,0],[29,29,4,0,"_dependencyMap"],[29,43,4,0],[30,2,4,44],[30,6,5,13,"PurposeRestrictionVector"],[30,30,5,37],[30,56,5,37,"_Cloneable"],[30,66,5,37],[31,4,5,37],[31,13,5,37,"PurposeRestrictionVector"],[31,38,5,37],[32,6,5,37],[32,10,5,37,"_this"],[32,15,5,37],[33,6,5,37],[33,10,5,37,"_classCallCheck"],[33,25,5,37],[33,26,5,37,"default"],[33,33,5,37],[33,41,5,37,"PurposeRestrictionVector"],[33,65,5,37],[34,6,5,37],[34,15,5,37,"_len"],[34,19,5,37],[34,22,5,37,"arguments"],[34,31,5,37],[34,32,5,37,"length"],[34,38,5,37],[34,40,5,37,"args"],[34,44,5,37],[34,51,5,37,"Array"],[34,56,5,37],[34,57,5,37,"_len"],[34,61,5,37],[34,64,5,37,"_key"],[34,68,5,37],[34,74,5,37,"_key"],[34,78,5,37],[34,81,5,37,"_len"],[34,85,5,37],[34,87,5,37,"_key"],[34,91,5,37],[35,8,5,37,"args"],[35,12,5,37],[35,13,5,37,"_key"],[35,17,5,37],[35,21,5,37,"arguments"],[35,30,5,37],[35,31,5,37,"_key"],[35,35,5,37],[36,6,5,37],[37,6,5,37,"_this"],[37,11,5,37],[37,18,5,37,"_callSuper"],[37,28,5,37],[37,29,5,37,"default"],[37,36,5,37],[37,44,5,37,"PurposeRestrictionVector"],[37,68,5,37],[37,74,5,37,"args"],[37,78,5,37],[38,6,6,4],[39,0,7,0],[40,0,8,0],[41,0,9,0],[42,6,6,4,"_this"],[42,11,6,4],[42,12,10,4,"bitLength"],[42,21,10,13],[42,24,10,16],[42,25,10,17],[43,6,11,4],[44,0,12,0],[45,0,13,0],[46,0,14,0],[47,0,15,0],[48,0,16,0],[49,6,11,4,"_this"],[49,11,11,4],[49,12,17,4,"map"],[49,15,17,7],[49,18,17,10],[49,22,17,14,"Map"],[49,25,17,17],[49,26,17,18],[49,27,17,19],[50,6,17,19],[50,13,17,19,"_this"],[50,18,17,19],[51,4,17,19],[52,4,17,19],[52,8,17,19,"_inherits"],[52,17,17,19],[52,18,17,19,"default"],[52,25,17,19],[52,27,17,19,"PurposeRestrictionVector"],[52,51,17,19],[52,53,17,19,"_Cloneable"],[52,63,17,19],[53,4,17,19],[53,15,17,19,"_createClass"],[53,27,17,19],[53,28,17,19,"default"],[53,35,17,19],[53,37,17,19,"PurposeRestrictionVector"],[53,61,17,19],[54,6,17,19,"key"],[54,9,17,19],[55,6,17,19,"value"],[55,11,17,19],[55,13,19,4],[55,22,19,4,"has"],[55,25,19,7,"has"],[55,26,19,8,"hash"],[55,30,19,12],[55,32,19,14],[56,8,20,8],[56,15,20,15],[56,19,20,19],[56,20,20,20,"map"],[56,23,20,23],[56,24,20,24,"has"],[56,27,20,27],[56,28,20,28,"hash"],[56,32,20,32],[56,33,20,33],[57,6,21,4],[58,4,21,5],[59,6,21,5,"key"],[59,9,21,5],[60,6,21,5,"value"],[60,11,21,5],[60,13,22,4],[60,22,22,4,"isOkToHave"],[60,32,22,14,"isOkToHave"],[60,33,22,15,"restrictionType"],[60,48,22,30],[60,50,22,32,"purposeId"],[60,59,22,41],[60,61,22,43,"vendorId"],[60,69,22,51],[60,71,22,53],[61,8,23,8],[61,12,23,12,"result"],[61,18,23,18],[61,21,23,21],[61,25,23,25],[62,8,24,8],[63,0,25,0],[64,0,26,0],[65,0,27,0],[66,0,28,0],[67,8,29,8],[67,12,29,12],[67,16,29,16],[67,17,29,17,"gvl"],[67,20,29,20],[67,22,29,22,"vendors"],[67,29,29,29],[67,31,29,31],[68,10,30,12],[68,14,30,18,"vendor"],[68,20,30,24],[68,23,30,27],[68,27,30,31],[68,28,30,32,"gvl"],[68,31,30,35],[68,32,30,36,"vendors"],[68,39,30,43],[68,40,30,44,"vendorId"],[68,48,30,52],[68,49,30,53],[69,10,31,12],[69,14,31,16,"vendor"],[69,20,31,22],[69,22,31,24],[70,12,32,16],[70,16,32,20,"restrictionType"],[70,31,32,35],[70,36,32,40,"RestrictionType"],[70,54,32,55],[70,55,32,55,"RestrictionType"],[70,70,32,55],[70,71,32,56,"NOT_ALLOWED"],[70,82,32,67],[70,84,32,69],[71,14,33,20],[72,0,34,0],[73,0,35,0],[74,0,36,0],[75,0,37,0],[76,0,38,0],[77,14,39,20,"result"],[77,20,39,26],[77,23,39,30,"vendor"],[77,29,39,36],[77,30,39,37,"legIntPurposes"],[77,44,39,51],[77,45,39,52,"includes"],[77,53,39,60],[77,54,39,61,"purposeId"],[77,63,39,70],[77,64,39,71],[77,68,39,75,"vendor"],[77,74,39,81],[77,75,39,82,"purposes"],[77,83,39,90],[77,84,39,91,"includes"],[77,92,39,99],[77,93,39,100,"purposeId"],[77,102,39,109],[77,103,39,111],[78,12,40,16],[78,13,40,17],[78,19,41,21],[78,23,41,25,"vendor"],[78,29,41,31],[78,30,41,32,"flexiblePurposes"],[78,46,41,48],[78,47,41,49,"length"],[78,53,41,55],[78,55,41,57],[79,14,42,20],[79,22,42,28,"restrictionType"],[79,37,42,43],[80,16,43,24],[81,0,44,0],[82,0,45,0],[83,0,46,0],[84,0,47,0],[85,16,48,24],[85,21,48,29,"RestrictionType"],[85,39,48,44],[85,40,48,44,"RestrictionType"],[85,55,48,44],[85,56,48,45,"REQUIRE_CONSENT"],[85,71,48,60],[86,18,49,28,"result"],[86,24,49,34],[86,27,49,38,"vendor"],[86,33,49,44],[86,34,49,45,"flexiblePurposes"],[86,50,49,61],[86,51,49,62,"includes"],[86,59,49,70],[86,60,49,71,"purposeId"],[86,69,49,80],[86,70,49,81],[86,74,49,85,"vendor"],[86,80,49,91],[86,81,49,92,"legIntPurposes"],[86,95,49,106],[86,96,49,107,"includes"],[86,104,49,115],[86,105,49,116,"purposeId"],[86,114,49,125],[86,115,49,127],[87,18,50,28],[88,16,51,24],[89,0,52,0],[90,0,53,0],[91,0,54,0],[92,0,55,0],[93,16,56,24],[93,21,56,29,"RestrictionType"],[93,39,56,44],[93,40,56,44,"RestrictionType"],[93,55,56,44],[93,56,56,45,"REQUIRE_LI"],[93,66,56,55],[94,18,57,28,"result"],[94,24,57,34],[94,27,57,38,"vendor"],[94,33,57,44],[94,34,57,45,"flexiblePurposes"],[94,50,57,61],[94,51,57,62,"includes"],[94,59,57,70],[94,60,57,71,"purposeId"],[94,69,57,80],[94,70,57,81],[94,74,57,85,"vendor"],[94,80,57,91],[94,81,57,92,"purposes"],[94,89,57,100],[94,90,57,101,"includes"],[94,98,57,109],[94,99,57,110,"purposeId"],[94,108,57,119],[94,109,57,121],[95,18,58,28],[96,14,59,20],[97,12,60,16],[97,13,60,17],[97,19,61,21],[98,14,62,20,"result"],[98,20,62,26],[98,23,62,29],[98,28,62,34],[99,12,63,16],[100,10,64,12],[100,11,64,13],[100,17,65,17],[101,12,66,16],[102,12,67,16,"result"],[102,18,67,22],[102,21,67,25],[102,26,67,30],[103,10,68,12],[104,8,69,8],[105,8,70,8],[106,8,71,8],[106,15,71,15,"result"],[106,21,71,21],[107,6,72,4],[108,6,73,4],[109,0,74,0],[110,0,75,0],[111,0,76,0],[112,0,77,0],[113,0,78,0],[114,0,79,0],[115,4,73,4],[116,6,73,4,"key"],[116,9,73,4],[117,6,73,4,"value"],[117,11,73,4],[117,13,80,4],[117,22,80,4,"add"],[117,25,80,7,"add"],[117,26,80,8,"vendorId"],[117,34,80,16],[117,36,80,18,"purposeRestriction"],[117,54,80,36],[117,56,80,38],[118,8,81,8],[118,12,81,12],[118,16,81,16],[118,17,81,17,"isOkToHave"],[118,27,81,27],[118,28,81,28,"purposeRestriction"],[118,46,81,46],[118,47,81,47,"restrictionType"],[118,62,81,62],[118,64,81,64,"purposeRestriction"],[118,82,81,82],[118,83,81,83,"purposeId"],[118,92,81,92],[118,94,81,94,"vendorId"],[118,102,81,102],[118,103,81,103],[118,105,81,105],[119,10,82,12],[119,14,82,18,"hash"],[119,18,82,22],[119,21,82,25,"purposeRestriction"],[119,39,82,43],[119,40,82,44,"hash"],[119,44,82,48],[120,10,83,12],[120,14,83,16],[120,15,83,17],[120,19,83,21],[120,20,83,22,"has"],[120,23,83,25],[120,24,83,26,"hash"],[120,28,83,30],[120,29,83,31],[120,31,83,33],[121,12,84,16],[121,16,84,20],[121,17,84,21,"map"],[121,20,84,24],[121,21,84,25,"set"],[121,24,84,28],[121,25,84,29,"hash"],[121,29,84,33],[121,31,84,35],[121,35,84,39,"BinarySearchTree"],[121,54,84,55],[121,55,84,55,"BinarySearchTree"],[121,71,84,55],[121,72,84,56],[121,73,84,57],[121,74,84,58],[122,12,85,16],[122,16,85,20],[122,17,85,21,"bitLength"],[122,26,85,30],[122,29,85,33],[122,30,85,34],[123,10,86,12],[124,10,87,12],[125,0,88,0],[126,0,89,0],[127,0,90,0],[128,0,91,0],[129,10,92,12],[129,14,92,16],[129,15,92,17,"map"],[129,18,92,20],[129,19,92,21,"get"],[129,22,92,24],[129,23,92,25,"hash"],[129,27,92,29],[129,28,92,30],[129,29,92,31,"add"],[129,32,92,34],[129,33,92,35,"vendorId"],[129,41,92,43],[129,42,92,44],[130,8,93,8],[131,6,94,4],[132,6,95,4],[133,0,96,0],[134,0,97,0],[135,0,98,0],[136,0,99,0],[137,0,100,0],[138,4,95,4],[139,6,95,4,"key"],[139,9,95,4],[140,6,95,4,"value"],[140,11,95,4],[140,13,101,4],[140,22,101,4,"restrictPurposeToLegalBasis"],[140,49,101,31,"restrictPurposeToLegalBasis"],[140,50,101,32,"purposeRestriction"],[140,68,101,50],[140,70,101,52],[141,8,102,8],[141,12,102,14,"vendors"],[141,19,102,21],[141,22,102,24],[141,26,102,28],[141,27,102,29,"gvl"],[141,30,102,32],[141,31,102,33,"vendorIds"],[141,40,102,42],[142,8,103,8],[142,12,103,14,"hash"],[142,16,103,18],[142,19,103,21,"purposeRestriction"],[142,37,103,39],[142,38,103,40,"hash"],[142,42,103,44],[143,8,104,8],[143,12,104,14,"lastEntry"],[143,21,104,23],[143,24,104,27],[143,36,104,39],[144,10,105,12],[144,14,105,16,"value"],[144,19,105,21],[145,10,106,12],[145,15,106,17,"value"],[145,20,106,22],[145,24,106,26,"vendors"],[145,31,106,33],[145,32,107,16],[146,10,108,12],[146,17,108,19,"value"],[146,22,108,24],[147,8,109,8],[147,9,109,9],[147,10,109,11],[147,11,109,12],[148,8,110,8],[149,0,111,0],[150,0,112,0],[151,8,113,8],[151,12,113,14,"values"],[151,18,113,20],[151,21,113,23],[151,22,113,24],[151,25,113,27,"Array"],[151,30,113,32],[151,31,113,33,"lastEntry"],[151,40,113,42],[151,41,113,43],[151,42,113,44,"keys"],[151,46,113,48],[151,47,113,49],[151,48,113,50],[151,49,113,51],[151,50,113,52,"map"],[151,53,113,55],[151,54,113,57,"i"],[151,55,113,58],[151,59,113,63,"i"],[151,60,113,64],[151,63,113,67],[151,64,113,68],[151,65,113,69],[152,8,114,8],[152,13,114,13],[152,17,114,17,"i"],[152,18,114,18],[152,21,114,21],[152,22,114,22],[152,24,114,24,"i"],[152,25,114,25],[152,29,114,29,"lastEntry"],[152,38,114,38],[152,40,114,40,"i"],[152,41,114,41],[152,43,114,43],[152,45,114,45],[153,10,115,12],[153,14,115,16],[153,15,115,17],[153,19,115,21],[153,20,115,22,"has"],[153,23,115,25],[153,24,115,26,"hash"],[153,28,115,30],[153,29,115,31],[153,31,115,33],[154,12,116,16],[154,16,116,20],[154,17,116,21,"map"],[154,20,116,24],[154,21,116,25,"set"],[154,24,116,28],[154,25,116,29,"hash"],[154,29,116,33],[154,31,116,35,"BinarySearchTree"],[154,50,116,51],[154,51,116,51,"BinarySearchTree"],[154,67,116,51],[154,68,116,52,"build"],[154,73,116,57],[154,74,116,58,"values"],[154,80,116,64],[154,81,116,65],[154,82,116,66],[154,83,116,67],[154,84,116,68],[155,12,117,16],[155,16,117,20],[155,17,117,21,"bitLength"],[155,26,117,30],[155,29,117,33],[155,30,117,34],[156,10,118,12],[157,10,119,12],[158,0,120,0],[159,0,121,0],[160,0,122,0],[161,0,123,0],[162,10,124,12],[162,14,124,16],[162,15,124,17,"map"],[162,18,124,20],[162,19,124,21,"get"],[162,22,124,24],[162,23,124,25,"hash"],[162,27,124,29],[162,28,124,30],[162,29,124,31,"add"],[162,32,124,34],[162,33,124,35,"i"],[162,34,124,36],[162,35,124,37],[163,8,125,8],[164,6,126,4],[165,6,127,4],[166,0,128,0],[167,0,129,0],[168,0,130,0],[169,0,131,0],[170,0,132,0],[171,0,133,0],[172,0,134,0],[173,0,135,0],[174,0,136,0],[175,4,127,4],[176,6,127,4,"key"],[176,9,127,4],[177,6,127,4,"value"],[177,11,127,4],[177,13,137,4],[177,22,137,4,"getVendors"],[177,32,137,14,"getVendors"],[177,33,137,15,"purposeRestriction"],[177,51,137,33],[177,53,137,35],[178,8,138,8],[178,12,138,12,"vendorIds"],[178,21,138,21],[178,24,138,24],[178,26,138,26],[179,8,139,8],[179,12,139,12,"purposeRestriction"],[179,30,139,30],[179,32,139,32],[180,10,140,12],[180,14,140,18,"hash"],[180,18,140,22],[180,21,140,25,"purposeRestriction"],[180,39,140,43],[180,40,140,44,"hash"],[180,44,140,48],[181,10,141,12],[181,14,141,16],[181,18,141,20],[181,19,141,21,"has"],[181,22,141,24],[181,23,141,25,"hash"],[181,27,141,29],[181,28,141,30],[181,30,141,32],[182,12,142,16,"vendorIds"],[182,21,142,25],[182,24,142,28],[182,28,142,32],[182,29,142,33,"map"],[182,32,142,36],[182,33,142,37,"get"],[182,36,142,40],[182,37,142,41,"hash"],[182,41,142,45],[182,42,142,46],[182,43,142,47,"get"],[182,46,142,50],[182,47,142,51],[182,48,142,52],[183,10,143,12],[184,8,144,8],[184,9,144,9],[184,15,145,13],[185,10,146,12],[185,14,146,18,"vendorSet"],[185,23,146,27],[185,26,146,30],[185,30,146,34,"Set"],[185,33,146,37],[185,34,146,38],[185,35,146,39],[186,10,147,12],[186,14,147,16],[186,15,147,17,"map"],[186,18,147,20],[186,19,147,21,"forEach"],[186,26,147,28],[186,27,147,30,"bst"],[186,30,147,33],[186,34,147,38],[187,12,148,16,"bst"],[187,15,148,19],[187,16,148,20,"get"],[187,19,148,23],[187,20,148,24],[187,21,148,25],[187,22,148,26,"forEach"],[187,29,148,33],[187,30,148,35,"vendorId"],[187,38,148,43],[187,42,148,48],[188,14,149,20,"vendorSet"],[188,23,149,29],[188,24,149,30,"add"],[188,27,149,33],[188,28,149,34,"vendorId"],[188,36,149,42],[188,37,149,43],[189,12,150,16],[189,13,150,17],[189,14,150,18],[190,10,151,12],[190,11,151,13],[190,12,151,14],[191,10,152,12,"vendorIds"],[191,19,152,21],[191,22,152,24,"Array"],[191,27,152,29],[191,28,152,30,"from"],[191,32,152,34],[191,33,152,35,"vendorSet"],[191,42,152,44],[191,43,152,45],[192,8,153,8],[193,8,154,8],[193,15,154,15,"vendorIds"],[193,24,154,24],[194,6,155,4],[195,4,155,5],[196,6,155,5,"key"],[196,9,155,5],[197,6,155,5,"value"],[197,11,155,5],[197,13,156,4],[197,22,156,4,"getRestrictionType"],[197,40,156,22,"getRestrictionType"],[197,41,156,23,"vendorId"],[197,49,156,31],[197,51,156,33,"purposeId"],[197,60,156,42],[197,62,156,44],[198,8,157,8],[198,12,157,12,"rType"],[198,17,157,17],[199,8,158,8],[199,12,158,12],[199,13,158,13,"getRestrictions"],[199,28,158,28],[199,29,158,29,"vendorId"],[199,37,158,37],[199,38,158,38],[199,39,158,39,"forEach"],[199,46,158,46],[199,47,158,48,"purposeRestriction"],[199,65,158,66],[199,69,158,71],[200,10,159,12],[200,14,159,16,"purposeRestriction"],[200,32,159,34],[200,33,159,35,"purposeId"],[200,42,159,44],[200,47,159,49,"purposeId"],[200,56,159,58],[200,58,159,60],[201,12,160,16],[201,16,160,20,"rType"],[201,21,160,25],[201,26,160,30,"undefined"],[201,35,160,39],[201,39,160,43,"rType"],[201,44,160,48],[201,47,160,51,"purposeRestriction"],[201,65,160,69],[201,66,160,70,"restrictionType"],[201,81,160,85],[201,83,160,87],[202,14,161,20,"rType"],[202,19,161,25],[202,22,161,28,"purposeRestriction"],[202,40,161,46],[202,41,161,47,"restrictionType"],[202,56,161,62],[203,12,162,16],[204,10,163,12],[205,8,164,8],[205,9,164,9],[205,10,164,10],[206,8,165,8],[206,15,165,15,"rType"],[206,20,165,20],[207,6,166,4],[208,6,167,4],[209,0,168,0],[210,0,169,0],[211,0,170,0],[212,0,171,0],[213,0,172,0],[214,0,173,0],[215,0,174,0],[216,0,175,0],[217,4,167,4],[218,6,167,4,"key"],[218,9,167,4],[219,6,167,4,"value"],[219,11,167,4],[219,13,176,4],[219,22,176,4,"vendorHasRestriction"],[219,42,176,24,"vendorHasRestriction"],[219,43,176,25,"vendorId"],[219,51,176,33],[219,53,176,35,"purposeRestriction"],[219,71,176,53],[219,73,176,55],[220,8,177,8],[220,12,177,12,"has"],[220,15,177,15],[220,18,177,18],[220,23,177,23],[221,8,178,8],[221,12,178,14,"restrictions"],[221,24,178,26],[221,27,178,29],[221,31,178,33],[221,32,178,34,"getRestrictions"],[221,47,178,49],[221,48,178,50,"vendorId"],[221,56,178,58],[221,57,178,59],[222,8,179,8],[222,13,179,13],[222,17,179,17,"i"],[222,18,179,18],[222,21,179,21],[222,22,179,22],[222,24,179,24,"i"],[222,25,179,25],[222,28,179,28,"restrictions"],[222,40,179,40],[222,41,179,41,"length"],[222,47,179,47],[222,51,179,51],[222,52,179,52,"has"],[222,55,179,55],[222,57,179,57,"i"],[222,58,179,58],[222,60,179,60],[222,62,179,62],[223,10,180,12,"has"],[223,13,180,15],[223,16,180,18,"purposeRestriction"],[223,34,180,36],[223,35,180,37,"isSameAs"],[223,43,180,45],[223,44,180,46,"restrictions"],[223,56,180,58],[223,57,180,59,"i"],[223,58,180,60],[223,59,180,61],[223,60,180,62],[224,8,181,8],[225,8,182,8],[225,15,182,15,"has"],[225,18,182,18],[226,6,183,4],[227,6,184,4],[228,0,185,0],[229,0,186,0],[230,0,187,0],[231,0,188,0],[232,0,189,0],[233,4,184,4],[234,6,184,4,"key"],[234,9,184,4],[235,6,184,4,"value"],[235,11,184,4],[235,13,190,4],[235,22,190,4,"getMaxVendorId"],[235,36,190,18,"getMaxVendorId"],[235,37,190,18],[235,39,190,21],[236,8,191,8],[236,12,191,12,"retr"],[236,16,191,16],[236,19,191,19],[236,20,191,20],[237,8,192,8],[237,12,192,12],[237,13,192,13,"map"],[237,16,192,16],[237,17,192,17,"forEach"],[237,24,192,24],[237,25,192,26,"bst"],[237,28,192,29],[237,32,192,34],[238,10,193,12,"retr"],[238,14,193,16],[238,17,193,19,"Math"],[238,21,193,23],[238,22,193,24,"max"],[238,25,193,27],[238,26,193,28,"bst"],[238,29,193,31],[238,30,193,32,"max"],[238,33,193,35],[238,34,193,36],[238,35,193,37],[238,37,193,39,"retr"],[238,41,193,43],[238,42,193,44],[239,8,194,8],[239,9,194,9],[239,10,194,10],[240,8,195,8],[240,15,195,15,"retr"],[240,19,195,19],[241,6,196,4],[242,4,196,5],[243,6,196,5,"key"],[243,9,196,5],[244,6,196,5,"value"],[244,11,196,5],[244,13,197,4],[244,22,197,4,"getRestrictions"],[244,37,197,19,"getRestrictions"],[244,38,197,20,"vendorId"],[244,46,197,28],[244,48,197,30],[245,8,198,8],[245,12,198,14,"retr"],[245,16,198,18],[245,19,198,21],[245,21,198,23],[246,8,199,8],[246,12,199,12],[246,13,199,13,"map"],[246,16,199,16],[246,17,199,17,"forEach"],[246,24,199,24],[246,25,199,25],[246,26,199,26,"bst"],[246,29,199,29],[246,31,199,31,"hash"],[246,35,199,35],[246,40,199,40],[247,10,200,12],[247,14,200,16,"vendorId"],[247,22,200,24],[247,24,200,26],[248,12,201,16],[248,16,201,20,"bst"],[248,19,201,23],[248,20,201,24,"contains"],[248,28,201,32],[248,29,201,33,"vendorId"],[248,37,201,41],[248,38,201,42],[248,40,201,44],[249,14,202,20,"retr"],[249,18,202,24],[249,19,202,25,"push"],[249,23,202,29],[249,24,202,30,"PurposeRestriction"],[249,45,202,48],[249,46,202,48,"PurposeRestriction"],[249,64,202,48],[249,65,202,49,"unHash"],[249,71,202,55],[249,72,202,56,"hash"],[249,76,202,60],[249,77,202,61],[249,78,202,62],[250,12,203,16],[251,10,204,12],[251,11,204,13],[251,17,205,17],[252,12,206,16,"retr"],[252,16,206,20],[252,17,206,21,"push"],[252,21,206,25],[252,22,206,26,"PurposeRestriction"],[252,43,206,44],[252,44,206,44,"PurposeRestriction"],[252,62,206,44],[252,63,206,45,"unHash"],[252,69,206,51],[252,70,206,52,"hash"],[252,74,206,56],[252,75,206,57],[252,76,206,58],[253,10,207,12],[254,8,208,8],[254,9,208,9],[254,10,208,10],[255,8,209,8],[255,15,209,15,"retr"],[255,19,209,19],[256,6,210,4],[257,4,210,5],[258,6,210,5,"key"],[258,9,210,5],[259,6,210,5,"value"],[259,11,210,5],[259,13,211,4],[259,22,211,4,"getPurposes"],[259,33,211,15,"getPurposes"],[259,34,211,15],[259,36,211,18],[260,8,212,8],[260,12,212,14,"purposeIds"],[260,22,212,24],[260,25,212,27],[260,29,212,31,"Set"],[260,32,212,34],[260,33,212,35],[260,34,212,36],[261,8,213,8],[261,12,213,12],[261,13,213,13,"map"],[261,16,213,16],[261,17,213,17,"forEach"],[261,24,213,24],[261,25,213,25],[261,26,213,26,"bst"],[261,29,213,29],[261,31,213,31,"hash"],[261,35,213,35],[261,40,213,40],[262,10,214,12,"purposeIds"],[262,20,214,22],[262,21,214,23,"add"],[262,24,214,26],[262,25,214,27,"PurposeRestriction"],[262,46,214,45],[262,47,214,45,"PurposeRestriction"],[262,65,214,45],[262,66,214,46,"unHash"],[262,72,214,52],[262,73,214,53,"hash"],[262,77,214,57],[262,78,214,58],[262,79,214,59,"purposeId"],[262,88,214,68],[262,89,214,69],[263,8,215,8],[263,9,215,9],[263,10,215,10],[264,8,216,8],[264,15,216,15,"Array"],[264,20,216,20],[264,21,216,21,"from"],[264,25,216,25],[264,26,216,26,"purposeIds"],[264,36,216,36],[264,37,216,37],[265,6,217,4],[266,6,218,4],[267,0,219,0],[268,0,220,0],[269,0,221,0],[270,0,222,0],[271,0,223,0],[272,0,224,0],[273,4,218,4],[274,6,218,4,"key"],[274,9,218,4],[275,6,218,4,"value"],[275,11,218,4],[275,13,225,4],[275,22,225,4,"remove"],[275,28,225,10,"remove"],[275,29,225,11,"vendorId"],[275,37,225,19],[275,39,225,21,"purposeRestriction"],[275,57,225,39],[275,59,225,41],[276,8,226,8],[276,12,226,14,"hash"],[276,16,226,18],[276,19,226,21,"purposeRestriction"],[276,37,226,39],[276,38,226,40,"hash"],[276,42,226,44],[277,8,227,8],[277,12,227,14,"bst"],[277,15,227,17],[277,18,227,20],[277,22,227,24],[277,23,227,25,"map"],[277,26,227,28],[277,27,227,29,"get"],[277,30,227,32],[277,31,227,33,"hash"],[277,35,227,37],[277,36,227,38],[278,8,228,8],[278,12,228,12,"bst"],[278,15,228,15],[278,17,228,17],[279,10,229,12,"bst"],[279,13,229,15],[279,14,229,16,"remove"],[279,20,229,22],[279,21,229,23,"vendorId"],[279,29,229,31],[279,30,229,32],[280,10,230,12],[281,10,231,12],[281,14,231,16,"bst"],[281,17,231,19],[281,18,231,20,"isEmpty"],[281,25,231,27],[281,26,231,28],[281,27,231,29],[281,29,231,31],[282,12,232,16],[282,16,232,20],[282,17,232,21,"map"],[282,20,232,24],[282,21,232,25,"delete"],[282,27,232,31],[282,28,232,32,"hash"],[282,32,232,36],[282,33,232,37],[283,12,233,16],[283,16,233,20],[283,17,233,21,"bitLength"],[283,26,233,30],[283,29,233,33],[283,30,233,34],[284,10,234,12],[285,8,235,8],[286,6,236,4],[287,6,237,4],[288,0,238,0],[289,0,239,0],[290,0,240,0],[291,0,241,0],[292,0,242,0],[293,4,237,4],[294,6,237,4,"key"],[294,9,237,4],[295,6,237,4,"get"],[295,9,237,4],[296,6,261,4],[297,0,262,0],[298,0,263,0],[299,0,264,0],[300,0,265,0],[301,6,266,4],[301,15,266,4,"get"],[301,16,266,4],[301,18,266,14],[302,8,267,8],[302,15,267,15],[302,19,267,19],[302,20,267,20,"gvl_"],[302,24,267,24],[303,6,268,4],[304,6,269,4],[305,0,270,0],[306,0,271,0],[307,0,272,0],[308,0,273,0],[308,9,269,4],[309,6,269,4,"set"],[309,9,269,4],[309,11,243,4],[309,20,243,4,"set"],[309,21,243,12,"value"],[309,26,243,17],[309,28,243,19],[310,8,244,8],[310,12,244,12],[310,13,244,13],[310,17,244,17],[310,18,244,18,"gvl_"],[310,22,244,22],[310,24,244,24],[311,10,245,12],[311,14,245,16],[311,15,245,17,"gvl_"],[311,19,245,21],[311,22,245,24,"value"],[311,27,245,29],[312,10,246,12],[313,0,247,0],[314,0,248,0],[315,0,249,0],[316,10,250,12],[316,14,250,16],[316,15,250,17,"map"],[316,18,250,20],[316,19,250,21,"forEach"],[316,26,250,28],[316,27,250,29],[316,28,250,30,"bst"],[316,31,250,33],[316,33,250,35,"hash"],[316,37,250,39],[316,42,250,44],[317,12,251,16],[317,16,251,22,"purposeRestriction"],[317,34,251,40],[317,37,251,43,"PurposeRestriction"],[317,58,251,61],[317,59,251,61,"PurposeRestriction"],[317,77,251,61],[317,78,251,62,"unHash"],[317,84,251,68],[317,85,251,69,"hash"],[317,89,251,73],[317,90,251,74],[318,12,252,16],[318,16,252,22,"vendors"],[318,23,252,29],[318,26,252,32,"bst"],[318,29,252,35],[318,30,252,36,"get"],[318,33,252,39],[318,34,252,40],[318,35,252,41],[319,12,253,16,"vendors"],[319,19,253,23],[319,20,253,24,"forEach"],[319,27,253,31],[319,28,253,33,"vendorId"],[319,36,253,41],[319,40,253,46],[320,14,254,20],[320,18,254,24],[320,19,254,25],[320,23,254,29],[320,24,254,30,"isOkToHave"],[320,34,254,40],[320,35,254,41,"purposeRestriction"],[320,53,254,59],[320,54,254,60,"restrictionType"],[320,69,254,75],[320,71,254,77,"purposeRestriction"],[320,89,254,95],[320,90,254,96,"purposeId"],[320,99,254,105],[320,101,254,107,"vendorId"],[320,109,254,115],[320,110,254,116],[320,112,254,118],[321,16,255,24,"bst"],[321,19,255,27],[321,20,255,28,"remove"],[321,26,255,34],[321,27,255,35,"vendorId"],[321,35,255,43],[321,36,255,44],[322,14,256,20],[323,12,257,16],[323,13,257,17],[323,14,257,18],[324,10,258,12],[324,11,258,13],[324,12,258,14],[325,8,259,8],[326,6,260,4],[327,4,260,5],[328,6,260,5,"key"],[328,9,260,5],[329,6,260,5,"value"],[329,11,260,5],[329,13,274,4],[329,22,274,4,"isEmpty"],[329,29,274,11,"isEmpty"],[329,30,274,11],[329,32,274,14],[330,8,275,8],[330,15,275,15],[330,19,275,19],[330,20,275,20,"map"],[330,23,275,23],[330,24,275,24,"size"],[330,28,275,28],[330,33,275,33],[330,34,275,34],[331,6,276,4],[332,4,276,5],[333,6,276,5,"key"],[333,9,276,5],[334,6,276,5,"get"],[334,9,276,5],[335,6,278,4],[336,0,279,0],[337,0,280,0],[338,0,281,0],[339,0,282,0],[340,6,283,4],[340,15,283,4,"get"],[340,16,283,4],[340,18,283,26],[341,8,284,8],[341,15,284,15],[341,19,284,19],[341,20,284,20,"map"],[341,23,284,23],[341,24,284,24,"size"],[341,28,284,28],[342,6,285,4],[343,4,285,5],[344,2,285,5],[344,4,5,46,"Cloneable"],[344,16,5,55],[344,17,5,55,"Cloneable"],[344,26,5,55],[345,0,5,55],[345,3]],"functionMap":{"names":["<global>","PurposeRestrictionVector","has","isOkToHave","add","restrictPurposeToLegalBasis","<anonymous>","map$argument_0","getVendors","map.forEach$argument_0","bst.get.forEach$argument_0","getRestrictionType","getRestrictions.forEach$argument_0","vendorHasRestriction","getMaxVendorId","getRestrictions","getPurposes","remove","set__gvl","vendors.forEach$argument_0","get__gvl","isEmpty","get__numRestrictions"],"mappings":"AAA;OCI;ICc;KDE;IEC;KFkD;IGQ;KHc;IIO;2BCG;SDK;wDEI,YF;KJa;IOW;6BCU;kCCC;iBDE;aDC;KPI;IUC;+CCE;SDM;KVE;IYU;KZO;IaO;yBLE;SKE;KbE;IcC;yBNE;SMS;KdE;IeC;yBPE;SOE;KfE;IgBQ;KhBW;IiBO;6BTO;gCUG;iBVI;aSC;KjBE;ImBM;KnBE;IoBM;KpBE;IqBO;KrBE;CDC"},"hasCjsExports":false},"type":"js/module"}]}