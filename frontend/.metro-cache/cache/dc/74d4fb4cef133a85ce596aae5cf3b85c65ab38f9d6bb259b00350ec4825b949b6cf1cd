{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../BitLength.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"fguGW92Qr8DLw4rtzkMY5RfpAnY=","exportNames":["*"],"imports":1}},{"name":"./BooleanEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":53,"index":98}}],"key":"jvND8JXlxjrnvXLvIdr+wATPG2w=","exportNames":["*"],"imports":1}},{"name":"../../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":99},"end":{"line":3,"column":54,"index":153}}],"key":"qHglNs3UH2C2wT8WJZubASIXHQ0=","exportNames":["*"],"imports":1}},{"name":"./IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":154},"end":{"line":4,"column":45,"index":199}}],"key":"yU5HftgQ+HW+Cj5EoqioxXCPi1U=","exportNames":["*"],"imports":1}},{"name":"../../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":200},"end":{"line":5,"column":84,"index":284}}],"key":"ecknVzcUu1YLgoWzPEOnNKr2bTY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"PurposeRestrictionVectorEncoder\", {\n    enumerable: true,\n    get: function () {\n      return PurposeRestrictionVectorEncoder;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _BitLengthJs = require(_dependencyMap[2], \"../BitLength.js\");\n  var _BooleanEncoderJs = require(_dependencyMap[3], \"./BooleanEncoder.js\");\n  var _errorsIndexJs = require(_dependencyMap[4], \"../../errors/index.js\");\n  var _IntEncoderJs = require(_dependencyMap[5], \"./IntEncoder.js\");\n  var _modelIndexJs = require(_dependencyMap[6], \"../../model/index.js\");\n  var PurposeRestrictionVectorEncoder = /*#__PURE__*/function () {\n    function PurposeRestrictionVectorEncoder() {\n      (0, _classCallCheck.default)(this, PurposeRestrictionVectorEncoder);\n    }\n    return (0, _createClass.default)(PurposeRestrictionVectorEncoder, null, [{\n      key: \"encode\",\n      value: function encode(prVector) {\n        // start with the number of restrictions\n        var bitString = _IntEncoderJs.IntEncoder.encode(prVector.numRestrictions, _BitLengthJs.BitLength.numRestrictions);\n        // if the vector is empty we'll just return a string with just the numRestricitons being 0\n        if (!prVector.isEmpty()) {\n          // create each restriction group\n          prVector.getRestrictions().forEach(purpRestriction => {\n            // every restriction group has the purposeId and the restrictionType;\n            bitString += _IntEncoderJs.IntEncoder.encode(purpRestriction.purposeId, _BitLengthJs.BitLength.purposeId);\n            bitString += _IntEncoderJs.IntEncoder.encode(purpRestriction.restrictionType, _BitLengthJs.BitLength.restrictionType);\n            // now get all the vendors under that restriction\n            var vendors = prVector.getVendors(purpRestriction);\n            var len = vendors.length;\n            /**\n             * numEntries comes first so we will have to keep a counter and the do\n             * the encoding at the end\n             */\n            var numEntries = 0;\n            var startId = 0;\n            var rangeField = '';\n            var _loop = function () {\n              var vendorId = vendors[i];\n              if (startId === 0) {\n                numEntries++;\n                startId = vendorId;\n              }\n              // we know that `len` is greater than zero because we entered the loop\n              var lastVendorId = vendors[len - 1];\n              var gvlVendorIds = prVector.gvl.vendorIds;\n              var nextGvlVendor = vendorId => {\n                while (++vendorId <= lastVendorId && !gvlVendorIds.has(vendorId)) {}\n                return vendorId;\n              };\n              /**\n               * either end of the loop or there are GVL vendor IDs before the next one\n               */\n              if (i === len - 1 || vendors[i + 1] > nextGvlVendor(vendorId)) {\n                /**\n                 * it's a range entry if we've got something other than the start\n                 * ID\n                 */\n                var isRange = !(vendorId === startId);\n                // 0 means single 1 means range\n                rangeField += _BooleanEncoderJs.BooleanEncoder.encode(isRange);\n                rangeField += _IntEncoderJs.IntEncoder.encode(startId, _BitLengthJs.BitLength.vendorId);\n                if (isRange) {\n                  rangeField += _IntEncoderJs.IntEncoder.encode(vendorId, _BitLengthJs.BitLength.vendorId);\n                }\n                // reset the startId so we grab the next id in the list\n                startId = 0;\n              }\n            };\n            for (var i = 0; i < len; i++) {\n              _loop();\n            }\n            /**\n             * now that  the range encoding is built, encode the number of ranges\n             * and then append the range field to the bitString.\n             */\n            bitString += _IntEncoderJs.IntEncoder.encode(numEntries, _BitLengthJs.BitLength.numEntries);\n            bitString += rangeField;\n          });\n        }\n        return bitString;\n      }\n    }, {\n      key: \"decode\",\n      value: function decode(encodedString) {\n        var index = 0;\n        var vector = new _modelIndexJs.PurposeRestrictionVector();\n        var numRestrictions = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.numRestrictions), _BitLengthJs.BitLength.numRestrictions);\n        index += _BitLengthJs.BitLength.numRestrictions;\n        for (var i = 0; i < numRestrictions; i++) {\n          // First is purpose ID\n          var purposeId = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.purposeId), _BitLengthJs.BitLength.purposeId);\n          index += _BitLengthJs.BitLength.purposeId;\n          // Second Restriction Type\n          var restrictionType = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.restrictionType), _BitLengthJs.BitLength.restrictionType);\n          index += _BitLengthJs.BitLength.restrictionType;\n          var purposeRestriction = new _modelIndexJs.PurposeRestriction(purposeId, restrictionType);\n          // Num Entries (number of vendors)\n          var numEntries = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.numEntries), _BitLengthJs.BitLength.numEntries);\n          index += _BitLengthJs.BitLength.numEntries;\n          for (var j = 0; j < numEntries; j++) {\n            var isARange = _BooleanEncoderJs.BooleanEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.anyBoolean));\n            index += _BitLengthJs.BitLength.anyBoolean;\n            var startOrOnlyVendorId = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.vendorId), _BitLengthJs.BitLength.vendorId);\n            index += _BitLengthJs.BitLength.vendorId;\n            if (isARange) {\n              var endVendorId = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.vendorId), _BitLengthJs.BitLength.vendorId);\n              index += _BitLengthJs.BitLength.vendorId;\n              if (endVendorId < startOrOnlyVendorId) {\n                throw new _errorsIndexJs.DecodingError(`Invalid RangeEntry: endVendorId ${endVendorId} is less than ${startOrOnlyVendorId}`);\n              }\n              for (var k = startOrOnlyVendorId; k <= endVendorId; k++) {\n                vector.add(k, purposeRestriction);\n              }\n            } else {\n              vector.add(startOrOnlyVendorId, purposeRestriction);\n            }\n          }\n        }\n        vector.bitLength = index;\n        return vector;\n      }\n    }]);\n  }();\n});","lineCount":140,"map":[[12,2,6,0,"Object"],[12,8,6,0],[12,9,6,0,"defineProperty"],[12,23,6,0],[12,24,6,0,"exports"],[12,31,6,0],[13,4,6,0,"enumerable"],[13,14,6,0],[14,4,6,0,"get"],[14,7,6,0],[14,18,6,0,"get"],[14,19,6,0],[15,6,6,0],[15,13,6,0,"PurposeRestrictionVectorEncoder"],[15,44,6,0],[16,4,6,0],[17,2,6,0],[18,2,109,1],[18,6,109,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,109,1],[18,43,109,1,"require"],[18,50,109,1],[18,51,109,1,"_dependencyMap"],[18,65,109,1],[19,2,109,1],[19,6,109,1,"_classCallCheck"],[19,21,109,1],[19,24,109,1,"_interopDefault"],[19,39,109,1],[19,40,109,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,109,1],[20,2,109,1],[20,6,109,1,"_babelRuntimeHelpersCreateClass"],[20,37,109,1],[20,40,109,1,"require"],[20,47,109,1],[20,48,109,1,"_dependencyMap"],[20,62,109,1],[21,2,109,1],[21,6,109,1,"_createClass"],[21,18,109,1],[21,21,109,1,"_interopDefault"],[21,36,109,1],[21,37,109,1,"_babelRuntimeHelpersCreateClass"],[21,68,109,1],[22,2,1,0],[22,6,1,0,"_BitLengthJs"],[22,18,1,0],[22,21,1,0,"require"],[22,28,1,0],[22,29,1,0,"_dependencyMap"],[22,43,1,0],[23,2,2,0],[23,6,2,0,"_BooleanEncoderJs"],[23,23,2,0],[23,26,2,0,"require"],[23,33,2,0],[23,34,2,0,"_dependencyMap"],[23,48,2,0],[24,2,3,0],[24,6,3,0,"_errorsIndexJs"],[24,20,3,0],[24,23,3,0,"require"],[24,30,3,0],[24,31,3,0,"_dependencyMap"],[24,45,3,0],[25,2,4,0],[25,6,4,0,"_IntEncoderJs"],[25,19,4,0],[25,22,4,0,"require"],[25,29,4,0],[25,30,4,0,"_dependencyMap"],[25,44,4,0],[26,2,5,0],[26,6,5,0,"_modelIndexJs"],[26,19,5,0],[26,22,5,0,"require"],[26,29,5,0],[26,30,5,0,"_dependencyMap"],[26,44,5,0],[27,2,5,84],[27,6,6,13,"PurposeRestrictionVectorEncoder"],[27,37,6,44],[28,4,6,44],[28,13,6,44,"PurposeRestrictionVectorEncoder"],[28,45,6,44],[29,6,6,44],[29,10,6,44,"_classCallCheck"],[29,25,6,44],[29,26,6,44,"default"],[29,33,6,44],[29,41,6,44,"PurposeRestrictionVectorEncoder"],[29,72,6,44],[30,4,6,44],[31,4,6,44],[31,15,6,44,"_createClass"],[31,27,6,44],[31,28,6,44,"default"],[31,35,6,44],[31,37,6,44,"PurposeRestrictionVectorEncoder"],[31,68,6,44],[32,6,6,44,"key"],[32,9,6,44],[33,6,6,44,"value"],[33,11,6,44],[33,13,7,4],[33,22,7,11,"encode"],[33,28,7,17,"encode"],[33,29,7,18,"prVector"],[33,37,7,26],[33,39,7,28],[34,8,8,8],[35,8,9,8],[35,12,9,12,"bitString"],[35,21,9,21],[35,24,9,24,"IntEncoder"],[35,37,9,34],[35,38,9,34,"IntEncoder"],[35,48,9,34],[35,49,9,35,"encode"],[35,55,9,41],[35,56,9,42,"prVector"],[35,64,9,50],[35,65,9,51,"numRestrictions"],[35,80,9,66],[35,82,9,68,"BitLength"],[35,94,9,77],[35,95,9,77,"BitLength"],[35,104,9,77],[35,105,9,78,"numRestrictions"],[35,120,9,93],[35,121,9,94],[36,8,10,8],[37,8,11,8],[37,12,11,12],[37,13,11,13,"prVector"],[37,21,11,21],[37,22,11,22,"isEmpty"],[37,29,11,29],[37,30,11,30],[37,31,11,31],[37,33,11,33],[38,10,12,12],[39,10,13,12,"prVector"],[39,18,13,20],[39,19,13,21,"getRestrictions"],[39,34,13,36],[39,35,13,37],[39,36,13,38],[39,37,13,39,"forEach"],[39,44,13,46],[39,45,13,48,"purpRestriction"],[39,60,13,63],[39,64,13,68],[40,12,14,16],[41,12,15,16,"bitString"],[41,21,15,25],[41,25,15,29,"IntEncoder"],[41,38,15,39],[41,39,15,39,"IntEncoder"],[41,49,15,39],[41,50,15,40,"encode"],[41,56,15,46],[41,57,15,47,"purpRestriction"],[41,72,15,62],[41,73,15,63,"purposeId"],[41,82,15,72],[41,84,15,74,"BitLength"],[41,96,15,83],[41,97,15,83,"BitLength"],[41,106,15,83],[41,107,15,84,"purposeId"],[41,116,15,93],[41,117,15,94],[42,12,16,16,"bitString"],[42,21,16,25],[42,25,16,29,"IntEncoder"],[42,38,16,39],[42,39,16,39,"IntEncoder"],[42,49,16,39],[42,50,16,40,"encode"],[42,56,16,46],[42,57,16,47,"purpRestriction"],[42,72,16,62],[42,73,16,63,"restrictionType"],[42,88,16,78],[42,90,16,80,"BitLength"],[42,102,16,89],[42,103,16,89,"BitLength"],[42,112,16,89],[42,113,16,90,"restrictionType"],[42,128,16,105],[42,129,16,106],[43,12,17,16],[44,12,18,16],[44,16,18,22,"vendors"],[44,23,18,29],[44,26,18,32,"prVector"],[44,34,18,40],[44,35,18,41,"getVendors"],[44,45,18,51],[44,46,18,52,"purpRestriction"],[44,61,18,67],[44,62,18,68],[45,12,19,16],[45,16,19,22,"len"],[45,19,19,25],[45,22,19,28,"vendors"],[45,29,19,35],[45,30,19,36,"length"],[45,36,19,42],[46,12,20,16],[47,0,21,0],[48,0,22,0],[49,0,23,0],[50,12,24,16],[50,16,24,20,"numEntries"],[50,26,24,30],[50,29,24,33],[50,30,24,34],[51,12,25,16],[51,16,25,20,"startId"],[51,23,25,27],[51,26,25,30],[51,27,25,31],[52,12,26,16],[52,16,26,20,"rangeField"],[52,26,26,30],[52,29,26,33],[52,31,26,35],[53,12,26,36],[53,16,26,36,"_loop"],[53,21,26,36],[53,33,26,36,"_loop"],[53,34,26,36],[53,36,27,46],[54,14,28,20],[54,18,28,26,"vendorId"],[54,26,28,34],[54,29,28,37,"vendors"],[54,36,28,44],[54,37,28,45,"i"],[54,38,28,46],[54,39,28,47],[55,14,29,20],[55,18,29,24,"startId"],[55,25,29,31],[55,30,29,36],[55,31,29,37],[55,33,29,39],[56,16,30,24,"numEntries"],[56,26,30,34],[56,28,30,36],[57,16,31,24,"startId"],[57,23,31,31],[57,26,31,34,"vendorId"],[57,34,31,42],[58,14,32,20],[59,14,33,20],[60,14,34,20],[60,18,34,26,"lastVendorId"],[60,30,34,38],[60,33,34,41,"vendors"],[60,40,34,48],[60,41,34,49,"len"],[60,44,34,52],[60,47,34,55],[60,48,34,56],[60,49,34,57],[61,14,35,20],[61,18,35,26,"gvlVendorIds"],[61,30,35,38],[61,33,35,41,"prVector"],[61,41,35,49],[61,42,35,50,"gvl"],[61,45,35,53],[61,46,35,54,"vendorIds"],[61,55,35,63],[62,14,36,20],[62,18,36,26,"nextGvlVendor"],[62,31,36,39],[62,34,36,43,"vendorId"],[62,42,36,51],[62,46,36,56],[63,16,37,24],[63,23,37,31],[63,25,37,33,"vendorId"],[63,33,37,41],[63,37,37,45,"lastVendorId"],[63,49,37,57],[63,53,37,61],[63,54,37,62,"gvlVendorIds"],[63,66,37,74],[63,67,37,75,"has"],[63,70,37,78],[63,71,37,79,"vendorId"],[63,79,37,87],[63,80,37,88],[63,82,37,90],[63,83,38,24],[64,16,39,24],[64,23,39,31,"vendorId"],[64,31,39,39],[65,14,40,20],[65,15,40,21],[66,14,41,20],[67,0,42,0],[68,0,43,0],[69,14,44,20],[69,18,44,24,"i"],[69,19,44,25],[69,24,44,30,"len"],[69,27,44,33],[69,30,44,36],[69,31,44,37],[69,35,44,41,"vendors"],[69,42,44,48],[69,43,44,49,"i"],[69,44,44,50],[69,47,44,53],[69,48,44,54],[69,49,44,55],[69,52,44,58,"nextGvlVendor"],[69,65,44,71],[69,66,44,72,"vendorId"],[69,74,44,80],[69,75,44,81],[69,77,44,83],[70,16,45,24],[71,0,46,0],[72,0,47,0],[73,0,48,0],[74,16,49,24],[74,20,49,30,"isRange"],[74,27,49,37],[74,30,49,40],[74,32,49,42,"vendorId"],[74,40,49,50],[74,45,49,55,"startId"],[74,52,49,62],[74,53,49,63],[75,16,50,24],[76,16,51,24,"rangeField"],[76,26,51,34],[76,30,51,38,"BooleanEncoder"],[76,47,51,52],[76,48,51,52,"BooleanEncoder"],[76,62,51,52],[76,63,51,53,"encode"],[76,69,51,59],[76,70,51,60,"isRange"],[76,77,51,67],[76,78,51,68],[77,16,52,24,"rangeField"],[77,26,52,34],[77,30,52,38,"IntEncoder"],[77,43,52,48],[77,44,52,48,"IntEncoder"],[77,54,52,48],[77,55,52,49,"encode"],[77,61,52,55],[77,62,52,56,"startId"],[77,69,52,63],[77,71,52,65,"BitLength"],[77,83,52,74],[77,84,52,74,"BitLength"],[77,93,52,74],[77,94,52,75,"vendorId"],[77,102,52,83],[77,103,52,84],[78,16,53,24],[78,20,53,28,"isRange"],[78,27,53,35],[78,29,53,37],[79,18,54,28,"rangeField"],[79,28,54,38],[79,32,54,42,"IntEncoder"],[79,45,54,52],[79,46,54,52,"IntEncoder"],[79,56,54,52],[79,57,54,53,"encode"],[79,63,54,59],[79,64,54,60,"vendorId"],[79,72,54,68],[79,74,54,70,"BitLength"],[79,86,54,79],[79,87,54,79,"BitLength"],[79,96,54,79],[79,97,54,80,"vendorId"],[79,105,54,88],[79,106,54,89],[80,16,55,24],[81,16,56,24],[82,16,57,24,"startId"],[82,23,57,31],[82,26,57,34],[82,27,57,35],[83,14,58,20],[84,12,59,16],[84,13,59,17],[85,12,27,16],[85,17,27,21],[85,21,27,25,"i"],[85,22,27,26],[85,25,27,29],[85,26,27,30],[85,28,27,32,"i"],[85,29,27,33],[85,32,27,36,"len"],[85,35,27,39],[85,37,27,41,"i"],[85,38,27,42],[85,40,27,44],[86,14,27,44,"_loop"],[86,19,27,44],[87,12,27,44],[88,12,60,16],[89,0,61,0],[90,0,62,0],[91,0,63,0],[92,12,64,16,"bitString"],[92,21,64,25],[92,25,64,29,"IntEncoder"],[92,38,64,39],[92,39,64,39,"IntEncoder"],[92,49,64,39],[92,50,64,40,"encode"],[92,56,64,46],[92,57,64,47,"numEntries"],[92,67,64,57],[92,69,64,59,"BitLength"],[92,81,64,68],[92,82,64,68,"BitLength"],[92,91,64,68],[92,92,64,69,"numEntries"],[92,102,64,79],[92,103,64,80],[93,12,65,16,"bitString"],[93,21,65,25],[93,25,65,29,"rangeField"],[93,35,65,39],[94,10,66,12],[94,11,66,13],[94,12,66,14],[95,8,67,8],[96,8,68,8],[96,15,68,15,"bitString"],[96,24,68,24],[97,6,69,4],[98,4,69,5],[99,6,69,5,"key"],[99,9,69,5],[100,6,69,5,"value"],[100,11,69,5],[100,13,70,4],[100,22,70,11,"decode"],[100,28,70,17,"decode"],[100,29,70,18,"encodedString"],[100,42,70,31],[100,44,70,33],[101,8,71,8],[101,12,71,12,"index"],[101,17,71,17],[101,20,71,20],[101,21,71,21],[102,8,72,8],[102,12,72,14,"vector"],[102,18,72,20],[102,21,72,23],[102,25,72,27,"PurposeRestrictionVector"],[102,38,72,51],[102,39,72,51,"PurposeRestrictionVector"],[102,63,72,51],[102,64,72,52],[102,65,72,53],[103,8,73,8],[103,12,73,14,"numRestrictions"],[103,27,73,29],[103,30,73,32,"IntEncoder"],[103,43,73,42],[103,44,73,42,"IntEncoder"],[103,54,73,42],[103,55,73,43,"decode"],[103,61,73,49],[103,62,73,50,"encodedString"],[103,75,73,63],[103,76,73,64,"substr"],[103,82,73,70],[103,83,73,71,"index"],[103,88,73,76],[103,90,73,78,"BitLength"],[103,102,73,87],[103,103,73,87,"BitLength"],[103,112,73,87],[103,113,73,88,"numRestrictions"],[103,128,73,103],[103,129,73,104],[103,131,73,106,"BitLength"],[103,143,73,115],[103,144,73,115,"BitLength"],[103,153,73,115],[103,154,73,116,"numRestrictions"],[103,169,73,131],[103,170,73,132],[104,8,74,8,"index"],[104,13,74,13],[104,17,74,17,"BitLength"],[104,29,74,26],[104,30,74,26,"BitLength"],[104,39,74,26],[104,40,74,27,"numRestrictions"],[104,55,74,42],[105,8,75,8],[105,13,75,13],[105,17,75,17,"i"],[105,18,75,18],[105,21,75,21],[105,22,75,22],[105,24,75,24,"i"],[105,25,75,25],[105,28,75,28,"numRestrictions"],[105,43,75,43],[105,45,75,45,"i"],[105,46,75,46],[105,48,75,48],[105,50,75,50],[106,10,76,12],[107,10,77,12],[107,14,77,18,"purposeId"],[107,23,77,27],[107,26,77,30,"IntEncoder"],[107,39,77,40],[107,40,77,40,"IntEncoder"],[107,50,77,40],[107,51,77,41,"decode"],[107,57,77,47],[107,58,77,48,"encodedString"],[107,71,77,61],[107,72,77,62,"substr"],[107,78,77,68],[107,79,77,69,"index"],[107,84,77,74],[107,86,77,76,"BitLength"],[107,98,77,85],[107,99,77,85,"BitLength"],[107,108,77,85],[107,109,77,86,"purposeId"],[107,118,77,95],[107,119,77,96],[107,121,77,98,"BitLength"],[107,133,77,107],[107,134,77,107,"BitLength"],[107,143,77,107],[107,144,77,108,"purposeId"],[107,153,77,117],[107,154,77,118],[108,10,78,12,"index"],[108,15,78,17],[108,19,78,21,"BitLength"],[108,31,78,30],[108,32,78,30,"BitLength"],[108,41,78,30],[108,42,78,31,"purposeId"],[108,51,78,40],[109,10,79,12],[110,10,80,12],[110,14,80,18,"restrictionType"],[110,29,80,33],[110,32,80,36,"IntEncoder"],[110,45,80,46],[110,46,80,46,"IntEncoder"],[110,56,80,46],[110,57,80,47,"decode"],[110,63,80,53],[110,64,80,54,"encodedString"],[110,77,80,67],[110,78,80,68,"substr"],[110,84,80,74],[110,85,80,75,"index"],[110,90,80,80],[110,92,80,82,"BitLength"],[110,104,80,91],[110,105,80,91,"BitLength"],[110,114,80,91],[110,115,80,92,"restrictionType"],[110,130,80,107],[110,131,80,108],[110,133,80,110,"BitLength"],[110,145,80,119],[110,146,80,119,"BitLength"],[110,155,80,119],[110,156,80,120,"restrictionType"],[110,171,80,135],[110,172,80,136],[111,10,81,12,"index"],[111,15,81,17],[111,19,81,21,"BitLength"],[111,31,81,30],[111,32,81,30,"BitLength"],[111,41,81,30],[111,42,81,31,"restrictionType"],[111,57,81,46],[112,10,82,12],[112,14,82,18,"purposeRestriction"],[112,32,82,36],[112,35,82,39],[112,39,82,43,"PurposeRestriction"],[112,52,82,61],[112,53,82,61,"PurposeRestriction"],[112,71,82,61],[112,72,82,62,"purposeId"],[112,81,82,71],[112,83,82,73,"restrictionType"],[112,98,82,88],[112,99,82,89],[113,10,83,12],[114,10,84,12],[114,14,84,18,"numEntries"],[114,24,84,28],[114,27,84,31,"IntEncoder"],[114,40,84,41],[114,41,84,41,"IntEncoder"],[114,51,84,41],[114,52,84,42,"decode"],[114,58,84,48],[114,59,84,49,"encodedString"],[114,72,84,62],[114,73,84,63,"substr"],[114,79,84,69],[114,80,84,70,"index"],[114,85,84,75],[114,87,84,77,"BitLength"],[114,99,84,86],[114,100,84,86,"BitLength"],[114,109,84,86],[114,110,84,87,"numEntries"],[114,120,84,97],[114,121,84,98],[114,123,84,100,"BitLength"],[114,135,84,109],[114,136,84,109,"BitLength"],[114,145,84,109],[114,146,84,110,"numEntries"],[114,156,84,120],[114,157,84,121],[115,10,85,12,"index"],[115,15,85,17],[115,19,85,21,"BitLength"],[115,31,85,30],[115,32,85,30,"BitLength"],[115,41,85,30],[115,42,85,31,"numEntries"],[115,52,85,41],[116,10,86,12],[116,15,86,17],[116,19,86,21,"j"],[116,20,86,22],[116,23,86,25],[116,24,86,26],[116,26,86,28,"j"],[116,27,86,29],[116,30,86,32,"numEntries"],[116,40,86,42],[116,42,86,44,"j"],[116,43,86,45],[116,45,86,47],[116,47,86,49],[117,12,87,16],[117,16,87,22,"isARange"],[117,24,87,30],[117,27,87,33,"BooleanEncoder"],[117,44,87,47],[117,45,87,47,"BooleanEncoder"],[117,59,87,47],[117,60,87,48,"decode"],[117,66,87,54],[117,67,87,55,"encodedString"],[117,80,87,68],[117,81,87,69,"substr"],[117,87,87,75],[117,88,87,76,"index"],[117,93,87,81],[117,95,87,83,"BitLength"],[117,107,87,92],[117,108,87,92,"BitLength"],[117,117,87,92],[117,118,87,93,"anyBoolean"],[117,128,87,103],[117,129,87,104],[117,130,87,105],[118,12,88,16,"index"],[118,17,88,21],[118,21,88,25,"BitLength"],[118,33,88,34],[118,34,88,34,"BitLength"],[118,43,88,34],[118,44,88,35,"anyBoolean"],[118,54,88,45],[119,12,89,16],[119,16,89,22,"startOrOnlyVendorId"],[119,35,89,41],[119,38,89,44,"IntEncoder"],[119,51,89,54],[119,52,89,54,"IntEncoder"],[119,62,89,54],[119,63,89,55,"decode"],[119,69,89,61],[119,70,89,62,"encodedString"],[119,83,89,75],[119,84,89,76,"substr"],[119,90,89,82],[119,91,89,83,"index"],[119,96,89,88],[119,98,89,90,"BitLength"],[119,110,89,99],[119,111,89,99,"BitLength"],[119,120,89,99],[119,121,89,100,"vendorId"],[119,129,89,108],[119,130,89,109],[119,132,89,111,"BitLength"],[119,144,89,120],[119,145,89,120,"BitLength"],[119,154,89,120],[119,155,89,121,"vendorId"],[119,163,89,129],[119,164,89,130],[120,12,90,16,"index"],[120,17,90,21],[120,21,90,25,"BitLength"],[120,33,90,34],[120,34,90,34,"BitLength"],[120,43,90,34],[120,44,90,35,"vendorId"],[120,52,90,43],[121,12,91,16],[121,16,91,20,"isARange"],[121,24,91,28],[121,26,91,30],[122,14,92,20],[122,18,92,26,"endVendorId"],[122,29,92,37],[122,32,92,40,"IntEncoder"],[122,45,92,50],[122,46,92,50,"IntEncoder"],[122,56,92,50],[122,57,92,51,"decode"],[122,63,92,57],[122,64,92,58,"encodedString"],[122,77,92,71],[122,78,92,72,"substr"],[122,84,92,78],[122,85,92,79,"index"],[122,90,92,84],[122,92,92,86,"BitLength"],[122,104,92,95],[122,105,92,95,"BitLength"],[122,114,92,95],[122,115,92,96,"vendorId"],[122,123,92,104],[122,124,92,105],[122,126,92,107,"BitLength"],[122,138,92,116],[122,139,92,116,"BitLength"],[122,148,92,116],[122,149,92,117,"vendorId"],[122,157,92,125],[122,158,92,126],[123,14,93,20,"index"],[123,19,93,25],[123,23,93,29,"BitLength"],[123,35,93,38],[123,36,93,38,"BitLength"],[123,45,93,38],[123,46,93,39,"vendorId"],[123,54,93,47],[124,14,94,20],[124,18,94,24,"endVendorId"],[124,29,94,35],[124,32,94,38,"startOrOnlyVendorId"],[124,51,94,57],[124,53,94,59],[125,16,95,24],[125,22,95,30],[125,26,95,34,"DecodingError"],[125,40,95,47],[125,41,95,47,"DecodingError"],[125,54,95,47],[125,55,95,48],[125,90,95,83,"endVendorId"],[125,101,95,94],[125,118,95,111,"startOrOnlyVendorId"],[125,137,95,130],[125,139,95,132],[125,140,95,133],[126,14,96,20],[127,14,97,20],[127,19,97,25],[127,23,97,29,"k"],[127,24,97,30],[127,27,97,33,"startOrOnlyVendorId"],[127,46,97,52],[127,48,97,54,"k"],[127,49,97,55],[127,53,97,59,"endVendorId"],[127,64,97,70],[127,66,97,72,"k"],[127,67,97,73],[127,69,97,75],[127,71,97,77],[128,16,98,24,"vector"],[128,22,98,30],[128,23,98,31,"add"],[128,26,98,34],[128,27,98,35,"k"],[128,28,98,36],[128,30,98,38,"purposeRestriction"],[128,48,98,56],[128,49,98,57],[129,14,99,20],[130,12,100,16],[130,13,100,17],[130,19,101,21],[131,14,102,20,"vector"],[131,20,102,26],[131,21,102,27,"add"],[131,24,102,30],[131,25,102,31,"startOrOnlyVendorId"],[131,44,102,50],[131,46,102,52,"purposeRestriction"],[131,64,102,70],[131,65,102,71],[132,12,103,16],[133,10,104,12],[134,8,105,8],[135,8,106,8,"vector"],[135,14,106,14],[135,15,106,15,"bitLength"],[135,24,106,24],[135,27,106,27,"index"],[135,32,106,32],[136,8,107,8],[136,15,107,15,"vector"],[136,21,107,21],[137,6,108,4],[138,4,108,5],[139,2,108,5],[140,0,108,5],[140,3]],"functionMap":{"names":["<global>","PurposeRestrictionVectorEncoder","encode","prVector.getRestrictions.forEach$argument_0","nextGvlVendor","decode"],"mappings":"AAA;OCK;ICC;+CCM;0CCuB;qBDI;aD0B;KDG;IIC;KJsC;CDC"},"hasCjsExports":false},"type":"js/module"}]}