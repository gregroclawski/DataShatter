{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  const CombatProvider = ({\n    children\n  }) => {\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 50,\n        defense: 20,\n        health: 220,\n        maxHealth: 220,\n        critChance: 10,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      setCombatState(prev => {\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Spawn new enemies if none remain (for testing)\n        if (newState.enemies.length === 0) {\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      });\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`ðŸŽ¯ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      const enemy = {\n        id: `enemy_${Date.now()}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x: 300,\n          y: 200\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      if (!_engineCombatEngine.combatEngine) {\n        _engineCombatEngine.combatEngine.start();\n      }\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }, this);\n  };\n});","lineCount":243,"map":[[8,2,36,0,"Object"],[8,8,36,0],[8,9,36,0,"defineProperty"],[8,23,36,0],[8,24,36,0,"exports"],[8,31,36,0],[9,4,36,0,"enumerable"],[9,14,36,0],[10,4,36,0,"get"],[10,7,36,0],[10,18,36,0,"get"],[10,19,36,0],[11,6,36,0],[11,13,36,0,"useCombat"],[11,22,36,0],[12,4,36,0],[13,2,36,0],[14,2,44,0,"Object"],[14,8,44,0],[14,9,44,0,"defineProperty"],[14,23,44,0],[14,24,44,0,"exports"],[14,31,44,0],[15,4,44,0,"enumerable"],[15,14,44,0],[16,4,44,0,"get"],[16,7,44,0],[16,18,44,0,"get"],[16,19,44,0],[17,6,44,0],[17,13,44,0,"CombatProvider"],[17,27,44,0],[18,4,44,0],[19,2,44,0],[20,2,1,0],[20,6,1,0,"_react"],[20,12,1,0],[20,15,1,0,"require"],[20,22,1,0],[20,23,1,0,"_dependencyMap"],[20,37,1,0],[21,2,2,0],[21,6,2,0,"_engineCombatEngine"],[21,25,2,0],[21,28,2,0,"require"],[21,35,2,0],[21,36,2,0,"_dependencyMap"],[21,50,2,0],[22,2,3,0],[22,6,3,0,"_typesAbilityTypes"],[22,24,3,0],[22,27,3,0,"require"],[22,34,3,0],[22,35,3,0,"_dependencyMap"],[22,49,3,0],[23,2,3,85],[23,6,3,85,"_reactJsxDevRuntime"],[23,25,3,85],[23,28,3,85,"require"],[23,35,3,85],[23,36,3,85,"_dependencyMap"],[23,50,3,85],[24,2,34,0],[24,8,34,6,"CombatContext"],[24,21,34,19],[24,37,34,22],[24,41,34,22,"createContext"],[24,47,34,35],[24,48,34,35,"createContext"],[24,61,34,35],[24,63,34,67,"undefined"],[24,72,34,76],[24,73,34,77],[25,2,36,7],[25,8,36,13,"useCombat"],[25,17,36,22],[25,20,36,25,"useCombat"],[25,21,36,25],[25,26,36,50],[26,4,37,2],[26,10,37,8,"context"],[26,17,37,15],[26,20,37,18],[26,24,37,18,"useContext"],[26,30,37,28],[26,31,37,28,"useContext"],[26,41,37,28],[26,43,37,29,"CombatContext"],[26,56,37,42],[26,57,37,43],[27,4,38,2],[27,8,38,6],[27,9,38,7,"context"],[27,16,38,14],[27,18,38,16],[28,6,39,4],[28,12,39,10],[28,16,39,14,"Error"],[28,21,39,19],[28,22,39,20],[28,70,39,68],[28,71,39,69],[29,4,40,2],[30,4,41,2],[30,11,41,9,"context"],[30,18,41,16],[31,2,42,0],[31,3,42,1],[32,2,44,7],[32,8,44,13,"CombatProvider"],[32,22,44,27],[32,25,44,30,"CombatProvider"],[32,26,44,31],[33,4,44,33,"children"],[34,2,44,67],[34,3,44,68],[34,8,44,73],[35,4,45,2],[35,10,45,8],[35,11,45,9,"combatState"],[35,22,45,20],[35,24,45,22,"setCombatState"],[35,38,45,36],[35,39,45,37],[35,42,45,40],[35,46,45,40,"useState"],[35,52,45,48],[35,53,45,48,"useState"],[35,61,45,48],[35,63,45,62],[36,6,46,4,"isInCombat"],[36,16,46,14],[36,18,46,16],[36,23,46,21],[37,6,47,4,"currentTick"],[37,17,47,15],[37,19,47,17],[37,20,47,18],[38,6,48,4,"enemies"],[38,13,48,11],[38,15,48,13],[38,17,48,15],[39,6,49,4,"abilityManager"],[39,20,49,18],[39,22,49,20],[39,26,49,24,"AbilityManager"],[39,44,49,38],[39,45,49,38,"AbilityManager"],[39,59,49,38],[39,60,49,39],[39,61,49,40],[40,6,50,4,"statusEffects"],[40,19,50,17],[40,21,50,19],[40,25,50,23,"StatusEffectManager"],[40,44,50,42],[40,45,50,42,"StatusEffectManager"],[40,64,50,42],[40,65,50,43],[40,66,50,44],[41,6,51,4,"playerStats"],[41,17,51,15],[41,19,51,17],[42,8,52,6,"attack"],[42,14,52,12],[42,16,52,14],[42,18,52,16],[43,8,53,6,"defense"],[43,15,53,13],[43,17,53,15],[43,19,53,17],[44,8,54,6,"health"],[44,14,54,12],[44,16,54,14],[44,19,54,17],[45,8,55,6,"maxHealth"],[45,17,55,15],[45,19,55,17],[45,22,55,20],[46,8,56,6,"critChance"],[46,18,56,16],[46,20,56,18],[46,22,56,20],[47,8,57,6,"critDamage"],[47,18,57,16],[47,20,57,18],[47,23,57,21],[48,8,58,6,"cooldownReduction"],[48,25,58,23],[48,27,58,25],[49,6,59,4],[50,4,60,2],[50,5,60,3],[50,6,60,4],[52,4,62,2],[53,4,63,2],[53,10,63,8,"handleCombatTick"],[53,26,63,24],[53,29,63,27,"handleCombatTick"],[53,30,63,27],[53,35,63,33],[54,6,64,4,"setCombatState"],[54,20,64,18],[54,21,64,19,"prev"],[54,25,64,23],[54,29,64,27],[55,8,65,6],[55,14,65,12,"newTick"],[55,21,65,19],[55,24,65,22,"combatEngine"],[55,43,65,34],[55,44,65,34,"combatEngine"],[55,56,65,34],[55,57,65,35,"getCurrentTick"],[55,71,65,49],[55,72,65,50],[55,73,65,51],[56,8,66,6],[56,14,66,12,"newState"],[56,22,66,20],[56,25,66,23],[57,10,66,25],[57,13,66,28,"prev"],[57,17,66,32],[58,10,66,34,"currentTick"],[58,21,66,45],[58,23,66,47,"newTick"],[59,8,66,55],[59,9,66,56],[60,8,68,6],[60,12,68,10],[60,13,68,11,"newState"],[60,21,68,19],[60,22,68,20,"isInCombat"],[60,32,68,30],[60,34,68,32],[60,41,68,39,"newState"],[60,49,68,47],[62,8,70,6],[63,8,71,6,"newState"],[63,16,71,14],[63,17,71,15,"abilityManager"],[63,31,71,29],[63,32,71,30,"updateCooldowns"],[63,47,71,45],[63,48,71,46,"newTick"],[63,55,71,53],[63,56,71,54],[65,8,73,6],[66,8,74,6],[66,14,74,12,"effectResults"],[66,27,74,25],[66,30,74,28,"newState"],[66,38,74,36],[66,39,74,37,"statusEffects"],[66,52,74,50],[66,53,74,51,"processTick"],[66,64,74,62],[66,65,74,63,"newTick"],[66,72,74,70],[66,73,74,71],[68,8,76,6],[69,8,77,6,"effectResults"],[69,21,77,19],[69,22,77,20,"forEach"],[69,29,77,27],[69,30,77,28],[69,31,77,29,"results"],[69,38,77,36],[69,40,77,38,"entityId"],[69,48,77,46],[69,53,77,51],[70,10,78,8],[70,16,78,14,"enemyIndex"],[70,26,78,24],[70,29,78,27,"newState"],[70,37,78,35],[70,38,78,36,"enemies"],[70,45,78,43],[70,46,78,44,"findIndex"],[70,55,78,53],[70,56,78,54,"e"],[70,57,78,55],[70,61,78,59,"e"],[70,62,78,60],[70,63,78,61,"id"],[70,65,78,63],[70,70,78,68,"entityId"],[70,78,78,76],[70,79,78,77],[71,10,79,8],[71,14,79,12,"enemyIndex"],[71,24,79,22],[71,28,79,26],[71,29,79,27],[71,31,79,29],[72,12,80,10,"results"],[72,19,80,17],[72,20,80,18,"forEach"],[72,27,80,25],[72,28,80,26,"result"],[72,34,80,32],[72,38,80,36],[73,14,81,12,"newState"],[73,22,81,20],[73,23,81,21,"enemies"],[73,30,81,28],[73,31,81,29,"enemyIndex"],[73,41,81,39],[73,42,81,40],[73,43,81,41,"health"],[73,49,81,47],[73,53,81,51,"result"],[73,59,81,57],[73,60,81,58,"damage"],[73,66,81,64],[74,14,82,12,"newState"],[74,22,82,20],[74,23,82,21,"enemies"],[74,30,82,28],[74,31,82,29,"enemyIndex"],[74,41,82,39],[74,42,82,40],[74,43,82,41,"lastDamaged"],[74,54,82,52],[74,57,82,55,"newTick"],[74,64,82,62],[75,12,83,10],[75,13,83,11],[75,14,83,12],[76,10,84,8],[77,8,85,6],[77,9,85,7],[77,10,85,8],[79,8,87,6],[80,8,88,6],[80,13,88,11],[80,17,88,15,"i"],[80,18,88,16],[80,21,88,19],[80,22,88,20],[80,24,88,22,"i"],[80,25,88,23],[80,28,88,26],[80,29,88,27],[80,31,88,29,"i"],[80,32,88,30],[80,34,88,32],[80,36,88,34],[81,10,89,8],[81,14,89,12,"newState"],[81,22,89,20],[81,23,89,21,"abilityManager"],[81,37,89,35],[81,38,89,36,"isAbilityReady"],[81,52,89,50],[81,53,89,51,"i"],[81,54,89,52],[81,55,89,53],[81,59,89,57,"newState"],[81,67,89,65],[81,68,89,66,"enemies"],[81,75,89,73],[81,76,89,74,"length"],[81,82,89,80],[81,85,89,83],[81,86,89,84],[81,88,89,86],[82,12,90,10],[82,16,90,14,"newState"],[82,24,90,22],[82,25,90,23,"abilityManager"],[82,39,90,37],[82,40,90,38,"useAbility"],[82,50,90,48],[82,51,90,49,"i"],[82,52,90,50],[82,54,90,52,"newTick"],[82,61,90,59],[82,62,90,60],[82,64,90,62],[83,14,91,12,"castAbility"],[83,25,91,23],[83,26,91,24,"newState"],[83,34,91,32],[83,36,91,34,"i"],[83,37,91,35],[83,38,91,36],[84,12,92,10],[85,10,93,8],[86,8,94,6],[88,8,96,6],[89,8,97,6,"newState"],[89,16,97,14],[89,17,97,15,"enemies"],[89,24,97,22],[89,27,97,25,"newState"],[89,35,97,33],[89,36,97,34,"enemies"],[89,43,97,41],[89,44,97,42,"filter"],[89,50,97,48],[89,51,97,49,"enemy"],[89,56,97,54],[89,60,97,58,"enemy"],[89,65,97,63],[89,66,97,64,"health"],[89,72,97,70],[89,75,97,73],[89,76,97,74],[89,77,97,75],[91,8,99,6],[92,8,100,6],[92,12,100,10,"newState"],[92,20,100,18],[92,21,100,19,"enemies"],[92,28,100,26],[92,29,100,27,"length"],[92,35,100,33],[92,40,100,38],[92,41,100,39],[92,43,100,41],[93,10,101,8,"spawnTestEnemy"],[93,24,101,22],[93,25,101,23,"newState"],[93,33,101,31],[93,34,101,32],[94,8,102,6],[95,8,104,6],[95,15,104,13,"newState"],[95,23,104,21],[96,6,105,4],[96,7,105,5],[96,8,105,6],[97,4,106,2],[97,5,106,3],[99,4,108,2],[100,4,109,2],[100,10,109,8,"castAbility"],[100,21,109,19],[100,24,109,22,"castAbility"],[100,25,109,23,"state"],[100,30,109,41],[100,32,109,43,"slotIndex"],[100,41,109,60],[100,46,109,65],[101,6,110,4],[101,12,110,10,"deck"],[101,16,110,14],[101,19,110,17,"state"],[101,24,110,22],[101,25,110,23,"abilityManager"],[101,39,110,37],[101,40,110,38,"getDeck"],[101,47,110,45],[101,48,110,46],[101,49,110,47],[102,6,111,4],[102,12,111,10,"ability"],[102,19,111,17],[102,22,111,20,"deck"],[102,26,111,24],[102,27,111,25,"slots"],[102,32,111,30],[102,33,111,31,"slotIndex"],[102,42,111,40],[102,43,111,41],[103,6,112,4],[103,10,112,8],[103,11,112,9,"ability"],[103,18,112,16],[103,20,112,18],[105,6,114,4],[106,6,115,4],[106,12,115,10,"target"],[106,18,115,16],[106,21,115,19,"state"],[106,26,115,24],[106,27,115,25,"enemies"],[106,34,115,32],[106,35,115,33],[106,36,115,34],[106,37,115,35],[107,6,116,4],[107,10,116,8],[107,11,116,9,"target"],[107,17,116,15],[107,19,116,17],[109,6,118,4],[110,6,119,4],[110,10,119,8,"damage"],[110,16,119,14],[110,19,119,17,"ability"],[110,26,119,24],[110,27,119,25,"stats"],[110,32,119,30],[110,33,119,31,"baseDamage"],[110,43,119,41],[112,6,121,4],[113,6,122,4,"deck"],[113,10,122,8],[113,11,122,9,"activeSynergies"],[113,26,122,24],[113,27,122,25,"forEach"],[113,34,122,32],[113,35,122,33,"synergy"],[113,42,122,40],[113,46,122,44],[114,8,123,6],[114,12,123,10,"synergy"],[114,19,123,17],[114,20,123,18,"bonus"],[114,25,123,23],[114,26,123,24,"damageBonus"],[114,37,123,35],[114,41,124,10,"synergy"],[114,48,124,17],[114,49,124,18,"requiredTags"],[114,61,124,30],[114,62,124,31,"some"],[114,66,124,35],[114,67,124,36,"tag"],[114,70,124,39],[114,74,124,43,"ability"],[114,81,124,50],[114,82,124,51,"tags"],[114,86,124,55],[114,87,124,56,"includes"],[114,95,124,64],[114,96,124,65,"tag"],[114,99,124,68],[114,100,124,69],[114,101,124,70],[114,103,124,72],[115,10,125,8,"damage"],[115,16,125,14],[115,20,125,19],[115,21,125,20],[115,24,125,23,"synergy"],[115,31,125,30],[115,32,125,31,"bonus"],[115,37,125,36],[115,38,125,37,"damageBonus"],[115,49,125,48],[115,52,125,51],[115,55,125,55],[116,8,126,6],[117,6,127,4],[117,7,127,5],[117,8,127,6],[119,6,129,4],[120,6,130,4],[120,12,130,10,"damageResult"],[120,24,130,22],[120,27,130,25,"DamageCalculator"],[120,46,130,41],[120,47,130,41,"DamageCalculator"],[120,63,130,41],[120,64,130,42,"calculateDamage"],[120,79,130,57],[120,80,130,58,"damage"],[120,86,130,64],[120,88,130,66,"state"],[120,93,130,71],[120,94,130,72,"playerStats"],[120,105,130,83],[120,107,130,85,"target"],[120,113,130,91],[120,114,130,92,"stats"],[120,119,130,97],[120,120,130,98],[122,6,132,4],[123,6,133,4],[123,10,133,8,"ability"],[123,17,133,15],[123,18,133,16,"effects"],[123,25,133,23],[123,26,133,24,"includes"],[123,34,133,32],[123,35,133,33],[123,49,133,47],[123,50,133,48],[123,52,133,50],[124,8,134,6,"target"],[124,14,134,12],[124,15,134,13,"health"],[124,21,134,19],[124,25,134,23,"damageResult"],[124,37,134,35],[124,38,134,36,"damage"],[124,44,134,42],[125,8,135,6,"target"],[125,14,135,12],[125,15,135,13,"lastDamaged"],[125,26,135,24],[125,29,135,27,"state"],[125,34,135,32],[125,35,135,33,"currentTick"],[125,46,135,44],[126,6,136,4],[126,7,136,5],[126,13,136,11],[126,17,136,15,"ability"],[126,24,136,22],[126,25,136,23,"effects"],[126,32,136,30],[126,33,136,31,"includes"],[126,41,136,39],[126,42,136,40],[126,47,136,45],[126,48,136,46],[126,50,136,48],[127,8,137,6],[128,8,138,6,"state"],[128,13,138,11],[128,14,138,12,"enemies"],[128,21,138,19],[128,22,138,20,"forEach"],[128,29,138,27],[128,30,138,28,"enemy"],[128,35,138,33],[128,39,138,37],[129,10,139,8,"enemy"],[129,15,139,13],[129,16,139,14,"health"],[129,22,139,20],[129,26,139,24,"Math"],[129,30,139,28],[129,31,139,29,"floor"],[129,36,139,34],[129,37,139,35,"damageResult"],[129,49,139,47],[129,50,139,48,"damage"],[129,56,139,54],[129,59,139,57],[129,62,139,60],[129,63,139,61],[129,64,139,62],[129,65,139,63],[130,10,140,8,"enemy"],[130,15,140,13],[130,16,140,14,"lastDamaged"],[130,27,140,25],[130,30,140,28,"state"],[130,35,140,33],[130,36,140,34,"currentTick"],[130,47,140,45],[131,8,141,6],[131,9,141,7],[131,10,141,8],[132,6,142,4],[134,6,144,4],[135,6,145,4],[135,10,145,8,"ability"],[135,17,145,15],[135,18,145,16,"effects"],[135,25,145,23],[135,26,145,24,"includes"],[135,34,145,32],[135,35,145,33],[135,40,145,38],[135,41,145,39],[135,45,145,43,"ability"],[135,52,145,50],[135,53,145,51,"stats"],[135,58,145,56],[135,59,145,57,"duration"],[135,67,145,65],[135,69,145,67],[136,8,146,6,"state"],[136,13,146,11],[136,14,146,12,"statusEffects"],[136,27,146,25],[136,28,146,26,"addEffect"],[136,37,146,35],[136,38,146,36,"target"],[136,44,146,42],[136,45,146,43,"id"],[136,47,146,45],[136,49,146,47],[137,10,147,8,"id"],[137,12,147,10],[137,14,147,12],[137,17,147,15,"ability"],[137,24,147,22],[137,25,147,23,"id"],[137,27,147,25],[137,33,147,31],[138,10,148,8,"type"],[138,14,148,12],[138,16,148,14],[138,21,148,19],[139,10,149,8,"remainingTicks"],[139,24,149,22],[139,26,149,24,"Math"],[139,30,149,28],[139,31,149,29,"floor"],[139,36,149,34],[139,37,149,35,"ability"],[139,44,149,42],[139,45,149,43,"stats"],[139,50,149,48],[139,51,149,49,"duration"],[139,59,149,57],[139,62,149,60],[139,64,149,62],[139,65,149,63],[140,10,149,65],[141,10,150,8,"tickInterval"],[141,22,150,20],[141,24,150,22],[141,26,150,24],[142,10,150,26],[143,10,151,8,"lastTick"],[143,18,151,16],[143,20,151,18,"state"],[143,25,151,23],[143,26,151,24,"currentTick"],[143,37,151,35],[144,10,152,8,"value"],[144,15,152,13],[144,17,152,15,"Math"],[144,21,152,19],[144,22,152,20,"floor"],[144,27,152,25],[144,28,152,26,"damage"],[144,34,152,32],[144,37,152,35],[144,40,152,38],[144,41,152,39],[145,10,152,41],[146,10,153,8,"stackable"],[146,19,153,17],[146,21,153,19],[147,8,154,6],[147,9,154,7],[147,10,154,8],[148,6,155,4],[149,6,157,4,"console"],[149,13,157,11],[149,14,157,12,"log"],[149,17,157,15],[149,18,157,16],[149,24,157,22,"ability"],[149,31,157,29],[149,32,157,30,"name"],[149,36,157,34],[149,54,157,52,"damageResult"],[149,66,157,64],[149,67,157,65,"damage"],[149,73,157,71],[149,76,157,74,"damageResult"],[149,88,157,86],[149,89,157,87,"isCritical"],[149,99,157,97],[149,102,157,100],[149,112,157,110],[149,115,157,113],[149,117,157,115],[149,119,157,117],[149,120,157,118],[150,4,158,2],[150,5,158,3],[152,4,160,2],[153,4,161,2],[153,10,161,8,"spawnTestEnemy"],[153,24,161,22],[153,27,161,26,"state"],[153,32,161,44],[153,36,161,49],[154,6,162,4],[154,12,162,10,"enemy"],[154,17,162,28],[154,20,162,31],[155,8,163,6,"id"],[155,10,163,8],[155,12,163,10],[155,21,163,19,"Date"],[155,25,163,23],[155,26,163,24,"now"],[155,29,163,27],[155,30,163,28],[155,31,163,29],[155,33,163,31],[156,8,164,6,"name"],[156,12,164,10],[156,14,164,12],[156,24,164,22],[157,8,165,6,"health"],[157,14,165,12],[157,16,165,14],[157,19,165,17],[158,8,166,6,"maxHealth"],[158,17,166,15],[158,19,166,17],[158,22,166,20],[159,8,167,6,"stats"],[159,13,167,11],[159,15,167,13],[160,10,168,8,"attack"],[160,16,168,14],[160,18,168,16],[160,20,168,18],[161,10,169,8,"defense"],[161,17,169,15],[161,19,169,17],[161,21,169,19],[162,10,170,8,"health"],[162,16,170,14],[162,18,170,16],[162,21,170,19],[163,10,171,8,"maxHealth"],[163,19,171,17],[163,21,171,19],[163,24,171,22],[164,10,172,8,"critChance"],[164,20,172,18],[164,22,172,20],[164,23,172,21],[165,10,173,8,"critDamage"],[165,20,173,18],[165,22,173,20],[165,25,173,23],[166,10,174,8,"cooldownReduction"],[166,27,174,25],[166,29,174,27],[167,8,175,6],[167,9,175,7],[168,8,176,6,"position"],[168,16,176,14],[168,18,176,16],[169,10,176,18,"x"],[169,11,176,19],[169,13,176,21],[169,16,176,24],[170,10,176,26,"y"],[170,11,176,27],[170,13,176,29],[171,8,176,33],[171,9,176,34],[172,8,177,6,"lastDamaged"],[172,19,177,17],[172,21,177,19],[173,6,178,4],[173,7,178,5],[174,6,180,4,"state"],[174,11,180,9],[174,12,180,10,"enemies"],[174,19,180,17],[174,20,180,18,"push"],[174,24,180,22],[174,25,180,23,"enemy"],[174,30,180,28],[174,31,180,29],[175,4,181,2],[175,5,181,3],[177,4,183,2],[178,4,184,2],[178,10,184,8,"startCombat"],[178,21,184,19],[178,24,184,22,"startCombat"],[178,25,184,22],[178,30,184,28],[179,6,185,4,"setCombatState"],[179,20,185,18],[179,21,185,19,"prev"],[179,25,185,23],[179,30,185,28],[180,8,185,30],[180,11,185,33,"prev"],[180,15,185,37],[181,8,185,39,"isInCombat"],[181,18,185,49],[181,20,185,51],[182,6,185,56],[182,7,185,57],[182,8,185,58],[182,9,185,59],[184,6,187,4],[185,6,188,4,"combatEngine"],[185,25,188,16],[185,26,188,16,"combatEngine"],[185,38,188,16],[185,39,188,17,"addTickCallback"],[185,54,188,32],[185,55,188,33,"handleCombatTick"],[185,71,188,49],[185,72,188,50],[186,6,190,4],[186,10,190,8],[186,11,190,9,"combatEngine"],[186,30,190,21],[186,31,190,21,"combatEngine"],[186,43,190,21],[186,45,190,23],[187,8,191,6,"combatEngine"],[187,27,191,18],[187,28,191,18,"combatEngine"],[187,40,191,18],[187,41,191,19,"start"],[187,46,191,24],[187,47,191,25],[187,48,191,26],[188,6,192,4],[189,4,193,2],[189,5,193,3],[191,4,195,2],[192,4,196,2],[192,10,196,8,"stopCombat"],[192,20,196,18],[192,23,196,21,"stopCombat"],[192,24,196,21],[192,29,196,27],[193,6,197,4,"setCombatState"],[193,20,197,18],[193,21,197,19,"prev"],[193,25,197,23],[193,30,197,28],[194,8,197,30],[194,11,197,33,"prev"],[194,15,197,37],[195,8,197,39,"isInCombat"],[195,18,197,49],[195,20,197,51],[196,6,197,57],[196,7,197,58],[196,8,197,59],[196,9,197,60],[197,6,198,4,"combatEngine"],[197,25,198,16],[197,26,198,16,"combatEngine"],[197,38,198,16],[197,39,198,17,"removeTickCallback"],[197,57,198,35],[197,58,198,36,"handleCombatTick"],[197,74,198,52],[197,75,198,53],[198,4,199,2],[198,5,199,3],[200,4,201,2],[201,4,202,2],[201,10,202,8,"equipAbility"],[201,22,202,20],[201,25,202,23,"equipAbility"],[201,26,202,24,"abilityId"],[201,35,202,41],[201,37,202,43,"slotIndex"],[201,46,202,60],[201,51,202,74],[202,6,203,4],[202,13,203,11,"combatState"],[202,24,203,22],[202,25,203,23,"abilityManager"],[202,39,203,37],[202,40,203,38,"equipAbility"],[202,52,203,50],[202,53,203,51,"abilityId"],[202,62,203,60],[202,64,203,62,"slotIndex"],[202,73,203,71],[202,74,203,72],[203,4,204,2],[203,5,204,3],[204,4,206,2],[204,10,206,8,"getDeck"],[204,17,206,15],[204,20,206,18,"getDeck"],[204,21,206,18],[204,26,206,24],[205,6,207,4],[205,13,207,11,"combatState"],[205,24,207,22],[205,25,207,23,"abilityManager"],[205,39,207,37],[205,40,207,38,"getDeck"],[205,47,207,45],[205,48,207,46],[205,49,207,47],[206,4,208,2],[206,5,208,3],[207,4,210,2],[207,10,210,8,"getAvailableAbilities"],[207,31,210,29],[207,34,210,32,"getAvailableAbilities"],[207,35,210,32],[207,40,210,38],[208,6,211,4],[208,13,211,11,"combatState"],[208,24,211,22],[208,25,211,23,"abilityManager"],[208,39,211,37],[208,40,211,38,"getAvailableAbilities"],[208,61,211,59],[208,62,211,60],[208,63,211,61],[209,4,212,2],[209,5,212,3],[210,4,214,2],[210,10,214,8,"upgradeAbility"],[210,24,214,22],[210,27,214,26,"abilityId"],[210,36,214,43],[210,40,214,57],[211,6,215,4],[211,13,215,11,"combatState"],[211,24,215,22],[211,25,215,23,"abilityManager"],[211,39,215,37],[211,40,215,38,"upgradeAbility"],[211,54,215,52],[211,55,215,53,"abilityId"],[211,64,215,62],[211,65,215,63],[212,4,216,2],[212,5,216,3],[214,4,218,2],[215,4,219,2],[215,8,219,2,"useEffect"],[215,14,219,11],[215,15,219,11,"useEffect"],[215,24,219,11],[215,26,219,12],[215,32,219,18],[216,6,220,4,"combatEngine"],[216,25,220,16],[216,26,220,16,"combatEngine"],[216,38,220,16],[216,39,220,17,"start"],[216,44,220,22],[216,45,220,23],[216,46,220,24],[218,6,222,4],[219,6,223,4,"combatState"],[219,17,223,15],[219,18,223,16,"abilityManager"],[219,32,223,30],[219,33,223,31,"equipAbility"],[219,45,223,43],[219,46,223,44],[219,62,223,60],[219,64,223,62],[219,65,223,63],[219,66,223,64],[220,6,224,4,"combatState"],[220,17,224,15],[220,18,224,16,"abilityManager"],[220,32,224,30],[220,33,224,31,"equipAbility"],[220,45,224,43],[220,46,224,44],[220,61,224,59],[220,63,224,61],[220,64,224,62],[220,65,224,63],[221,6,226,4],[221,13,226,11],[221,19,226,17],[222,8,227,6,"combatEngine"],[222,27,227,18],[222,28,227,18,"combatEngine"],[222,40,227,18],[222,41,227,19,"stop"],[222,45,227,23],[222,46,227,24],[222,47,227,25],[223,6,228,4],[223,7,228,5],[224,4,229,2],[224,5,229,3],[224,7,229,5],[224,9,229,7],[224,10,229,8],[225,4,231,2],[225,10,231,8,"contextValue"],[225,22,231,39],[225,25,231,42],[226,6,232,4,"combatState"],[226,17,232,15],[227,6,233,4,"startCombat"],[227,17,233,15],[228,6,234,4,"stopCombat"],[228,16,234,14],[229,6,235,4,"equipAbility"],[229,18,235,16],[230,6,236,4,"getDeck"],[230,13,236,11],[231,6,237,4,"getAvailableAbilities"],[231,27,237,25],[232,6,238,4,"upgradeAbility"],[233,4,239,2],[233,5,239,3],[234,4,241,2],[234,24,242,4],[234,28,242,4,"_reactJsxDevRuntime"],[234,47,242,4],[234,48,242,4,"jsxDEV"],[234,54,242,4],[234,56,242,5,"CombatContext"],[234,69,242,18],[234,70,242,19,"Provider"],[234,78,242,27],[235,6,242,28,"value"],[235,11,242,33],[235,13,242,35,"contextValue"],[235,25,242,48],[236,6,242,48,"children"],[236,14,242,48],[236,16,243,7,"children"],[237,4,243,15],[238,6,243,15,"fileName"],[238,14,243,15],[238,16,243,15,"_jsxFileName"],[238,28,243,15],[239,6,243,15,"lineNumber"],[239,16,243,15],[240,6,243,15,"columnNumber"],[240,18,243,15],[241,4,243,15],[241,11,244,28],[241,12,244,29],[242,2,246,0],[242,3,246,1],[243,0,246,2],[243,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEE;2BCmB;mBCC;4BCa;sDCC,sBD;0BEE;WFG;ODE;iDIY,yBJ;KDQ;GDC;sBOG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GPiB;yBWG;GXoB;sBYG;mBVC,uCU;GZQ;qBaG;mBXC,wCW;GbE;uBcG;GdE;kBeE;GfE;gCgBE;GhBE;yBiBE;GjBE;YkBG;WCO;KDE;GlBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}