{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  const CombatProvider = ({\n    children\n  }) => {\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`üéØ Enemy killed! Max HP: ${enemy.maxHealth}`);\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      console.log('üîÑ Combat tick running...');\n      setCombatState(prev => {\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`üêõ Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`üêõ Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      });\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`üéØ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      const enemy = {\n        id: `enemy_${Date.now()}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x: 300,\n          y: 200\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('üöÄ Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('üöÄ Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this);\n  };\n});","lineCount":261,"map":[[8,2,36,0,"Object"],[8,8,36,0],[8,9,36,0,"defineProperty"],[8,23,36,0],[8,24,36,0,"exports"],[8,31,36,0],[9,4,36,0,"enumerable"],[9,14,36,0],[10,4,36,0,"get"],[10,7,36,0],[10,18,36,0,"get"],[10,19,36,0],[11,6,36,0],[11,13,36,0,"useCombat"],[11,22,36,0],[12,4,36,0],[13,2,36,0],[14,2,44,0,"Object"],[14,8,44,0],[14,9,44,0,"defineProperty"],[14,23,44,0],[14,24,44,0,"exports"],[14,31,44,0],[15,4,44,0,"enumerable"],[15,14,44,0],[16,4,44,0,"get"],[16,7,44,0],[16,18,44,0,"get"],[16,19,44,0],[17,6,44,0],[17,13,44,0,"CombatProvider"],[17,27,44,0],[18,4,44,0],[19,2,44,0],[20,2,1,0],[20,6,1,0,"_react"],[20,12,1,0],[20,15,1,0,"require"],[20,22,1,0],[20,23,1,0,"_dependencyMap"],[20,37,1,0],[21,2,2,0],[21,6,2,0,"_engineCombatEngine"],[21,25,2,0],[21,28,2,0,"require"],[21,35,2,0],[21,36,2,0,"_dependencyMap"],[21,50,2,0],[22,2,3,0],[22,6,3,0,"_typesAbilityTypes"],[22,24,3,0],[22,27,3,0,"require"],[22,34,3,0],[22,35,3,0,"_dependencyMap"],[22,49,3,0],[23,2,3,85],[23,6,3,85,"_reactJsxDevRuntime"],[23,25,3,85],[23,28,3,85,"require"],[23,35,3,85],[23,36,3,85,"_dependencyMap"],[23,50,3,85],[24,2,34,0],[24,8,34,6,"CombatContext"],[24,21,34,19],[24,37,34,22],[24,41,34,22,"createContext"],[24,47,34,35],[24,48,34,35,"createContext"],[24,61,34,35],[24,63,34,67,"undefined"],[24,72,34,76],[24,73,34,77],[25,2,36,7],[25,8,36,13,"useCombat"],[25,17,36,22],[25,20,36,25,"useCombat"],[25,21,36,25],[25,26,36,50],[26,4,37,2],[26,10,37,8,"context"],[26,17,37,15],[26,20,37,18],[26,24,37,18,"useContext"],[26,30,37,28],[26,31,37,28,"useContext"],[26,41,37,28],[26,43,37,29,"CombatContext"],[26,56,37,42],[26,57,37,43],[27,4,38,2],[27,8,38,6],[27,9,38,7,"context"],[27,16,38,14],[27,18,38,16],[28,6,39,4],[28,12,39,10],[28,16,39,14,"Error"],[28,21,39,19],[28,22,39,20],[28,70,39,68],[28,71,39,69],[29,4,40,2],[30,4,41,2],[30,11,41,9,"context"],[30,18,41,16],[31,2,42,0],[31,3,42,1],[32,2,44,7],[32,8,44,13,"CombatProvider"],[32,22,44,27],[32,25,44,30,"CombatProvider"],[32,26,44,31],[33,4,44,33,"children"],[34,2,44,67],[34,3,44,68],[34,8,44,73],[35,4,46,2],[35,10,46,8],[35,11,46,9,"combatState"],[35,22,46,20],[35,24,46,22,"setCombatState"],[35,38,46,36],[35,39,46,37],[35,42,46,40],[35,46,46,40,"useState"],[35,52,46,48],[35,53,46,48,"useState"],[35,61,46,48],[35,63,46,62],[36,6,47,4,"isInCombat"],[36,16,47,14],[36,18,47,16],[36,23,47,21],[37,6,48,4,"currentTick"],[37,17,48,15],[37,19,48,17],[37,20,48,18],[38,6,49,4,"enemies"],[38,13,49,11],[38,15,49,13],[38,17,49,15],[39,6,50,4,"abilityManager"],[39,20,50,18],[39,22,50,20],[39,26,50,24,"AbilityManager"],[39,44,50,38],[39,45,50,38,"AbilityManager"],[39,59,50,38],[39,60,50,39],[39,61,50,40],[40,6,51,4,"statusEffects"],[40,19,51,17],[40,21,51,19],[40,25,51,23,"StatusEffectManager"],[40,44,51,42],[40,45,51,42,"StatusEffectManager"],[40,64,51,42],[40,65,51,43],[40,66,51,44],[41,6,52,4,"playerStats"],[41,17,52,15],[41,19,52,17],[42,8,53,6,"attack"],[42,14,53,12],[42,16,53,14],[42,18,53,16],[43,8,53,18],[44,8,54,6,"defense"],[44,15,54,13],[44,17,54,15],[44,18,54,16],[45,8,55,6,"health"],[45,14,55,12],[45,16,55,14],[45,19,55,17],[46,8,56,6,"maxHealth"],[46,17,56,15],[46,19,56,17],[46,22,56,20],[47,8,57,6,"critChance"],[47,18,57,16],[47,20,57,18],[47,21,57,19],[48,8,58,6,"critDamage"],[48,18,58,16],[48,20,58,18],[48,23,58,21],[49,8,59,6,"cooldownReduction"],[49,25,59,23],[49,27,59,25],[50,6,60,4],[51,4,61,2],[51,5,61,3],[51,6,61,4],[53,4,63,2],[54,4,64,2],[54,10,64,8,"handleEnemyKill"],[54,25,64,23],[54,28,64,27,"enemy"],[54,33,64,45],[54,37,64,50],[55,6,65,4,"console"],[55,13,65,11],[55,14,65,12,"log"],[55,17,65,15],[55,18,65,16],[55,46,65,44,"enemy"],[55,51,65,49],[55,52,65,50,"maxHealth"],[55,61,65,59],[55,63,65,61],[55,64,65,62],[56,4,66,2],[56,5,66,3],[58,4,68,2],[59,4,69,2],[59,10,69,8,"handleCombatTick"],[59,26,69,24],[59,29,69,27,"handleCombatTick"],[59,30,69,27],[59,35,69,33],[60,6,70,4,"console"],[60,13,70,11],[60,14,70,12,"log"],[60,17,70,15],[60,18,70,16],[60,45,70,43],[60,46,70,44],[61,6,71,4,"setCombatState"],[61,20,71,18],[61,21,71,19,"prev"],[61,25,71,23],[61,29,71,27],[62,8,72,6],[62,14,72,12,"newTick"],[62,21,72,19],[62,24,72,22,"combatEngine"],[62,43,72,34],[62,44,72,34,"combatEngine"],[62,56,72,34],[62,57,72,35,"getCurrentTick"],[62,71,72,49],[62,72,72,50],[62,73,72,51],[63,8,73,6],[63,14,73,12,"newState"],[63,22,73,20],[63,25,73,23],[64,10,73,25],[64,13,73,28,"prev"],[64,17,73,32],[65,10,73,34,"currentTick"],[65,21,73,45],[65,23,73,47,"newTick"],[66,8,73,55],[66,9,73,56],[67,8,75,6],[67,12,75,10],[67,13,75,11,"newState"],[67,21,75,19],[67,22,75,20,"isInCombat"],[67,32,75,30],[67,34,75,32],[67,41,75,39,"newState"],[67,49,75,47],[69,8,77,6],[70,8,78,6,"newState"],[70,16,78,14],[70,17,78,15,"abilityManager"],[70,31,78,29],[70,32,78,30,"updateCooldowns"],[70,47,78,45],[70,48,78,46,"newTick"],[70,55,78,53],[70,56,78,54],[72,8,80,6],[73,8,81,6],[73,14,81,12,"effectResults"],[73,27,81,25],[73,30,81,28,"newState"],[73,38,81,36],[73,39,81,37,"statusEffects"],[73,52,81,50],[73,53,81,51,"processTick"],[73,64,81,62],[73,65,81,63,"newTick"],[73,72,81,70],[73,73,81,71],[75,8,83,6],[76,8,84,6,"effectResults"],[76,21,84,19],[76,22,84,20,"forEach"],[76,29,84,27],[76,30,84,28],[76,31,84,29,"results"],[76,38,84,36],[76,40,84,38,"entityId"],[76,48,84,46],[76,53,84,51],[77,10,85,8],[77,16,85,14,"enemyIndex"],[77,26,85,24],[77,29,85,27,"newState"],[77,37,85,35],[77,38,85,36,"enemies"],[77,45,85,43],[77,46,85,44,"findIndex"],[77,55,85,53],[77,56,85,54,"e"],[77,57,85,55],[77,61,85,59,"e"],[77,62,85,60],[77,63,85,61,"id"],[77,65,85,63],[77,70,85,68,"entityId"],[77,78,85,76],[77,79,85,77],[78,10,86,8],[78,14,86,12,"enemyIndex"],[78,24,86,22],[78,28,86,26],[78,29,86,27],[78,31,86,29],[79,12,87,10,"results"],[79,19,87,17],[79,20,87,18,"forEach"],[79,27,87,25],[79,28,87,26,"result"],[79,34,87,32],[79,38,87,36],[80,14,88,12,"newState"],[80,22,88,20],[80,23,88,21,"enemies"],[80,30,88,28],[80,31,88,29,"enemyIndex"],[80,41,88,39],[80,42,88,40],[80,43,88,41,"health"],[80,49,88,47],[80,53,88,51,"result"],[80,59,88,57],[80,60,88,58,"damage"],[80,66,88,64],[81,14,89,12,"newState"],[81,22,89,20],[81,23,89,21,"enemies"],[81,30,89,28],[81,31,89,29,"enemyIndex"],[81,41,89,39],[81,42,89,40],[81,43,89,41,"lastDamaged"],[81,54,89,52],[81,57,89,55,"newTick"],[81,64,89,62],[82,12,90,10],[82,13,90,11],[82,14,90,12],[83,10,91,8],[84,8,92,6],[84,9,92,7],[84,10,92,8],[86,8,94,6],[87,8,95,6],[87,13,95,11],[87,17,95,15,"i"],[87,18,95,16],[87,21,95,19],[87,22,95,20],[87,24,95,22,"i"],[87,25,95,23],[87,28,95,26],[87,29,95,27],[87,31,95,29,"i"],[87,32,95,30],[87,34,95,32],[87,36,95,34],[88,10,96,8],[88,14,96,12,"newState"],[88,22,96,20],[88,23,96,21,"abilityManager"],[88,37,96,35],[88,38,96,36,"isAbilityReady"],[88,52,96,50],[88,53,96,51,"i"],[88,54,96,52],[88,55,96,53],[88,59,96,57,"newState"],[88,67,96,65],[88,68,96,66,"enemies"],[88,75,96,73],[88,76,96,74,"length"],[88,82,96,80],[88,85,96,83],[88,86,96,84],[88,88,96,86],[89,12,97,10],[89,16,97,14,"newState"],[89,24,97,22],[89,25,97,23,"abilityManager"],[89,39,97,37],[89,40,97,38,"useAbility"],[89,50,97,48],[89,51,97,49,"i"],[89,52,97,50],[89,54,97,52,"newTick"],[89,61,97,59],[89,62,97,60],[89,64,97,62],[90,14,98,12,"castAbility"],[90,25,98,23],[90,26,98,24,"newState"],[90,34,98,32],[90,36,98,34,"i"],[90,37,98,35],[90,38,98,36],[91,12,99,10],[92,10,100,8],[93,8,101,6],[95,8,103,6],[96,8,104,6],[96,14,104,12,"deadEnemies"],[96,25,104,23],[96,28,104,26,"newState"],[96,36,104,34],[96,37,104,35,"enemies"],[96,44,104,42],[96,45,104,43,"filter"],[96,51,104,49],[96,52,104,50,"enemy"],[96,57,104,55],[96,61,104,59,"enemy"],[96,66,104,64],[96,67,104,65,"health"],[96,73,104,71],[96,77,104,75],[96,78,104,76],[96,79,104,77],[97,8,105,6,"deadEnemies"],[97,19,105,17],[97,20,105,18,"forEach"],[97,27,105,25],[97,28,105,26,"enemy"],[97,33,105,31],[97,37,105,35],[98,10,106,8,"handleEnemyKill"],[98,25,106,23],[98,26,106,24,"enemy"],[98,31,106,29],[98,32,106,30],[99,8,107,6],[99,9,107,7],[99,10,107,8],[101,8,109,6],[102,8,110,6,"newState"],[102,16,110,14],[102,17,110,15,"enemies"],[102,24,110,22],[102,27,110,25,"newState"],[102,35,110,33],[102,36,110,34,"enemies"],[102,43,110,41],[102,44,110,42,"filter"],[102,50,110,48],[102,51,110,49,"enemy"],[102,56,110,54],[102,60,110,58,"enemy"],[102,65,110,63],[102,66,110,64,"health"],[102,72,110,70],[102,75,110,73],[102,76,110,74],[102,77,110,75],[104,8,112,6],[105,8,113,6],[105,14,113,12,"MAX_ENEMIES"],[105,25,113,23],[105,28,113,26],[105,30,113,28],[106,8,114,6,"console"],[106,15,114,13],[106,16,114,14,"log"],[106,19,114,17],[106,20,114,18],[106,53,114,51,"newState"],[106,61,114,59],[106,62,114,60,"enemies"],[106,69,114,67],[106,70,114,68,"length"],[106,76,114,74],[106,85,114,83,"MAX_ENEMIES"],[106,96,114,94],[106,98,114,96],[106,99,114,97],[107,8,115,6],[107,15,115,13,"newState"],[107,23,115,21],[107,24,115,22,"enemies"],[107,31,115,29],[107,32,115,30,"length"],[107,38,115,36],[107,41,115,39,"MAX_ENEMIES"],[107,52,115,50],[107,54,115,52],[108,10,116,8,"console"],[108,17,116,15],[108,18,116,16,"log"],[108,21,116,19],[108,22,116,20],[108,43,116,41,"newState"],[108,51,116,49],[108,52,116,50,"enemies"],[108,59,116,57],[108,60,116,58,"length"],[108,66,116,64],[108,69,116,67],[108,70,116,68],[108,74,116,72,"MAX_ENEMIES"],[108,85,116,83],[108,87,116,85],[108,88,116,86],[109,10,117,8,"spawnTestEnemy"],[109,24,117,22],[109,25,117,23,"newState"],[109,33,117,31],[109,34,117,32],[110,8,118,6],[111,8,120,6],[111,15,120,13,"newState"],[111,23,120,21],[112,6,121,4],[112,7,121,5],[112,8,121,6],[113,4,122,2],[113,5,122,3],[115,4,124,2],[116,4,125,2],[116,10,125,8,"castAbility"],[116,21,125,19],[116,24,125,22,"castAbility"],[116,25,125,23,"state"],[116,30,125,41],[116,32,125,43,"slotIndex"],[116,41,125,60],[116,46,125,65],[117,6,126,4],[117,12,126,10,"deck"],[117,16,126,14],[117,19,126,17,"state"],[117,24,126,22],[117,25,126,23,"abilityManager"],[117,39,126,37],[117,40,126,38,"getDeck"],[117,47,126,45],[117,48,126,46],[117,49,126,47],[118,6,127,4],[118,12,127,10,"ability"],[118,19,127,17],[118,22,127,20,"deck"],[118,26,127,24],[118,27,127,25,"slots"],[118,32,127,30],[118,33,127,31,"slotIndex"],[118,42,127,40],[118,43,127,41],[119,6,128,4],[119,10,128,8],[119,11,128,9,"ability"],[119,18,128,16],[119,20,128,18],[121,6,130,4],[122,6,131,4],[122,12,131,10,"target"],[122,18,131,16],[122,21,131,19,"state"],[122,26,131,24],[122,27,131,25,"enemies"],[122,34,131,32],[122,35,131,33],[122,36,131,34],[122,37,131,35],[123,6,132,4],[123,10,132,8],[123,11,132,9,"target"],[123,17,132,15],[123,19,132,17],[125,6,134,4],[126,6,135,4],[126,10,135,8,"damage"],[126,16,135,14],[126,19,135,17,"ability"],[126,26,135,24],[126,27,135,25,"stats"],[126,32,135,30],[126,33,135,31,"baseDamage"],[126,43,135,41],[128,6,137,4],[129,6,138,4,"deck"],[129,10,138,8],[129,11,138,9,"activeSynergies"],[129,26,138,24],[129,27,138,25,"forEach"],[129,34,138,32],[129,35,138,33,"synergy"],[129,42,138,40],[129,46,138,44],[130,8,139,6],[130,12,139,10,"synergy"],[130,19,139,17],[130,20,139,18,"bonus"],[130,25,139,23],[130,26,139,24,"damageBonus"],[130,37,139,35],[130,41,140,10,"synergy"],[130,48,140,17],[130,49,140,18,"requiredTags"],[130,61,140,30],[130,62,140,31,"some"],[130,66,140,35],[130,67,140,36,"tag"],[130,70,140,39],[130,74,140,43,"ability"],[130,81,140,50],[130,82,140,51,"tags"],[130,86,140,55],[130,87,140,56,"includes"],[130,95,140,64],[130,96,140,65,"tag"],[130,99,140,68],[130,100,140,69],[130,101,140,70],[130,103,140,72],[131,10,141,8,"damage"],[131,16,141,14],[131,20,141,19],[131,21,141,20],[131,24,141,23,"synergy"],[131,31,141,30],[131,32,141,31,"bonus"],[131,37,141,36],[131,38,141,37,"damageBonus"],[131,49,141,48],[131,52,141,51],[131,55,141,55],[132,8,142,6],[133,6,143,4],[133,7,143,5],[133,8,143,6],[135,6,145,4],[136,6,146,4],[136,12,146,10,"damageResult"],[136,24,146,22],[136,27,146,25,"DamageCalculator"],[136,46,146,41],[136,47,146,41,"DamageCalculator"],[136,63,146,41],[136,64,146,42,"calculateDamage"],[136,79,146,57],[136,80,146,58,"damage"],[136,86,146,64],[136,88,146,66,"state"],[136,93,146,71],[136,94,146,72,"playerStats"],[136,105,146,83],[136,107,146,85,"target"],[136,113,146,91],[136,114,146,92,"stats"],[136,119,146,97],[136,120,146,98],[138,6,148,4],[139,6,149,4],[139,10,149,8,"ability"],[139,17,149,15],[139,18,149,16,"effects"],[139,25,149,23],[139,26,149,24,"includes"],[139,34,149,32],[139,35,149,33],[139,49,149,47],[139,50,149,48],[139,52,149,50],[140,8,150,6,"target"],[140,14,150,12],[140,15,150,13,"health"],[140,21,150,19],[140,25,150,23,"damageResult"],[140,37,150,35],[140,38,150,36,"damage"],[140,44,150,42],[141,8,151,6,"target"],[141,14,151,12],[141,15,151,13,"lastDamaged"],[141,26,151,24],[141,29,151,27,"state"],[141,34,151,32],[141,35,151,33,"currentTick"],[141,46,151,44],[142,6,152,4],[142,7,152,5],[142,13,152,11],[142,17,152,15,"ability"],[142,24,152,22],[142,25,152,23,"effects"],[142,32,152,30],[142,33,152,31,"includes"],[142,41,152,39],[142,42,152,40],[142,47,152,45],[142,48,152,46],[142,50,152,48],[143,8,153,6],[144,8,154,6,"state"],[144,13,154,11],[144,14,154,12,"enemies"],[144,21,154,19],[144,22,154,20,"forEach"],[144,29,154,27],[144,30,154,28,"enemy"],[144,35,154,33],[144,39,154,37],[145,10,155,8,"enemy"],[145,15,155,13],[145,16,155,14,"health"],[145,22,155,20],[145,26,155,24,"Math"],[145,30,155,28],[145,31,155,29,"floor"],[145,36,155,34],[145,37,155,35,"damageResult"],[145,49,155,47],[145,50,155,48,"damage"],[145,56,155,54],[145,59,155,57],[145,62,155,60],[145,63,155,61],[145,64,155,62],[145,65,155,63],[146,10,156,8,"enemy"],[146,15,156,13],[146,16,156,14,"lastDamaged"],[146,27,156,25],[146,30,156,28,"state"],[146,35,156,33],[146,36,156,34,"currentTick"],[146,47,156,45],[147,8,157,6],[147,9,157,7],[147,10,157,8],[148,6,158,4],[150,6,160,4],[151,6,161,4],[151,10,161,8,"ability"],[151,17,161,15],[151,18,161,16,"effects"],[151,25,161,23],[151,26,161,24,"includes"],[151,34,161,32],[151,35,161,33],[151,40,161,38],[151,41,161,39],[151,45,161,43,"ability"],[151,52,161,50],[151,53,161,51,"stats"],[151,58,161,56],[151,59,161,57,"duration"],[151,67,161,65],[151,69,161,67],[152,8,162,6,"state"],[152,13,162,11],[152,14,162,12,"statusEffects"],[152,27,162,25],[152,28,162,26,"addEffect"],[152,37,162,35],[152,38,162,36,"target"],[152,44,162,42],[152,45,162,43,"id"],[152,47,162,45],[152,49,162,47],[153,10,163,8,"id"],[153,12,163,10],[153,14,163,12],[153,17,163,15,"ability"],[153,24,163,22],[153,25,163,23,"id"],[153,27,163,25],[153,33,163,31],[154,10,164,8,"type"],[154,14,164,12],[154,16,164,14],[154,21,164,19],[155,10,165,8,"remainingTicks"],[155,24,165,22],[155,26,165,24,"Math"],[155,30,165,28],[155,31,165,29,"floor"],[155,36,165,34],[155,37,165,35,"ability"],[155,44,165,42],[155,45,165,43,"stats"],[155,50,165,48],[155,51,165,49,"duration"],[155,59,165,57],[155,62,165,60],[155,64,165,62],[155,65,165,63],[156,10,165,65],[157,10,166,8,"tickInterval"],[157,22,166,20],[157,24,166,22],[157,26,166,24],[158,10,166,26],[159,10,167,8,"lastTick"],[159,18,167,16],[159,20,167,18,"state"],[159,25,167,23],[159,26,167,24,"currentTick"],[159,37,167,35],[160,10,168,8,"value"],[160,15,168,13],[160,17,168,15,"Math"],[160,21,168,19],[160,22,168,20,"floor"],[160,27,168,25],[160,28,168,26,"damage"],[160,34,168,32],[160,37,168,35],[160,40,168,38],[160,41,168,39],[161,10,168,41],[162,10,169,8,"stackable"],[162,19,169,17],[162,21,169,19],[163,8,170,6],[163,9,170,7],[163,10,170,8],[164,6,171,4],[165,6,173,4,"console"],[165,13,173,11],[165,14,173,12,"log"],[165,17,173,15],[165,18,173,16],[165,24,173,22,"ability"],[165,31,173,29],[165,32,173,30,"name"],[165,36,173,34],[165,54,173,52,"damageResult"],[165,66,173,64],[165,67,173,65,"damage"],[165,73,173,71],[165,76,173,74,"damageResult"],[165,88,173,86],[165,89,173,87,"isCritical"],[165,99,173,97],[165,102,173,100],[165,112,173,110],[165,115,173,113],[165,117,173,115],[165,119,173,117],[165,120,173,118],[166,4,174,2],[166,5,174,3],[168,4,176,2],[169,4,177,2],[169,10,177,8,"spawnTestEnemy"],[169,24,177,22],[169,27,177,26,"state"],[169,32,177,44],[169,36,177,49],[170,6,178,4],[170,12,178,10,"enemy"],[170,17,178,28],[170,20,178,31],[171,8,179,6,"id"],[171,10,179,8],[171,12,179,10],[171,21,179,19,"Date"],[171,25,179,23],[171,26,179,24,"now"],[171,29,179,27],[171,30,179,28],[171,31,179,29],[171,33,179,31],[172,8,180,6,"name"],[172,12,180,10],[172,14,180,12],[172,24,180,22],[173,8,181,6,"health"],[173,14,181,12],[173,16,181,14],[173,19,181,17],[174,8,182,6,"maxHealth"],[174,17,182,15],[174,19,182,17],[174,22,182,20],[175,8,183,6,"stats"],[175,13,183,11],[175,15,183,13],[176,10,184,8,"attack"],[176,16,184,14],[176,18,184,16],[176,20,184,18],[177,10,185,8,"defense"],[177,17,185,15],[177,19,185,17],[177,21,185,19],[178,10,186,8,"health"],[178,16,186,14],[178,18,186,16],[178,21,186,19],[179,10,187,8,"maxHealth"],[179,19,187,17],[179,21,187,19],[179,24,187,22],[180,10,188,8,"critChance"],[180,20,188,18],[180,22,188,20],[180,23,188,21],[181,10,189,8,"critDamage"],[181,20,189,18],[181,22,189,20],[181,25,189,23],[182,10,190,8,"cooldownReduction"],[182,27,190,25],[182,29,190,27],[183,8,191,6],[183,9,191,7],[184,8,192,6,"position"],[184,16,192,14],[184,18,192,16],[185,10,192,18,"x"],[185,11,192,19],[185,13,192,21],[185,16,192,24],[186,10,192,26,"y"],[186,11,192,27],[186,13,192,29],[187,8,192,33],[187,9,192,34],[188,8,193,6,"lastDamaged"],[188,19,193,17],[188,21,193,19],[189,6,194,4],[189,7,194,5],[190,6,196,4,"state"],[190,11,196,9],[190,12,196,10,"enemies"],[190,19,196,17],[190,20,196,18,"push"],[190,24,196,22],[190,25,196,23,"enemy"],[190,30,196,28],[190,31,196,29],[191,4,197,2],[191,5,197,3],[193,4,199,2],[194,4,200,2],[194,10,200,8,"startCombat"],[194,21,200,19],[194,24,200,22,"startCombat"],[194,25,200,22],[194,30,200,28],[195,6,201,4,"console"],[195,13,201,11],[195,14,201,12,"log"],[195,17,201,15],[195,18,201,16],[195,63,201,61],[195,64,201,62],[196,6,202,4,"setCombatState"],[196,20,202,18],[196,21,202,19,"prev"],[196,25,202,23],[196,30,202,28],[197,8,202,30],[197,11,202,33,"prev"],[197,15,202,37],[198,8,202,39,"isInCombat"],[198,18,202,49],[198,20,202,51],[199,6,202,56],[199,7,202,57],[199,8,202,58],[199,9,202,59],[201,6,204,4],[202,6,205,4,"combatEngine"],[202,25,205,16],[202,26,205,16,"combatEngine"],[202,38,205,16],[202,39,205,17,"addTickCallback"],[202,54,205,32],[202,55,205,33,"handleCombatTick"],[202,71,205,49],[202,72,205,50],[203,6,206,4,"console"],[203,13,206,11],[203,14,206,12,"log"],[203,17,206,15],[203,18,206,16],[203,62,206,60],[203,63,206,61],[205,6,208,4],[206,6,209,4,"combatEngine"],[206,25,209,16],[206,26,209,16,"combatEngine"],[206,38,209,16],[206,39,209,17,"start"],[206,44,209,22],[206,45,209,23],[206,46,209,24],[207,4,210,2],[207,5,210,3],[209,4,212,2],[210,4,213,2],[210,10,213,8,"stopCombat"],[210,20,213,18],[210,23,213,21,"stopCombat"],[210,24,213,21],[210,29,213,27],[211,6,214,4,"setCombatState"],[211,20,214,18],[211,21,214,19,"prev"],[211,25,214,23],[211,30,214,28],[212,8,214,30],[212,11,214,33,"prev"],[212,15,214,37],[213,8,214,39,"isInCombat"],[213,18,214,49],[213,20,214,51],[214,6,214,57],[214,7,214,58],[214,8,214,59],[214,9,214,60],[215,6,215,4,"combatEngine"],[215,25,215,16],[215,26,215,16,"combatEngine"],[215,38,215,16],[215,39,215,17,"removeTickCallback"],[215,57,215,35],[215,58,215,36,"handleCombatTick"],[215,74,215,52],[215,75,215,53],[216,4,216,2],[216,5,216,3],[218,4,218,2],[219,4,219,2],[219,10,219,8,"equipAbility"],[219,22,219,20],[219,25,219,23,"equipAbility"],[219,26,219,24,"abilityId"],[219,35,219,41],[219,37,219,43,"slotIndex"],[219,46,219,60],[219,51,219,74],[220,6,220,4],[220,13,220,11,"combatState"],[220,24,220,22],[220,25,220,23,"abilityManager"],[220,39,220,37],[220,40,220,38,"equipAbility"],[220,52,220,50],[220,53,220,51,"abilityId"],[220,62,220,60],[220,64,220,62,"slotIndex"],[220,73,220,71],[220,74,220,72],[221,4,221,2],[221,5,221,3],[222,4,223,2],[222,10,223,8,"getDeck"],[222,17,223,15],[222,20,223,18,"getDeck"],[222,21,223,18],[222,26,223,24],[223,6,224,4],[223,13,224,11,"combatState"],[223,24,224,22],[223,25,224,23,"abilityManager"],[223,39,224,37],[223,40,224,38,"getDeck"],[223,47,224,45],[223,48,224,46],[223,49,224,47],[224,4,225,2],[224,5,225,3],[225,4,227,2],[225,10,227,8,"getAvailableAbilities"],[225,31,227,29],[225,34,227,32,"getAvailableAbilities"],[225,35,227,32],[225,40,227,38],[226,6,228,4],[226,13,228,11,"combatState"],[226,24,228,22],[226,25,228,23,"abilityManager"],[226,39,228,37],[226,40,228,38,"getAvailableAbilities"],[226,61,228,59],[226,62,228,60],[226,63,228,61],[227,4,229,2],[227,5,229,3],[228,4,231,2],[228,10,231,8,"upgradeAbility"],[228,24,231,22],[228,27,231,26,"abilityId"],[228,36,231,43],[228,40,231,57],[229,6,232,4],[229,13,232,11,"combatState"],[229,24,232,22],[229,25,232,23,"abilityManager"],[229,39,232,37],[229,40,232,38,"upgradeAbility"],[229,54,232,52],[229,55,232,53,"abilityId"],[229,64,232,62],[229,65,232,63],[230,4,233,2],[230,5,233,3],[232,4,235,2],[233,4,236,2],[233,8,236,2,"useEffect"],[233,14,236,11],[233,15,236,11,"useEffect"],[233,24,236,11],[233,26,236,12],[233,32,236,18],[234,6,237,4,"combatEngine"],[234,25,237,16],[234,26,237,16,"combatEngine"],[234,38,237,16],[234,39,237,17,"start"],[234,44,237,22],[234,45,237,23],[234,46,237,24],[236,6,239,4],[237,6,240,4,"combatState"],[237,17,240,15],[237,18,240,16,"abilityManager"],[237,32,240,30],[237,33,240,31,"equipAbility"],[237,45,240,43],[237,46,240,44],[237,62,240,60],[237,64,240,62],[237,65,240,63],[237,66,240,64],[238,6,241,4,"combatState"],[238,17,241,15],[238,18,241,16,"abilityManager"],[238,32,241,30],[238,33,241,31,"equipAbility"],[238,45,241,43],[238,46,241,44],[238,61,241,59],[238,63,241,61],[238,64,241,62],[238,65,241,63],[239,6,243,4],[239,13,243,11],[239,19,243,17],[240,8,244,6,"combatEngine"],[240,27,244,18],[240,28,244,18,"combatEngine"],[240,40,244,18],[240,41,244,19,"stop"],[240,45,244,23],[240,46,244,24],[240,47,244,25],[241,6,245,4],[241,7,245,5],[242,4,246,2],[242,5,246,3],[242,7,246,5],[242,9,246,7],[242,10,246,8],[243,4,248,2],[243,10,248,8,"contextValue"],[243,22,248,39],[243,25,248,42],[244,6,249,4,"combatState"],[244,17,249,15],[245,6,250,4,"startCombat"],[245,17,250,15],[246,6,251,4,"stopCombat"],[246,16,251,14],[247,6,252,4,"equipAbility"],[247,18,252,16],[248,6,253,4,"getDeck"],[248,13,253,11],[249,6,254,4,"getAvailableAbilities"],[249,27,254,25],[250,6,255,4,"upgradeAbility"],[251,4,256,2],[251,5,256,3],[252,4,258,2],[252,24,259,4],[252,28,259,4,"_reactJsxDevRuntime"],[252,47,259,4],[252,48,259,4,"jsxDEV"],[252,54,259,4],[252,56,259,5,"CombatContext"],[252,69,259,18],[252,70,259,19,"Provider"],[252,78,259,27],[253,6,259,28,"value"],[253,11,259,33],[253,13,259,35,"contextValue"],[253,25,259,48],[254,6,259,48,"children"],[254,14,259,48],[254,16,260,7,"children"],[255,4,260,15],[256,6,260,15,"fileName"],[256,14,260,15],[256,16,260,15,"_jsxFileName"],[256,28,260,15],[257,6,260,15,"lineNumber"],[257,16,260,15],[258,6,260,15,"columnNumber"],[258,18,260,15],[259,4,260,15],[259,11,261,28],[259,12,261,29],[260,2,263,0],[260,3,263,1],[261,0,263,2],[261,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEE;0BCoB;GDE;2BEG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GFC;sBSG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GTiB;yBaG;GboB;sBcG;mBXE,uCW;GdQ;qBeG;mBZC,wCY;GfE;uBgBG;GhBE;kBiBE;GjBE;gCkBE;GlBE;yBmBE;GnBE;YoBG;WCO;KDE;GpBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}