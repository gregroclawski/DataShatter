{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`üéØ Enemy killed! Max HP: ${enemy.maxHealth}`);\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      console.log('üîÑ Combat tick running...');\n      setCombatState(prev => {\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = {\n          ...prev,\n          currentTick: newTick\n        };\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`üêõ Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`üêõ Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      });\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`üéØ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      // Get screen dimensions for proper positioning\n      const SCREEN_WIDTH = 390; // Mobile width\n      const GAME_AREA_HEIGHT = 844 - 250; // Screen height minus bottom tabs\n      const ENEMY_SIZE = 35;\n\n      // Random position within game area bounds (like ninja positioning)\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('üöÄ Starting combat, adding tick callback...');\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('üöÄ Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => ({\n        ...prev,\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 5\n    }, this);\n  };\n});","lineCount":272,"map":[[8,2,36,0,"Object"],[8,8,36,0],[8,9,36,0,"defineProperty"],[8,23,36,0],[8,24,36,0,"exports"],[8,31,36,0],[9,4,36,0,"enumerable"],[9,14,36,0],[10,4,36,0,"get"],[10,7,36,0],[10,18,36,0,"get"],[10,19,36,0],[11,6,36,0],[11,13,36,0,"useCombat"],[11,22,36,0],[12,4,36,0],[13,2,36,0],[14,2,46,0,"Object"],[14,8,46,0],[14,9,46,0,"defineProperty"],[14,23,46,0],[14,24,46,0,"exports"],[14,31,46,0],[15,4,46,0,"enumerable"],[15,14,46,0],[16,4,46,0,"get"],[16,7,46,0],[16,18,46,0,"get"],[16,19,46,0],[17,6,46,0],[17,13,46,0,"CombatProvider"],[17,27,46,0],[18,4,46,0],[19,2,46,0],[20,2,1,0],[20,6,1,0,"_react"],[20,12,1,0],[20,15,1,0,"require"],[20,22,1,0],[20,23,1,0,"_dependencyMap"],[20,37,1,0],[21,2,2,0],[21,6,2,0,"_engineCombatEngine"],[21,25,2,0],[21,28,2,0,"require"],[21,35,2,0],[21,36,2,0,"_dependencyMap"],[21,50,2,0],[22,2,3,0],[22,6,3,0,"_typesAbilityTypes"],[22,24,3,0],[22,27,3,0,"require"],[22,34,3,0],[22,35,3,0,"_dependencyMap"],[22,49,3,0],[23,2,3,85],[23,6,3,85,"_reactJsxDevRuntime"],[23,25,3,85],[23,28,3,85,"require"],[23,35,3,85],[23,36,3,85,"_dependencyMap"],[23,50,3,85],[24,2,34,0],[24,8,34,6,"CombatContext"],[24,21,34,19],[24,37,34,22],[24,41,34,22,"createContext"],[24,47,34,35],[24,48,34,35,"createContext"],[24,61,34,35],[24,63,34,67,"undefined"],[24,72,34,76],[24,73,34,77],[25,2,36,7],[25,8,36,13,"useCombat"],[25,17,36,22],[25,20,36,25,"useCombat"],[25,21,36,25],[25,26,36,50],[26,4,37,2],[26,10,37,8,"context"],[26,17,37,15],[26,20,37,18],[26,24,37,18,"useContext"],[26,30,37,28],[26,31,37,28,"useContext"],[26,41,37,28],[26,43,37,29,"CombatContext"],[26,56,37,42],[26,57,37,43],[27,4,38,2],[27,8,38,6],[27,9,38,7,"context"],[27,16,38,14],[27,18,38,16],[28,6,39,4],[28,12,39,10],[28,16,39,14,"Error"],[28,21,39,19],[28,22,39,20],[28,70,39,68],[28,71,39,69],[29,4,40,2],[30,4,41,2],[30,11,41,9,"context"],[30,18,41,16],[31,2,42,0],[31,3,42,1],[32,2,44,0],[32,6,44,4,"enemyCounter"],[32,18,44,16],[32,21,44,19],[32,22,44,20],[32,23,44,21],[32,24,44,22],[34,2,46,7],[34,8,46,13,"CombatProvider"],[34,22,46,27],[34,25,46,30,"CombatProvider"],[34,26,46,31],[35,4,46,33,"children"],[36,2,46,67],[36,3,46,68],[36,8,46,73],[37,4,48,2],[37,10,48,8],[37,11,48,9,"combatState"],[37,22,48,20],[37,24,48,22,"setCombatState"],[37,38,48,36],[37,39,48,37],[37,42,48,40],[37,46,48,40,"useState"],[37,52,48,48],[37,53,48,48,"useState"],[37,61,48,48],[37,63,48,62],[38,6,49,4,"isInCombat"],[38,16,49,14],[38,18,49,16],[38,23,49,21],[39,6,50,4,"currentTick"],[39,17,50,15],[39,19,50,17],[39,20,50,18],[40,6,51,4,"enemies"],[40,13,51,11],[40,15,51,13],[40,17,51,15],[41,6,52,4,"abilityManager"],[41,20,52,18],[41,22,52,20],[41,26,52,24,"AbilityManager"],[41,44,52,38],[41,45,52,38,"AbilityManager"],[41,59,52,38],[41,60,52,39],[41,61,52,40],[42,6,53,4,"statusEffects"],[42,19,53,17],[42,21,53,19],[42,25,53,23,"StatusEffectManager"],[42,44,53,42],[42,45,53,42,"StatusEffectManager"],[42,64,53,42],[42,65,53,43],[42,66,53,44],[43,6,54,4,"playerStats"],[43,17,54,15],[43,19,54,17],[44,8,55,6,"attack"],[44,14,55,12],[44,16,55,14],[44,18,55,16],[45,8,55,18],[46,8,56,6,"defense"],[46,15,56,13],[46,17,56,15],[46,18,56,16],[47,8,57,6,"health"],[47,14,57,12],[47,16,57,14],[47,19,57,17],[48,8,58,6,"maxHealth"],[48,17,58,15],[48,19,58,17],[48,22,58,20],[49,8,59,6,"critChance"],[49,18,59,16],[49,20,59,18],[49,21,59,19],[50,8,60,6,"critDamage"],[50,18,60,16],[50,20,60,18],[50,23,60,21],[51,8,61,6,"cooldownReduction"],[51,25,61,23],[51,27,61,25],[52,6,62,4],[53,4,63,2],[53,5,63,3],[53,6,63,4],[55,4,65,2],[56,4,66,2],[56,10,66,8,"handleEnemyKill"],[56,25,66,23],[56,28,66,27,"enemy"],[56,33,66,45],[56,37,66,50],[57,6,67,4,"console"],[57,13,67,11],[57,14,67,12,"log"],[57,17,67,15],[57,18,67,16],[57,46,67,44,"enemy"],[57,51,67,49],[57,52,67,50,"maxHealth"],[57,61,67,59],[57,63,67,61],[57,64,67,62],[58,4,68,2],[58,5,68,3],[60,4,70,2],[61,4,71,2],[61,10,71,8,"handleCombatTick"],[61,26,71,24],[61,29,71,27,"handleCombatTick"],[61,30,71,27],[61,35,71,33],[62,6,72,4,"console"],[62,13,72,11],[62,14,72,12,"log"],[62,17,72,15],[62,18,72,16],[62,45,72,43],[62,46,72,44],[63,6,73,4,"setCombatState"],[63,20,73,18],[63,21,73,19,"prev"],[63,25,73,23],[63,29,73,27],[64,8,74,6],[64,14,74,12,"newTick"],[64,21,74,19],[64,24,74,22,"combatEngine"],[64,43,74,34],[64,44,74,34,"combatEngine"],[64,56,74,34],[64,57,74,35,"getCurrentTick"],[64,71,74,49],[64,72,74,50],[64,73,74,51],[65,8,75,6],[65,14,75,12,"newState"],[65,22,75,20],[65,25,75,23],[66,10,75,25],[66,13,75,28,"prev"],[66,17,75,32],[67,10,75,34,"currentTick"],[67,21,75,45],[67,23,75,47,"newTick"],[68,8,75,55],[68,9,75,56],[69,8,77,6],[69,12,77,10],[69,13,77,11,"newState"],[69,21,77,19],[69,22,77,20,"isInCombat"],[69,32,77,30],[69,34,77,32],[69,41,77,39,"newState"],[69,49,77,47],[71,8,79,6],[72,8,80,6,"newState"],[72,16,80,14],[72,17,80,15,"abilityManager"],[72,31,80,29],[72,32,80,30,"updateCooldowns"],[72,47,80,45],[72,48,80,46,"newTick"],[72,55,80,53],[72,56,80,54],[74,8,82,6],[75,8,83,6],[75,14,83,12,"effectResults"],[75,27,83,25],[75,30,83,28,"newState"],[75,38,83,36],[75,39,83,37,"statusEffects"],[75,52,83,50],[75,53,83,51,"processTick"],[75,64,83,62],[75,65,83,63,"newTick"],[75,72,83,70],[75,73,83,71],[77,8,85,6],[78,8,86,6,"effectResults"],[78,21,86,19],[78,22,86,20,"forEach"],[78,29,86,27],[78,30,86,28],[78,31,86,29,"results"],[78,38,86,36],[78,40,86,38,"entityId"],[78,48,86,46],[78,53,86,51],[79,10,87,8],[79,16,87,14,"enemyIndex"],[79,26,87,24],[79,29,87,27,"newState"],[79,37,87,35],[79,38,87,36,"enemies"],[79,45,87,43],[79,46,87,44,"findIndex"],[79,55,87,53],[79,56,87,54,"e"],[79,57,87,55],[79,61,87,59,"e"],[79,62,87,60],[79,63,87,61,"id"],[79,65,87,63],[79,70,87,68,"entityId"],[79,78,87,76],[79,79,87,77],[80,10,88,8],[80,14,88,12,"enemyIndex"],[80,24,88,22],[80,28,88,26],[80,29,88,27],[80,31,88,29],[81,12,89,10,"results"],[81,19,89,17],[81,20,89,18,"forEach"],[81,27,89,25],[81,28,89,26,"result"],[81,34,89,32],[81,38,89,36],[82,14,90,12,"newState"],[82,22,90,20],[82,23,90,21,"enemies"],[82,30,90,28],[82,31,90,29,"enemyIndex"],[82,41,90,39],[82,42,90,40],[82,43,90,41,"health"],[82,49,90,47],[82,53,90,51,"result"],[82,59,90,57],[82,60,90,58,"damage"],[82,66,90,64],[83,14,91,12,"newState"],[83,22,91,20],[83,23,91,21,"enemies"],[83,30,91,28],[83,31,91,29,"enemyIndex"],[83,41,91,39],[83,42,91,40],[83,43,91,41,"lastDamaged"],[83,54,91,52],[83,57,91,55,"newTick"],[83,64,91,62],[84,12,92,10],[84,13,92,11],[84,14,92,12],[85,10,93,8],[86,8,94,6],[86,9,94,7],[86,10,94,8],[88,8,96,6],[89,8,97,6],[89,13,97,11],[89,17,97,15,"i"],[89,18,97,16],[89,21,97,19],[89,22,97,20],[89,24,97,22,"i"],[89,25,97,23],[89,28,97,26],[89,29,97,27],[89,31,97,29,"i"],[89,32,97,30],[89,34,97,32],[89,36,97,34],[90,10,98,8],[90,14,98,12,"newState"],[90,22,98,20],[90,23,98,21,"abilityManager"],[90,37,98,35],[90,38,98,36,"isAbilityReady"],[90,52,98,50],[90,53,98,51,"i"],[90,54,98,52],[90,55,98,53],[90,59,98,57,"newState"],[90,67,98,65],[90,68,98,66,"enemies"],[90,75,98,73],[90,76,98,74,"length"],[90,82,98,80],[90,85,98,83],[90,86,98,84],[90,88,98,86],[91,12,99,10],[91,16,99,14,"newState"],[91,24,99,22],[91,25,99,23,"abilityManager"],[91,39,99,37],[91,40,99,38,"useAbility"],[91,50,99,48],[91,51,99,49,"i"],[91,52,99,50],[91,54,99,52,"newTick"],[91,61,99,59],[91,62,99,60],[91,64,99,62],[92,14,100,12,"castAbility"],[92,25,100,23],[92,26,100,24,"newState"],[92,34,100,32],[92,36,100,34,"i"],[92,37,100,35],[92,38,100,36],[93,12,101,10],[94,10,102,8],[95,8,103,6],[97,8,105,6],[98,8,106,6],[98,14,106,12,"deadEnemies"],[98,25,106,23],[98,28,106,26,"newState"],[98,36,106,34],[98,37,106,35,"enemies"],[98,44,106,42],[98,45,106,43,"filter"],[98,51,106,49],[98,52,106,50,"enemy"],[98,57,106,55],[98,61,106,59,"enemy"],[98,66,106,64],[98,67,106,65,"health"],[98,73,106,71],[98,77,106,75],[98,78,106,76],[98,79,106,77],[99,8,107,6,"deadEnemies"],[99,19,107,17],[99,20,107,18,"forEach"],[99,27,107,25],[99,28,107,26,"enemy"],[99,33,107,31],[99,37,107,35],[100,10,108,8,"handleEnemyKill"],[100,25,108,23],[100,26,108,24,"enemy"],[100,31,108,29],[100,32,108,30],[101,8,109,6],[101,9,109,7],[101,10,109,8],[103,8,111,6],[104,8,112,6,"newState"],[104,16,112,14],[104,17,112,15,"enemies"],[104,24,112,22],[104,27,112,25,"newState"],[104,35,112,33],[104,36,112,34,"enemies"],[104,43,112,41],[104,44,112,42,"filter"],[104,50,112,48],[104,51,112,49,"enemy"],[104,56,112,54],[104,60,112,58,"enemy"],[104,65,112,63],[104,66,112,64,"health"],[104,72,112,70],[104,75,112,73],[104,76,112,74],[104,77,112,75],[106,8,114,6],[107,8,115,6],[107,14,115,12,"MAX_ENEMIES"],[107,25,115,23],[107,28,115,26],[107,30,115,28],[108,8,116,6,"console"],[108,15,116,13],[108,16,116,14,"log"],[108,19,116,17],[108,20,116,18],[108,53,116,51,"newState"],[108,61,116,59],[108,62,116,60,"enemies"],[108,69,116,67],[108,70,116,68,"length"],[108,76,116,74],[108,85,116,83,"MAX_ENEMIES"],[108,96,116,94],[108,98,116,96],[108,99,116,97],[109,8,117,6],[109,15,117,13,"newState"],[109,23,117,21],[109,24,117,22,"enemies"],[109,31,117,29],[109,32,117,30,"length"],[109,38,117,36],[109,41,117,39,"MAX_ENEMIES"],[109,52,117,50],[109,54,117,52],[110,10,118,8,"console"],[110,17,118,15],[110,18,118,16,"log"],[110,21,118,19],[110,22,118,20],[110,43,118,41,"newState"],[110,51,118,49],[110,52,118,50,"enemies"],[110,59,118,57],[110,60,118,58,"length"],[110,66,118,64],[110,69,118,67],[110,70,118,68],[110,74,118,72,"MAX_ENEMIES"],[110,85,118,83],[110,87,118,85],[110,88,118,86],[111,10,119,8,"spawnTestEnemy"],[111,24,119,22],[111,25,119,23,"newState"],[111,33,119,31],[111,34,119,32],[112,8,120,6],[113,8,122,6],[113,15,122,13,"newState"],[113,23,122,21],[114,6,123,4],[114,7,123,5],[114,8,123,6],[115,4,124,2],[115,5,124,3],[117,4,126,2],[118,4,127,2],[118,10,127,8,"castAbility"],[118,21,127,19],[118,24,127,22,"castAbility"],[118,25,127,23,"state"],[118,30,127,41],[118,32,127,43,"slotIndex"],[118,41,127,60],[118,46,127,65],[119,6,128,4],[119,12,128,10,"deck"],[119,16,128,14],[119,19,128,17,"state"],[119,24,128,22],[119,25,128,23,"abilityManager"],[119,39,128,37],[119,40,128,38,"getDeck"],[119,47,128,45],[119,48,128,46],[119,49,128,47],[120,6,129,4],[120,12,129,10,"ability"],[120,19,129,17],[120,22,129,20,"deck"],[120,26,129,24],[120,27,129,25,"slots"],[120,32,129,30],[120,33,129,31,"slotIndex"],[120,42,129,40],[120,43,129,41],[121,6,130,4],[121,10,130,8],[121,11,130,9,"ability"],[121,18,130,16],[121,20,130,18],[123,6,132,4],[124,6,133,4],[124,12,133,10,"target"],[124,18,133,16],[124,21,133,19,"state"],[124,26,133,24],[124,27,133,25,"enemies"],[124,34,133,32],[124,35,133,33],[124,36,133,34],[124,37,133,35],[125,6,134,4],[125,10,134,8],[125,11,134,9,"target"],[125,17,134,15],[125,19,134,17],[127,6,136,4],[128,6,137,4],[128,10,137,8,"damage"],[128,16,137,14],[128,19,137,17,"ability"],[128,26,137,24],[128,27,137,25,"stats"],[128,32,137,30],[128,33,137,31,"baseDamage"],[128,43,137,41],[130,6,139,4],[131,6,140,4,"deck"],[131,10,140,8],[131,11,140,9,"activeSynergies"],[131,26,140,24],[131,27,140,25,"forEach"],[131,34,140,32],[131,35,140,33,"synergy"],[131,42,140,40],[131,46,140,44],[132,8,141,6],[132,12,141,10,"synergy"],[132,19,141,17],[132,20,141,18,"bonus"],[132,25,141,23],[132,26,141,24,"damageBonus"],[132,37,141,35],[132,41,142,10,"synergy"],[132,48,142,17],[132,49,142,18,"requiredTags"],[132,61,142,30],[132,62,142,31,"some"],[132,66,142,35],[132,67,142,36,"tag"],[132,70,142,39],[132,74,142,43,"ability"],[132,81,142,50],[132,82,142,51,"tags"],[132,86,142,55],[132,87,142,56,"includes"],[132,95,142,64],[132,96,142,65,"tag"],[132,99,142,68],[132,100,142,69],[132,101,142,70],[132,103,142,72],[133,10,143,8,"damage"],[133,16,143,14],[133,20,143,19],[133,21,143,20],[133,24,143,23,"synergy"],[133,31,143,30],[133,32,143,31,"bonus"],[133,37,143,36],[133,38,143,37,"damageBonus"],[133,49,143,48],[133,52,143,51],[133,55,143,55],[134,8,144,6],[135,6,145,4],[135,7,145,5],[135,8,145,6],[137,6,147,4],[138,6,148,4],[138,12,148,10,"damageResult"],[138,24,148,22],[138,27,148,25,"DamageCalculator"],[138,46,148,41],[138,47,148,41,"DamageCalculator"],[138,63,148,41],[138,64,148,42,"calculateDamage"],[138,79,148,57],[138,80,148,58,"damage"],[138,86,148,64],[138,88,148,66,"state"],[138,93,148,71],[138,94,148,72,"playerStats"],[138,105,148,83],[138,107,148,85,"target"],[138,113,148,91],[138,114,148,92,"stats"],[138,119,148,97],[138,120,148,98],[140,6,150,4],[141,6,151,4],[141,10,151,8,"ability"],[141,17,151,15],[141,18,151,16,"effects"],[141,25,151,23],[141,26,151,24,"includes"],[141,34,151,32],[141,35,151,33],[141,49,151,47],[141,50,151,48],[141,52,151,50],[142,8,152,6,"target"],[142,14,152,12],[142,15,152,13,"health"],[142,21,152,19],[142,25,152,23,"damageResult"],[142,37,152,35],[142,38,152,36,"damage"],[142,44,152,42],[143,8,153,6,"target"],[143,14,153,12],[143,15,153,13,"lastDamaged"],[143,26,153,24],[143,29,153,27,"state"],[143,34,153,32],[143,35,153,33,"currentTick"],[143,46,153,44],[144,6,154,4],[144,7,154,5],[144,13,154,11],[144,17,154,15,"ability"],[144,24,154,22],[144,25,154,23,"effects"],[144,32,154,30],[144,33,154,31,"includes"],[144,41,154,39],[144,42,154,40],[144,47,154,45],[144,48,154,46],[144,50,154,48],[145,8,155,6],[146,8,156,6,"state"],[146,13,156,11],[146,14,156,12,"enemies"],[146,21,156,19],[146,22,156,20,"forEach"],[146,29,156,27],[146,30,156,28,"enemy"],[146,35,156,33],[146,39,156,37],[147,10,157,8,"enemy"],[147,15,157,13],[147,16,157,14,"health"],[147,22,157,20],[147,26,157,24,"Math"],[147,30,157,28],[147,31,157,29,"floor"],[147,36,157,34],[147,37,157,35,"damageResult"],[147,49,157,47],[147,50,157,48,"damage"],[147,56,157,54],[147,59,157,57],[147,62,157,60],[147,63,157,61],[147,64,157,62],[147,65,157,63],[148,10,158,8,"enemy"],[148,15,158,13],[148,16,158,14,"lastDamaged"],[148,27,158,25],[148,30,158,28,"state"],[148,35,158,33],[148,36,158,34,"currentTick"],[148,47,158,45],[149,8,159,6],[149,9,159,7],[149,10,159,8],[150,6,160,4],[152,6,162,4],[153,6,163,4],[153,10,163,8,"ability"],[153,17,163,15],[153,18,163,16,"effects"],[153,25,163,23],[153,26,163,24,"includes"],[153,34,163,32],[153,35,163,33],[153,40,163,38],[153,41,163,39],[153,45,163,43,"ability"],[153,52,163,50],[153,53,163,51,"stats"],[153,58,163,56],[153,59,163,57,"duration"],[153,67,163,65],[153,69,163,67],[154,8,164,6,"state"],[154,13,164,11],[154,14,164,12,"statusEffects"],[154,27,164,25],[154,28,164,26,"addEffect"],[154,37,164,35],[154,38,164,36,"target"],[154,44,164,42],[154,45,164,43,"id"],[154,47,164,45],[154,49,164,47],[155,10,165,8,"id"],[155,12,165,10],[155,14,165,12],[155,17,165,15,"ability"],[155,24,165,22],[155,25,165,23,"id"],[155,27,165,25],[155,33,165,31],[156,10,166,8,"type"],[156,14,166,12],[156,16,166,14],[156,21,166,19],[157,10,167,8,"remainingTicks"],[157,24,167,22],[157,26,167,24,"Math"],[157,30,167,28],[157,31,167,29,"floor"],[157,36,167,34],[157,37,167,35,"ability"],[157,44,167,42],[157,45,167,43,"stats"],[157,50,167,48],[157,51,167,49,"duration"],[157,59,167,57],[157,62,167,60],[157,64,167,62],[157,65,167,63],[158,10,167,65],[159,10,168,8,"tickInterval"],[159,22,168,20],[159,24,168,22],[159,26,168,24],[160,10,168,26],[161,10,169,8,"lastTick"],[161,18,169,16],[161,20,169,18,"state"],[161,25,169,23],[161,26,169,24,"currentTick"],[161,37,169,35],[162,10,170,8,"value"],[162,15,170,13],[162,17,170,15,"Math"],[162,21,170,19],[162,22,170,20,"floor"],[162,27,170,25],[162,28,170,26,"damage"],[162,34,170,32],[162,37,170,35],[162,40,170,38],[162,41,170,39],[163,10,170,41],[164,10,171,8,"stackable"],[164,19,171,17],[164,21,171,19],[165,8,172,6],[165,9,172,7],[165,10,172,8],[166,6,173,4],[167,6,175,4,"console"],[167,13,175,11],[167,14,175,12,"log"],[167,17,175,15],[167,18,175,16],[167,24,175,22,"ability"],[167,31,175,29],[167,32,175,30,"name"],[167,36,175,34],[167,54,175,52,"damageResult"],[167,66,175,64],[167,67,175,65,"damage"],[167,73,175,71],[167,76,175,74,"damageResult"],[167,88,175,86],[167,89,175,87,"isCritical"],[167,99,175,97],[167,102,175,100],[167,112,175,110],[167,115,175,113],[167,117,175,115],[167,119,175,117],[167,120,175,118],[168,4,176,2],[168,5,176,3],[170,4,178,2],[171,4,179,2],[171,10,179,8,"spawnTestEnemy"],[171,24,179,22],[171,27,179,26,"state"],[171,32,179,44],[171,36,179,49],[172,6,180,4],[173,6,181,4],[173,12,181,10,"SCREEN_WIDTH"],[173,24,181,22],[173,27,181,25],[173,30,181,28],[173,31,181,29],[173,32,181,30],[174,6,182,4],[174,12,182,10,"GAME_AREA_HEIGHT"],[174,28,182,26],[174,31,182,29],[174,34,182,32],[174,37,182,35],[174,40,182,38],[174,41,182,39],[174,42,182,40],[175,6,183,4],[175,12,183,10,"ENEMY_SIZE"],[175,22,183,20],[175,25,183,23],[175,27,183,25],[177,6,185,4],[178,6,186,4],[178,12,186,10,"x"],[178,13,186,11],[178,16,186,14,"Math"],[178,20,186,18],[178,21,186,19,"random"],[178,27,186,25],[178,28,186,26],[178,29,186,27],[178,33,186,31,"SCREEN_WIDTH"],[178,45,186,43],[178,48,186,46,"ENEMY_SIZE"],[178,58,186,56],[178,61,186,59],[178,62,186,60],[178,63,186,61],[178,66,186,64,"ENEMY_SIZE"],[178,76,186,74],[178,77,186,75],[178,78,186,76],[179,6,187,4],[179,12,187,10,"y"],[179,13,187,11],[179,16,187,14,"Math"],[179,20,187,18],[179,21,187,19,"random"],[179,27,187,25],[179,28,187,26],[179,29,187,27],[179,33,187,31,"GAME_AREA_HEIGHT"],[179,49,187,47],[179,52,187,50,"ENEMY_SIZE"],[179,62,187,60],[179,65,187,63],[179,66,187,64],[179,67,187,65],[179,70,187,68,"ENEMY_SIZE"],[179,80,187,78],[179,81,187,79],[179,82,187,80],[181,6,189,4],[181,12,189,10,"enemy"],[181,17,189,28],[181,20,189,31],[182,8,190,6,"id"],[182,10,190,8],[182,12,190,10],[182,21,190,19],[182,23,190,21,"enemyCounter"],[182,35,190,33],[182,37,190,35],[183,8,191,6,"name"],[183,12,191,10],[183,14,191,12],[183,24,191,22],[184,8,192,6,"health"],[184,14,192,12],[184,16,192,14],[184,19,192,17],[185,8,193,6,"maxHealth"],[185,17,193,15],[185,19,193,17],[185,22,193,20],[186,8,194,6,"stats"],[186,13,194,11],[186,15,194,13],[187,10,195,8,"attack"],[187,16,195,14],[187,18,195,16],[187,20,195,18],[188,10,196,8,"defense"],[188,17,196,15],[188,19,196,17],[188,21,196,19],[189,10,197,8,"health"],[189,16,197,14],[189,18,197,16],[189,21,197,19],[190,10,198,8,"maxHealth"],[190,19,198,17],[190,21,198,19],[190,24,198,22],[191,10,199,8,"critChance"],[191,20,199,18],[191,22,199,20],[191,23,199,21],[192,10,200,8,"critDamage"],[192,20,200,18],[192,22,200,20],[192,25,200,23],[193,10,201,8,"cooldownReduction"],[193,27,201,25],[193,29,201,27],[194,8,202,6],[194,9,202,7],[195,8,203,6,"position"],[195,16,203,14],[195,18,203,16],[196,10,203,18,"x"],[196,11,203,19],[197,10,203,21,"y"],[198,8,203,23],[198,9,203,24],[199,8,204,6,"lastDamaged"],[199,19,204,17],[199,21,204,19],[200,6,205,4],[200,7,205,5],[201,6,207,4,"state"],[201,11,207,9],[201,12,207,10,"enemies"],[201,19,207,17],[201,20,207,18,"push"],[201,24,207,22],[201,25,207,23,"enemy"],[201,30,207,28],[201,31,207,29],[202,4,208,2],[202,5,208,3],[204,4,210,2],[205,4,211,2],[205,10,211,8,"startCombat"],[205,21,211,19],[205,24,211,22,"startCombat"],[205,25,211,22],[205,30,211,28],[206,6,212,4,"console"],[206,13,212,11],[206,14,212,12,"log"],[206,17,212,15],[206,18,212,16],[206,63,212,61],[206,64,212,62],[207,6,213,4,"setCombatState"],[207,20,213,18],[207,21,213,19,"prev"],[207,25,213,23],[207,30,213,28],[208,8,213,30],[208,11,213,33,"prev"],[208,15,213,37],[209,8,213,39,"isInCombat"],[209,18,213,49],[209,20,213,51],[210,6,213,56],[210,7,213,57],[210,8,213,58],[210,9,213,59],[212,6,215,4],[213,6,216,4,"combatEngine"],[213,25,216,16],[213,26,216,16,"combatEngine"],[213,38,216,16],[213,39,216,17,"addTickCallback"],[213,54,216,32],[213,55,216,33,"handleCombatTick"],[213,71,216,49],[213,72,216,50],[214,6,217,4,"console"],[214,13,217,11],[214,14,217,12,"log"],[214,17,217,15],[214,18,217,16],[214,62,217,60],[214,63,217,61],[216,6,219,4],[217,6,220,4,"combatEngine"],[217,25,220,16],[217,26,220,16,"combatEngine"],[217,38,220,16],[217,39,220,17,"start"],[217,44,220,22],[217,45,220,23],[217,46,220,24],[218,4,221,2],[218,5,221,3],[220,4,223,2],[221,4,224,2],[221,10,224,8,"stopCombat"],[221,20,224,18],[221,23,224,21,"stopCombat"],[221,24,224,21],[221,29,224,27],[222,6,225,4,"setCombatState"],[222,20,225,18],[222,21,225,19,"prev"],[222,25,225,23],[222,30,225,28],[223,8,225,30],[223,11,225,33,"prev"],[223,15,225,37],[224,8,225,39,"isInCombat"],[224,18,225,49],[224,20,225,51],[225,6,225,57],[225,7,225,58],[225,8,225,59],[225,9,225,60],[226,6,226,4,"combatEngine"],[226,25,226,16],[226,26,226,16,"combatEngine"],[226,38,226,16],[226,39,226,17,"removeTickCallback"],[226,57,226,35],[226,58,226,36,"handleCombatTick"],[226,74,226,52],[226,75,226,53],[227,4,227,2],[227,5,227,3],[229,4,229,2],[230,4,230,2],[230,10,230,8,"equipAbility"],[230,22,230,20],[230,25,230,23,"equipAbility"],[230,26,230,24,"abilityId"],[230,35,230,41],[230,37,230,43,"slotIndex"],[230,46,230,60],[230,51,230,74],[231,6,231,4],[231,13,231,11,"combatState"],[231,24,231,22],[231,25,231,23,"abilityManager"],[231,39,231,37],[231,40,231,38,"equipAbility"],[231,52,231,50],[231,53,231,51,"abilityId"],[231,62,231,60],[231,64,231,62,"slotIndex"],[231,73,231,71],[231,74,231,72],[232,4,232,2],[232,5,232,3],[233,4,234,2],[233,10,234,8,"getDeck"],[233,17,234,15],[233,20,234,18,"getDeck"],[233,21,234,18],[233,26,234,24],[234,6,235,4],[234,13,235,11,"combatState"],[234,24,235,22],[234,25,235,23,"abilityManager"],[234,39,235,37],[234,40,235,38,"getDeck"],[234,47,235,45],[234,48,235,46],[234,49,235,47],[235,4,236,2],[235,5,236,3],[236,4,238,2],[236,10,238,8,"getAvailableAbilities"],[236,31,238,29],[236,34,238,32,"getAvailableAbilities"],[236,35,238,32],[236,40,238,38],[237,6,239,4],[237,13,239,11,"combatState"],[237,24,239,22],[237,25,239,23,"abilityManager"],[237,39,239,37],[237,40,239,38,"getAvailableAbilities"],[237,61,239,59],[237,62,239,60],[237,63,239,61],[238,4,240,2],[238,5,240,3],[239,4,242,2],[239,10,242,8,"upgradeAbility"],[239,24,242,22],[239,27,242,26,"abilityId"],[239,36,242,43],[239,40,242,57],[240,6,243,4],[240,13,243,11,"combatState"],[240,24,243,22],[240,25,243,23,"abilityManager"],[240,39,243,37],[240,40,243,38,"upgradeAbility"],[240,54,243,52],[240,55,243,53,"abilityId"],[240,64,243,62],[240,65,243,63],[241,4,244,2],[241,5,244,3],[243,4,246,2],[244,4,247,2],[244,8,247,2,"useEffect"],[244,14,247,11],[244,15,247,11,"useEffect"],[244,24,247,11],[244,26,247,12],[244,32,247,18],[245,6,248,4,"combatEngine"],[245,25,248,16],[245,26,248,16,"combatEngine"],[245,38,248,16],[245,39,248,17,"start"],[245,44,248,22],[245,45,248,23],[245,46,248,24],[247,6,250,4],[248,6,251,4,"combatState"],[248,17,251,15],[248,18,251,16,"abilityManager"],[248,32,251,30],[248,33,251,31,"equipAbility"],[248,45,251,43],[248,46,251,44],[248,62,251,60],[248,64,251,62],[248,65,251,63],[248,66,251,64],[249,6,252,4,"combatState"],[249,17,252,15],[249,18,252,16,"abilityManager"],[249,32,252,30],[249,33,252,31,"equipAbility"],[249,45,252,43],[249,46,252,44],[249,61,252,59],[249,63,252,61],[249,64,252,62],[249,65,252,63],[250,6,254,4],[250,13,254,11],[250,19,254,17],[251,8,255,6,"combatEngine"],[251,27,255,18],[251,28,255,18,"combatEngine"],[251,40,255,18],[251,41,255,19,"stop"],[251,45,255,23],[251,46,255,24],[251,47,255,25],[252,6,256,4],[252,7,256,5],[253,4,257,2],[253,5,257,3],[253,7,257,5],[253,9,257,7],[253,10,257,8],[254,4,259,2],[254,10,259,8,"contextValue"],[254,22,259,39],[254,25,259,42],[255,6,260,4,"combatState"],[255,17,260,15],[256,6,261,4,"startCombat"],[256,17,261,15],[257,6,262,4,"stopCombat"],[257,16,262,14],[258,6,263,4,"equipAbility"],[258,18,263,16],[259,6,264,4,"getDeck"],[259,13,264,11],[260,6,265,4,"getAvailableAbilities"],[260,27,265,25],[261,6,266,4,"upgradeAbility"],[262,4,267,2],[262,5,267,3],[263,4,269,2],[263,24,270,4],[263,28,270,4,"_reactJsxDevRuntime"],[263,47,270,4],[263,48,270,4,"jsxDEV"],[263,54,270,4],[263,56,270,5,"CombatContext"],[263,69,270,18],[263,70,270,19,"Provider"],[263,78,270,27],[264,6,270,28,"value"],[264,11,270,33],[264,13,270,35,"contextValue"],[264,25,270,48],[265,6,270,48,"children"],[265,14,270,48],[265,16,271,7,"children"],[266,4,271,15],[267,6,271,15,"fileName"],[267,14,271,15],[267,16,271,15,"_jsxFileName"],[267,28,271,15],[268,6,271,15,"lineNumber"],[268,16,271,15],[269,6,271,15,"columnNumber"],[269,18,271,15],[270,4,271,15],[270,11,272,28],[270,12,272,29],[271,2,274,0],[271,3,274,1],[272,0,274,2],[272,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEI;0BCoB;GDE;2BEG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GFC;sBSG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GTiB;yBaG;Gb6B;sBcG;mBXE,uCW;GdQ;qBeG;mBZC,wCY;GfE;uBgBG;GhBE;kBiBE;GjBE;gCkBE;GlBE;yBmBE;GnBE;YoBG;WCO;KDE;GpBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}