{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`🎯 Enemy killed! Max HP: ${enemy.maxHealth}`);\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      console.log('🔄 Combat tick running...');\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = Object.assign({}, prev, {\n          currentTick: newTick\n        });\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`🐛 Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`🐛 Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`🎯 ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      // Get screen dimensions for proper positioning\n      const SCREEN_WIDTH = 390; // Mobile width\n      const GAME_AREA_HEIGHT = 844 - 250; // Screen height minus bottom tabs\n      const ENEMY_SIZE = 35;\n\n      // Random position within game area bounds (like ninja positioning)\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('🚀 Starting combat, adding tick callback...');\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('🚀 Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"sjvsZ9aYnAcBXQDfT3kNLzJnF80=\");\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":280,"map":[[10,2,36,0,"Object"],[10,8,36,0],[10,9,36,0,"defineProperty"],[10,23,36,0],[10,24,36,0,"exports"],[10,31,36,0],[11,4,36,0,"enumerable"],[11,14,36,0],[12,4,36,0,"get"],[12,7,36,0],[12,18,36,0,"get"],[12,19,36,0],[13,6,36,0],[13,13,36,0,"useCombat"],[13,22,36,0],[14,4,36,0],[15,2,36,0],[16,2,46,0,"Object"],[16,8,46,0],[16,9,46,0,"defineProperty"],[16,23,46,0],[16,24,46,0,"exports"],[16,31,46,0],[17,4,46,0,"enumerable"],[17,14,46,0],[18,4,46,0,"get"],[18,7,46,0],[18,18,46,0,"get"],[18,19,46,0],[19,6,46,0],[19,13,46,0,"CombatProvider"],[19,27,46,0],[20,4,46,0],[21,2,46,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,3,85],[25,6,3,85,"_reactJsxDevRuntime"],[25,25,3,85],[25,28,3,85,"require"],[25,35,3,85],[25,36,3,85,"_dependencyMap"],[25,50,3,85],[26,2,34,0],[26,8,34,6,"CombatContext"],[26,21,34,19],[26,37,34,22],[26,41,34,22,"createContext"],[26,47,34,35],[26,48,34,35,"createContext"],[26,61,34,35],[26,63,34,67,"undefined"],[26,72,34,76],[26,73,34,77],[27,2,36,7],[27,8,36,13,"useCombat"],[27,17,36,22],[27,20,36,25,"useCombat"],[27,21,36,25],[27,26,36,50],[28,4,36,50,"_s"],[28,6,36,50],[29,4,37,2],[29,10,37,8,"context"],[29,17,37,15],[29,20,37,18],[29,24,37,18,"useContext"],[29,30,37,28],[29,31,37,28,"useContext"],[29,41,37,28],[29,43,37,29,"CombatContext"],[29,56,37,42],[29,57,37,43],[30,4,38,2],[30,8,38,6],[30,9,38,7,"context"],[30,16,38,14],[30,18,38,16],[31,6,39,4],[31,12,39,10],[31,16,39,14,"Error"],[31,21,39,19],[31,22,39,20],[31,70,39,68],[31,71,39,69],[32,4,40,2],[33,4,41,2],[33,11,41,9,"context"],[33,18,41,16],[34,2,42,0],[34,3,42,1],[35,2,42,2,"_s"],[35,4,42,2],[35,5,36,13,"useCombat"],[35,14,36,22],[36,2,44,0],[36,6,44,4,"enemyCounter"],[36,18,44,16],[36,21,44,19],[36,22,44,20],[36,23,44,21],[36,24,44,22],[38,2,46,7],[38,8,46,13,"CombatProvider"],[38,22,46,27],[38,25,46,30,"CombatProvider"],[38,26,46,31],[39,4,46,33,"children"],[40,2,46,67],[40,3,46,68],[40,8,46,73],[41,4,46,73,"_s3"],[41,7,46,73],[42,4,48,2],[42,10,48,8],[42,11,48,9,"combatState"],[42,22,48,20],[42,24,48,22,"setCombatState"],[42,38,48,36],[42,39,48,37],[42,42,48,40],[42,46,48,40,"useState"],[42,52,48,48],[42,53,48,48,"useState"],[42,61,48,48],[42,63,48,62],[43,6,49,4,"isInCombat"],[43,16,49,14],[43,18,49,16],[43,23,49,21],[44,6,50,4,"currentTick"],[44,17,50,15],[44,19,50,17],[44,20,50,18],[45,6,51,4,"enemies"],[45,13,51,11],[45,15,51,13],[45,17,51,15],[46,6,52,4,"abilityManager"],[46,20,52,18],[46,22,52,20],[46,26,52,24,"AbilityManager"],[46,44,52,38],[46,45,52,38,"AbilityManager"],[46,59,52,38],[46,60,52,39],[46,61,52,40],[47,6,53,4,"statusEffects"],[47,19,53,17],[47,21,53,19],[47,25,53,23,"StatusEffectManager"],[47,44,53,42],[47,45,53,42,"StatusEffectManager"],[47,64,53,42],[47,65,53,43],[47,66,53,44],[48,6,54,4,"playerStats"],[48,17,54,15],[48,19,54,17],[49,8,55,6,"attack"],[49,14,55,12],[49,16,55,14],[49,18,55,16],[50,8,55,18],[51,8,56,6,"defense"],[51,15,56,13],[51,17,56,15],[51,18,56,16],[52,8,57,6,"health"],[52,14,57,12],[52,16,57,14],[52,19,57,17],[53,8,58,6,"maxHealth"],[53,17,58,15],[53,19,58,17],[53,22,58,20],[54,8,59,6,"critChance"],[54,18,59,16],[54,20,59,18],[54,21,59,19],[55,8,60,6,"critDamage"],[55,18,60,16],[55,20,60,18],[55,23,60,21],[56,8,61,6,"cooldownReduction"],[56,25,61,23],[56,27,61,25],[57,6,62,4],[58,4,63,2],[58,5,63,3],[58,6,63,4],[60,4,65,2],[61,4,66,2],[61,10,66,8,"handleEnemyKill"],[61,25,66,23],[61,28,66,27,"enemy"],[61,33,66,45],[61,37,66,50],[62,6,67,4,"console"],[62,13,67,11],[62,14,67,12,"log"],[62,17,67,15],[62,18,67,16],[62,46,67,44,"enemy"],[62,51,67,49],[62,52,67,50,"maxHealth"],[62,61,67,59],[62,63,67,61],[62,64,67,62],[63,4,68,2],[63,5,68,3],[65,4,70,2],[66,4,71,2],[66,10,71,8,"handleCombatTick"],[66,26,71,24],[66,29,71,27,"handleCombatTick"],[66,30,71,27],[66,35,71,33],[67,6,71,33],[67,10,71,33,"_s2"],[67,13,71,33],[67,16,71,33,"$RefreshSig$"],[67,28,71,33],[68,6,72,4,"console"],[68,13,72,11],[68,14,72,12,"log"],[68,17,72,15],[68,18,72,16],[68,45,72,43],[68,46,72,44],[69,6,73,4,"_s2"],[69,9,73,4],[69,10,73,4,"setCombatState"],[69,24,73,18],[69,25,73,18,"_s2"],[69,28,73,18],[69,29,73,19,"prev"],[69,33,73,23],[69,37,73,27],[70,8,73,27,"_s2"],[70,11,73,27],[71,8,74,6],[71,14,74,12,"newTick"],[71,21,74,19],[71,24,74,22,"combatEngine"],[71,43,74,34],[71,44,74,34,"combatEngine"],[71,56,74,34],[71,57,74,35,"getCurrentTick"],[71,71,74,49],[71,72,74,50],[71,73,74,51],[72,8,75,6],[72,14,75,12,"newState"],[72,22,75,20],[72,25,75,20,"Object"],[72,31,75,20],[72,32,75,20,"assign"],[72,38,75,20],[72,43,75,28,"prev"],[72,47,75,32],[73,10,75,34,"currentTick"],[73,21,75,45],[73,23,75,47,"newTick"],[74,8,75,54],[74,10,75,56],[75,8,77,6],[75,12,77,10],[75,13,77,11,"newState"],[75,21,77,19],[75,22,77,20,"isInCombat"],[75,32,77,30],[75,34,77,32],[75,41,77,39,"newState"],[75,49,77,47],[77,8,79,6],[78,8,80,6,"newState"],[78,16,80,14],[78,17,80,15,"abilityManager"],[78,31,80,29],[78,32,80,30,"updateCooldowns"],[78,47,80,45],[78,48,80,46,"newTick"],[78,55,80,53],[78,56,80,54],[80,8,82,6],[81,8,83,6],[81,14,83,12,"effectResults"],[81,27,83,25],[81,30,83,28,"newState"],[81,38,83,36],[81,39,83,37,"statusEffects"],[81,52,83,50],[81,53,83,51,"processTick"],[81,64,83,62],[81,65,83,63,"newTick"],[81,72,83,70],[81,73,83,71],[83,8,85,6],[84,8,86,6,"effectResults"],[84,21,86,19],[84,22,86,20,"forEach"],[84,29,86,27],[84,30,86,28],[84,31,86,29,"results"],[84,38,86,36],[84,40,86,38,"entityId"],[84,48,86,46],[84,53,86,51],[85,10,87,8],[85,16,87,14,"enemyIndex"],[85,26,87,24],[85,29,87,27,"newState"],[85,37,87,35],[85,38,87,36,"enemies"],[85,45,87,43],[85,46,87,44,"findIndex"],[85,55,87,53],[85,56,87,54,"e"],[85,57,87,55],[85,61,87,59,"e"],[85,62,87,60],[85,63,87,61,"id"],[85,65,87,63],[85,70,87,68,"entityId"],[85,78,87,76],[85,79,87,77],[86,10,88,8],[86,14,88,12,"enemyIndex"],[86,24,88,22],[86,28,88,26],[86,29,88,27],[86,31,88,29],[87,12,89,10,"results"],[87,19,89,17],[87,20,89,18,"forEach"],[87,27,89,25],[87,28,89,26,"result"],[87,34,89,32],[87,38,89,36],[88,14,90,12,"newState"],[88,22,90,20],[88,23,90,21,"enemies"],[88,30,90,28],[88,31,90,29,"enemyIndex"],[88,41,90,39],[88,42,90,40],[88,43,90,41,"health"],[88,49,90,47],[88,53,90,51,"result"],[88,59,90,57],[88,60,90,58,"damage"],[88,66,90,64],[89,14,91,12,"newState"],[89,22,91,20],[89,23,91,21,"enemies"],[89,30,91,28],[89,31,91,29,"enemyIndex"],[89,41,91,39],[89,42,91,40],[89,43,91,41,"lastDamaged"],[89,54,91,52],[89,57,91,55,"newTick"],[89,64,91,62],[90,12,92,10],[90,13,92,11],[90,14,92,12],[91,10,93,8],[92,8,94,6],[92,9,94,7],[92,10,94,8],[94,8,96,6],[95,8,97,6],[95,13,97,11],[95,17,97,15,"i"],[95,18,97,16],[95,21,97,19],[95,22,97,20],[95,24,97,22,"i"],[95,25,97,23],[95,28,97,26],[95,29,97,27],[95,31,97,29,"i"],[95,32,97,30],[95,34,97,32],[95,36,97,34],[96,10,98,8],[96,14,98,12,"newState"],[96,22,98,20],[96,23,98,21,"abilityManager"],[96,37,98,35],[96,38,98,36,"isAbilityReady"],[96,52,98,50],[96,53,98,51,"i"],[96,54,98,52],[96,55,98,53],[96,59,98,57,"newState"],[96,67,98,65],[96,68,98,66,"enemies"],[96,75,98,73],[96,76,98,74,"length"],[96,82,98,80],[96,85,98,83],[96,86,98,84],[96,88,98,86],[97,12,99,10],[97,16,99,14,"newState"],[97,24,99,22],[97,25,99,23,"abilityManager"],[97,39,99,37],[97,40,99,38,"useAbility"],[97,50,99,48],[97,51,99,49,"i"],[97,52,99,50],[97,54,99,52,"newTick"],[97,61,99,59],[97,62,99,60],[97,64,99,62],[98,14,100,12,"castAbility"],[98,25,100,23],[98,26,100,24,"newState"],[98,34,100,32],[98,36,100,34,"i"],[98,37,100,35],[98,38,100,36],[99,12,101,10],[100,10,102,8],[101,8,103,6],[103,8,105,6],[104,8,106,6],[104,14,106,12,"deadEnemies"],[104,25,106,23],[104,28,106,26,"newState"],[104,36,106,34],[104,37,106,35,"enemies"],[104,44,106,42],[104,45,106,43,"filter"],[104,51,106,49],[104,52,106,50,"enemy"],[104,57,106,55],[104,61,106,59,"enemy"],[104,66,106,64],[104,67,106,65,"health"],[104,73,106,71],[104,77,106,75],[104,78,106,76],[104,79,106,77],[105,8,107,6,"deadEnemies"],[105,19,107,17],[105,20,107,18,"forEach"],[105,27,107,25],[105,28,107,26,"enemy"],[105,33,107,31],[105,37,107,35],[106,10,108,8,"handleEnemyKill"],[106,25,108,23],[106,26,108,24,"enemy"],[106,31,108,29],[106,32,108,30],[107,8,109,6],[107,9,109,7],[107,10,109,8],[109,8,111,6],[110,8,112,6,"newState"],[110,16,112,14],[110,17,112,15,"enemies"],[110,24,112,22],[110,27,112,25,"newState"],[110,35,112,33],[110,36,112,34,"enemies"],[110,43,112,41],[110,44,112,42,"filter"],[110,50,112,48],[110,51,112,49,"enemy"],[110,56,112,54],[110,60,112,58,"enemy"],[110,65,112,63],[110,66,112,64,"health"],[110,72,112,70],[110,75,112,73],[110,76,112,74],[110,77,112,75],[112,8,114,6],[113,8,115,6],[113,14,115,12,"MAX_ENEMIES"],[113,25,115,23],[113,28,115,26],[113,30,115,28],[114,8,116,6,"console"],[114,15,116,13],[114,16,116,14,"log"],[114,19,116,17],[114,20,116,18],[114,53,116,51,"newState"],[114,61,116,59],[114,62,116,60,"enemies"],[114,69,116,67],[114,70,116,68,"length"],[114,76,116,74],[114,85,116,83,"MAX_ENEMIES"],[114,96,116,94],[114,98,116,96],[114,99,116,97],[115,8,117,6],[115,15,117,13,"newState"],[115,23,117,21],[115,24,117,22,"enemies"],[115,31,117,29],[115,32,117,30,"length"],[115,38,117,36],[115,41,117,39,"MAX_ENEMIES"],[115,52,117,50],[115,54,117,52],[116,10,118,8,"console"],[116,17,118,15],[116,18,118,16,"log"],[116,21,118,19],[116,22,118,20],[116,43,118,41,"newState"],[116,51,118,49],[116,52,118,50,"enemies"],[116,59,118,57],[116,60,118,58,"length"],[116,66,118,64],[116,69,118,67],[116,70,118,68],[116,74,118,72,"MAX_ENEMIES"],[116,85,118,83],[116,87,118,85],[116,88,118,86],[117,10,119,8,"spawnTestEnemy"],[117,24,119,22],[117,25,119,23,"newState"],[117,33,119,31],[117,34,119,32],[118,8,120,6],[119,8,122,6],[119,15,122,13,"newState"],[119,23,122,21],[120,6,123,4],[120,7,123,5],[120,47,123,6],[121,4,124,2],[121,5,124,3],[123,4,126,2],[124,4,127,2],[124,10,127,8,"castAbility"],[124,21,127,19],[124,24,127,22,"castAbility"],[124,25,127,23,"state"],[124,30,127,41],[124,32,127,43,"slotIndex"],[124,41,127,60],[124,46,127,65],[125,6,128,4],[125,12,128,10,"deck"],[125,16,128,14],[125,19,128,17,"state"],[125,24,128,22],[125,25,128,23,"abilityManager"],[125,39,128,37],[125,40,128,38,"getDeck"],[125,47,128,45],[125,48,128,46],[125,49,128,47],[126,6,129,4],[126,12,129,10,"ability"],[126,19,129,17],[126,22,129,20,"deck"],[126,26,129,24],[126,27,129,25,"slots"],[126,32,129,30],[126,33,129,31,"slotIndex"],[126,42,129,40],[126,43,129,41],[127,6,130,4],[127,10,130,8],[127,11,130,9,"ability"],[127,18,130,16],[127,20,130,18],[129,6,132,4],[130,6,133,4],[130,12,133,10,"target"],[130,18,133,16],[130,21,133,19,"state"],[130,26,133,24],[130,27,133,25,"enemies"],[130,34,133,32],[130,35,133,33],[130,36,133,34],[130,37,133,35],[131,6,134,4],[131,10,134,8],[131,11,134,9,"target"],[131,17,134,15],[131,19,134,17],[133,6,136,4],[134,6,137,4],[134,10,137,8,"damage"],[134,16,137,14],[134,19,137,17,"ability"],[134,26,137,24],[134,27,137,25,"stats"],[134,32,137,30],[134,33,137,31,"baseDamage"],[134,43,137,41],[136,6,139,4],[137,6,140,4,"deck"],[137,10,140,8],[137,11,140,9,"activeSynergies"],[137,26,140,24],[137,27,140,25,"forEach"],[137,34,140,32],[137,35,140,33,"synergy"],[137,42,140,40],[137,46,140,44],[138,8,141,6],[138,12,141,10,"synergy"],[138,19,141,17],[138,20,141,18,"bonus"],[138,25,141,23],[138,26,141,24,"damageBonus"],[138,37,141,35],[138,41,142,10,"synergy"],[138,48,142,17],[138,49,142,18,"requiredTags"],[138,61,142,30],[138,62,142,31,"some"],[138,66,142,35],[138,67,142,36,"tag"],[138,70,142,39],[138,74,142,43,"ability"],[138,81,142,50],[138,82,142,51,"tags"],[138,86,142,55],[138,87,142,56,"includes"],[138,95,142,64],[138,96,142,65,"tag"],[138,99,142,68],[138,100,142,69],[138,101,142,70],[138,103,142,72],[139,10,143,8,"damage"],[139,16,143,14],[139,20,143,19],[139,21,143,20],[139,24,143,23,"synergy"],[139,31,143,30],[139,32,143,31,"bonus"],[139,37,143,36],[139,38,143,37,"damageBonus"],[139,49,143,48],[139,52,143,51],[139,55,143,55],[140,8,144,6],[141,6,145,4],[141,7,145,5],[141,8,145,6],[143,6,147,4],[144,6,148,4],[144,12,148,10,"damageResult"],[144,24,148,22],[144,27,148,25,"DamageCalculator"],[144,46,148,41],[144,47,148,41,"DamageCalculator"],[144,63,148,41],[144,64,148,42,"calculateDamage"],[144,79,148,57],[144,80,148,58,"damage"],[144,86,148,64],[144,88,148,66,"state"],[144,93,148,71],[144,94,148,72,"playerStats"],[144,105,148,83],[144,107,148,85,"target"],[144,113,148,91],[144,114,148,92,"stats"],[144,119,148,97],[144,120,148,98],[146,6,150,4],[147,6,151,4],[147,10,151,8,"ability"],[147,17,151,15],[147,18,151,16,"effects"],[147,25,151,23],[147,26,151,24,"includes"],[147,34,151,32],[147,35,151,33],[147,49,151,47],[147,50,151,48],[147,52,151,50],[148,8,152,6,"target"],[148,14,152,12],[148,15,152,13,"health"],[148,21,152,19],[148,25,152,23,"damageResult"],[148,37,152,35],[148,38,152,36,"damage"],[148,44,152,42],[149,8,153,6,"target"],[149,14,153,12],[149,15,153,13,"lastDamaged"],[149,26,153,24],[149,29,153,27,"state"],[149,34,153,32],[149,35,153,33,"currentTick"],[149,46,153,44],[150,6,154,4],[150,7,154,5],[150,13,154,11],[150,17,154,15,"ability"],[150,24,154,22],[150,25,154,23,"effects"],[150,32,154,30],[150,33,154,31,"includes"],[150,41,154,39],[150,42,154,40],[150,47,154,45],[150,48,154,46],[150,50,154,48],[151,8,155,6],[152,8,156,6,"state"],[152,13,156,11],[152,14,156,12,"enemies"],[152,21,156,19],[152,22,156,20,"forEach"],[152,29,156,27],[152,30,156,28,"enemy"],[152,35,156,33],[152,39,156,37],[153,10,157,8,"enemy"],[153,15,157,13],[153,16,157,14,"health"],[153,22,157,20],[153,26,157,24,"Math"],[153,30,157,28],[153,31,157,29,"floor"],[153,36,157,34],[153,37,157,35,"damageResult"],[153,49,157,47],[153,50,157,48,"damage"],[153,56,157,54],[153,59,157,57],[153,62,157,60],[153,63,157,61],[153,64,157,62],[153,65,157,63],[154,10,158,8,"enemy"],[154,15,158,13],[154,16,158,14,"lastDamaged"],[154,27,158,25],[154,30,158,28,"state"],[154,35,158,33],[154,36,158,34,"currentTick"],[154,47,158,45],[155,8,159,6],[155,9,159,7],[155,10,159,8],[156,6,160,4],[158,6,162,4],[159,6,163,4],[159,10,163,8,"ability"],[159,17,163,15],[159,18,163,16,"effects"],[159,25,163,23],[159,26,163,24,"includes"],[159,34,163,32],[159,35,163,33],[159,40,163,38],[159,41,163,39],[159,45,163,43,"ability"],[159,52,163,50],[159,53,163,51,"stats"],[159,58,163,56],[159,59,163,57,"duration"],[159,67,163,65],[159,69,163,67],[160,8,164,6,"state"],[160,13,164,11],[160,14,164,12,"statusEffects"],[160,27,164,25],[160,28,164,26,"addEffect"],[160,37,164,35],[160,38,164,36,"target"],[160,44,164,42],[160,45,164,43,"id"],[160,47,164,45],[160,49,164,47],[161,10,165,8,"id"],[161,12,165,10],[161,14,165,12],[161,17,165,15,"ability"],[161,24,165,22],[161,25,165,23,"id"],[161,27,165,25],[161,33,165,31],[162,10,166,8,"type"],[162,14,166,12],[162,16,166,14],[162,21,166,19],[163,10,167,8,"remainingTicks"],[163,24,167,22],[163,26,167,24,"Math"],[163,30,167,28],[163,31,167,29,"floor"],[163,36,167,34],[163,37,167,35,"ability"],[163,44,167,42],[163,45,167,43,"stats"],[163,50,167,48],[163,51,167,49,"duration"],[163,59,167,57],[163,62,167,60],[163,64,167,62],[163,65,167,63],[164,10,167,65],[165,10,168,8,"tickInterval"],[165,22,168,20],[165,24,168,22],[165,26,168,24],[166,10,168,26],[167,10,169,8,"lastTick"],[167,18,169,16],[167,20,169,18,"state"],[167,25,169,23],[167,26,169,24,"currentTick"],[167,37,169,35],[168,10,170,8,"value"],[168,15,170,13],[168,17,170,15,"Math"],[168,21,170,19],[168,22,170,20,"floor"],[168,27,170,25],[168,28,170,26,"damage"],[168,34,170,32],[168,37,170,35],[168,40,170,38],[168,41,170,39],[169,10,170,41],[170,10,171,8,"stackable"],[170,19,171,17],[170,21,171,19],[171,8,172,6],[171,9,172,7],[171,10,172,8],[172,6,173,4],[173,6,175,4,"console"],[173,13,175,11],[173,14,175,12,"log"],[173,17,175,15],[173,18,175,16],[173,24,175,22,"ability"],[173,31,175,29],[173,32,175,30,"name"],[173,36,175,34],[173,54,175,52,"damageResult"],[173,66,175,64],[173,67,175,65,"damage"],[173,73,175,71],[173,76,175,74,"damageResult"],[173,88,175,86],[173,89,175,87,"isCritical"],[173,99,175,97],[173,102,175,100],[173,112,175,110],[173,115,175,113],[173,117,175,115],[173,119,175,117],[173,120,175,118],[174,4,176,2],[174,5,176,3],[176,4,178,2],[177,4,179,2],[177,10,179,8,"spawnTestEnemy"],[177,24,179,22],[177,27,179,26,"state"],[177,32,179,44],[177,36,179,49],[178,6,180,4],[179,6,181,4],[179,12,181,10,"SCREEN_WIDTH"],[179,24,181,22],[179,27,181,25],[179,30,181,28],[179,31,181,29],[179,32,181,30],[180,6,182,4],[180,12,182,10,"GAME_AREA_HEIGHT"],[180,28,182,26],[180,31,182,29],[180,34,182,32],[180,37,182,35],[180,40,182,38],[180,41,182,39],[180,42,182,40],[181,6,183,4],[181,12,183,10,"ENEMY_SIZE"],[181,22,183,20],[181,25,183,23],[181,27,183,25],[183,6,185,4],[184,6,186,4],[184,12,186,10,"x"],[184,13,186,11],[184,16,186,14,"Math"],[184,20,186,18],[184,21,186,19,"random"],[184,27,186,25],[184,28,186,26],[184,29,186,27],[184,33,186,31,"SCREEN_WIDTH"],[184,45,186,43],[184,48,186,46,"ENEMY_SIZE"],[184,58,186,56],[184,61,186,59],[184,62,186,60],[184,63,186,61],[184,66,186,64,"ENEMY_SIZE"],[184,76,186,74],[184,77,186,75],[184,78,186,76],[185,6,187,4],[185,12,187,10,"y"],[185,13,187,11],[185,16,187,14,"Math"],[185,20,187,18],[185,21,187,19,"random"],[185,27,187,25],[185,28,187,26],[185,29,187,27],[185,33,187,31,"GAME_AREA_HEIGHT"],[185,49,187,47],[185,52,187,50,"ENEMY_SIZE"],[185,62,187,60],[185,65,187,63],[185,66,187,64],[185,67,187,65],[185,70,187,68,"ENEMY_SIZE"],[185,80,187,78],[185,81,187,79],[185,82,187,80],[187,6,189,4],[187,12,189,10,"enemy"],[187,17,189,28],[187,20,189,31],[188,8,190,6,"id"],[188,10,190,8],[188,12,190,10],[188,21,190,19],[188,23,190,21,"enemyCounter"],[188,35,190,33],[188,37,190,35],[189,8,191,6,"name"],[189,12,191,10],[189,14,191,12],[189,24,191,22],[190,8,192,6,"health"],[190,14,192,12],[190,16,192,14],[190,19,192,17],[191,8,193,6,"maxHealth"],[191,17,193,15],[191,19,193,17],[191,22,193,20],[192,8,194,6,"stats"],[192,13,194,11],[192,15,194,13],[193,10,195,8,"attack"],[193,16,195,14],[193,18,195,16],[193,20,195,18],[194,10,196,8,"defense"],[194,17,196,15],[194,19,196,17],[194,21,196,19],[195,10,197,8,"health"],[195,16,197,14],[195,18,197,16],[195,21,197,19],[196,10,198,8,"maxHealth"],[196,19,198,17],[196,21,198,19],[196,24,198,22],[197,10,199,8,"critChance"],[197,20,199,18],[197,22,199,20],[197,23,199,21],[198,10,200,8,"critDamage"],[198,20,200,18],[198,22,200,20],[198,25,200,23],[199,10,201,8,"cooldownReduction"],[199,27,201,25],[199,29,201,27],[200,8,202,6],[200,9,202,7],[201,8,203,6,"position"],[201,16,203,14],[201,18,203,16],[202,10,203,18,"x"],[202,11,203,19],[203,10,203,21,"y"],[204,8,203,23],[204,9,203,24],[205,8,204,6,"lastDamaged"],[205,19,204,17],[205,21,204,19],[206,6,205,4],[206,7,205,5],[207,6,207,4,"state"],[207,11,207,9],[207,12,207,10,"enemies"],[207,19,207,17],[207,20,207,18,"push"],[207,24,207,22],[207,25,207,23,"enemy"],[207,30,207,28],[207,31,207,29],[208,4,208,2],[208,5,208,3],[210,4,210,2],[211,4,211,2],[211,10,211,8,"startCombat"],[211,21,211,19],[211,24,211,22,"startCombat"],[211,25,211,22],[211,30,211,28],[212,6,212,4,"console"],[212,13,212,11],[212,14,212,12,"log"],[212,17,212,15],[212,18,212,16],[212,63,212,61],[212,64,212,62],[213,6,213,4,"setCombatState"],[213,20,213,18],[213,21,213,19,"prev"],[213,25,213,23],[213,29,213,23,"Object"],[213,35,213,23],[213,36,213,23,"assign"],[213,42,213,23],[213,47,213,33,"prev"],[213,51,213,37],[214,8,213,39,"isInCombat"],[214,18,213,49],[214,20,213,51],[215,6,213,55],[215,8,213,58],[215,9,213,59],[217,6,215,4],[218,6,216,4,"combatEngine"],[218,25,216,16],[218,26,216,16,"combatEngine"],[218,38,216,16],[218,39,216,17,"addTickCallback"],[218,54,216,32],[218,55,216,33,"handleCombatTick"],[218,71,216,49],[218,72,216,50],[219,6,217,4,"console"],[219,13,217,11],[219,14,217,12,"log"],[219,17,217,15],[219,18,217,16],[219,62,217,60],[219,63,217,61],[221,6,219,4],[222,6,220,4,"combatEngine"],[222,25,220,16],[222,26,220,16,"combatEngine"],[222,38,220,16],[222,39,220,17,"start"],[222,44,220,22],[222,45,220,23],[222,46,220,24],[223,4,221,2],[223,5,221,3],[225,4,223,2],[226,4,224,2],[226,10,224,8,"stopCombat"],[226,20,224,18],[226,23,224,21,"stopCombat"],[226,24,224,21],[226,29,224,27],[227,6,225,4,"setCombatState"],[227,20,225,18],[227,21,225,19,"prev"],[227,25,225,23],[227,29,225,23,"Object"],[227,35,225,23],[227,36,225,23,"assign"],[227,42,225,23],[227,47,225,33,"prev"],[227,51,225,37],[228,8,225,39,"isInCombat"],[228,18,225,49],[228,20,225,51],[229,6,225,56],[229,8,225,59],[229,9,225,60],[230,6,226,4,"combatEngine"],[230,25,226,16],[230,26,226,16,"combatEngine"],[230,38,226,16],[230,39,226,17,"removeTickCallback"],[230,57,226,35],[230,58,226,36,"handleCombatTick"],[230,74,226,52],[230,75,226,53],[231,4,227,2],[231,5,227,3],[233,4,229,2],[234,4,230,2],[234,10,230,8,"equipAbility"],[234,22,230,20],[234,25,230,23,"equipAbility"],[234,26,230,24,"abilityId"],[234,35,230,41],[234,37,230,43,"slotIndex"],[234,46,230,60],[234,51,230,74],[235,6,231,4],[235,13,231,11,"combatState"],[235,24,231,22],[235,25,231,23,"abilityManager"],[235,39,231,37],[235,40,231,38,"equipAbility"],[235,52,231,50],[235,53,231,51,"abilityId"],[235,62,231,60],[235,64,231,62,"slotIndex"],[235,73,231,71],[235,74,231,72],[236,4,232,2],[236,5,232,3],[237,4,234,2],[237,10,234,8,"getDeck"],[237,17,234,15],[237,20,234,18,"getDeck"],[237,21,234,18],[237,26,234,24],[238,6,235,4],[238,13,235,11,"combatState"],[238,24,235,22],[238,25,235,23,"abilityManager"],[238,39,235,37],[238,40,235,38,"getDeck"],[238,47,235,45],[238,48,235,46],[238,49,235,47],[239,4,236,2],[239,5,236,3],[240,4,238,2],[240,10,238,8,"getAvailableAbilities"],[240,31,238,29],[240,34,238,32,"getAvailableAbilities"],[240,35,238,32],[240,40,238,38],[241,6,239,4],[241,13,239,11,"combatState"],[241,24,239,22],[241,25,239,23,"abilityManager"],[241,39,239,37],[241,40,239,38,"getAvailableAbilities"],[241,61,239,59],[241,62,239,60],[241,63,239,61],[242,4,240,2],[242,5,240,3],[243,4,242,2],[243,10,242,8,"upgradeAbility"],[243,24,242,22],[243,27,242,26,"abilityId"],[243,36,242,43],[243,40,242,57],[244,6,243,4],[244,13,243,11,"combatState"],[244,24,243,22],[244,25,243,23,"abilityManager"],[244,39,243,37],[244,40,243,38,"upgradeAbility"],[244,54,243,52],[244,55,243,53,"abilityId"],[244,64,243,62],[244,65,243,63],[245,4,244,2],[245,5,244,3],[247,4,246,2],[248,4,247,2],[248,8,247,2,"useEffect"],[248,14,247,11],[248,15,247,11,"useEffect"],[248,24,247,11],[248,26,247,12],[248,32,247,18],[249,6,248,4,"combatEngine"],[249,25,248,16],[249,26,248,16,"combatEngine"],[249,38,248,16],[249,39,248,17,"start"],[249,44,248,22],[249,45,248,23],[249,46,248,24],[251,6,250,4],[252,6,251,4,"combatState"],[252,17,251,15],[252,18,251,16,"abilityManager"],[252,32,251,30],[252,33,251,31,"equipAbility"],[252,45,251,43],[252,46,251,44],[252,62,251,60],[252,64,251,62],[252,65,251,63],[252,66,251,64],[253,6,252,4,"combatState"],[253,17,252,15],[253,18,252,16,"abilityManager"],[253,32,252,30],[253,33,252,31,"equipAbility"],[253,45,252,43],[253,46,252,44],[253,61,252,59],[253,63,252,61],[253,64,252,62],[253,65,252,63],[254,6,254,4],[254,13,254,11],[254,19,254,17],[255,8,255,6,"combatEngine"],[255,27,255,18],[255,28,255,18,"combatEngine"],[255,40,255,18],[255,41,255,19,"stop"],[255,45,255,23],[255,46,255,24],[255,47,255,25],[256,6,256,4],[256,7,256,5],[257,4,257,2],[257,5,257,3],[257,7,257,5],[257,9,257,7],[257,10,257,8],[258,4,259,2],[258,10,259,8,"contextValue"],[258,22,259,39],[258,25,259,42],[259,6,260,4,"combatState"],[259,17,260,15],[260,6,261,4,"startCombat"],[260,17,261,15],[261,6,262,4,"stopCombat"],[261,16,262,14],[262,6,263,4,"equipAbility"],[262,18,263,16],[263,6,264,4,"getDeck"],[263,13,264,11],[264,6,265,4,"getAvailableAbilities"],[264,27,265,25],[265,6,266,4,"upgradeAbility"],[266,4,267,2],[266,5,267,3],[267,4,269,2],[267,24,270,4],[267,28,270,4,"_reactJsxDevRuntime"],[267,47,270,4],[267,48,270,4,"jsxDEV"],[267,54,270,4],[267,56,270,5,"CombatContext"],[267,69,270,18],[267,70,270,19,"Provider"],[267,78,270,27],[268,6,270,28,"value"],[268,11,270,33],[268,13,270,35,"contextValue"],[268,25,270,48],[269,6,270,48,"children"],[269,14,270,48],[269,16,271,7,"children"],[270,4,271,15],[271,6,271,15,"fileName"],[271,14,271,15],[271,16,271,15,"_jsxFileName"],[271,28,271,15],[272,6,271,15,"lineNumber"],[272,16,271,15],[273,6,271,15,"columnNumber"],[273,18,271,15],[274,4,271,15],[274,11,272,28],[274,12,272,29],[275,2,274,0],[275,3,274,1],[276,2,274,2,"_s3"],[276,5,274,2],[276,6,46,13,"CombatProvider"],[276,20,46,27],[277,2,46,27,"_c"],[277,4,46,27],[277,7,46,13,"CombatProvider"],[277,21,46,27],[278,2,46,27],[278,6,46,27,"_c"],[278,8,46,27],[279,2,46,27,"$RefreshReg$"],[279,14,46,27],[279,15,46,27,"_c"],[279,17,46,27],[280,0,46,27],[280,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEI;0BCoB;GDE;2BEG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GFC;sBSG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GTiB;yBaG;Gb6B;sBcG;mBXE,uCW;GdQ;qBeG;mBZC,wCY;GfE;uBgBG;GhBE;kBiBE;GjBE;gCkBE;GlBE;yBmBE;GnBE;YoBG;WCO;KDE;GpBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}