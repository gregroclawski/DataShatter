{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`üéØ Enemy killed! Max HP: ${enemy.maxHealth}`);\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      console.log('üîÑ Combat tick running...');\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = Object.assign({}, prev, {\n          currentTick: newTick\n        });\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`üêõ Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`üêõ Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`üéØ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      const enemy = {\n        id: `enemy_${Date.now()}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x: 300,\n          y: 200\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('üöÄ Starting combat, adding tick callback...');\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('üöÄ Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"sjvsZ9aYnAcBXQDfT3kNLzJnF80=\");\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":269,"map":[[10,2,36,0,"Object"],[10,8,36,0],[10,9,36,0,"defineProperty"],[10,23,36,0],[10,24,36,0,"exports"],[10,31,36,0],[11,4,36,0,"enumerable"],[11,14,36,0],[12,4,36,0,"get"],[12,7,36,0],[12,18,36,0,"get"],[12,19,36,0],[13,6,36,0],[13,13,36,0,"useCombat"],[13,22,36,0],[14,4,36,0],[15,2,36,0],[16,2,44,0,"Object"],[16,8,44,0],[16,9,44,0,"defineProperty"],[16,23,44,0],[16,24,44,0,"exports"],[16,31,44,0],[17,4,44,0,"enumerable"],[17,14,44,0],[18,4,44,0,"get"],[18,7,44,0],[18,18,44,0,"get"],[18,19,44,0],[19,6,44,0],[19,13,44,0,"CombatProvider"],[19,27,44,0],[20,4,44,0],[21,2,44,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,3,85],[25,6,3,85,"_reactJsxDevRuntime"],[25,25,3,85],[25,28,3,85,"require"],[25,35,3,85],[25,36,3,85,"_dependencyMap"],[25,50,3,85],[26,2,34,0],[26,8,34,6,"CombatContext"],[26,21,34,19],[26,37,34,22],[26,41,34,22,"createContext"],[26,47,34,35],[26,48,34,35,"createContext"],[26,61,34,35],[26,63,34,67,"undefined"],[26,72,34,76],[26,73,34,77],[27,2,36,7],[27,8,36,13,"useCombat"],[27,17,36,22],[27,20,36,25,"useCombat"],[27,21,36,25],[27,26,36,50],[28,4,36,50,"_s"],[28,6,36,50],[29,4,37,2],[29,10,37,8,"context"],[29,17,37,15],[29,20,37,18],[29,24,37,18,"useContext"],[29,30,37,28],[29,31,37,28,"useContext"],[29,41,37,28],[29,43,37,29,"CombatContext"],[29,56,37,42],[29,57,37,43],[30,4,38,2],[30,8,38,6],[30,9,38,7,"context"],[30,16,38,14],[30,18,38,16],[31,6,39,4],[31,12,39,10],[31,16,39,14,"Error"],[31,21,39,19],[31,22,39,20],[31,70,39,68],[31,71,39,69],[32,4,40,2],[33,4,41,2],[33,11,41,9,"context"],[33,18,41,16],[34,2,42,0],[34,3,42,1],[35,2,42,2,"_s"],[35,4,42,2],[35,5,36,13,"useCombat"],[35,14,36,22],[36,2,44,7],[36,8,44,13,"CombatProvider"],[36,22,44,27],[36,25,44,30,"CombatProvider"],[36,26,44,31],[37,4,44,33,"children"],[38,2,44,67],[38,3,44,68],[38,8,44,73],[39,4,44,73,"_s3"],[39,7,44,73],[40,4,46,2],[40,10,46,8],[40,11,46,9,"combatState"],[40,22,46,20],[40,24,46,22,"setCombatState"],[40,38,46,36],[40,39,46,37],[40,42,46,40],[40,46,46,40,"useState"],[40,52,46,48],[40,53,46,48,"useState"],[40,61,46,48],[40,63,46,62],[41,6,47,4,"isInCombat"],[41,16,47,14],[41,18,47,16],[41,23,47,21],[42,6,48,4,"currentTick"],[42,17,48,15],[42,19,48,17],[42,20,48,18],[43,6,49,4,"enemies"],[43,13,49,11],[43,15,49,13],[43,17,49,15],[44,6,50,4,"abilityManager"],[44,20,50,18],[44,22,50,20],[44,26,50,24,"AbilityManager"],[44,44,50,38],[44,45,50,38,"AbilityManager"],[44,59,50,38],[44,60,50,39],[44,61,50,40],[45,6,51,4,"statusEffects"],[45,19,51,17],[45,21,51,19],[45,25,51,23,"StatusEffectManager"],[45,44,51,42],[45,45,51,42,"StatusEffectManager"],[45,64,51,42],[45,65,51,43],[45,66,51,44],[46,6,52,4,"playerStats"],[46,17,52,15],[46,19,52,17],[47,8,53,6,"attack"],[47,14,53,12],[47,16,53,14],[47,18,53,16],[48,8,53,18],[49,8,54,6,"defense"],[49,15,54,13],[49,17,54,15],[49,18,54,16],[50,8,55,6,"health"],[50,14,55,12],[50,16,55,14],[50,19,55,17],[51,8,56,6,"maxHealth"],[51,17,56,15],[51,19,56,17],[51,22,56,20],[52,8,57,6,"critChance"],[52,18,57,16],[52,20,57,18],[52,21,57,19],[53,8,58,6,"critDamage"],[53,18,58,16],[53,20,58,18],[53,23,58,21],[54,8,59,6,"cooldownReduction"],[54,25,59,23],[54,27,59,25],[55,6,60,4],[56,4,61,2],[56,5,61,3],[56,6,61,4],[58,4,63,2],[59,4,64,2],[59,10,64,8,"handleEnemyKill"],[59,25,64,23],[59,28,64,27,"enemy"],[59,33,64,45],[59,37,64,50],[60,6,65,4,"console"],[60,13,65,11],[60,14,65,12,"log"],[60,17,65,15],[60,18,65,16],[60,46,65,44,"enemy"],[60,51,65,49],[60,52,65,50,"maxHealth"],[60,61,65,59],[60,63,65,61],[60,64,65,62],[61,4,66,2],[61,5,66,3],[63,4,68,2],[64,4,69,2],[64,10,69,8,"handleCombatTick"],[64,26,69,24],[64,29,69,27,"handleCombatTick"],[64,30,69,27],[64,35,69,33],[65,6,69,33],[65,10,69,33,"_s2"],[65,13,69,33],[65,16,69,33,"$RefreshSig$"],[65,28,69,33],[66,6,70,4,"console"],[66,13,70,11],[66,14,70,12,"log"],[66,17,70,15],[66,18,70,16],[66,45,70,43],[66,46,70,44],[67,6,71,4,"_s2"],[67,9,71,4],[67,10,71,4,"setCombatState"],[67,24,71,18],[67,25,71,18,"_s2"],[67,28,71,18],[67,29,71,19,"prev"],[67,33,71,23],[67,37,71,27],[68,8,71,27,"_s2"],[68,11,71,27],[69,8,72,6],[69,14,72,12,"newTick"],[69,21,72,19],[69,24,72,22,"combatEngine"],[69,43,72,34],[69,44,72,34,"combatEngine"],[69,56,72,34],[69,57,72,35,"getCurrentTick"],[69,71,72,49],[69,72,72,50],[69,73,72,51],[70,8,73,6],[70,14,73,12,"newState"],[70,22,73,20],[70,25,73,20,"Object"],[70,31,73,20],[70,32,73,20,"assign"],[70,38,73,20],[70,43,73,28,"prev"],[70,47,73,32],[71,10,73,34,"currentTick"],[71,21,73,45],[71,23,73,47,"newTick"],[72,8,73,54],[72,10,73,56],[73,8,75,6],[73,12,75,10],[73,13,75,11,"newState"],[73,21,75,19],[73,22,75,20,"isInCombat"],[73,32,75,30],[73,34,75,32],[73,41,75,39,"newState"],[73,49,75,47],[75,8,77,6],[76,8,78,6,"newState"],[76,16,78,14],[76,17,78,15,"abilityManager"],[76,31,78,29],[76,32,78,30,"updateCooldowns"],[76,47,78,45],[76,48,78,46,"newTick"],[76,55,78,53],[76,56,78,54],[78,8,80,6],[79,8,81,6],[79,14,81,12,"effectResults"],[79,27,81,25],[79,30,81,28,"newState"],[79,38,81,36],[79,39,81,37,"statusEffects"],[79,52,81,50],[79,53,81,51,"processTick"],[79,64,81,62],[79,65,81,63,"newTick"],[79,72,81,70],[79,73,81,71],[81,8,83,6],[82,8,84,6,"effectResults"],[82,21,84,19],[82,22,84,20,"forEach"],[82,29,84,27],[82,30,84,28],[82,31,84,29,"results"],[82,38,84,36],[82,40,84,38,"entityId"],[82,48,84,46],[82,53,84,51],[83,10,85,8],[83,16,85,14,"enemyIndex"],[83,26,85,24],[83,29,85,27,"newState"],[83,37,85,35],[83,38,85,36,"enemies"],[83,45,85,43],[83,46,85,44,"findIndex"],[83,55,85,53],[83,56,85,54,"e"],[83,57,85,55],[83,61,85,59,"e"],[83,62,85,60],[83,63,85,61,"id"],[83,65,85,63],[83,70,85,68,"entityId"],[83,78,85,76],[83,79,85,77],[84,10,86,8],[84,14,86,12,"enemyIndex"],[84,24,86,22],[84,28,86,26],[84,29,86,27],[84,31,86,29],[85,12,87,10,"results"],[85,19,87,17],[85,20,87,18,"forEach"],[85,27,87,25],[85,28,87,26,"result"],[85,34,87,32],[85,38,87,36],[86,14,88,12,"newState"],[86,22,88,20],[86,23,88,21,"enemies"],[86,30,88,28],[86,31,88,29,"enemyIndex"],[86,41,88,39],[86,42,88,40],[86,43,88,41,"health"],[86,49,88,47],[86,53,88,51,"result"],[86,59,88,57],[86,60,88,58,"damage"],[86,66,88,64],[87,14,89,12,"newState"],[87,22,89,20],[87,23,89,21,"enemies"],[87,30,89,28],[87,31,89,29,"enemyIndex"],[87,41,89,39],[87,42,89,40],[87,43,89,41,"lastDamaged"],[87,54,89,52],[87,57,89,55,"newTick"],[87,64,89,62],[88,12,90,10],[88,13,90,11],[88,14,90,12],[89,10,91,8],[90,8,92,6],[90,9,92,7],[90,10,92,8],[92,8,94,6],[93,8,95,6],[93,13,95,11],[93,17,95,15,"i"],[93,18,95,16],[93,21,95,19],[93,22,95,20],[93,24,95,22,"i"],[93,25,95,23],[93,28,95,26],[93,29,95,27],[93,31,95,29,"i"],[93,32,95,30],[93,34,95,32],[93,36,95,34],[94,10,96,8],[94,14,96,12,"newState"],[94,22,96,20],[94,23,96,21,"abilityManager"],[94,37,96,35],[94,38,96,36,"isAbilityReady"],[94,52,96,50],[94,53,96,51,"i"],[94,54,96,52],[94,55,96,53],[94,59,96,57,"newState"],[94,67,96,65],[94,68,96,66,"enemies"],[94,75,96,73],[94,76,96,74,"length"],[94,82,96,80],[94,85,96,83],[94,86,96,84],[94,88,96,86],[95,12,97,10],[95,16,97,14,"newState"],[95,24,97,22],[95,25,97,23,"abilityManager"],[95,39,97,37],[95,40,97,38,"useAbility"],[95,50,97,48],[95,51,97,49,"i"],[95,52,97,50],[95,54,97,52,"newTick"],[95,61,97,59],[95,62,97,60],[95,64,97,62],[96,14,98,12,"castAbility"],[96,25,98,23],[96,26,98,24,"newState"],[96,34,98,32],[96,36,98,34,"i"],[96,37,98,35],[96,38,98,36],[97,12,99,10],[98,10,100,8],[99,8,101,6],[101,8,103,6],[102,8,104,6],[102,14,104,12,"deadEnemies"],[102,25,104,23],[102,28,104,26,"newState"],[102,36,104,34],[102,37,104,35,"enemies"],[102,44,104,42],[102,45,104,43,"filter"],[102,51,104,49],[102,52,104,50,"enemy"],[102,57,104,55],[102,61,104,59,"enemy"],[102,66,104,64],[102,67,104,65,"health"],[102,73,104,71],[102,77,104,75],[102,78,104,76],[102,79,104,77],[103,8,105,6,"deadEnemies"],[103,19,105,17],[103,20,105,18,"forEach"],[103,27,105,25],[103,28,105,26,"enemy"],[103,33,105,31],[103,37,105,35],[104,10,106,8,"handleEnemyKill"],[104,25,106,23],[104,26,106,24,"enemy"],[104,31,106,29],[104,32,106,30],[105,8,107,6],[105,9,107,7],[105,10,107,8],[107,8,109,6],[108,8,110,6,"newState"],[108,16,110,14],[108,17,110,15,"enemies"],[108,24,110,22],[108,27,110,25,"newState"],[108,35,110,33],[108,36,110,34,"enemies"],[108,43,110,41],[108,44,110,42,"filter"],[108,50,110,48],[108,51,110,49,"enemy"],[108,56,110,54],[108,60,110,58,"enemy"],[108,65,110,63],[108,66,110,64,"health"],[108,72,110,70],[108,75,110,73],[108,76,110,74],[108,77,110,75],[110,8,112,6],[111,8,113,6],[111,14,113,12,"MAX_ENEMIES"],[111,25,113,23],[111,28,113,26],[111,30,113,28],[112,8,114,6,"console"],[112,15,114,13],[112,16,114,14,"log"],[112,19,114,17],[112,20,114,18],[112,53,114,51,"newState"],[112,61,114,59],[112,62,114,60,"enemies"],[112,69,114,67],[112,70,114,68,"length"],[112,76,114,74],[112,85,114,83,"MAX_ENEMIES"],[112,96,114,94],[112,98,114,96],[112,99,114,97],[113,8,115,6],[113,15,115,13,"newState"],[113,23,115,21],[113,24,115,22,"enemies"],[113,31,115,29],[113,32,115,30,"length"],[113,38,115,36],[113,41,115,39,"MAX_ENEMIES"],[113,52,115,50],[113,54,115,52],[114,10,116,8,"console"],[114,17,116,15],[114,18,116,16,"log"],[114,21,116,19],[114,22,116,20],[114,43,116,41,"newState"],[114,51,116,49],[114,52,116,50,"enemies"],[114,59,116,57],[114,60,116,58,"length"],[114,66,116,64],[114,69,116,67],[114,70,116,68],[114,74,116,72,"MAX_ENEMIES"],[114,85,116,83],[114,87,116,85],[114,88,116,86],[115,10,117,8,"spawnTestEnemy"],[115,24,117,22],[115,25,117,23,"newState"],[115,33,117,31],[115,34,117,32],[116,8,118,6],[117,8,120,6],[117,15,120,13,"newState"],[117,23,120,21],[118,6,121,4],[118,7,121,5],[118,47,121,6],[119,4,122,2],[119,5,122,3],[121,4,124,2],[122,4,125,2],[122,10,125,8,"castAbility"],[122,21,125,19],[122,24,125,22,"castAbility"],[122,25,125,23,"state"],[122,30,125,41],[122,32,125,43,"slotIndex"],[122,41,125,60],[122,46,125,65],[123,6,126,4],[123,12,126,10,"deck"],[123,16,126,14],[123,19,126,17,"state"],[123,24,126,22],[123,25,126,23,"abilityManager"],[123,39,126,37],[123,40,126,38,"getDeck"],[123,47,126,45],[123,48,126,46],[123,49,126,47],[124,6,127,4],[124,12,127,10,"ability"],[124,19,127,17],[124,22,127,20,"deck"],[124,26,127,24],[124,27,127,25,"slots"],[124,32,127,30],[124,33,127,31,"slotIndex"],[124,42,127,40],[124,43,127,41],[125,6,128,4],[125,10,128,8],[125,11,128,9,"ability"],[125,18,128,16],[125,20,128,18],[127,6,130,4],[128,6,131,4],[128,12,131,10,"target"],[128,18,131,16],[128,21,131,19,"state"],[128,26,131,24],[128,27,131,25,"enemies"],[128,34,131,32],[128,35,131,33],[128,36,131,34],[128,37,131,35],[129,6,132,4],[129,10,132,8],[129,11,132,9,"target"],[129,17,132,15],[129,19,132,17],[131,6,134,4],[132,6,135,4],[132,10,135,8,"damage"],[132,16,135,14],[132,19,135,17,"ability"],[132,26,135,24],[132,27,135,25,"stats"],[132,32,135,30],[132,33,135,31,"baseDamage"],[132,43,135,41],[134,6,137,4],[135,6,138,4,"deck"],[135,10,138,8],[135,11,138,9,"activeSynergies"],[135,26,138,24],[135,27,138,25,"forEach"],[135,34,138,32],[135,35,138,33,"synergy"],[135,42,138,40],[135,46,138,44],[136,8,139,6],[136,12,139,10,"synergy"],[136,19,139,17],[136,20,139,18,"bonus"],[136,25,139,23],[136,26,139,24,"damageBonus"],[136,37,139,35],[136,41,140,10,"synergy"],[136,48,140,17],[136,49,140,18,"requiredTags"],[136,61,140,30],[136,62,140,31,"some"],[136,66,140,35],[136,67,140,36,"tag"],[136,70,140,39],[136,74,140,43,"ability"],[136,81,140,50],[136,82,140,51,"tags"],[136,86,140,55],[136,87,140,56,"includes"],[136,95,140,64],[136,96,140,65,"tag"],[136,99,140,68],[136,100,140,69],[136,101,140,70],[136,103,140,72],[137,10,141,8,"damage"],[137,16,141,14],[137,20,141,19],[137,21,141,20],[137,24,141,23,"synergy"],[137,31,141,30],[137,32,141,31,"bonus"],[137,37,141,36],[137,38,141,37,"damageBonus"],[137,49,141,48],[137,52,141,51],[137,55,141,55],[138,8,142,6],[139,6,143,4],[139,7,143,5],[139,8,143,6],[141,6,145,4],[142,6,146,4],[142,12,146,10,"damageResult"],[142,24,146,22],[142,27,146,25,"DamageCalculator"],[142,46,146,41],[142,47,146,41,"DamageCalculator"],[142,63,146,41],[142,64,146,42,"calculateDamage"],[142,79,146,57],[142,80,146,58,"damage"],[142,86,146,64],[142,88,146,66,"state"],[142,93,146,71],[142,94,146,72,"playerStats"],[142,105,146,83],[142,107,146,85,"target"],[142,113,146,91],[142,114,146,92,"stats"],[142,119,146,97],[142,120,146,98],[144,6,148,4],[145,6,149,4],[145,10,149,8,"ability"],[145,17,149,15],[145,18,149,16,"effects"],[145,25,149,23],[145,26,149,24,"includes"],[145,34,149,32],[145,35,149,33],[145,49,149,47],[145,50,149,48],[145,52,149,50],[146,8,150,6,"target"],[146,14,150,12],[146,15,150,13,"health"],[146,21,150,19],[146,25,150,23,"damageResult"],[146,37,150,35],[146,38,150,36,"damage"],[146,44,150,42],[147,8,151,6,"target"],[147,14,151,12],[147,15,151,13,"lastDamaged"],[147,26,151,24],[147,29,151,27,"state"],[147,34,151,32],[147,35,151,33,"currentTick"],[147,46,151,44],[148,6,152,4],[148,7,152,5],[148,13,152,11],[148,17,152,15,"ability"],[148,24,152,22],[148,25,152,23,"effects"],[148,32,152,30],[148,33,152,31,"includes"],[148,41,152,39],[148,42,152,40],[148,47,152,45],[148,48,152,46],[148,50,152,48],[149,8,153,6],[150,8,154,6,"state"],[150,13,154,11],[150,14,154,12,"enemies"],[150,21,154,19],[150,22,154,20,"forEach"],[150,29,154,27],[150,30,154,28,"enemy"],[150,35,154,33],[150,39,154,37],[151,10,155,8,"enemy"],[151,15,155,13],[151,16,155,14,"health"],[151,22,155,20],[151,26,155,24,"Math"],[151,30,155,28],[151,31,155,29,"floor"],[151,36,155,34],[151,37,155,35,"damageResult"],[151,49,155,47],[151,50,155,48,"damage"],[151,56,155,54],[151,59,155,57],[151,62,155,60],[151,63,155,61],[151,64,155,62],[151,65,155,63],[152,10,156,8,"enemy"],[152,15,156,13],[152,16,156,14,"lastDamaged"],[152,27,156,25],[152,30,156,28,"state"],[152,35,156,33],[152,36,156,34,"currentTick"],[152,47,156,45],[153,8,157,6],[153,9,157,7],[153,10,157,8],[154,6,158,4],[156,6,160,4],[157,6,161,4],[157,10,161,8,"ability"],[157,17,161,15],[157,18,161,16,"effects"],[157,25,161,23],[157,26,161,24,"includes"],[157,34,161,32],[157,35,161,33],[157,40,161,38],[157,41,161,39],[157,45,161,43,"ability"],[157,52,161,50],[157,53,161,51,"stats"],[157,58,161,56],[157,59,161,57,"duration"],[157,67,161,65],[157,69,161,67],[158,8,162,6,"state"],[158,13,162,11],[158,14,162,12,"statusEffects"],[158,27,162,25],[158,28,162,26,"addEffect"],[158,37,162,35],[158,38,162,36,"target"],[158,44,162,42],[158,45,162,43,"id"],[158,47,162,45],[158,49,162,47],[159,10,163,8,"id"],[159,12,163,10],[159,14,163,12],[159,17,163,15,"ability"],[159,24,163,22],[159,25,163,23,"id"],[159,27,163,25],[159,33,163,31],[160,10,164,8,"type"],[160,14,164,12],[160,16,164,14],[160,21,164,19],[161,10,165,8,"remainingTicks"],[161,24,165,22],[161,26,165,24,"Math"],[161,30,165,28],[161,31,165,29,"floor"],[161,36,165,34],[161,37,165,35,"ability"],[161,44,165,42],[161,45,165,43,"stats"],[161,50,165,48],[161,51,165,49,"duration"],[161,59,165,57],[161,62,165,60],[161,64,165,62],[161,65,165,63],[162,10,165,65],[163,10,166,8,"tickInterval"],[163,22,166,20],[163,24,166,22],[163,26,166,24],[164,10,166,26],[165,10,167,8,"lastTick"],[165,18,167,16],[165,20,167,18,"state"],[165,25,167,23],[165,26,167,24,"currentTick"],[165,37,167,35],[166,10,168,8,"value"],[166,15,168,13],[166,17,168,15,"Math"],[166,21,168,19],[166,22,168,20,"floor"],[166,27,168,25],[166,28,168,26,"damage"],[166,34,168,32],[166,37,168,35],[166,40,168,38],[166,41,168,39],[167,10,168,41],[168,10,169,8,"stackable"],[168,19,169,17],[168,21,169,19],[169,8,170,6],[169,9,170,7],[169,10,170,8],[170,6,171,4],[171,6,173,4,"console"],[171,13,173,11],[171,14,173,12,"log"],[171,17,173,15],[171,18,173,16],[171,24,173,22,"ability"],[171,31,173,29],[171,32,173,30,"name"],[171,36,173,34],[171,54,173,52,"damageResult"],[171,66,173,64],[171,67,173,65,"damage"],[171,73,173,71],[171,76,173,74,"damageResult"],[171,88,173,86],[171,89,173,87,"isCritical"],[171,99,173,97],[171,102,173,100],[171,112,173,110],[171,115,173,113],[171,117,173,115],[171,119,173,117],[171,120,173,118],[172,4,174,2],[172,5,174,3],[174,4,176,2],[175,4,177,2],[175,10,177,8,"spawnTestEnemy"],[175,24,177,22],[175,27,177,26,"state"],[175,32,177,44],[175,36,177,49],[176,6,178,4],[176,12,178,10,"enemy"],[176,17,178,28],[176,20,178,31],[177,8,179,6,"id"],[177,10,179,8],[177,12,179,10],[177,21,179,19,"Date"],[177,25,179,23],[177,26,179,24,"now"],[177,29,179,27],[177,30,179,28],[177,31,179,29],[177,33,179,31],[178,8,180,6,"name"],[178,12,180,10],[178,14,180,12],[178,24,180,22],[179,8,181,6,"health"],[179,14,181,12],[179,16,181,14],[179,19,181,17],[180,8,182,6,"maxHealth"],[180,17,182,15],[180,19,182,17],[180,22,182,20],[181,8,183,6,"stats"],[181,13,183,11],[181,15,183,13],[182,10,184,8,"attack"],[182,16,184,14],[182,18,184,16],[182,20,184,18],[183,10,185,8,"defense"],[183,17,185,15],[183,19,185,17],[183,21,185,19],[184,10,186,8,"health"],[184,16,186,14],[184,18,186,16],[184,21,186,19],[185,10,187,8,"maxHealth"],[185,19,187,17],[185,21,187,19],[185,24,187,22],[186,10,188,8,"critChance"],[186,20,188,18],[186,22,188,20],[186,23,188,21],[187,10,189,8,"critDamage"],[187,20,189,18],[187,22,189,20],[187,25,189,23],[188,10,190,8,"cooldownReduction"],[188,27,190,25],[188,29,190,27],[189,8,191,6],[189,9,191,7],[190,8,192,6,"position"],[190,16,192,14],[190,18,192,16],[191,10,192,18,"x"],[191,11,192,19],[191,13,192,21],[191,16,192,24],[192,10,192,26,"y"],[192,11,192,27],[192,13,192,29],[193,8,192,33],[193,9,192,34],[194,8,193,6,"lastDamaged"],[194,19,193,17],[194,21,193,19],[195,6,194,4],[195,7,194,5],[196,6,196,4,"state"],[196,11,196,9],[196,12,196,10,"enemies"],[196,19,196,17],[196,20,196,18,"push"],[196,24,196,22],[196,25,196,23,"enemy"],[196,30,196,28],[196,31,196,29],[197,4,197,2],[197,5,197,3],[199,4,199,2],[200,4,200,2],[200,10,200,8,"startCombat"],[200,21,200,19],[200,24,200,22,"startCombat"],[200,25,200,22],[200,30,200,28],[201,6,201,4,"console"],[201,13,201,11],[201,14,201,12,"log"],[201,17,201,15],[201,18,201,16],[201,63,201,61],[201,64,201,62],[202,6,202,4,"setCombatState"],[202,20,202,18],[202,21,202,19,"prev"],[202,25,202,23],[202,29,202,23,"Object"],[202,35,202,23],[202,36,202,23,"assign"],[202,42,202,23],[202,47,202,33,"prev"],[202,51,202,37],[203,8,202,39,"isInCombat"],[203,18,202,49],[203,20,202,51],[204,6,202,55],[204,8,202,58],[204,9,202,59],[206,6,204,4],[207,6,205,4,"combatEngine"],[207,25,205,16],[207,26,205,16,"combatEngine"],[207,38,205,16],[207,39,205,17,"addTickCallback"],[207,54,205,32],[207,55,205,33,"handleCombatTick"],[207,71,205,49],[207,72,205,50],[208,6,206,4,"console"],[208,13,206,11],[208,14,206,12,"log"],[208,17,206,15],[208,18,206,16],[208,62,206,60],[208,63,206,61],[210,6,208,4],[211,6,209,4,"combatEngine"],[211,25,209,16],[211,26,209,16,"combatEngine"],[211,38,209,16],[211,39,209,17,"start"],[211,44,209,22],[211,45,209,23],[211,46,209,24],[212,4,210,2],[212,5,210,3],[214,4,212,2],[215,4,213,2],[215,10,213,8,"stopCombat"],[215,20,213,18],[215,23,213,21,"stopCombat"],[215,24,213,21],[215,29,213,27],[216,6,214,4,"setCombatState"],[216,20,214,18],[216,21,214,19,"prev"],[216,25,214,23],[216,29,214,23,"Object"],[216,35,214,23],[216,36,214,23,"assign"],[216,42,214,23],[216,47,214,33,"prev"],[216,51,214,37],[217,8,214,39,"isInCombat"],[217,18,214,49],[217,20,214,51],[218,6,214,56],[218,8,214,59],[218,9,214,60],[219,6,215,4,"combatEngine"],[219,25,215,16],[219,26,215,16,"combatEngine"],[219,38,215,16],[219,39,215,17,"removeTickCallback"],[219,57,215,35],[219,58,215,36,"handleCombatTick"],[219,74,215,52],[219,75,215,53],[220,4,216,2],[220,5,216,3],[222,4,218,2],[223,4,219,2],[223,10,219,8,"equipAbility"],[223,22,219,20],[223,25,219,23,"equipAbility"],[223,26,219,24,"abilityId"],[223,35,219,41],[223,37,219,43,"slotIndex"],[223,46,219,60],[223,51,219,74],[224,6,220,4],[224,13,220,11,"combatState"],[224,24,220,22],[224,25,220,23,"abilityManager"],[224,39,220,37],[224,40,220,38,"equipAbility"],[224,52,220,50],[224,53,220,51,"abilityId"],[224,62,220,60],[224,64,220,62,"slotIndex"],[224,73,220,71],[224,74,220,72],[225,4,221,2],[225,5,221,3],[226,4,223,2],[226,10,223,8,"getDeck"],[226,17,223,15],[226,20,223,18,"getDeck"],[226,21,223,18],[226,26,223,24],[227,6,224,4],[227,13,224,11,"combatState"],[227,24,224,22],[227,25,224,23,"abilityManager"],[227,39,224,37],[227,40,224,38,"getDeck"],[227,47,224,45],[227,48,224,46],[227,49,224,47],[228,4,225,2],[228,5,225,3],[229,4,227,2],[229,10,227,8,"getAvailableAbilities"],[229,31,227,29],[229,34,227,32,"getAvailableAbilities"],[229,35,227,32],[229,40,227,38],[230,6,228,4],[230,13,228,11,"combatState"],[230,24,228,22],[230,25,228,23,"abilityManager"],[230,39,228,37],[230,40,228,38,"getAvailableAbilities"],[230,61,228,59],[230,62,228,60],[230,63,228,61],[231,4,229,2],[231,5,229,3],[232,4,231,2],[232,10,231,8,"upgradeAbility"],[232,24,231,22],[232,27,231,26,"abilityId"],[232,36,231,43],[232,40,231,57],[233,6,232,4],[233,13,232,11,"combatState"],[233,24,232,22],[233,25,232,23,"abilityManager"],[233,39,232,37],[233,40,232,38,"upgradeAbility"],[233,54,232,52],[233,55,232,53,"abilityId"],[233,64,232,62],[233,65,232,63],[234,4,233,2],[234,5,233,3],[236,4,235,2],[237,4,236,2],[237,8,236,2,"useEffect"],[237,14,236,11],[237,15,236,11,"useEffect"],[237,24,236,11],[237,26,236,12],[237,32,236,18],[238,6,237,4,"combatEngine"],[238,25,237,16],[238,26,237,16,"combatEngine"],[238,38,237,16],[238,39,237,17,"start"],[238,44,237,22],[238,45,237,23],[238,46,237,24],[240,6,239,4],[241,6,240,4,"combatState"],[241,17,240,15],[241,18,240,16,"abilityManager"],[241,32,240,30],[241,33,240,31,"equipAbility"],[241,45,240,43],[241,46,240,44],[241,62,240,60],[241,64,240,62],[241,65,240,63],[241,66,240,64],[242,6,241,4,"combatState"],[242,17,241,15],[242,18,241,16,"abilityManager"],[242,32,241,30],[242,33,241,31,"equipAbility"],[242,45,241,43],[242,46,241,44],[242,61,241,59],[242,63,241,61],[242,64,241,62],[242,65,241,63],[243,6,243,4],[243,13,243,11],[243,19,243,17],[244,8,244,6,"combatEngine"],[244,27,244,18],[244,28,244,18,"combatEngine"],[244,40,244,18],[244,41,244,19,"stop"],[244,45,244,23],[244,46,244,24],[244,47,244,25],[245,6,245,4],[245,7,245,5],[246,4,246,2],[246,5,246,3],[246,7,246,5],[246,9,246,7],[246,10,246,8],[247,4,248,2],[247,10,248,8,"contextValue"],[247,22,248,39],[247,25,248,42],[248,6,249,4,"combatState"],[248,17,249,15],[249,6,250,4,"startCombat"],[249,17,250,15],[250,6,251,4,"stopCombat"],[250,16,251,14],[251,6,252,4,"equipAbility"],[251,18,252,16],[252,6,253,4,"getDeck"],[252,13,253,11],[253,6,254,4,"getAvailableAbilities"],[253,27,254,25],[254,6,255,4,"upgradeAbility"],[255,4,256,2],[255,5,256,3],[256,4,258,2],[256,24,259,4],[256,28,259,4,"_reactJsxDevRuntime"],[256,47,259,4],[256,48,259,4,"jsxDEV"],[256,54,259,4],[256,56,259,5,"CombatContext"],[256,69,259,18],[256,70,259,19,"Provider"],[256,78,259,27],[257,6,259,28,"value"],[257,11,259,33],[257,13,259,35,"contextValue"],[257,25,259,48],[258,6,259,48,"children"],[258,14,259,48],[258,16,260,7,"children"],[259,4,260,15],[260,6,260,15,"fileName"],[260,14,260,15],[260,16,260,15,"_jsxFileName"],[260,28,260,15],[261,6,260,15,"lineNumber"],[261,16,260,15],[262,6,260,15,"columnNumber"],[262,18,260,15],[263,4,260,15],[263,11,261,28],[263,12,261,29],[264,2,263,0],[264,3,263,1],[265,2,263,2,"_s3"],[265,5,263,2],[265,6,44,13,"CombatProvider"],[265,20,44,27],[266,2,44,27,"_c"],[266,4,44,27],[266,7,44,13,"CombatProvider"],[266,21,44,27],[267,2,44,27],[267,6,44,27,"_c"],[267,8,44,27],[268,2,44,27,"$RefreshReg$"],[268,14,44,27],[268,15,44,27,"_c"],[268,17,44,27],[269,0,44,27],[269,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEE;0BCoB;GDE;2BEG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GFC;sBSG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GTiB;yBaG;GboB;sBcG;mBXE,uCW;GdQ;qBeG;mBZC,wCY;GfE;uBgBG;GhBE;kBiBE;GjBE;gCkBE;GlBE;yBmBE;GnBE;YoBG;WCO;KDE;GpBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}