{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":283},"end":{"line":4,"column":40,"index":323}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _GameContext = require(_dependencyMap[3], \"./GameContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[4], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  let enemyCounter = 0; // Global counter for unique enemy IDs\n\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const {\n      updateNinja\n    } = (0, _GameContext.useGame)();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 10,\n        // Default stats - will be updated by game context\n        defense: 5,\n        health: 100,\n        maxHealth: 100,\n        critChance: 3,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Function to handle enemy kills - just log for now, main component will handle rewards\n    const handleEnemyKill = enemy => {\n      console.log(`üéØ Enemy killed! Max HP: ${enemy.maxHealth}`);\n\n      // Award XP and gold directly using useGame hook\n      const xpReward = 50;\n      const goldReward = 10;\n      console.log(`üí∞ Awarding ${xpReward} XP and ${goldReward} gold for kill`);\n      updateNinja(prev => {\n        console.log(`üìä XP before: ${prev.experience}, after: ${prev.experience + xpReward}`);\n        return {\n          experience: prev.experience + xpReward,\n          gold: prev.gold + goldReward\n        };\n      });\n    };\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      console.log('üîÑ Combat tick running...');\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = Object.assign({}, prev, {\n          currentTick: newTick\n        });\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Handle dead enemies and reward XP\n        const deadEnemies = newState.enemies.filter(enemy => enemy.health <= 0);\n        deadEnemies.forEach(enemy => {\n          handleEnemyKill(enemy);\n        });\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Maintain 10 enemies on screen\n        const MAX_ENEMIES = 10;\n        console.log(`üêõ Enemy spawn check: Current=${newState.enemies.length}, Max=${MAX_ENEMIES}`);\n        while (newState.enemies.length < MAX_ENEMIES) {\n          console.log(`üêõ Spawning enemy ${newState.enemies.length + 1}/${MAX_ENEMIES}`);\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`üéØ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      // Get screen dimensions for proper positioning\n      const SCREEN_WIDTH = 390; // Mobile width\n      const GAME_AREA_HEIGHT = 844 - 250; // Screen height minus bottom tabs\n      const ENEMY_SIZE = 35;\n\n      // Random position within game area bounds (like ninja positioning)\n      const x = Math.random() * (SCREEN_WIDTH - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n      const y = Math.random() * (GAME_AREA_HEIGHT - ENEMY_SIZE * 2) + ENEMY_SIZE; // Avoid edges\n\n      const enemy = {\n        id: `enemy_${++enemyCounter}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x,\n          y\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      console.log('üöÄ Starting combat, adding tick callback...');\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      console.log('üöÄ Tick callback added, starting engine...');\n\n      // Start the engine\n      _engineCombatEngine.combatEngine.start();\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"9CsFzlzz4PHf1Q0yBRSmcIqP5fo=\", false, function () {\n    return [_GameContext.useGame];\n  });\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":298,"map":[[10,2,37,0,"Object"],[10,8,37,0],[10,9,37,0,"defineProperty"],[10,23,37,0],[10,24,37,0,"exports"],[10,31,37,0],[11,4,37,0,"enumerable"],[11,14,37,0],[12,4,37,0,"get"],[12,7,37,0],[12,18,37,0,"get"],[12,19,37,0],[13,6,37,0],[13,13,37,0,"useCombat"],[13,22,37,0],[14,4,37,0],[15,2,37,0],[16,2,47,0,"Object"],[16,8,47,0],[16,9,47,0,"defineProperty"],[16,23,47,0],[16,24,47,0,"exports"],[16,31,47,0],[17,4,47,0,"enumerable"],[17,14,47,0],[18,4,47,0,"get"],[18,7,47,0],[18,18,47,0,"get"],[18,19,47,0],[19,6,47,0],[19,13,47,0,"CombatProvider"],[19,27,47,0],[20,4,47,0],[21,2,47,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,4,0],[25,6,4,0,"_GameContext"],[25,18,4,0],[25,21,4,0,"require"],[25,28,4,0],[25,29,4,0,"_dependencyMap"],[25,43,4,0],[26,2,4,40],[26,6,4,40,"_reactJsxDevRuntime"],[26,25,4,40],[26,28,4,40,"require"],[26,35,4,40],[26,36,4,40,"_dependencyMap"],[26,50,4,40],[27,2,35,0],[27,8,35,6,"CombatContext"],[27,21,35,19],[27,37,35,22],[27,41,35,22,"createContext"],[27,47,35,35],[27,48,35,35,"createContext"],[27,61,35,35],[27,63,35,67,"undefined"],[27,72,35,76],[27,73,35,77],[28,2,37,7],[28,8,37,13,"useCombat"],[28,17,37,22],[28,20,37,25,"useCombat"],[28,21,37,25],[28,26,37,50],[29,4,37,50,"_s"],[29,6,37,50],[30,4,38,2],[30,10,38,8,"context"],[30,17,38,15],[30,20,38,18],[30,24,38,18,"useContext"],[30,30,38,28],[30,31,38,28,"useContext"],[30,41,38,28],[30,43,38,29,"CombatContext"],[30,56,38,42],[30,57,38,43],[31,4,39,2],[31,8,39,6],[31,9,39,7,"context"],[31,16,39,14],[31,18,39,16],[32,6,40,4],[32,12,40,10],[32,16,40,14,"Error"],[32,21,40,19],[32,22,40,20],[32,70,40,68],[32,71,40,69],[33,4,41,2],[34,4,42,2],[34,11,42,9,"context"],[34,18,42,16],[35,2,43,0],[35,3,43,1],[36,2,43,2,"_s"],[36,4,43,2],[36,5,37,13,"useCombat"],[36,14,37,22],[37,2,45,0],[37,6,45,4,"enemyCounter"],[37,18,45,16],[37,21,45,19],[37,22,45,20],[37,23,45,21],[37,24,45,22],[39,2,47,7],[39,8,47,13,"CombatProvider"],[39,22,47,27],[39,25,47,30,"CombatProvider"],[39,26,47,31],[40,4,47,33,"children"],[41,2,47,67],[41,3,47,68],[41,8,47,73],[42,4,47,73,"_s3"],[42,7,47,73],[43,4,48,2],[43,10,48,8],[44,6,48,10,"updateNinja"],[45,4,48,22],[45,5,48,23],[45,8,48,26],[45,12,48,26,"useGame"],[45,24,48,33],[45,25,48,33,"useGame"],[45,32,48,33],[45,34,48,34],[45,35,48,35],[46,4,50,2],[46,10,50,8],[46,11,50,9,"combatState"],[46,22,50,20],[46,24,50,22,"setCombatState"],[46,38,50,36],[46,39,50,37],[46,42,50,40],[46,46,50,40,"useState"],[46,52,50,48],[46,53,50,48,"useState"],[46,61,50,48],[46,63,50,62],[47,6,51,4,"isInCombat"],[47,16,51,14],[47,18,51,16],[47,23,51,21],[48,6,52,4,"currentTick"],[48,17,52,15],[48,19,52,17],[48,20,52,18],[49,6,53,4,"enemies"],[49,13,53,11],[49,15,53,13],[49,17,53,15],[50,6,54,4,"abilityManager"],[50,20,54,18],[50,22,54,20],[50,26,54,24,"AbilityManager"],[50,44,54,38],[50,45,54,38,"AbilityManager"],[50,59,54,38],[50,60,54,39],[50,61,54,40],[51,6,55,4,"statusEffects"],[51,19,55,17],[51,21,55,19],[51,25,55,23,"StatusEffectManager"],[51,44,55,42],[51,45,55,42,"StatusEffectManager"],[51,64,55,42],[51,65,55,43],[51,66,55,44],[52,6,56,4,"playerStats"],[52,17,56,15],[52,19,56,17],[53,8,57,6,"attack"],[53,14,57,12],[53,16,57,14],[53,18,57,16],[54,8,57,18],[55,8,58,6,"defense"],[55,15,58,13],[55,17,58,15],[55,18,58,16],[56,8,59,6,"health"],[56,14,59,12],[56,16,59,14],[56,19,59,17],[57,8,60,6,"maxHealth"],[57,17,60,15],[57,19,60,17],[57,22,60,20],[58,8,61,6,"critChance"],[58,18,61,16],[58,20,61,18],[58,21,61,19],[59,8,62,6,"critDamage"],[59,18,62,16],[59,20,62,18],[59,23,62,21],[60,8,63,6,"cooldownReduction"],[60,25,63,23],[60,27,63,25],[61,6,64,4],[62,4,65,2],[62,5,65,3],[62,6,65,4],[64,4,67,2],[65,4,68,2],[65,10,68,8,"handleEnemyKill"],[65,25,68,23],[65,28,68,27,"enemy"],[65,33,68,45],[65,37,68,50],[66,6,69,4,"console"],[66,13,69,11],[66,14,69,12,"log"],[66,17,69,15],[66,18,69,16],[66,46,69,44,"enemy"],[66,51,69,49],[66,52,69,50,"maxHealth"],[66,61,69,59],[66,63,69,61],[66,64,69,62],[68,6,71,4],[69,6,72,4],[69,12,72,10,"xpReward"],[69,20,72,18],[69,23,72,21],[69,25,72,23],[70,6,73,4],[70,12,73,10,"goldReward"],[70,22,73,20],[70,25,73,23],[70,27,73,25],[71,6,75,4,"console"],[71,13,75,11],[71,14,75,12,"log"],[71,17,75,15],[71,18,75,16],[71,33,75,31,"xpReward"],[71,41,75,39],[71,52,75,50,"goldReward"],[71,62,75,60],[71,78,75,76],[71,79,75,77],[72,6,77,4,"updateNinja"],[72,17,77,15],[72,18,77,17,"prev"],[72,22,77,21],[72,26,77,26],[73,8,78,6,"console"],[73,15,78,13],[73,16,78,14,"log"],[73,19,78,17],[73,20,78,18],[73,37,78,35,"prev"],[73,41,78,39],[73,42,78,40,"experience"],[73,52,78,50],[73,64,78,62,"prev"],[73,68,78,66],[73,69,78,67,"experience"],[73,79,78,77],[73,82,78,80,"xpReward"],[73,90,78,88],[73,92,78,90],[73,93,78,91],[74,8,79,6],[74,15,79,13],[75,10,80,8,"experience"],[75,20,80,18],[75,22,80,20,"prev"],[75,26,80,24],[75,27,80,25,"experience"],[75,37,80,35],[75,40,80,38,"xpReward"],[75,48,80,46],[76,10,81,8,"gold"],[76,14,81,12],[76,16,81,14,"prev"],[76,20,81,18],[76,21,81,19,"gold"],[76,25,81,23],[76,28,81,26,"goldReward"],[77,8,82,6],[77,9,82,7],[78,6,83,4],[78,7,83,5],[78,8,83,6],[79,4,84,2],[79,5,84,3],[81,4,86,2],[82,4,87,2],[82,10,87,8,"handleCombatTick"],[82,26,87,24],[82,29,87,27,"handleCombatTick"],[82,30,87,27],[82,35,87,33],[83,6,87,33],[83,10,87,33,"_s2"],[83,13,87,33],[83,16,87,33,"$RefreshSig$"],[83,28,87,33],[84,6,88,4,"console"],[84,13,88,11],[84,14,88,12,"log"],[84,17,88,15],[84,18,88,16],[84,45,88,43],[84,46,88,44],[85,6,89,4,"_s2"],[85,9,89,4],[85,10,89,4,"setCombatState"],[85,24,89,18],[85,25,89,18,"_s2"],[85,28,89,18],[85,29,89,19,"prev"],[85,33,89,23],[85,37,89,27],[86,8,89,27,"_s2"],[86,11,89,27],[87,8,90,6],[87,14,90,12,"newTick"],[87,21,90,19],[87,24,90,22,"combatEngine"],[87,43,90,34],[87,44,90,34,"combatEngine"],[87,56,90,34],[87,57,90,35,"getCurrentTick"],[87,71,90,49],[87,72,90,50],[87,73,90,51],[88,8,91,6],[88,14,91,12,"newState"],[88,22,91,20],[88,25,91,20,"Object"],[88,31,91,20],[88,32,91,20,"assign"],[88,38,91,20],[88,43,91,28,"prev"],[88,47,91,32],[89,10,91,34,"currentTick"],[89,21,91,45],[89,23,91,47,"newTick"],[90,8,91,54],[90,10,91,56],[91,8,93,6],[91,12,93,10],[91,13,93,11,"newState"],[91,21,93,19],[91,22,93,20,"isInCombat"],[91,32,93,30],[91,34,93,32],[91,41,93,39,"newState"],[91,49,93,47],[93,8,95,6],[94,8,96,6,"newState"],[94,16,96,14],[94,17,96,15,"abilityManager"],[94,31,96,29],[94,32,96,30,"updateCooldowns"],[94,47,96,45],[94,48,96,46,"newTick"],[94,55,96,53],[94,56,96,54],[96,8,98,6],[97,8,99,6],[97,14,99,12,"effectResults"],[97,27,99,25],[97,30,99,28,"newState"],[97,38,99,36],[97,39,99,37,"statusEffects"],[97,52,99,50],[97,53,99,51,"processTick"],[97,64,99,62],[97,65,99,63,"newTick"],[97,72,99,70],[97,73,99,71],[99,8,101,6],[100,8,102,6,"effectResults"],[100,21,102,19],[100,22,102,20,"forEach"],[100,29,102,27],[100,30,102,28],[100,31,102,29,"results"],[100,38,102,36],[100,40,102,38,"entityId"],[100,48,102,46],[100,53,102,51],[101,10,103,8],[101,16,103,14,"enemyIndex"],[101,26,103,24],[101,29,103,27,"newState"],[101,37,103,35],[101,38,103,36,"enemies"],[101,45,103,43],[101,46,103,44,"findIndex"],[101,55,103,53],[101,56,103,54,"e"],[101,57,103,55],[101,61,103,59,"e"],[101,62,103,60],[101,63,103,61,"id"],[101,65,103,63],[101,70,103,68,"entityId"],[101,78,103,76],[101,79,103,77],[102,10,104,8],[102,14,104,12,"enemyIndex"],[102,24,104,22],[102,28,104,26],[102,29,104,27],[102,31,104,29],[103,12,105,10,"results"],[103,19,105,17],[103,20,105,18,"forEach"],[103,27,105,25],[103,28,105,26,"result"],[103,34,105,32],[103,38,105,36],[104,14,106,12,"newState"],[104,22,106,20],[104,23,106,21,"enemies"],[104,30,106,28],[104,31,106,29,"enemyIndex"],[104,41,106,39],[104,42,106,40],[104,43,106,41,"health"],[104,49,106,47],[104,53,106,51,"result"],[104,59,106,57],[104,60,106,58,"damage"],[104,66,106,64],[105,14,107,12,"newState"],[105,22,107,20],[105,23,107,21,"enemies"],[105,30,107,28],[105,31,107,29,"enemyIndex"],[105,41,107,39],[105,42,107,40],[105,43,107,41,"lastDamaged"],[105,54,107,52],[105,57,107,55,"newTick"],[105,64,107,62],[106,12,108,10],[106,13,108,11],[106,14,108,12],[107,10,109,8],[108,8,110,6],[108,9,110,7],[108,10,110,8],[110,8,112,6],[111,8,113,6],[111,13,113,11],[111,17,113,15,"i"],[111,18,113,16],[111,21,113,19],[111,22,113,20],[111,24,113,22,"i"],[111,25,113,23],[111,28,113,26],[111,29,113,27],[111,31,113,29,"i"],[111,32,113,30],[111,34,113,32],[111,36,113,34],[112,10,114,8],[112,14,114,12,"newState"],[112,22,114,20],[112,23,114,21,"abilityManager"],[112,37,114,35],[112,38,114,36,"isAbilityReady"],[112,52,114,50],[112,53,114,51,"i"],[112,54,114,52],[112,55,114,53],[112,59,114,57,"newState"],[112,67,114,65],[112,68,114,66,"enemies"],[112,75,114,73],[112,76,114,74,"length"],[112,82,114,80],[112,85,114,83],[112,86,114,84],[112,88,114,86],[113,12,115,10],[113,16,115,14,"newState"],[113,24,115,22],[113,25,115,23,"abilityManager"],[113,39,115,37],[113,40,115,38,"useAbility"],[113,50,115,48],[113,51,115,49,"i"],[113,52,115,50],[113,54,115,52,"newTick"],[113,61,115,59],[113,62,115,60],[113,64,115,62],[114,14,116,12,"castAbility"],[114,25,116,23],[114,26,116,24,"newState"],[114,34,116,32],[114,36,116,34,"i"],[114,37,116,35],[114,38,116,36],[115,12,117,10],[116,10,118,8],[117,8,119,6],[119,8,121,6],[120,8,122,6],[120,14,122,12,"deadEnemies"],[120,25,122,23],[120,28,122,26,"newState"],[120,36,122,34],[120,37,122,35,"enemies"],[120,44,122,42],[120,45,122,43,"filter"],[120,51,122,49],[120,52,122,50,"enemy"],[120,57,122,55],[120,61,122,59,"enemy"],[120,66,122,64],[120,67,122,65,"health"],[120,73,122,71],[120,77,122,75],[120,78,122,76],[120,79,122,77],[121,8,123,6,"deadEnemies"],[121,19,123,17],[121,20,123,18,"forEach"],[121,27,123,25],[121,28,123,26,"enemy"],[121,33,123,31],[121,37,123,35],[122,10,124,8,"handleEnemyKill"],[122,25,124,23],[122,26,124,24,"enemy"],[122,31,124,29],[122,32,124,30],[123,8,125,6],[123,9,125,7],[123,10,125,8],[125,8,127,6],[126,8,128,6,"newState"],[126,16,128,14],[126,17,128,15,"enemies"],[126,24,128,22],[126,27,128,25,"newState"],[126,35,128,33],[126,36,128,34,"enemies"],[126,43,128,41],[126,44,128,42,"filter"],[126,50,128,48],[126,51,128,49,"enemy"],[126,56,128,54],[126,60,128,58,"enemy"],[126,65,128,63],[126,66,128,64,"health"],[126,72,128,70],[126,75,128,73],[126,76,128,74],[126,77,128,75],[128,8,130,6],[129,8,131,6],[129,14,131,12,"MAX_ENEMIES"],[129,25,131,23],[129,28,131,26],[129,30,131,28],[130,8,132,6,"console"],[130,15,132,13],[130,16,132,14,"log"],[130,19,132,17],[130,20,132,18],[130,53,132,51,"newState"],[130,61,132,59],[130,62,132,60,"enemies"],[130,69,132,67],[130,70,132,68,"length"],[130,76,132,74],[130,85,132,83,"MAX_ENEMIES"],[130,96,132,94],[130,98,132,96],[130,99,132,97],[131,8,133,6],[131,15,133,13,"newState"],[131,23,133,21],[131,24,133,22,"enemies"],[131,31,133,29],[131,32,133,30,"length"],[131,38,133,36],[131,41,133,39,"MAX_ENEMIES"],[131,52,133,50],[131,54,133,52],[132,10,134,8,"console"],[132,17,134,15],[132,18,134,16,"log"],[132,21,134,19],[132,22,134,20],[132,43,134,41,"newState"],[132,51,134,49],[132,52,134,50,"enemies"],[132,59,134,57],[132,60,134,58,"length"],[132,66,134,64],[132,69,134,67],[132,70,134,68],[132,74,134,72,"MAX_ENEMIES"],[132,85,134,83],[132,87,134,85],[132,88,134,86],[133,10,135,8,"spawnTestEnemy"],[133,24,135,22],[133,25,135,23,"newState"],[133,33,135,31],[133,34,135,32],[134,8,136,6],[135,8,138,6],[135,15,138,13,"newState"],[135,23,138,21],[136,6,139,4],[136,7,139,5],[136,47,139,6],[137,4,140,2],[137,5,140,3],[139,4,142,2],[140,4,143,2],[140,10,143,8,"castAbility"],[140,21,143,19],[140,24,143,22,"castAbility"],[140,25,143,23,"state"],[140,30,143,41],[140,32,143,43,"slotIndex"],[140,41,143,60],[140,46,143,65],[141,6,144,4],[141,12,144,10,"deck"],[141,16,144,14],[141,19,144,17,"state"],[141,24,144,22],[141,25,144,23,"abilityManager"],[141,39,144,37],[141,40,144,38,"getDeck"],[141,47,144,45],[141,48,144,46],[141,49,144,47],[142,6,145,4],[142,12,145,10,"ability"],[142,19,145,17],[142,22,145,20,"deck"],[142,26,145,24],[142,27,145,25,"slots"],[142,32,145,30],[142,33,145,31,"slotIndex"],[142,42,145,40],[142,43,145,41],[143,6,146,4],[143,10,146,8],[143,11,146,9,"ability"],[143,18,146,16],[143,20,146,18],[145,6,148,4],[146,6,149,4],[146,12,149,10,"target"],[146,18,149,16],[146,21,149,19,"state"],[146,26,149,24],[146,27,149,25,"enemies"],[146,34,149,32],[146,35,149,33],[146,36,149,34],[146,37,149,35],[147,6,150,4],[147,10,150,8],[147,11,150,9,"target"],[147,17,150,15],[147,19,150,17],[149,6,152,4],[150,6,153,4],[150,10,153,8,"damage"],[150,16,153,14],[150,19,153,17,"ability"],[150,26,153,24],[150,27,153,25,"stats"],[150,32,153,30],[150,33,153,31,"baseDamage"],[150,43,153,41],[152,6,155,4],[153,6,156,4,"deck"],[153,10,156,8],[153,11,156,9,"activeSynergies"],[153,26,156,24],[153,27,156,25,"forEach"],[153,34,156,32],[153,35,156,33,"synergy"],[153,42,156,40],[153,46,156,44],[154,8,157,6],[154,12,157,10,"synergy"],[154,19,157,17],[154,20,157,18,"bonus"],[154,25,157,23],[154,26,157,24,"damageBonus"],[154,37,157,35],[154,41,158,10,"synergy"],[154,48,158,17],[154,49,158,18,"requiredTags"],[154,61,158,30],[154,62,158,31,"some"],[154,66,158,35],[154,67,158,36,"tag"],[154,70,158,39],[154,74,158,43,"ability"],[154,81,158,50],[154,82,158,51,"tags"],[154,86,158,55],[154,87,158,56,"includes"],[154,95,158,64],[154,96,158,65,"tag"],[154,99,158,68],[154,100,158,69],[154,101,158,70],[154,103,158,72],[155,10,159,8,"damage"],[155,16,159,14],[155,20,159,19],[155,21,159,20],[155,24,159,23,"synergy"],[155,31,159,30],[155,32,159,31,"bonus"],[155,37,159,36],[155,38,159,37,"damageBonus"],[155,49,159,48],[155,52,159,51],[155,55,159,55],[156,8,160,6],[157,6,161,4],[157,7,161,5],[157,8,161,6],[159,6,163,4],[160,6,164,4],[160,12,164,10,"damageResult"],[160,24,164,22],[160,27,164,25,"DamageCalculator"],[160,46,164,41],[160,47,164,41,"DamageCalculator"],[160,63,164,41],[160,64,164,42,"calculateDamage"],[160,79,164,57],[160,80,164,58,"damage"],[160,86,164,64],[160,88,164,66,"state"],[160,93,164,71],[160,94,164,72,"playerStats"],[160,105,164,83],[160,107,164,85,"target"],[160,113,164,91],[160,114,164,92,"stats"],[160,119,164,97],[160,120,164,98],[162,6,166,4],[163,6,167,4],[163,10,167,8,"ability"],[163,17,167,15],[163,18,167,16,"effects"],[163,25,167,23],[163,26,167,24,"includes"],[163,34,167,32],[163,35,167,33],[163,49,167,47],[163,50,167,48],[163,52,167,50],[164,8,168,6,"target"],[164,14,168,12],[164,15,168,13,"health"],[164,21,168,19],[164,25,168,23,"damageResult"],[164,37,168,35],[164,38,168,36,"damage"],[164,44,168,42],[165,8,169,6,"target"],[165,14,169,12],[165,15,169,13,"lastDamaged"],[165,26,169,24],[165,29,169,27,"state"],[165,34,169,32],[165,35,169,33,"currentTick"],[165,46,169,44],[166,6,170,4],[166,7,170,5],[166,13,170,11],[166,17,170,15,"ability"],[166,24,170,22],[166,25,170,23,"effects"],[166,32,170,30],[166,33,170,31,"includes"],[166,41,170,39],[166,42,170,40],[166,47,170,45],[166,48,170,46],[166,50,170,48],[167,8,171,6],[168,8,172,6,"state"],[168,13,172,11],[168,14,172,12,"enemies"],[168,21,172,19],[168,22,172,20,"forEach"],[168,29,172,27],[168,30,172,28,"enemy"],[168,35,172,33],[168,39,172,37],[169,10,173,8,"enemy"],[169,15,173,13],[169,16,173,14,"health"],[169,22,173,20],[169,26,173,24,"Math"],[169,30,173,28],[169,31,173,29,"floor"],[169,36,173,34],[169,37,173,35,"damageResult"],[169,49,173,47],[169,50,173,48,"damage"],[169,56,173,54],[169,59,173,57],[169,62,173,60],[169,63,173,61],[169,64,173,62],[169,65,173,63],[170,10,174,8,"enemy"],[170,15,174,13],[170,16,174,14,"lastDamaged"],[170,27,174,25],[170,30,174,28,"state"],[170,35,174,33],[170,36,174,34,"currentTick"],[170,47,174,45],[171,8,175,6],[171,9,175,7],[171,10,175,8],[172,6,176,4],[174,6,178,4],[175,6,179,4],[175,10,179,8,"ability"],[175,17,179,15],[175,18,179,16,"effects"],[175,25,179,23],[175,26,179,24,"includes"],[175,34,179,32],[175,35,179,33],[175,40,179,38],[175,41,179,39],[175,45,179,43,"ability"],[175,52,179,50],[175,53,179,51,"stats"],[175,58,179,56],[175,59,179,57,"duration"],[175,67,179,65],[175,69,179,67],[176,8,180,6,"state"],[176,13,180,11],[176,14,180,12,"statusEffects"],[176,27,180,25],[176,28,180,26,"addEffect"],[176,37,180,35],[176,38,180,36,"target"],[176,44,180,42],[176,45,180,43,"id"],[176,47,180,45],[176,49,180,47],[177,10,181,8,"id"],[177,12,181,10],[177,14,181,12],[177,17,181,15,"ability"],[177,24,181,22],[177,25,181,23,"id"],[177,27,181,25],[177,33,181,31],[178,10,182,8,"type"],[178,14,182,12],[178,16,182,14],[178,21,182,19],[179,10,183,8,"remainingTicks"],[179,24,183,22],[179,26,183,24,"Math"],[179,30,183,28],[179,31,183,29,"floor"],[179,36,183,34],[179,37,183,35,"ability"],[179,44,183,42],[179,45,183,43,"stats"],[179,50,183,48],[179,51,183,49,"duration"],[179,59,183,57],[179,62,183,60],[179,64,183,62],[179,65,183,63],[180,10,183,65],[181,10,184,8,"tickInterval"],[181,22,184,20],[181,24,184,22],[181,26,184,24],[182,10,184,26],[183,10,185,8,"lastTick"],[183,18,185,16],[183,20,185,18,"state"],[183,25,185,23],[183,26,185,24,"currentTick"],[183,37,185,35],[184,10,186,8,"value"],[184,15,186,13],[184,17,186,15,"Math"],[184,21,186,19],[184,22,186,20,"floor"],[184,27,186,25],[184,28,186,26,"damage"],[184,34,186,32],[184,37,186,35],[184,40,186,38],[184,41,186,39],[185,10,186,41],[186,10,187,8,"stackable"],[186,19,187,17],[186,21,187,19],[187,8,188,6],[187,9,188,7],[187,10,188,8],[188,6,189,4],[189,6,191,4,"console"],[189,13,191,11],[189,14,191,12,"log"],[189,17,191,15],[189,18,191,16],[189,24,191,22,"ability"],[189,31,191,29],[189,32,191,30,"name"],[189,36,191,34],[189,54,191,52,"damageResult"],[189,66,191,64],[189,67,191,65,"damage"],[189,73,191,71],[189,76,191,74,"damageResult"],[189,88,191,86],[189,89,191,87,"isCritical"],[189,99,191,97],[189,102,191,100],[189,112,191,110],[189,115,191,113],[189,117,191,115],[189,119,191,117],[189,120,191,118],[190,4,192,2],[190,5,192,3],[192,4,194,2],[193,4,195,2],[193,10,195,8,"spawnTestEnemy"],[193,24,195,22],[193,27,195,26,"state"],[193,32,195,44],[193,36,195,49],[194,6,196,4],[195,6,197,4],[195,12,197,10,"SCREEN_WIDTH"],[195,24,197,22],[195,27,197,25],[195,30,197,28],[195,31,197,29],[195,32,197,30],[196,6,198,4],[196,12,198,10,"GAME_AREA_HEIGHT"],[196,28,198,26],[196,31,198,29],[196,34,198,32],[196,37,198,35],[196,40,198,38],[196,41,198,39],[196,42,198,40],[197,6,199,4],[197,12,199,10,"ENEMY_SIZE"],[197,22,199,20],[197,25,199,23],[197,27,199,25],[199,6,201,4],[200,6,202,4],[200,12,202,10,"x"],[200,13,202,11],[200,16,202,14,"Math"],[200,20,202,18],[200,21,202,19,"random"],[200,27,202,25],[200,28,202,26],[200,29,202,27],[200,33,202,31,"SCREEN_WIDTH"],[200,45,202,43],[200,48,202,46,"ENEMY_SIZE"],[200,58,202,56],[200,61,202,59],[200,62,202,60],[200,63,202,61],[200,66,202,64,"ENEMY_SIZE"],[200,76,202,74],[200,77,202,75],[200,78,202,76],[201,6,203,4],[201,12,203,10,"y"],[201,13,203,11],[201,16,203,14,"Math"],[201,20,203,18],[201,21,203,19,"random"],[201,27,203,25],[201,28,203,26],[201,29,203,27],[201,33,203,31,"GAME_AREA_HEIGHT"],[201,49,203,47],[201,52,203,50,"ENEMY_SIZE"],[201,62,203,60],[201,65,203,63],[201,66,203,64],[201,67,203,65],[201,70,203,68,"ENEMY_SIZE"],[201,80,203,78],[201,81,203,79],[201,82,203,80],[203,6,205,4],[203,12,205,10,"enemy"],[203,17,205,28],[203,20,205,31],[204,8,206,6,"id"],[204,10,206,8],[204,12,206,10],[204,21,206,19],[204,23,206,21,"enemyCounter"],[204,35,206,33],[204,37,206,35],[205,8,207,6,"name"],[205,12,207,10],[205,14,207,12],[205,24,207,22],[206,8,208,6,"health"],[206,14,208,12],[206,16,208,14],[206,19,208,17],[207,8,209,6,"maxHealth"],[207,17,209,15],[207,19,209,17],[207,22,209,20],[208,8,210,6,"stats"],[208,13,210,11],[208,15,210,13],[209,10,211,8,"attack"],[209,16,211,14],[209,18,211,16],[209,20,211,18],[210,10,212,8,"defense"],[210,17,212,15],[210,19,212,17],[210,21,212,19],[211,10,213,8,"health"],[211,16,213,14],[211,18,213,16],[211,21,213,19],[212,10,214,8,"maxHealth"],[212,19,214,17],[212,21,214,19],[212,24,214,22],[213,10,215,8,"critChance"],[213,20,215,18],[213,22,215,20],[213,23,215,21],[214,10,216,8,"critDamage"],[214,20,216,18],[214,22,216,20],[214,25,216,23],[215,10,217,8,"cooldownReduction"],[215,27,217,25],[215,29,217,27],[216,8,218,6],[216,9,218,7],[217,8,219,6,"position"],[217,16,219,14],[217,18,219,16],[218,10,219,18,"x"],[218,11,219,19],[219,10,219,21,"y"],[220,8,219,23],[220,9,219,24],[221,8,220,6,"lastDamaged"],[221,19,220,17],[221,21,220,19],[222,6,221,4],[222,7,221,5],[223,6,223,4,"state"],[223,11,223,9],[223,12,223,10,"enemies"],[223,19,223,17],[223,20,223,18,"push"],[223,24,223,22],[223,25,223,23,"enemy"],[223,30,223,28],[223,31,223,29],[224,4,224,2],[224,5,224,3],[226,4,226,2],[227,4,227,2],[227,10,227,8,"startCombat"],[227,21,227,19],[227,24,227,22,"startCombat"],[227,25,227,22],[227,30,227,28],[228,6,228,4,"console"],[228,13,228,11],[228,14,228,12,"log"],[228,17,228,15],[228,18,228,16],[228,63,228,61],[228,64,228,62],[229,6,229,4,"setCombatState"],[229,20,229,18],[229,21,229,19,"prev"],[229,25,229,23],[229,29,229,23,"Object"],[229,35,229,23],[229,36,229,23,"assign"],[229,42,229,23],[229,47,229,33,"prev"],[229,51,229,37],[230,8,229,39,"isInCombat"],[230,18,229,49],[230,20,229,51],[231,6,229,55],[231,8,229,58],[231,9,229,59],[233,6,231,4],[234,6,232,4,"combatEngine"],[234,25,232,16],[234,26,232,16,"combatEngine"],[234,38,232,16],[234,39,232,17,"addTickCallback"],[234,54,232,32],[234,55,232,33,"handleCombatTick"],[234,71,232,49],[234,72,232,50],[235,6,233,4,"console"],[235,13,233,11],[235,14,233,12,"log"],[235,17,233,15],[235,18,233,16],[235,62,233,60],[235,63,233,61],[237,6,235,4],[238,6,236,4,"combatEngine"],[238,25,236,16],[238,26,236,16,"combatEngine"],[238,38,236,16],[238,39,236,17,"start"],[238,44,236,22],[238,45,236,23],[238,46,236,24],[239,4,237,2],[239,5,237,3],[241,4,239,2],[242,4,240,2],[242,10,240,8,"stopCombat"],[242,20,240,18],[242,23,240,21,"stopCombat"],[242,24,240,21],[242,29,240,27],[243,6,241,4,"setCombatState"],[243,20,241,18],[243,21,241,19,"prev"],[243,25,241,23],[243,29,241,23,"Object"],[243,35,241,23],[243,36,241,23,"assign"],[243,42,241,23],[243,47,241,33,"prev"],[243,51,241,37],[244,8,241,39,"isInCombat"],[244,18,241,49],[244,20,241,51],[245,6,241,56],[245,8,241,59],[245,9,241,60],[246,6,242,4,"combatEngine"],[246,25,242,16],[246,26,242,16,"combatEngine"],[246,38,242,16],[246,39,242,17,"removeTickCallback"],[246,57,242,35],[246,58,242,36,"handleCombatTick"],[246,74,242,52],[246,75,242,53],[247,4,243,2],[247,5,243,3],[249,4,245,2],[250,4,246,2],[250,10,246,8,"equipAbility"],[250,22,246,20],[250,25,246,23,"equipAbility"],[250,26,246,24,"abilityId"],[250,35,246,41],[250,37,246,43,"slotIndex"],[250,46,246,60],[250,51,246,74],[251,6,247,4],[251,13,247,11,"combatState"],[251,24,247,22],[251,25,247,23,"abilityManager"],[251,39,247,37],[251,40,247,38,"equipAbility"],[251,52,247,50],[251,53,247,51,"abilityId"],[251,62,247,60],[251,64,247,62,"slotIndex"],[251,73,247,71],[251,74,247,72],[252,4,248,2],[252,5,248,3],[253,4,250,2],[253,10,250,8,"getDeck"],[253,17,250,15],[253,20,250,18,"getDeck"],[253,21,250,18],[253,26,250,24],[254,6,251,4],[254,13,251,11,"combatState"],[254,24,251,22],[254,25,251,23,"abilityManager"],[254,39,251,37],[254,40,251,38,"getDeck"],[254,47,251,45],[254,48,251,46],[254,49,251,47],[255,4,252,2],[255,5,252,3],[256,4,254,2],[256,10,254,8,"getAvailableAbilities"],[256,31,254,29],[256,34,254,32,"getAvailableAbilities"],[256,35,254,32],[256,40,254,38],[257,6,255,4],[257,13,255,11,"combatState"],[257,24,255,22],[257,25,255,23,"abilityManager"],[257,39,255,37],[257,40,255,38,"getAvailableAbilities"],[257,61,255,59],[257,62,255,60],[257,63,255,61],[258,4,256,2],[258,5,256,3],[259,4,258,2],[259,10,258,8,"upgradeAbility"],[259,24,258,22],[259,27,258,26,"abilityId"],[259,36,258,43],[259,40,258,57],[260,6,259,4],[260,13,259,11,"combatState"],[260,24,259,22],[260,25,259,23,"abilityManager"],[260,39,259,37],[260,40,259,38,"upgradeAbility"],[260,54,259,52],[260,55,259,53,"abilityId"],[260,64,259,62],[260,65,259,63],[261,4,260,2],[261,5,260,3],[263,4,262,2],[264,4,263,2],[264,8,263,2,"useEffect"],[264,14,263,11],[264,15,263,11,"useEffect"],[264,24,263,11],[264,26,263,12],[264,32,263,18],[265,6,264,4,"combatEngine"],[265,25,264,16],[265,26,264,16,"combatEngine"],[265,38,264,16],[265,39,264,17,"start"],[265,44,264,22],[265,45,264,23],[265,46,264,24],[267,6,266,4],[268,6,267,4,"combatState"],[268,17,267,15],[268,18,267,16,"abilityManager"],[268,32,267,30],[268,33,267,31,"equipAbility"],[268,45,267,43],[268,46,267,44],[268,62,267,60],[268,64,267,62],[268,65,267,63],[268,66,267,64],[269,6,268,4,"combatState"],[269,17,268,15],[269,18,268,16,"abilityManager"],[269,32,268,30],[269,33,268,31,"equipAbility"],[269,45,268,43],[269,46,268,44],[269,61,268,59],[269,63,268,61],[269,64,268,62],[269,65,268,63],[270,6,270,4],[270,13,270,11],[270,19,270,17],[271,8,271,6,"combatEngine"],[271,27,271,18],[271,28,271,18,"combatEngine"],[271,40,271,18],[271,41,271,19,"stop"],[271,45,271,23],[271,46,271,24],[271,47,271,25],[272,6,272,4],[272,7,272,5],[273,4,273,2],[273,5,273,3],[273,7,273,5],[273,9,273,7],[273,10,273,8],[274,4,275,2],[274,10,275,8,"contextValue"],[274,22,275,39],[274,25,275,42],[275,6,276,4,"combatState"],[275,17,276,15],[276,6,277,4,"startCombat"],[276,17,277,15],[277,6,278,4,"stopCombat"],[277,16,278,14],[278,6,279,4,"equipAbility"],[278,18,279,16],[279,6,280,4,"getDeck"],[279,13,280,11],[280,6,281,4,"getAvailableAbilities"],[280,27,281,25],[281,6,282,4,"upgradeAbility"],[282,4,283,2],[282,5,283,3],[283,4,285,2],[283,24,286,4],[283,28,286,4,"_reactJsxDevRuntime"],[283,47,286,4],[283,48,286,4,"jsxDEV"],[283,54,286,4],[283,56,286,5,"CombatContext"],[283,69,286,18],[283,70,286,19,"Provider"],[283,78,286,27],[284,6,286,28,"value"],[284,11,286,33],[284,13,286,35,"contextValue"],[284,25,286,48],[285,6,286,48,"children"],[285,14,286,48],[285,16,287,7,"children"],[286,4,287,15],[287,6,287,15,"fileName"],[287,14,287,15],[287,16,287,15,"_jsxFileName"],[287,28,287,15],[288,6,287,15,"lineNumber"],[288,16,287,15],[289,6,287,15,"columnNumber"],[289,18,287,15],[290,4,287,15],[290,11,288,28],[290,12,288,29],[291,2,290,0],[291,3,290,1],[292,2,290,2,"_s3"],[292,5,290,2],[292,6,47,13,"CombatProvider"],[292,20,47,27],[293,4,47,27],[293,12,48,26,"useGame"],[293,24,48,33],[293,25,48,33,"useGame"],[293,32,48,33],[294,2,48,33],[295,2,48,33,"_c"],[295,4,48,33],[295,7,47,13,"CombatProvider"],[295,21,47,27],[296,2,47,27],[296,6,47,27,"_c"],[296,8,47,27],[297,2,47,27,"$RefreshReg$"],[297,14,47,27],[297,15,47,27,"_c"],[297,17,47,27],[298,0,47,27],[298,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleEnemyKill","updateNinja$argument_0","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","deadEnemies.forEach$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCoC;CDM;8BEI;0BCqB;gBCS;KDM;GDC;2BGG;mBCE;4BCa;sDCC,sBD;0BEE;WFG;ODE;kDIY,0BJ;0BKC;OLE;iDIG,yBJ;KDW;GHC;sBUG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GViB;yBcG;Gd6B;sBeG;mBXE,uCW;GfQ;qBgBG;mBZC,wCY;GhBE;uBiBG;GjBE;kBkBE;GlBE;gCmBE;GnBE;yBoBE;GpBE;YqBG;WCO;KDE;GrBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}