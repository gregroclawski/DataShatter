{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../engine/CombatEngine","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":106,"index":196}}],"key":"nZQ1Uh4sL1pIx0mgIprqIFVXaUk=","exportNames":["*"],"imports":1}},{"name":"../types/AbilityTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":197},"end":{"line":3,"column":85,"index":282}}],"key":"b+W3bytKRoiCr0Aj83k4CvB3JRM=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/CombatContext.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useCombat\", {\n    enumerable: true,\n    get: function () {\n      return useCombat;\n    }\n  });\n  Object.defineProperty(exports, \"CombatProvider\", {\n    enumerable: true,\n    get: function () {\n      return CombatProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _engineCombatEngine = require(_dependencyMap[1], \"../engine/CombatEngine\");\n  var _typesAbilityTypes = require(_dependencyMap[2], \"../types/AbilityTypes\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const CombatContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useCombat = () => {\n    _s();\n    const context = (0, _react.useContext)(CombatContext);\n    if (!context) {\n      throw new Error('useCombat must be used within a CombatProvider');\n    }\n    return context;\n  };\n  _s(useCombat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  const CombatProvider = ({\n    children\n  }) => {\n    _s3();\n    const [combatState, setCombatState] = (0, _react.useState)({\n      isInCombat: false,\n      currentTick: 0,\n      enemies: [],\n      abilityManager: new _typesAbilityTypes.AbilityManager(),\n      statusEffects: new _engineCombatEngine.StatusEffectManager(),\n      playerStats: {\n        attack: 50,\n        defense: 20,\n        health: 220,\n        maxHealth: 220,\n        critChance: 10,\n        critDamage: 150,\n        cooldownReduction: 0\n      }\n    });\n\n    // Combat tick handler\n    const handleCombatTick = () => {\n      var _s2 = $RefreshSig$();\n      _s2(setCombatState(_s2(prev => {\n        _s2();\n        const newTick = _engineCombatEngine.combatEngine.getCurrentTick();\n        const newState = Object.assign({}, prev, {\n          currentTick: newTick\n        });\n        if (!newState.isInCombat) return newState;\n\n        // Update ability cooldowns\n        newState.abilityManager.updateCooldowns(newTick);\n\n        // Process status effects\n        const effectResults = newState.statusEffects.processTick(newTick);\n\n        // Apply effect damage to enemies\n        effectResults.forEach((results, entityId) => {\n          const enemyIndex = newState.enemies.findIndex(e => e.id === entityId);\n          if (enemyIndex >= 0) {\n            results.forEach(result => {\n              newState.enemies[enemyIndex].health -= result.damage;\n              newState.enemies[enemyIndex].lastDamaged = newTick;\n            });\n          }\n        });\n\n        // Auto-cast abilities\n        for (let i = 0; i < 5; i++) {\n          if (newState.abilityManager.isAbilityReady(i) && newState.enemies.length > 0) {\n            if (newState.abilityManager.useAbility(i, newTick)) {\n              castAbility(newState, i);\n            }\n          }\n        }\n\n        // Remove dead enemies\n        newState.enemies = newState.enemies.filter(enemy => enemy.health > 0);\n\n        // Spawn new enemies if none remain (for testing)\n        if (newState.enemies.length === 0) {\n          spawnTestEnemy(newState);\n        }\n        return newState;\n      }, \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true)), \"F3bX94StzMGnCFytE4/0MpoNfKg=\", true);\n    };\n\n    // Cast ability and apply effects\n    const castAbility = (state, slotIndex) => {\n      const deck = state.abilityManager.getDeck();\n      const ability = deck.slots[slotIndex];\n      if (!ability) return;\n\n      // Find target (nearest enemy for now)\n      const target = state.enemies[0];\n      if (!target) return;\n\n      // Calculate base damage\n      let damage = ability.stats.baseDamage;\n\n      // Apply synergy bonuses\n      deck.activeSynergies.forEach(synergy => {\n        if (synergy.bonus.damageBonus && synergy.requiredTags.some(tag => ability.tags.includes(tag))) {\n          damage *= 1 + synergy.bonus.damageBonus / 100;\n        }\n      });\n\n      // Calculate final damage with stats\n      const damageResult = _engineCombatEngine.DamageCalculator.calculateDamage(damage, state.playerStats, target.stats);\n\n      // Apply damage based on ability effects\n      if (ability.effects.includes('SingleTarget')) {\n        target.health -= damageResult.damage;\n        target.lastDamaged = state.currentTick;\n      } else if (ability.effects.includes('AoE')) {\n        // Damage all enemies\n        state.enemies.forEach(enemy => {\n          enemy.health -= Math.floor(damageResult.damage * 0.8); // 80% damage to secondary targets\n          enemy.lastDamaged = state.currentTick;\n        });\n      }\n\n      // Apply DoT effects\n      if (ability.effects.includes('DoT') && ability.stats.duration) {\n        state.statusEffects.addEffect(target.id, {\n          id: `${ability.id}_dot`,\n          type: 'dot',\n          remainingTicks: Math.floor(ability.stats.duration * 10),\n          // Convert seconds to ticks\n          tickInterval: 10,\n          // Every second\n          lastTick: state.currentTick,\n          value: Math.floor(damage * 0.3),\n          // 30% of base damage per tick\n          stackable: false\n        });\n      }\n      console.log(`ðŸŽ¯ ${ability.name} cast! Damage: ${damageResult.damage}${damageResult.isCritical ? ' (CRIT!)' : ''}`);\n    };\n\n    // Spawn a test enemy\n    const spawnTestEnemy = state => {\n      const enemy = {\n        id: `enemy_${Date.now()}`,\n        name: 'Test Orc',\n        health: 100,\n        maxHealth: 100,\n        stats: {\n          attack: 30,\n          defense: 10,\n          health: 100,\n          maxHealth: 100,\n          critChance: 5,\n          critDamage: 120,\n          cooldownReduction: 0\n        },\n        position: {\n          x: 300,\n          y: 200\n        },\n        lastDamaged: 0\n      };\n      state.enemies.push(enemy);\n    };\n\n    // Start combat\n    const startCombat = () => {\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: true\n      }));\n\n      // Add tick callback if not already added\n      _engineCombatEngine.combatEngine.addTickCallback(handleCombatTick);\n      if (!_engineCombatEngine.combatEngine) {\n        _engineCombatEngine.combatEngine.start();\n      }\n    };\n\n    // Stop combat\n    const stopCombat = () => {\n      setCombatState(prev => Object.assign({}, prev, {\n        isInCombat: false\n      }));\n      _engineCombatEngine.combatEngine.removeTickCallback(handleCombatTick);\n    };\n\n    // Equipment management\n    const equipAbility = (abilityId, slotIndex) => {\n      return combatState.abilityManager.equipAbility(abilityId, slotIndex);\n    };\n    const getDeck = () => {\n      return combatState.abilityManager.getDeck();\n    };\n    const getAvailableAbilities = () => {\n      return combatState.abilityManager.getAvailableAbilities();\n    };\n    const upgradeAbility = abilityId => {\n      return combatState.abilityManager.upgradeAbility(abilityId);\n    };\n\n    // Initialize combat engine\n    (0, _react.useEffect)(() => {\n      _engineCombatEngine.combatEngine.start();\n\n      // Equip some default abilities for testing\n      combatState.abilityManager.equipAbility('basic_shuriken', 0);\n      combatState.abilityManager.equipAbility('fire_shuriken', 1);\n      return () => {\n        _engineCombatEngine.combatEngine.stop();\n      };\n    }, []);\n    const contextValue = {\n      combatState,\n      startCombat,\n      stopCombat,\n      equipAbility,\n      getDeck,\n      getAvailableAbilities,\n      upgradeAbility\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(CombatContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }, this);\n  };\n  _s3(CombatProvider, \"eU0ceafkOcVj0hF6EIbVysB+V0U=\");\n  _c = CombatProvider;\n  var _c;\n  $RefreshReg$(_c, \"CombatProvider\");\n});","lineCount":251,"map":[[10,2,36,0,"Object"],[10,8,36,0],[10,9,36,0,"defineProperty"],[10,23,36,0],[10,24,36,0,"exports"],[10,31,36,0],[11,4,36,0,"enumerable"],[11,14,36,0],[12,4,36,0,"get"],[12,7,36,0],[12,18,36,0,"get"],[12,19,36,0],[13,6,36,0],[13,13,36,0,"useCombat"],[13,22,36,0],[14,4,36,0],[15,2,36,0],[16,2,44,0,"Object"],[16,8,44,0],[16,9,44,0,"defineProperty"],[16,23,44,0],[16,24,44,0,"exports"],[16,31,44,0],[17,4,44,0,"enumerable"],[17,14,44,0],[18,4,44,0,"get"],[18,7,44,0],[18,18,44,0,"get"],[18,19,44,0],[19,6,44,0],[19,13,44,0,"CombatProvider"],[19,27,44,0],[20,4,44,0],[21,2,44,0],[22,2,1,0],[22,6,1,0,"_react"],[22,12,1,0],[22,15,1,0,"require"],[22,22,1,0],[22,23,1,0,"_dependencyMap"],[22,37,1,0],[23,2,2,0],[23,6,2,0,"_engineCombatEngine"],[23,25,2,0],[23,28,2,0,"require"],[23,35,2,0],[23,36,2,0,"_dependencyMap"],[23,50,2,0],[24,2,3,0],[24,6,3,0,"_typesAbilityTypes"],[24,24,3,0],[24,27,3,0,"require"],[24,34,3,0],[24,35,3,0,"_dependencyMap"],[24,49,3,0],[25,2,3,85],[25,6,3,85,"_reactJsxDevRuntime"],[25,25,3,85],[25,28,3,85,"require"],[25,35,3,85],[25,36,3,85,"_dependencyMap"],[25,50,3,85],[26,2,34,0],[26,8,34,6,"CombatContext"],[26,21,34,19],[26,37,34,22],[26,41,34,22,"createContext"],[26,47,34,35],[26,48,34,35,"createContext"],[26,61,34,35],[26,63,34,67,"undefined"],[26,72,34,76],[26,73,34,77],[27,2,36,7],[27,8,36,13,"useCombat"],[27,17,36,22],[27,20,36,25,"useCombat"],[27,21,36,25],[27,26,36,50],[28,4,36,50,"_s"],[28,6,36,50],[29,4,37,2],[29,10,37,8,"context"],[29,17,37,15],[29,20,37,18],[29,24,37,18,"useContext"],[29,30,37,28],[29,31,37,28,"useContext"],[29,41,37,28],[29,43,37,29,"CombatContext"],[29,56,37,42],[29,57,37,43],[30,4,38,2],[30,8,38,6],[30,9,38,7,"context"],[30,16,38,14],[30,18,38,16],[31,6,39,4],[31,12,39,10],[31,16,39,14,"Error"],[31,21,39,19],[31,22,39,20],[31,70,39,68],[31,71,39,69],[32,4,40,2],[33,4,41,2],[33,11,41,9,"context"],[33,18,41,16],[34,2,42,0],[34,3,42,1],[35,2,42,2,"_s"],[35,4,42,2],[35,5,36,13,"useCombat"],[35,14,36,22],[36,2,44,7],[36,8,44,13,"CombatProvider"],[36,22,44,27],[36,25,44,30,"CombatProvider"],[36,26,44,31],[37,4,44,33,"children"],[38,2,44,67],[38,3,44,68],[38,8,44,73],[39,4,44,73,"_s3"],[39,7,44,73],[40,4,45,2],[40,10,45,8],[40,11,45,9,"combatState"],[40,22,45,20],[40,24,45,22,"setCombatState"],[40,38,45,36],[40,39,45,37],[40,42,45,40],[40,46,45,40,"useState"],[40,52,45,48],[40,53,45,48,"useState"],[40,61,45,48],[40,63,45,62],[41,6,46,4,"isInCombat"],[41,16,46,14],[41,18,46,16],[41,23,46,21],[42,6,47,4,"currentTick"],[42,17,47,15],[42,19,47,17],[42,20,47,18],[43,6,48,4,"enemies"],[43,13,48,11],[43,15,48,13],[43,17,48,15],[44,6,49,4,"abilityManager"],[44,20,49,18],[44,22,49,20],[44,26,49,24,"AbilityManager"],[44,44,49,38],[44,45,49,38,"AbilityManager"],[44,59,49,38],[44,60,49,39],[44,61,49,40],[45,6,50,4,"statusEffects"],[45,19,50,17],[45,21,50,19],[45,25,50,23,"StatusEffectManager"],[45,44,50,42],[45,45,50,42,"StatusEffectManager"],[45,64,50,42],[45,65,50,43],[45,66,50,44],[46,6,51,4,"playerStats"],[46,17,51,15],[46,19,51,17],[47,8,52,6,"attack"],[47,14,52,12],[47,16,52,14],[47,18,52,16],[48,8,53,6,"defense"],[48,15,53,13],[48,17,53,15],[48,19,53,17],[49,8,54,6,"health"],[49,14,54,12],[49,16,54,14],[49,19,54,17],[50,8,55,6,"maxHealth"],[50,17,55,15],[50,19,55,17],[50,22,55,20],[51,8,56,6,"critChance"],[51,18,56,16],[51,20,56,18],[51,22,56,20],[52,8,57,6,"critDamage"],[52,18,57,16],[52,20,57,18],[52,23,57,21],[53,8,58,6,"cooldownReduction"],[53,25,58,23],[53,27,58,25],[54,6,59,4],[55,4,60,2],[55,5,60,3],[55,6,60,4],[57,4,62,2],[58,4,63,2],[58,10,63,8,"handleCombatTick"],[58,26,63,24],[58,29,63,27,"handleCombatTick"],[58,30,63,27],[58,35,63,33],[59,6,63,33],[59,10,63,33,"_s2"],[59,13,63,33],[59,16,63,33,"$RefreshSig$"],[59,28,63,33],[60,6,64,4,"_s2"],[60,9,64,4],[60,10,64,4,"setCombatState"],[60,24,64,18],[60,25,64,18,"_s2"],[60,28,64,18],[60,29,64,19,"prev"],[60,33,64,23],[60,37,64,27],[61,8,64,27,"_s2"],[61,11,64,27],[62,8,65,6],[62,14,65,12,"newTick"],[62,21,65,19],[62,24,65,22,"combatEngine"],[62,43,65,34],[62,44,65,34,"combatEngine"],[62,56,65,34],[62,57,65,35,"getCurrentTick"],[62,71,65,49],[62,72,65,50],[62,73,65,51],[63,8,66,6],[63,14,66,12,"newState"],[63,22,66,20],[63,25,66,20,"Object"],[63,31,66,20],[63,32,66,20,"assign"],[63,38,66,20],[63,43,66,28,"prev"],[63,47,66,32],[64,10,66,34,"currentTick"],[64,21,66,45],[64,23,66,47,"newTick"],[65,8,66,54],[65,10,66,56],[66,8,68,6],[66,12,68,10],[66,13,68,11,"newState"],[66,21,68,19],[66,22,68,20,"isInCombat"],[66,32,68,30],[66,34,68,32],[66,41,68,39,"newState"],[66,49,68,47],[68,8,70,6],[69,8,71,6,"newState"],[69,16,71,14],[69,17,71,15,"abilityManager"],[69,31,71,29],[69,32,71,30,"updateCooldowns"],[69,47,71,45],[69,48,71,46,"newTick"],[69,55,71,53],[69,56,71,54],[71,8,73,6],[72,8,74,6],[72,14,74,12,"effectResults"],[72,27,74,25],[72,30,74,28,"newState"],[72,38,74,36],[72,39,74,37,"statusEffects"],[72,52,74,50],[72,53,74,51,"processTick"],[72,64,74,62],[72,65,74,63,"newTick"],[72,72,74,70],[72,73,74,71],[74,8,76,6],[75,8,77,6,"effectResults"],[75,21,77,19],[75,22,77,20,"forEach"],[75,29,77,27],[75,30,77,28],[75,31,77,29,"results"],[75,38,77,36],[75,40,77,38,"entityId"],[75,48,77,46],[75,53,77,51],[76,10,78,8],[76,16,78,14,"enemyIndex"],[76,26,78,24],[76,29,78,27,"newState"],[76,37,78,35],[76,38,78,36,"enemies"],[76,45,78,43],[76,46,78,44,"findIndex"],[76,55,78,53],[76,56,78,54,"e"],[76,57,78,55],[76,61,78,59,"e"],[76,62,78,60],[76,63,78,61,"id"],[76,65,78,63],[76,70,78,68,"entityId"],[76,78,78,76],[76,79,78,77],[77,10,79,8],[77,14,79,12,"enemyIndex"],[77,24,79,22],[77,28,79,26],[77,29,79,27],[77,31,79,29],[78,12,80,10,"results"],[78,19,80,17],[78,20,80,18,"forEach"],[78,27,80,25],[78,28,80,26,"result"],[78,34,80,32],[78,38,80,36],[79,14,81,12,"newState"],[79,22,81,20],[79,23,81,21,"enemies"],[79,30,81,28],[79,31,81,29,"enemyIndex"],[79,41,81,39],[79,42,81,40],[79,43,81,41,"health"],[79,49,81,47],[79,53,81,51,"result"],[79,59,81,57],[79,60,81,58,"damage"],[79,66,81,64],[80,14,82,12,"newState"],[80,22,82,20],[80,23,82,21,"enemies"],[80,30,82,28],[80,31,82,29,"enemyIndex"],[80,41,82,39],[80,42,82,40],[80,43,82,41,"lastDamaged"],[80,54,82,52],[80,57,82,55,"newTick"],[80,64,82,62],[81,12,83,10],[81,13,83,11],[81,14,83,12],[82,10,84,8],[83,8,85,6],[83,9,85,7],[83,10,85,8],[85,8,87,6],[86,8,88,6],[86,13,88,11],[86,17,88,15,"i"],[86,18,88,16],[86,21,88,19],[86,22,88,20],[86,24,88,22,"i"],[86,25,88,23],[86,28,88,26],[86,29,88,27],[86,31,88,29,"i"],[86,32,88,30],[86,34,88,32],[86,36,88,34],[87,10,89,8],[87,14,89,12,"newState"],[87,22,89,20],[87,23,89,21,"abilityManager"],[87,37,89,35],[87,38,89,36,"isAbilityReady"],[87,52,89,50],[87,53,89,51,"i"],[87,54,89,52],[87,55,89,53],[87,59,89,57,"newState"],[87,67,89,65],[87,68,89,66,"enemies"],[87,75,89,73],[87,76,89,74,"length"],[87,82,89,80],[87,85,89,83],[87,86,89,84],[87,88,89,86],[88,12,90,10],[88,16,90,14,"newState"],[88,24,90,22],[88,25,90,23,"abilityManager"],[88,39,90,37],[88,40,90,38,"useAbility"],[88,50,90,48],[88,51,90,49,"i"],[88,52,90,50],[88,54,90,52,"newTick"],[88,61,90,59],[88,62,90,60],[88,64,90,62],[89,14,91,12,"castAbility"],[89,25,91,23],[89,26,91,24,"newState"],[89,34,91,32],[89,36,91,34,"i"],[89,37,91,35],[89,38,91,36],[90,12,92,10],[91,10,93,8],[92,8,94,6],[94,8,96,6],[95,8,97,6,"newState"],[95,16,97,14],[95,17,97,15,"enemies"],[95,24,97,22],[95,27,97,25,"newState"],[95,35,97,33],[95,36,97,34,"enemies"],[95,43,97,41],[95,44,97,42,"filter"],[95,50,97,48],[95,51,97,49,"enemy"],[95,56,97,54],[95,60,97,58,"enemy"],[95,65,97,63],[95,66,97,64,"health"],[95,72,97,70],[95,75,97,73],[95,76,97,74],[95,77,97,75],[97,8,99,6],[98,8,100,6],[98,12,100,10,"newState"],[98,20,100,18],[98,21,100,19,"enemies"],[98,28,100,26],[98,29,100,27,"length"],[98,35,100,33],[98,40,100,38],[98,41,100,39],[98,43,100,41],[99,10,101,8,"spawnTestEnemy"],[99,24,101,22],[99,25,101,23,"newState"],[99,33,101,31],[99,34,101,32],[100,8,102,6],[101,8,104,6],[101,15,104,13,"newState"],[101,23,104,21],[102,6,105,4],[102,7,105,5],[102,47,105,6],[103,4,106,2],[103,5,106,3],[105,4,108,2],[106,4,109,2],[106,10,109,8,"castAbility"],[106,21,109,19],[106,24,109,22,"castAbility"],[106,25,109,23,"state"],[106,30,109,41],[106,32,109,43,"slotIndex"],[106,41,109,60],[106,46,109,65],[107,6,110,4],[107,12,110,10,"deck"],[107,16,110,14],[107,19,110,17,"state"],[107,24,110,22],[107,25,110,23,"abilityManager"],[107,39,110,37],[107,40,110,38,"getDeck"],[107,47,110,45],[107,48,110,46],[107,49,110,47],[108,6,111,4],[108,12,111,10,"ability"],[108,19,111,17],[108,22,111,20,"deck"],[108,26,111,24],[108,27,111,25,"slots"],[108,32,111,30],[108,33,111,31,"slotIndex"],[108,42,111,40],[108,43,111,41],[109,6,112,4],[109,10,112,8],[109,11,112,9,"ability"],[109,18,112,16],[109,20,112,18],[111,6,114,4],[112,6,115,4],[112,12,115,10,"target"],[112,18,115,16],[112,21,115,19,"state"],[112,26,115,24],[112,27,115,25,"enemies"],[112,34,115,32],[112,35,115,33],[112,36,115,34],[112,37,115,35],[113,6,116,4],[113,10,116,8],[113,11,116,9,"target"],[113,17,116,15],[113,19,116,17],[115,6,118,4],[116,6,119,4],[116,10,119,8,"damage"],[116,16,119,14],[116,19,119,17,"ability"],[116,26,119,24],[116,27,119,25,"stats"],[116,32,119,30],[116,33,119,31,"baseDamage"],[116,43,119,41],[118,6,121,4],[119,6,122,4,"deck"],[119,10,122,8],[119,11,122,9,"activeSynergies"],[119,26,122,24],[119,27,122,25,"forEach"],[119,34,122,32],[119,35,122,33,"synergy"],[119,42,122,40],[119,46,122,44],[120,8,123,6],[120,12,123,10,"synergy"],[120,19,123,17],[120,20,123,18,"bonus"],[120,25,123,23],[120,26,123,24,"damageBonus"],[120,37,123,35],[120,41,124,10,"synergy"],[120,48,124,17],[120,49,124,18,"requiredTags"],[120,61,124,30],[120,62,124,31,"some"],[120,66,124,35],[120,67,124,36,"tag"],[120,70,124,39],[120,74,124,43,"ability"],[120,81,124,50],[120,82,124,51,"tags"],[120,86,124,55],[120,87,124,56,"includes"],[120,95,124,64],[120,96,124,65,"tag"],[120,99,124,68],[120,100,124,69],[120,101,124,70],[120,103,124,72],[121,10,125,8,"damage"],[121,16,125,14],[121,20,125,19],[121,21,125,20],[121,24,125,23,"synergy"],[121,31,125,30],[121,32,125,31,"bonus"],[121,37,125,36],[121,38,125,37,"damageBonus"],[121,49,125,48],[121,52,125,51],[121,55,125,55],[122,8,126,6],[123,6,127,4],[123,7,127,5],[123,8,127,6],[125,6,129,4],[126,6,130,4],[126,12,130,10,"damageResult"],[126,24,130,22],[126,27,130,25,"DamageCalculator"],[126,46,130,41],[126,47,130,41,"DamageCalculator"],[126,63,130,41],[126,64,130,42,"calculateDamage"],[126,79,130,57],[126,80,130,58,"damage"],[126,86,130,64],[126,88,130,66,"state"],[126,93,130,71],[126,94,130,72,"playerStats"],[126,105,130,83],[126,107,130,85,"target"],[126,113,130,91],[126,114,130,92,"stats"],[126,119,130,97],[126,120,130,98],[128,6,132,4],[129,6,133,4],[129,10,133,8,"ability"],[129,17,133,15],[129,18,133,16,"effects"],[129,25,133,23],[129,26,133,24,"includes"],[129,34,133,32],[129,35,133,33],[129,49,133,47],[129,50,133,48],[129,52,133,50],[130,8,134,6,"target"],[130,14,134,12],[130,15,134,13,"health"],[130,21,134,19],[130,25,134,23,"damageResult"],[130,37,134,35],[130,38,134,36,"damage"],[130,44,134,42],[131,8,135,6,"target"],[131,14,135,12],[131,15,135,13,"lastDamaged"],[131,26,135,24],[131,29,135,27,"state"],[131,34,135,32],[131,35,135,33,"currentTick"],[131,46,135,44],[132,6,136,4],[132,7,136,5],[132,13,136,11],[132,17,136,15,"ability"],[132,24,136,22],[132,25,136,23,"effects"],[132,32,136,30],[132,33,136,31,"includes"],[132,41,136,39],[132,42,136,40],[132,47,136,45],[132,48,136,46],[132,50,136,48],[133,8,137,6],[134,8,138,6,"state"],[134,13,138,11],[134,14,138,12,"enemies"],[134,21,138,19],[134,22,138,20,"forEach"],[134,29,138,27],[134,30,138,28,"enemy"],[134,35,138,33],[134,39,138,37],[135,10,139,8,"enemy"],[135,15,139,13],[135,16,139,14,"health"],[135,22,139,20],[135,26,139,24,"Math"],[135,30,139,28],[135,31,139,29,"floor"],[135,36,139,34],[135,37,139,35,"damageResult"],[135,49,139,47],[135,50,139,48,"damage"],[135,56,139,54],[135,59,139,57],[135,62,139,60],[135,63,139,61],[135,64,139,62],[135,65,139,63],[136,10,140,8,"enemy"],[136,15,140,13],[136,16,140,14,"lastDamaged"],[136,27,140,25],[136,30,140,28,"state"],[136,35,140,33],[136,36,140,34,"currentTick"],[136,47,140,45],[137,8,141,6],[137,9,141,7],[137,10,141,8],[138,6,142,4],[140,6,144,4],[141,6,145,4],[141,10,145,8,"ability"],[141,17,145,15],[141,18,145,16,"effects"],[141,25,145,23],[141,26,145,24,"includes"],[141,34,145,32],[141,35,145,33],[141,40,145,38],[141,41,145,39],[141,45,145,43,"ability"],[141,52,145,50],[141,53,145,51,"stats"],[141,58,145,56],[141,59,145,57,"duration"],[141,67,145,65],[141,69,145,67],[142,8,146,6,"state"],[142,13,146,11],[142,14,146,12,"statusEffects"],[142,27,146,25],[142,28,146,26,"addEffect"],[142,37,146,35],[142,38,146,36,"target"],[142,44,146,42],[142,45,146,43,"id"],[142,47,146,45],[142,49,146,47],[143,10,147,8,"id"],[143,12,147,10],[143,14,147,12],[143,17,147,15,"ability"],[143,24,147,22],[143,25,147,23,"id"],[143,27,147,25],[143,33,147,31],[144,10,148,8,"type"],[144,14,148,12],[144,16,148,14],[144,21,148,19],[145,10,149,8,"remainingTicks"],[145,24,149,22],[145,26,149,24,"Math"],[145,30,149,28],[145,31,149,29,"floor"],[145,36,149,34],[145,37,149,35,"ability"],[145,44,149,42],[145,45,149,43,"stats"],[145,50,149,48],[145,51,149,49,"duration"],[145,59,149,57],[145,62,149,60],[145,64,149,62],[145,65,149,63],[146,10,149,65],[147,10,150,8,"tickInterval"],[147,22,150,20],[147,24,150,22],[147,26,150,24],[148,10,150,26],[149,10,151,8,"lastTick"],[149,18,151,16],[149,20,151,18,"state"],[149,25,151,23],[149,26,151,24,"currentTick"],[149,37,151,35],[150,10,152,8,"value"],[150,15,152,13],[150,17,152,15,"Math"],[150,21,152,19],[150,22,152,20,"floor"],[150,27,152,25],[150,28,152,26,"damage"],[150,34,152,32],[150,37,152,35],[150,40,152,38],[150,41,152,39],[151,10,152,41],[152,10,153,8,"stackable"],[152,19,153,17],[152,21,153,19],[153,8,154,6],[153,9,154,7],[153,10,154,8],[154,6,155,4],[155,6,157,4,"console"],[155,13,157,11],[155,14,157,12,"log"],[155,17,157,15],[155,18,157,16],[155,24,157,22,"ability"],[155,31,157,29],[155,32,157,30,"name"],[155,36,157,34],[155,54,157,52,"damageResult"],[155,66,157,64],[155,67,157,65,"damage"],[155,73,157,71],[155,76,157,74,"damageResult"],[155,88,157,86],[155,89,157,87,"isCritical"],[155,99,157,97],[155,102,157,100],[155,112,157,110],[155,115,157,113],[155,117,157,115],[155,119,157,117],[155,120,157,118],[156,4,158,2],[156,5,158,3],[158,4,160,2],[159,4,161,2],[159,10,161,8,"spawnTestEnemy"],[159,24,161,22],[159,27,161,26,"state"],[159,32,161,44],[159,36,161,49],[160,6,162,4],[160,12,162,10,"enemy"],[160,17,162,28],[160,20,162,31],[161,8,163,6,"id"],[161,10,163,8],[161,12,163,10],[161,21,163,19,"Date"],[161,25,163,23],[161,26,163,24,"now"],[161,29,163,27],[161,30,163,28],[161,31,163,29],[161,33,163,31],[162,8,164,6,"name"],[162,12,164,10],[162,14,164,12],[162,24,164,22],[163,8,165,6,"health"],[163,14,165,12],[163,16,165,14],[163,19,165,17],[164,8,166,6,"maxHealth"],[164,17,166,15],[164,19,166,17],[164,22,166,20],[165,8,167,6,"stats"],[165,13,167,11],[165,15,167,13],[166,10,168,8,"attack"],[166,16,168,14],[166,18,168,16],[166,20,168,18],[167,10,169,8,"defense"],[167,17,169,15],[167,19,169,17],[167,21,169,19],[168,10,170,8,"health"],[168,16,170,14],[168,18,170,16],[168,21,170,19],[169,10,171,8,"maxHealth"],[169,19,171,17],[169,21,171,19],[169,24,171,22],[170,10,172,8,"critChance"],[170,20,172,18],[170,22,172,20],[170,23,172,21],[171,10,173,8,"critDamage"],[171,20,173,18],[171,22,173,20],[171,25,173,23],[172,10,174,8,"cooldownReduction"],[172,27,174,25],[172,29,174,27],[173,8,175,6],[173,9,175,7],[174,8,176,6,"position"],[174,16,176,14],[174,18,176,16],[175,10,176,18,"x"],[175,11,176,19],[175,13,176,21],[175,16,176,24],[176,10,176,26,"y"],[176,11,176,27],[176,13,176,29],[177,8,176,33],[177,9,176,34],[178,8,177,6,"lastDamaged"],[178,19,177,17],[178,21,177,19],[179,6,178,4],[179,7,178,5],[180,6,180,4,"state"],[180,11,180,9],[180,12,180,10,"enemies"],[180,19,180,17],[180,20,180,18,"push"],[180,24,180,22],[180,25,180,23,"enemy"],[180,30,180,28],[180,31,180,29],[181,4,181,2],[181,5,181,3],[183,4,183,2],[184,4,184,2],[184,10,184,8,"startCombat"],[184,21,184,19],[184,24,184,22,"startCombat"],[184,25,184,22],[184,30,184,28],[185,6,185,4,"setCombatState"],[185,20,185,18],[185,21,185,19,"prev"],[185,25,185,23],[185,29,185,23,"Object"],[185,35,185,23],[185,36,185,23,"assign"],[185,42,185,23],[185,47,185,33,"prev"],[185,51,185,37],[186,8,185,39,"isInCombat"],[186,18,185,49],[186,20,185,51],[187,6,185,55],[187,8,185,58],[187,9,185,59],[189,6,187,4],[190,6,188,4,"combatEngine"],[190,25,188,16],[190,26,188,16,"combatEngine"],[190,38,188,16],[190,39,188,17,"addTickCallback"],[190,54,188,32],[190,55,188,33,"handleCombatTick"],[190,71,188,49],[190,72,188,50],[191,6,190,4],[191,10,190,8],[191,11,190,9,"combatEngine"],[191,30,190,21],[191,31,190,21,"combatEngine"],[191,43,190,21],[191,45,190,23],[192,8,191,6,"combatEngine"],[192,27,191,18],[192,28,191,18,"combatEngine"],[192,40,191,18],[192,41,191,19,"start"],[192,46,191,24],[192,47,191,25],[192,48,191,26],[193,6,192,4],[194,4,193,2],[194,5,193,3],[196,4,195,2],[197,4,196,2],[197,10,196,8,"stopCombat"],[197,20,196,18],[197,23,196,21,"stopCombat"],[197,24,196,21],[197,29,196,27],[198,6,197,4,"setCombatState"],[198,20,197,18],[198,21,197,19,"prev"],[198,25,197,23],[198,29,197,23,"Object"],[198,35,197,23],[198,36,197,23,"assign"],[198,42,197,23],[198,47,197,33,"prev"],[198,51,197,37],[199,8,197,39,"isInCombat"],[199,18,197,49],[199,20,197,51],[200,6,197,56],[200,8,197,59],[200,9,197,60],[201,6,198,4,"combatEngine"],[201,25,198,16],[201,26,198,16,"combatEngine"],[201,38,198,16],[201,39,198,17,"removeTickCallback"],[201,57,198,35],[201,58,198,36,"handleCombatTick"],[201,74,198,52],[201,75,198,53],[202,4,199,2],[202,5,199,3],[204,4,201,2],[205,4,202,2],[205,10,202,8,"equipAbility"],[205,22,202,20],[205,25,202,23,"equipAbility"],[205,26,202,24,"abilityId"],[205,35,202,41],[205,37,202,43,"slotIndex"],[205,46,202,60],[205,51,202,74],[206,6,203,4],[206,13,203,11,"combatState"],[206,24,203,22],[206,25,203,23,"abilityManager"],[206,39,203,37],[206,40,203,38,"equipAbility"],[206,52,203,50],[206,53,203,51,"abilityId"],[206,62,203,60],[206,64,203,62,"slotIndex"],[206,73,203,71],[206,74,203,72],[207,4,204,2],[207,5,204,3],[208,4,206,2],[208,10,206,8,"getDeck"],[208,17,206,15],[208,20,206,18,"getDeck"],[208,21,206,18],[208,26,206,24],[209,6,207,4],[209,13,207,11,"combatState"],[209,24,207,22],[209,25,207,23,"abilityManager"],[209,39,207,37],[209,40,207,38,"getDeck"],[209,47,207,45],[209,48,207,46],[209,49,207,47],[210,4,208,2],[210,5,208,3],[211,4,210,2],[211,10,210,8,"getAvailableAbilities"],[211,31,210,29],[211,34,210,32,"getAvailableAbilities"],[211,35,210,32],[211,40,210,38],[212,6,211,4],[212,13,211,11,"combatState"],[212,24,211,22],[212,25,211,23,"abilityManager"],[212,39,211,37],[212,40,211,38,"getAvailableAbilities"],[212,61,211,59],[212,62,211,60],[212,63,211,61],[213,4,212,2],[213,5,212,3],[214,4,214,2],[214,10,214,8,"upgradeAbility"],[214,24,214,22],[214,27,214,26,"abilityId"],[214,36,214,43],[214,40,214,57],[215,6,215,4],[215,13,215,11,"combatState"],[215,24,215,22],[215,25,215,23,"abilityManager"],[215,39,215,37],[215,40,215,38,"upgradeAbility"],[215,54,215,52],[215,55,215,53,"abilityId"],[215,64,215,62],[215,65,215,63],[216,4,216,2],[216,5,216,3],[218,4,218,2],[219,4,219,2],[219,8,219,2,"useEffect"],[219,14,219,11],[219,15,219,11,"useEffect"],[219,24,219,11],[219,26,219,12],[219,32,219,18],[220,6,220,4,"combatEngine"],[220,25,220,16],[220,26,220,16,"combatEngine"],[220,38,220,16],[220,39,220,17,"start"],[220,44,220,22],[220,45,220,23],[220,46,220,24],[222,6,222,4],[223,6,223,4,"combatState"],[223,17,223,15],[223,18,223,16,"abilityManager"],[223,32,223,30],[223,33,223,31,"equipAbility"],[223,45,223,43],[223,46,223,44],[223,62,223,60],[223,64,223,62],[223,65,223,63],[223,66,223,64],[224,6,224,4,"combatState"],[224,17,224,15],[224,18,224,16,"abilityManager"],[224,32,224,30],[224,33,224,31,"equipAbility"],[224,45,224,43],[224,46,224,44],[224,61,224,59],[224,63,224,61],[224,64,224,62],[224,65,224,63],[225,6,226,4],[225,13,226,11],[225,19,226,17],[226,8,227,6,"combatEngine"],[226,27,227,18],[226,28,227,18,"combatEngine"],[226,40,227,18],[226,41,227,19,"stop"],[226,45,227,23],[226,46,227,24],[226,47,227,25],[227,6,228,4],[227,7,228,5],[228,4,229,2],[228,5,229,3],[228,7,229,5],[228,9,229,7],[228,10,229,8],[229,4,231,2],[229,10,231,8,"contextValue"],[229,22,231,39],[229,25,231,42],[230,6,232,4,"combatState"],[230,17,232,15],[231,6,233,4,"startCombat"],[231,17,233,15],[232,6,234,4,"stopCombat"],[232,16,234,14],[233,6,235,4,"equipAbility"],[233,18,235,16],[234,6,236,4,"getDeck"],[234,13,236,11],[235,6,237,4,"getAvailableAbilities"],[235,27,237,25],[236,6,238,4,"upgradeAbility"],[237,4,239,2],[237,5,239,3],[238,4,241,2],[238,24,242,4],[238,28,242,4,"_reactJsxDevRuntime"],[238,47,242,4],[238,48,242,4,"jsxDEV"],[238,54,242,4],[238,56,242,5,"CombatContext"],[238,69,242,18],[238,70,242,19,"Provider"],[238,78,242,27],[239,6,242,28,"value"],[239,11,242,33],[239,13,242,35,"contextValue"],[239,25,242,48],[240,6,242,48,"children"],[240,14,242,48],[240,16,243,7,"children"],[241,4,243,15],[242,6,243,15,"fileName"],[242,14,243,15],[242,16,243,15,"_jsxFileName"],[242,28,243,15],[243,6,243,15,"lineNumber"],[243,16,243,15],[244,6,243,15,"columnNumber"],[244,18,243,15],[245,4,243,15],[245,11,244,28],[245,12,244,29],[246,2,246,0],[246,3,246,1],[247,2,246,2,"_s3"],[247,5,246,2],[247,6,44,13,"CombatProvider"],[247,20,44,27],[248,2,44,27,"_c"],[248,4,44,27],[248,7,44,13,"CombatProvider"],[248,21,44,27],[249,2,44,27],[249,6,44,27,"_c"],[249,8,44,27],[250,2,44,27,"$RefreshReg$"],[250,14,44,27],[250,15,44,27,"_c"],[250,17,44,27],[251,0,44,27],[251,3]],"functionMap":{"names":["<global>","useCombat","CombatProvider","handleCombatTick","setCombatState$argument_0","effectResults.forEach$argument_0","newState.enemies.findIndex$argument_0","results.forEach$argument_0","newState.enemies.filter$argument_0","castAbility","deck.activeSynergies.forEach$argument_0","synergy.requiredTags.some$argument_0","state.enemies.forEach$argument_0","spawnTestEnemy","startCombat","stopCombat","equipAbility","getDeck","getAvailableAbilities","upgradeAbility","useEffect$argument_0","<anonymous>"],"mappings":"AAA;yBCmC;CDM;8BEE;2BCmB;mBCC;4BCa;sDCC,sBD;0BEE;WFG;ODE;iDIY,yBJ;KDQ;GDC;sBOG;iCCa;oCCE,iCD;KDG;4BGW;OHG;GPiB;yBWG;GXoB;sBYG;mBVC,uCU;GZQ;qBaG;mBXC,wCW;GbE;uBcG;GdE;kBeE;GfE;gCgBE;GhBE;yBiBE;GjBE;YkBG;WCO;KDE;GlBC;CFiB"},"hasCjsExports":false},"type":"js/module"}]}