{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./Base64Url.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":43,"index":43}}],"key":"/wffQY0nS+ARLcLSLdlT7VoRJLI=","exportNames":["*"],"imports":1}},{"name":"./BitLength.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":44},"end":{"line":2,"column":43,"index":87}}],"key":"5xmtJtpg0dRopT06QNauSACXUpU=","exportNames":["*"],"imports":1}},{"name":"./field/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":84,"index":172}}],"key":"OgqlY9EIISkcj5z5VyWIgLRFhvY=","exportNames":["*"],"imports":1}},{"name":"./sequence/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":173},"end":{"line":4,"column":52,"index":225}}],"key":"WIBohOStxRXxg4Nw04DOd2cxexY=","exportNames":["*"],"imports":1}},{"name":"../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":226},"end":{"line":5,"column":66,"index":292}}],"key":"rg9G2hGSxUlgvvl94nwST8IJkQ8=","exportNames":["*"],"imports":1}},{"name":"../model/Fields.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":293},"end":{"line":6,"column":44,"index":337}}],"key":"RXzlIqGT8pN20tzTd7Blbgy1jUg=","exportNames":["*"],"imports":1}},{"name":"../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":338},"end":{"line":7,"column":56,"index":394}}],"key":"CtBebnGS/4nZdZlVrl5RR9qrROU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"SegmentEncoder\", {\n    enumerable: true,\n    get: function () {\n      return SegmentEncoder;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _Base64UrlJs = require(_dependencyMap[2], \"./Base64Url.js\");\n  var _BitLengthJs = require(_dependencyMap[3], \"./BitLength.js\");\n  var _fieldIndexJs = require(_dependencyMap[4], \"./field/index.js\");\n  var _sequenceIndexJs = require(_dependencyMap[5], \"./sequence/index.js\");\n  var _errorsIndexJs = require(_dependencyMap[6], \"../errors/index.js\");\n  var _modelFieldsJs = require(_dependencyMap[7], \"../model/Fields.js\");\n  var _modelIndexJs = require(_dependencyMap[8], \"../model/index.js\");\n  var SegmentEncoder = /*#__PURE__*/function () {\n    function SegmentEncoder() {\n      (0, _classCallCheck.default)(this, SegmentEncoder);\n    }\n    return (0, _createClass.default)(SegmentEncoder, null, [{\n      key: \"encode\",\n      value: function encode(tcModel, segment) {\n        var sequence;\n        try {\n          sequence = this.fieldSequence[String(tcModel.version)][segment];\n        } catch (err) {\n          throw new _errorsIndexJs.EncodingError(`Unable to encode version: ${tcModel.version}, segment: ${segment}`);\n        }\n        var bitField = '';\n        /**\n         * If this is anything other than the core segment we have a \"segment id\"\n         * to append to the front of the string\n         */\n        if (segment !== _modelIndexJs.Segment.CORE) {\n          bitField = _fieldIndexJs.IntEncoder.encode(_modelIndexJs.SegmentIDs.KEY_TO_ID[segment], _BitLengthJs.BitLength.segmentType);\n        }\n        var fieldEncoderMap = (0, _fieldIndexJs.FieldEncoderMap)();\n        sequence.forEach(key => {\n          var value = tcModel[key];\n          var encoder = fieldEncoderMap[key];\n          var numBits = _BitLengthJs.BitLength[key];\n          if (numBits === undefined) {\n            if (this.isPublisherCustom(key)) {\n              /**\n               * publisherCustom[Consents | LegitimateInterests] are an edge case\n               * because they are of variable length. The length is defined in a\n               * separate field named numCustomPurposes.\n               */\n              numBits = Number(tcModel[_modelFieldsJs.Fields.numCustomPurposes]);\n            }\n          }\n          try {\n            bitField += encoder.encode(value, numBits);\n          } catch (err) {\n            throw new _errorsIndexJs.EncodingError(`Error encoding ${segment}->${key}: ${err.message}`);\n          }\n        });\n        // base64url encode the string and return\n        return _Base64UrlJs.Base64Url.encode(bitField);\n      }\n    }, {\n      key: \"decode\",\n      value: function decode(encodedString, tcModel, segment) {\n        var bitField = _Base64UrlJs.Base64Url.decode(encodedString);\n        var bStringIdx = 0;\n        if (segment === _modelIndexJs.Segment.CORE) {\n          tcModel.version = _fieldIndexJs.IntEncoder.decode(bitField.substr(bStringIdx, _BitLengthJs.BitLength[_modelFieldsJs.Fields.version]), _BitLengthJs.BitLength[_modelFieldsJs.Fields.version]);\n        }\n        if (segment !== _modelIndexJs.Segment.CORE) {\n          bStringIdx += _BitLengthJs.BitLength.segmentType;\n        }\n        var sequence = this.fieldSequence[String(tcModel.version)][segment];\n        var fieldEncoderMap = (0, _fieldIndexJs.FieldEncoderMap)();\n        sequence.forEach(key => {\n          var encoder = fieldEncoderMap[key];\n          var numBits = _BitLengthJs.BitLength[key];\n          if (numBits === undefined) {\n            if (this.isPublisherCustom(key)) {\n              /**\n               * publisherCustom[Consents | LegitimateInterests] are an edge case\n               * because they are of variable length. The length is defined in a\n               * separate field named numCustomPurposes.\n               */\n              numBits = Number(tcModel[_modelFieldsJs.Fields.numCustomPurposes]);\n            }\n          }\n          if (numBits !== 0) {\n            /**\n             * numBits could be 0 if this is a publisher custom purposes field and\n             * no custom purposes are defined. If that is the case, we don't need\n             * to gather no bits and we don't need to increment our bStringIdx\n             * pointer because those would all be 0 increments and would mess up\n             * the next logical if statement.\n             */\n            var bits = bitField.substr(bStringIdx, numBits);\n            if (encoder === _fieldIndexJs.VendorVectorEncoder) {\n              tcModel[key] = encoder.decode(bits, tcModel.version);\n            } else {\n              tcModel[key] = encoder.decode(bits, numBits);\n            }\n            if (Number.isInteger(numBits)) {\n              bStringIdx += numBits;\n            } else if (Number.isInteger(tcModel[key].bitLength)) {\n              bStringIdx += tcModel[key].bitLength;\n            } else {\n              throw new _errorsIndexJs.DecodingError(key);\n            }\n          }\n        });\n        return tcModel;\n      }\n    }, {\n      key: \"isPublisherCustom\",\n      value: function isPublisherCustom(key) {\n        return key.indexOf('publisherCustom') === 0;\n      }\n    }]);\n  }();\n  SegmentEncoder.fieldSequence = new _sequenceIndexJs.FieldSequence();\n});","lineCount":133,"map":[[12,2,8,0,"Object"],[12,8,8,0],[12,9,8,0,"defineProperty"],[12,23,8,0],[12,24,8,0,"exports"],[12,31,8,0],[13,4,8,0,"enumerable"],[13,14,8,0],[14,4,8,0,"get"],[14,7,8,0],[14,18,8,0,"get"],[14,19,8,0],[15,6,8,0],[15,13,8,0,"SegmentEncoder"],[15,27,8,0],[16,4,8,0],[17,2,8,0],[18,2,106,1],[18,6,106,1,"_babelRuntimeHelpersClassCallCheck"],[18,40,106,1],[18,43,106,1,"require"],[18,50,106,1],[18,51,106,1,"_dependencyMap"],[18,65,106,1],[19,2,106,1],[19,6,106,1,"_classCallCheck"],[19,21,106,1],[19,24,106,1,"_interopDefault"],[19,39,106,1],[19,40,106,1,"_babelRuntimeHelpersClassCallCheck"],[19,74,106,1],[20,2,106,1],[20,6,106,1,"_babelRuntimeHelpersCreateClass"],[20,37,106,1],[20,40,106,1,"require"],[20,47,106,1],[20,48,106,1,"_dependencyMap"],[20,62,106,1],[21,2,106,1],[21,6,106,1,"_createClass"],[21,18,106,1],[21,21,106,1,"_interopDefault"],[21,36,106,1],[21,37,106,1,"_babelRuntimeHelpersCreateClass"],[21,68,106,1],[22,2,1,0],[22,6,1,0,"_Base64UrlJs"],[22,18,1,0],[22,21,1,0,"require"],[22,28,1,0],[22,29,1,0,"_dependencyMap"],[22,43,1,0],[23,2,2,0],[23,6,2,0,"_BitLengthJs"],[23,18,2,0],[23,21,2,0,"require"],[23,28,2,0],[23,29,2,0,"_dependencyMap"],[23,43,2,0],[24,2,3,0],[24,6,3,0,"_fieldIndexJs"],[24,19,3,0],[24,22,3,0,"require"],[24,29,3,0],[24,30,3,0,"_dependencyMap"],[24,44,3,0],[25,2,4,0],[25,6,4,0,"_sequenceIndexJs"],[25,22,4,0],[25,25,4,0,"require"],[25,32,4,0],[25,33,4,0,"_dependencyMap"],[25,47,4,0],[26,2,5,0],[26,6,5,0,"_errorsIndexJs"],[26,20,5,0],[26,23,5,0,"require"],[26,30,5,0],[26,31,5,0,"_dependencyMap"],[26,45,5,0],[27,2,6,0],[27,6,6,0,"_modelFieldsJs"],[27,20,6,0],[27,23,6,0,"require"],[27,30,6,0],[27,31,6,0,"_dependencyMap"],[27,45,6,0],[28,2,7,0],[28,6,7,0,"_modelIndexJs"],[28,19,7,0],[28,22,7,0,"require"],[28,29,7,0],[28,30,7,0,"_dependencyMap"],[28,44,7,0],[29,2,7,56],[29,6,8,13,"SegmentEncoder"],[29,20,8,27],[30,4,8,27],[30,13,8,27,"SegmentEncoder"],[30,28,8,27],[31,6,8,27],[31,10,8,27,"_classCallCheck"],[31,25,8,27],[31,26,8,27,"default"],[31,33,8,27],[31,41,8,27,"SegmentEncoder"],[31,55,8,27],[32,4,8,27],[33,4,8,27],[33,15,8,27,"_createClass"],[33,27,8,27],[33,28,8,27,"default"],[33,35,8,27],[33,37,8,27,"SegmentEncoder"],[33,51,8,27],[34,6,8,27,"key"],[34,9,8,27],[35,6,8,27,"value"],[35,11,8,27],[35,13,10,4],[35,22,10,11,"encode"],[35,28,10,17,"encode"],[35,29,10,18,"tcModel"],[35,36,10,25],[35,38,10,27,"segment"],[35,45,10,34],[35,47,10,36],[36,8,11,8],[36,12,11,12,"sequence"],[36,20,11,20],[37,8,12,8],[37,12,12,12],[38,10,13,12,"sequence"],[38,18,13,20],[38,21,13,23],[38,25,13,27],[38,26,13,28,"fieldSequence"],[38,39,13,41],[38,40,13,42,"String"],[38,46,13,48],[38,47,13,49,"tcModel"],[38,54,13,56],[38,55,13,57,"version"],[38,62,13,64],[38,63,13,65],[38,64,13,66],[38,65,13,67,"segment"],[38,72,13,74],[38,73,13,75],[39,8,14,8],[39,9,14,9],[39,10,15,8],[39,17,15,15,"err"],[39,20,15,18],[39,22,15,20],[40,10,16,12],[40,16,16,18],[40,20,16,22,"EncodingError"],[40,34,16,35],[40,35,16,35,"EncodingError"],[40,48,16,35],[40,49,16,36],[40,78,16,65,"tcModel"],[40,85,16,72],[40,86,16,73,"version"],[40,93,16,80],[40,107,16,94,"segment"],[40,114,16,101],[40,116,16,103],[40,117,16,104],[41,8,17,8],[42,8,18,8],[42,12,18,12,"bitField"],[42,20,18,20],[42,23,18,23],[42,25,18,25],[43,8,19,8],[44,0,20,0],[45,0,21,0],[46,0,22,0],[47,8,23,8],[47,12,23,12,"segment"],[47,19,23,19],[47,24,23,24,"Segment"],[47,37,23,31],[47,38,23,31,"Segment"],[47,45,23,31],[47,46,23,32,"CORE"],[47,50,23,36],[47,52,23,38],[48,10,24,12,"bitField"],[48,18,24,20],[48,21,24,23,"IntEncoder"],[48,34,24,33],[48,35,24,33,"IntEncoder"],[48,45,24,33],[48,46,24,34,"encode"],[48,52,24,40],[48,53,24,41,"SegmentIDs"],[48,66,24,51],[48,67,24,51,"SegmentIDs"],[48,77,24,51],[48,78,24,52,"KEY_TO_ID"],[48,87,24,61],[48,88,24,62,"segment"],[48,95,24,69],[48,96,24,70],[48,98,24,72,"BitLength"],[48,110,24,81],[48,111,24,81,"BitLength"],[48,120,24,81],[48,121,24,82,"segmentType"],[48,132,24,93],[48,133,24,94],[49,8,25,8],[50,8,26,8],[50,12,26,14,"fieldEncoderMap"],[50,27,26,29],[50,30,26,32],[50,34,26,32,"FieldEncoderMap"],[50,47,26,47],[50,48,26,47,"FieldEncoderMap"],[50,63,26,47],[50,65,26,48],[50,66,26,49],[51,8,27,8,"sequence"],[51,16,27,16],[51,17,27,17,"forEach"],[51,24,27,24],[51,25,27,26,"key"],[51,28,27,29],[51,32,27,34],[52,10,28,12],[52,14,28,18,"value"],[52,19,28,23],[52,22,28,26,"tcModel"],[52,29,28,33],[52,30,28,34,"key"],[52,33,28,37],[52,34,28,38],[53,10,29,12],[53,14,29,18,"encoder"],[53,21,29,25],[53,24,29,28,"fieldEncoderMap"],[53,39,29,43],[53,40,29,44,"key"],[53,43,29,47],[53,44,29,48],[54,10,30,12],[54,14,30,16,"numBits"],[54,21,30,23],[54,24,30,26,"BitLength"],[54,36,30,35],[54,37,30,35,"BitLength"],[54,46,30,35],[54,47,30,36,"key"],[54,50,30,39],[54,51,30,40],[55,10,31,12],[55,14,31,16,"numBits"],[55,21,31,23],[55,26,31,28,"undefined"],[55,35,31,37],[55,37,31,39],[56,12,32,16],[56,16,32,20],[56,20,32,24],[56,21,32,25,"isPublisherCustom"],[56,38,32,42],[56,39,32,43,"key"],[56,42,32,46],[56,43,32,47],[56,45,32,49],[57,14,33,20],[58,0,34,0],[59,0,35,0],[60,0,36,0],[61,0,37,0],[62,14,38,20,"numBits"],[62,21,38,27],[62,24,38,30,"Number"],[62,30,38,36],[62,31,38,37,"tcModel"],[62,38,38,44],[62,39,38,45,"Fields"],[62,53,38,51],[62,54,38,51,"Fields"],[62,60,38,51],[62,61,38,52,"numCustomPurposes"],[62,78,38,69],[62,79,38,70],[62,80,38,71],[63,12,39,16],[64,10,40,12],[65,10,41,12],[65,14,41,16],[66,12,42,16,"bitField"],[66,20,42,24],[66,24,42,28,"encoder"],[66,31,42,35],[66,32,42,36,"encode"],[66,38,42,42],[66,39,42,43,"value"],[66,44,42,48],[66,46,42,50,"numBits"],[66,53,42,57],[66,54,42,58],[67,10,43,12],[67,11,43,13],[67,12,44,12],[67,19,44,19,"err"],[67,22,44,22],[67,24,44,24],[68,12,45,16],[68,18,45,22],[68,22,45,26,"EncodingError"],[68,36,45,39],[68,37,45,39,"EncodingError"],[68,50,45,39],[68,51,45,40],[68,69,45,58,"segment"],[68,76,45,65],[68,81,45,70,"key"],[68,84,45,73],[68,89,45,78,"err"],[68,92,45,81],[68,93,45,82,"message"],[68,100,45,89],[68,102,45,91],[68,103,45,92],[69,10,46,12],[70,8,47,8],[70,9,47,9],[70,10,47,10],[71,8,48,8],[72,8,49,8],[72,15,49,15,"Base64Url"],[72,27,49,24],[72,28,49,24,"Base64Url"],[72,37,49,24],[72,38,49,25,"encode"],[72,44,49,31],[72,45,49,32,"bitField"],[72,53,49,40],[72,54,49,41],[73,6,50,4],[74,4,50,5],[75,6,50,5,"key"],[75,9,50,5],[76,6,50,5,"value"],[76,11,50,5],[76,13,51,4],[76,22,51,11,"decode"],[76,28,51,17,"decode"],[76,29,51,18,"encodedString"],[76,42,51,31],[76,44,51,33,"tcModel"],[76,51,51,40],[76,53,51,42,"segment"],[76,60,51,49],[76,62,51,51],[77,8,52,8],[77,12,52,14,"bitField"],[77,20,52,22],[77,23,52,25,"Base64Url"],[77,35,52,34],[77,36,52,34,"Base64Url"],[77,45,52,34],[77,46,52,35,"decode"],[77,52,52,41],[77,53,52,42,"encodedString"],[77,66,52,55],[77,67,52,56],[78,8,53,8],[78,12,53,12,"bStringIdx"],[78,22,53,22],[78,25,53,25],[78,26,53,26],[79,8,54,8],[79,12,54,12,"segment"],[79,19,54,19],[79,24,54,24,"Segment"],[79,37,54,31],[79,38,54,31,"Segment"],[79,45,54,31],[79,46,54,32,"CORE"],[79,50,54,36],[79,52,54,38],[80,10,55,12,"tcModel"],[80,17,55,19],[80,18,55,20,"version"],[80,25,55,27],[80,28,55,30,"IntEncoder"],[80,41,55,40],[80,42,55,40,"IntEncoder"],[80,52,55,40],[80,53,55,41,"decode"],[80,59,55,47],[80,60,55,48,"bitField"],[80,68,55,56],[80,69,55,57,"substr"],[80,75,55,63],[80,76,55,64,"bStringIdx"],[80,86,55,74],[80,88,55,76,"BitLength"],[80,100,55,85],[80,101,55,85,"BitLength"],[80,110,55,85],[80,111,55,86,"Fields"],[80,125,55,92],[80,126,55,92,"Fields"],[80,132,55,92],[80,133,55,93,"version"],[80,140,55,100],[80,141,55,101],[80,142,55,102],[80,144,55,104,"BitLength"],[80,156,55,113],[80,157,55,113,"BitLength"],[80,166,55,113],[80,167,55,114,"Fields"],[80,181,55,120],[80,182,55,120,"Fields"],[80,188,55,120],[80,189,55,121,"version"],[80,196,55,128],[80,197,55,129],[80,198,55,130],[81,8,56,8],[82,8,57,8],[82,12,57,12,"segment"],[82,19,57,19],[82,24,57,24,"Segment"],[82,37,57,31],[82,38,57,31,"Segment"],[82,45,57,31],[82,46,57,32,"CORE"],[82,50,57,36],[82,52,57,38],[83,10,58,12,"bStringIdx"],[83,20,58,22],[83,24,58,26,"BitLength"],[83,36,58,35],[83,37,58,35,"BitLength"],[83,46,58,35],[83,47,58,36,"segmentType"],[83,58,58,47],[84,8,59,8],[85,8,60,8],[85,12,60,14,"sequence"],[85,20,60,22],[85,23,60,25],[85,27,60,29],[85,28,60,30,"fieldSequence"],[85,41,60,43],[85,42,60,44,"String"],[85,48,60,50],[85,49,60,51,"tcModel"],[85,56,60,58],[85,57,60,59,"version"],[85,64,60,66],[85,65,60,67],[85,66,60,68],[85,67,60,69,"segment"],[85,74,60,76],[85,75,60,77],[86,8,61,8],[86,12,61,14,"fieldEncoderMap"],[86,27,61,29],[86,30,61,32],[86,34,61,32,"FieldEncoderMap"],[86,47,61,47],[86,48,61,47,"FieldEncoderMap"],[86,63,61,47],[86,65,61,48],[86,66,61,49],[87,8,62,8,"sequence"],[87,16,62,16],[87,17,62,17,"forEach"],[87,24,62,24],[87,25,62,26,"key"],[87,28,62,29],[87,32,62,34],[88,10,63,12],[88,14,63,18,"encoder"],[88,21,63,25],[88,24,63,28,"fieldEncoderMap"],[88,39,63,43],[88,40,63,44,"key"],[88,43,63,47],[88,44,63,48],[89,10,64,12],[89,14,64,16,"numBits"],[89,21,64,23],[89,24,64,26,"BitLength"],[89,36,64,35],[89,37,64,35,"BitLength"],[89,46,64,35],[89,47,64,36,"key"],[89,50,64,39],[89,51,64,40],[90,10,65,12],[90,14,65,16,"numBits"],[90,21,65,23],[90,26,65,28,"undefined"],[90,35,65,37],[90,37,65,39],[91,12,66,16],[91,16,66,20],[91,20,66,24],[91,21,66,25,"isPublisherCustom"],[91,38,66,42],[91,39,66,43,"key"],[91,42,66,46],[91,43,66,47],[91,45,66,49],[92,14,67,20],[93,0,68,0],[94,0,69,0],[95,0,70,0],[96,0,71,0],[97,14,72,20,"numBits"],[97,21,72,27],[97,24,72,30,"Number"],[97,30,72,36],[97,31,72,37,"tcModel"],[97,38,72,44],[97,39,72,45,"Fields"],[97,53,72,51],[97,54,72,51,"Fields"],[97,60,72,51],[97,61,72,52,"numCustomPurposes"],[97,78,72,69],[97,79,72,70],[97,80,72,71],[98,12,73,16],[99,10,74,12],[100,10,75,12],[100,14,75,16,"numBits"],[100,21,75,23],[100,26,75,28],[100,27,75,29],[100,29,75,31],[101,12,76,16],[102,0,77,0],[103,0,78,0],[104,0,79,0],[105,0,80,0],[106,0,81,0],[107,0,82,0],[108,12,83,16],[108,16,83,22,"bits"],[108,20,83,26],[108,23,83,29,"bitField"],[108,31,83,37],[108,32,83,38,"substr"],[108,38,83,44],[108,39,83,45,"bStringIdx"],[108,49,83,55],[108,51,83,57,"numBits"],[108,58,83,64],[108,59,83,65],[109,12,84,16],[109,16,84,20,"encoder"],[109,23,84,27],[109,28,84,32,"VendorVectorEncoder"],[109,41,84,51],[109,42,84,51,"VendorVectorEncoder"],[109,61,84,51],[109,63,84,53],[110,14,85,20,"tcModel"],[110,21,85,27],[110,22,85,28,"key"],[110,25,85,31],[110,26,85,32],[110,29,85,35,"encoder"],[110,36,85,42],[110,37,85,43,"decode"],[110,43,85,49],[110,44,85,50,"bits"],[110,48,85,54],[110,50,85,56,"tcModel"],[110,57,85,63],[110,58,85,64,"version"],[110,65,85,71],[110,66,85,72],[111,12,86,16],[111,13,86,17],[111,19,87,21],[112,14,88,20,"tcModel"],[112,21,88,27],[112,22,88,28,"key"],[112,25,88,31],[112,26,88,32],[112,29,88,35,"encoder"],[112,36,88,42],[112,37,88,43,"decode"],[112,43,88,49],[112,44,88,50,"bits"],[112,48,88,54],[112,50,88,56,"numBits"],[112,57,88,63],[112,58,88,64],[113,12,89,16],[114,12,90,16],[114,16,90,20,"Number"],[114,22,90,26],[114,23,90,27,"isInteger"],[114,32,90,36],[114,33,90,37,"numBits"],[114,40,90,44],[114,41,90,45],[114,43,90,47],[115,14,91,20,"bStringIdx"],[115,24,91,30],[115,28,91,34,"numBits"],[115,35,91,41],[116,12,92,16],[116,13,92,17],[116,19,93,21],[116,23,93,25,"Number"],[116,29,93,31],[116,30,93,32,"isInteger"],[116,39,93,41],[116,40,93,42,"tcModel"],[116,47,93,49],[116,48,93,50,"key"],[116,51,93,53],[116,52,93,54],[116,53,93,55,"bitLength"],[116,62,93,64],[116,63,93,65],[116,65,93,67],[117,14,94,20,"bStringIdx"],[117,24,94,30],[117,28,94,34,"tcModel"],[117,35,94,41],[117,36,94,42,"key"],[117,39,94,45],[117,40,94,46],[117,41,94,47,"bitLength"],[117,50,94,56],[118,12,95,16],[118,13,95,17],[118,19,96,21],[119,14,97,20],[119,20,97,26],[119,24,97,30,"DecodingError"],[119,38,97,43],[119,39,97,43,"DecodingError"],[119,52,97,43],[119,53,97,44,"key"],[119,56,97,47],[119,57,97,48],[120,12,98,16],[121,10,99,12],[122,8,100,8],[122,9,100,9],[122,10,100,10],[123,8,101,8],[123,15,101,15,"tcModel"],[123,22,101,22],[124,6,102,4],[125,4,102,5],[126,6,102,5,"key"],[126,9,102,5],[127,6,102,5,"value"],[127,11,102,5],[127,13,103,4],[127,22,103,11,"isPublisherCustom"],[127,39,103,28,"isPublisherCustom"],[127,40,103,29,"key"],[127,43,103,32],[127,45,103,34],[128,8,104,8],[128,15,104,15,"key"],[128,18,104,18],[128,19,104,19,"indexOf"],[128,26,104,26],[128,27,104,27],[128,44,104,44],[128,45,104,45],[128,50,104,50],[128,51,104,51],[129,6,105,4],[130,4,105,5],[131,2,105,5],[132,2,8,13,"SegmentEncoder"],[132,16,8,27],[132,17,9,11,"fieldSequence"],[132,30,9,24],[132,33,9,27],[132,37,9,31,"FieldSequence"],[132,53,9,44],[132,54,9,44,"FieldSequence"],[132,67,9,44],[132,68,9,45],[132,69,9,46],[133,0,9,46],[133,3]],"functionMap":{"names":["<global>","SegmentEncoder","encode","sequence.forEach$argument_0","decode","isPublisherCustom"],"mappings":"AAA;OCO;ICE;yBCiB;SDoB;KDG;IGC;yBDW;SCsC;KHE;IIC;KJE;CDC"},"hasCjsExports":false},"type":"js/module"}]}