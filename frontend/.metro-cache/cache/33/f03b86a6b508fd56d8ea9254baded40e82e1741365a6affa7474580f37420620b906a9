{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../data/ZoneData","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":124,"index":214}}],"key":"Tk16kQO+gPE+nhARrQWMquQhcUw=","exportNames":["*"],"imports":1}},{"name":"./GameContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":215},"end":{"line":3,"column":40,"index":255}}],"key":"iaNC+eD9SsoXq4AVpuqJBZlLVM4=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/src/contexts/ZoneContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(); // Helper function for fallback kill requirements (matches ZoneData.ts)\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useZone\", {\n    enumerable: true,\n    get: function () {\n      return useZone;\n    }\n  });\n  Object.defineProperty(exports, \"ZoneProvider\", {\n    enumerable: true,\n    get: function () {\n      return ZoneProvider;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopDefault(_react);\n  var _dataZoneData = require(_dependencyMap[1], \"../data/ZoneData\");\n  var _GameContext = require(_dependencyMap[2], \"./GameContext\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const calculateKillRequirement = (zoneId, level) => {\n    if (zoneId <= 5) return 25 + level * 5; // Zones 1-5: 30-50 kills per level\n    if (zoneId <= 15) return 40 + level * 10; // Zones 6-15: 50-90 kills per level  \n    if (zoneId <= 30) return 60 + level * 15; // Zones 16-30: 75-135 kills per level\n    if (zoneId <= 45) return 100 + level * 20; // Zones 31-45: 120-200 kills per level\n    return 150 + level * 25; // Zones 46-50: 175-275 kills per level (endgame)\n  };\n  const ZoneContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const useZone = () => {\n    _s();\n    const context = (0, _react.useContext)(ZoneContext);\n    if (!context) {\n      throw new Error('useZone must be used within a ZoneProvider');\n    }\n    return context;\n  };\n  _s(useZone, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  const ZoneProvider = ({\n    children\n  }) => {\n    _s2();\n    const {\n      gameState,\n      updateZoneProgress\n    } = (0, _GameContext.useGame)();\n\n    // Zone State - Separate \"progression\" from \"currently selected\" zones\n    const [currentZone, setCurrentZone] = (0, _react.useState)(() => {\n      console.log('üéØ ZONE INIT: Initializing currentZone (selected zone) to Zone 1 Level 1');\n      return _dataZoneData.ZONES[0];\n    }); // Currently selected zone for gameplay\n    const [currentZoneLevel, setCurrentZoneLevel] = (0, _react.useState)(() => {\n      console.log('üéØ ZONE INIT: Initializing currentZoneLevel to Zone 1 Level 1');\n      return _dataZoneData.ZONES[0]?.levels[0] || null;\n    });\n    const [progressionZone, setProgressionZone] = (0, _react.useState)(() => {\n      console.log('üéØ ZONE INIT: Initializing progressionZone (unlock progress) to Zone 1');\n      return _dataZoneData.ZONES[0];\n    }); // Highest unlocked zone for progression\n    const [hasInitializedZones, setHasInitializedZones] = (0, _react.useState)(false); // Flag to prevent re-initialization\n    const [zoneProgress, setZoneProgress] = (0, _react.useState)(() => {\n      // MOBILE FIX: Initialize with saved zone progress from GameContext instead of defaults\n      const savedProgress = gameState?.zoneProgress;\n      if (savedProgress && Object.keys(savedProgress).length > 0) {\n        console.log('üó∫Ô∏è Loading saved zone progress:', savedProgress);\n        return savedProgress;\n      } else {\n        console.log('üó∫Ô∏è No saved zone progress, using defaults');\n        return {\n          1: {\n            zoneId: 1,\n            currentLevel: 1,\n            killsInLevel: 0,\n            completed: false\n          }\n        };\n      }\n    });\n\n    // Initialize with game context data when it becomes available (ONLY ONCE)\n    (0, _react.useEffect)(() => {\n      if (gameState?.zoneProgress && !hasInitializedZones) {\n        console.log('üîÑ ZONE CONTEXT - Loading zone progress from GameContext (FIRST TIME):', gameState.zoneProgress);\n        setZoneProgress(gameState.zoneProgress);\n\n        // Find the highest unlocked zone for progression tracking\n        const progressEntries = Object.values(gameState.zoneProgress || {});\n        let highestZone = _dataZoneData.ZONES[0];\n        let highestLevel = _dataZoneData.ZONES[0]?.levels[0];\n        for (const progress of progressEntries) {\n          if (progress && progress.zoneId) {\n            const zone = _dataZoneData.ZONES.find(z => z.id === progress.zoneId);\n            if (zone) {\n              highestZone = zone;\n              highestLevel = zone.levels[(progress.currentLevel || 1) - 1];\n            }\n          }\n        }\n        console.log(`üéØ PROGRESSION ZONE SET: Zone ${highestZone.id} Level ${highestLevel?.level || 1} (highest unlocked)`);\n        setProgressionZone(highestZone);\n\n        // Set current selected zone to progression zone ONLY on initial load  \n        console.log(`üéØ SELECTED ZONE INITIALIZED (ONCE): Zone ${highestZone.id} Level ${highestLevel?.level || 1} (matching progression)`);\n        setCurrentZone(highestZone);\n        setCurrentZoneLevel(highestLevel || _dataZoneData.ZONES[0]?.levels[0]);\n        setHasInitializedZones(true); // Mark as initialized to prevent future auto-selection\n      } else if (gameState?.zoneProgress && hasInitializedZones) {\n        // Update zone progress data but DON'T change selected zone\n        console.log('üîÑ ZONE CONTEXT - Updating zone progress data (preserving selection)');\n        setZoneProgress(gameState.zoneProgress);\n\n        // Update progression zone tracking for unlock logic\n        const progressEntries = Object.values(gameState.zoneProgress || {});\n        let highestZone = _dataZoneData.ZONES[0];\n        for (const progress of progressEntries) {\n          if (progress && progress.zoneId) {\n            const zone = _dataZoneData.ZONES.find(z => z.id === progress.zoneId);\n            if (zone) {\n              highestZone = zone;\n            }\n          }\n        }\n        console.log(`üéØ PROGRESSION ZONE UPDATED: Zone ${highestZone.id} (selected zone unchanged)`);\n        setProgressionZone(highestZone);\n      }\n    }, [gameState?.zoneProgress, hasInitializedZones]);\n\n    // Initialize default zone based on player level\n    (0, _react.useEffect)(() => {\n      if (gameState?.ninja) {\n        const recommendedZone = (0, _dataZoneData.getZoneByLevel)(gameState.ninja.level);\n        if (recommendedZone && !currentZone) {\n          setCurrentZone(recommendedZone);\n          setCurrentZoneLevel(recommendedZone.levels[0]);\n        }\n      }\n    }, [gameState?.ninja?.level]);\n\n    // Zone selection and management - separate from progression\n    const selectZone = (zoneId, levelNumber) => {\n      if (!isZoneUnlockedLocal(zoneId)) {\n        console.log(`‚ùå Zone ${zoneId} is not unlocked`);\n        return false;\n      }\n      const zone = _dataZoneData.ZONES.find(z => z.id === zoneId);\n      if (!zone) {\n        console.log(`‚ùå Zone ${zoneId} not found`);\n        return false;\n      }\n      const level = zone.levels[levelNumber - 1];\n      if (!level) {\n        console.log(`‚ùå Zone ${zoneId} Level ${levelNumber} not found`);\n        return false;\n      }\n      console.log(`üéØ ZONE SELECTION: Setting currentZone to Zone ${zoneId} Level ${levelNumber} (${zone.name})`);\n      console.log(`üìç BEFORE: currentZone=${currentZone?.id}, currentLevel=${currentZoneLevel?.level}`);\n      setCurrentZone(zone);\n      setCurrentZoneLevel(level);\n      console.log(`üìç AFTER: Selected Zone ${zoneId} Level ${levelNumber} - Kills will count toward this zone`);\n      return true;\n    };\n\n    // Get progress for specific zone\n    const getZoneProgress = zoneId => {\n      return zoneProgress[zoneId] || null;\n    };\n\n    // Spawn enemy based on current zone/level\n    const spawnZoneEnemy = () => {\n      if (!currentZone || !currentZoneLevel) {\n        console.log('‚ùå No zone/level selected for enemy spawning');\n        return null;\n      }\n\n      // Randomly select enemy type from current level\n      const enemyTypeIds = currentZoneLevel.enemyTypes;\n      const randomEnemyTypeId = enemyTypeIds[Math.floor(Math.random() * enemyTypeIds.length)];\n      const enemyType = _dataZoneData.ENEMY_TYPES[randomEnemyTypeId];\n      if (!enemyType) {\n        console.log(`‚ùå Enemy type ${randomEnemyTypeId} not found`);\n        return null;\n      }\n\n      // Calculate scaled stats\n      const scaledStats = (0, _dataZoneData.calculateEnemyStats)(enemyType, currentZoneLevel, currentZone.id);\n\n      // Create enemy instance\n      const enemy = {\n        id: `${randomEnemyTypeId}_${Date.now()}_${Math.random()}`,\n        typeId: randomEnemyTypeId,\n        name: enemyType.name,\n        icon: enemyType.icon,\n        hp: scaledStats.hp,\n        maxHP: scaledStats.hp,\n        attack: scaledStats.attack,\n        xp: scaledStats.xp,\n        resistances: scaledStats.resistances,\n        position: {\n          x: Math.random() * 300 + 50,\n          // Random position in game area\n          y: Math.random() * 400 + 100\n        },\n        lastDamaged: 0\n      };\n      console.log(`üê∫ Spawned ${enemy.name} (${enemy.hp} HP, ${enemy.xp} XP) in ${currentZone.name}`);\n      return enemy;\n    };\n\n    // Record enemy kill and update progress\n    const recordEnemyKill = enemy => {\n      if (!currentZone || !currentZoneLevel) return;\n      console.log(`üíÄ ${enemy.name} killed! +${enemy.xp} XP`);\n      console.log(`üéØ KILL TRACKING: Recording kill for SELECTED Zone ${currentZone.id} Level ${currentZoneLevel.level}`);\n      setZoneProgress(prev => {\n        const newProgress = Object.assign({}, prev);\n        const zoneId = currentZone.id;\n        if (!newProgress[zoneId]) {\n          newProgress[zoneId] = {\n            zoneId,\n            currentLevel: 1,\n            killsInLevel: 0,\n            completed: false\n          };\n        }\n        const progress = Object.assign({}, newProgress[zoneId]);\n\n        // Get the required kills for current level from zone data\n        const currentZoneLevel = currentZone.levels[progress.currentLevel - 1];\n        const requiredKills = currentZoneLevel ? currentZoneLevel.requiredKills : calculateKillRequirement(zoneId, progress.currentLevel);\n\n        // Check if this kill will complete the level\n        const willCompleteLevel = progress.killsInLevel + 1 >= requiredKills;\n        if (willCompleteLevel) {\n          console.log(`üéâ Level ${progress.currentLevel} completed in ${currentZone.name}!`);\n\n          // Complete the level: set kills to requirement and advance\n          progress.killsInLevel = requiredKills;\n          console.log(`üìä Zone ${zoneId} Level ${progress.currentLevel}: ${progress.killsInLevel}/${requiredKills} kills (COMPLETED)`);\n        } else {\n          // Normal kill increment with subscription multiplier\n          const zoneKillMultiplier = gameState.subscriptionBenefits?.zone_kill_multiplier || 1.0;\n          const killsToAdd = Math.floor(1 * zoneKillMultiplier);\n          progress.killsInLevel += killsToAdd;\n          console.log(`üìä Zone ${zoneId} Level ${progress.currentLevel}: ${progress.killsInLevel}/${requiredKills} kills (+${killsToAdd} with ${zoneKillMultiplier}x multiplier)`);\n        }\n\n        // Handle level advancement if completed\n        if (willCompleteLevel) {\n          console.log(`üéâ Level ${progress.currentLevel} completed in ${currentZone.name}!`);\n\n          // Advance to next level if available\n          if (progress.currentLevel < 5) {\n            progress.currentLevel += 1;\n            progress.killsInLevel = 0;\n            console.log(`‚¨ÜÔ∏è PROGRESSION: Advanced to Level ${progress.currentLevel} (player can still select other zones)`);\n\n            // Update progression zone but DON'T auto-select next level\n            // Player keeps their current selection unless they manually change it\n            const nextLevel = currentZone.levels[progress.currentLevel - 1];\n            if (nextLevel && currentZone === progressionZone) {\n              // Only auto-advance if player is currently on the progression zone\n              console.log(`üéØ AUTO-ADVANCE: Player was on progression zone, advancing to next level`);\n              setCurrentZoneLevel(nextLevel);\n              setProgressionZone(currentZone); // Update progression zone\n            } else {\n              console.log(`üéØ SELECTION PRESERVED: Player selected different zone, keeping their choice`);\n            }\n          } else {\n            // Zone completed - Auto-advance to next zone\n            progress.completed = true;\n            console.log(`üèÜ Zone ${currentZone.name} completed! Next zone unlocked.`);\n\n            // CRITICAL FIX: Auto-advance to the next zone when current zone is completed\n            const nextZone = _dataZoneData.ZONES.find(z => z.id === zoneId + 1);\n            if (nextZone) {\n              console.log(`‚¨ÜÔ∏è ZONE PROGRESSION: Auto-advancing from Zone ${zoneId} to Zone ${nextZone.id}`);\n\n              // Initialize next zone progress if it doesn't exist\n              if (!newProgress[nextZone.id]) {\n                newProgress[nextZone.id] = {\n                  zoneId: nextZone.id,\n                  currentLevel: 1,\n                  killsInLevel: 0,\n                  completed: false\n                };\n              }\n\n              // Auto-select the next zone for the player\n              setTimeout(() => {\n                console.log(`üéØ AUTO-SELECTING: Moving player to Zone ${nextZone.id} Level 1`);\n                setCurrentZone(nextZone);\n                setCurrentZoneLevel(nextZone.levels[0]);\n                setProgressionZone(nextZone);\n              }, 100); // Small delay to ensure state updates properly\n            } else {\n              console.log(`üèÅ GAME COMPLETE: No more zones available after Zone ${zoneId}`);\n            }\n          }\n        }\n        newProgress[zoneId] = progress;\n\n        // MOBILE FIX: Defer GameContext update to prevent cross-component render-phase violations\n        setTimeout(() => {\n          console.log(`üíæ Updating GameContext with zone progress:`, newProgress);\n          updateZoneProgress(newProgress);\n        }, 0); // Defer to next event loop to prevent setState-in-render error\n\n        return newProgress;\n      });\n    };\n\n    // Check if zone is unlocked\n    const isZoneUnlockedLocal = zoneId => {\n      if (zoneId === 1) return true; // First zone always unlocked\n\n      const zone = _dataZoneData.ZONES.find(z => z.id === zoneId);\n      if (!zone?.unlockRequirement.previousZone) return true;\n      const prevZoneProgress = zoneProgress[zone.unlockRequirement.previousZone];\n      return prevZoneProgress?.completed || false;\n    };\n\n    // Get all unlocked zones\n    const getUnlockedZones = () => {\n      return _dataZoneData.ZONES.filter(zone => isZoneUnlockedLocal(zone.id));\n    };\n    const contextValue = React.default.useMemo(() => ({\n      currentZone,\n      // Currently selected zone for gameplay\n      currentZoneLevel,\n      progressionZone,\n      // Highest unlocked zone for progression\n      zoneProgress,\n      availableZones: _dataZoneData.ZONES,\n      selectZone,\n      getZoneProgress,\n      spawnZoneEnemy,\n      recordEnemyKill,\n      isZoneUnlocked: isZoneUnlockedLocal,\n      getUnlockedZones\n    }), [currentZone, currentZoneLevel, progressionZone, zoneProgress, selectZone, getZoneProgress, spawnZoneEnemy, recordEnemyKill, isZoneUnlockedLocal, getUnlockedZones]);\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(ZoneContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 5\n    }, this);\n  };\n  _s2(ZoneProvider, \"0LYWwhEl8kAYOoKmz4Hg7cSgCSQ=\", false, function () {\n    return [_GameContext.useGame];\n  });\n  _c = ZoneProvider;\n  var _c;\n  $RefreshReg$(_c, \"ZoneProvider\");\n});","lineCount":367,"map":[[6,26,5,0],[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"value"],[8,9,5,0],[9,2,5,0],[10,2,5,0],[10,11,5,0,"_interopDefault"],[10,27,5,0,"e"],[10,28,5,0],[11,4,5,0],[11,11,5,0,"e"],[11,12,5,0],[11,16,5,0,"e"],[11,17,5,0],[11,18,5,0,"__esModule"],[11,28,5,0],[11,31,5,0,"e"],[11,32,5,0],[12,6,5,0,"default"],[12,13,5,0],[12,15,5,0,"e"],[13,4,5,0],[14,2,5,0],[15,2,57,0,"Object"],[15,8,57,0],[15,9,57,0,"defineProperty"],[15,23,57,0],[15,24,57,0,"exports"],[15,31,57,0],[16,4,57,0,"enumerable"],[16,14,57,0],[17,4,57,0,"get"],[17,7,57,0],[17,18,57,0,"get"],[17,19,57,0],[18,6,57,0],[18,13,57,0,"useZone"],[18,20,57,0],[19,4,57,0],[20,2,57,0],[21,2,65,0,"Object"],[21,8,65,0],[21,9,65,0,"defineProperty"],[21,23,65,0],[21,24,65,0,"exports"],[21,31,65,0],[22,4,65,0,"enumerable"],[22,14,65,0],[23,4,65,0,"get"],[23,7,65,0],[23,18,65,0,"get"],[23,19,65,0],[24,6,65,0],[24,13,65,0,"ZoneProvider"],[24,25,65,0],[25,4,65,0],[26,2,65,0],[27,2,1,0],[27,6,1,0,"_react"],[27,12,1,0],[27,15,1,0,"require"],[27,22,1,0],[27,23,1,0,"_dependencyMap"],[27,37,1,0],[28,2,1,0],[28,6,1,0,"React"],[28,11,1,0],[28,14,1,0,"_interopDefault"],[28,29,1,0],[28,30,1,0,"_react"],[28,36,1,0],[29,2,2,0],[29,6,2,0,"_dataZoneData"],[29,19,2,0],[29,22,2,0,"require"],[29,29,2,0],[29,30,2,0,"_dependencyMap"],[29,44,2,0],[30,2,3,0],[30,6,3,0,"_GameContext"],[30,18,3,0],[30,21,3,0,"require"],[30,28,3,0],[30,29,3,0,"_dependencyMap"],[30,43,3,0],[31,2,3,40],[31,6,3,40,"_reactJsxDevRuntime"],[31,25,3,40],[31,28,3,40,"require"],[31,35,3,40],[31,36,3,40,"_dependencyMap"],[31,50,3,40],[32,2,6,0],[32,8,6,6,"calculateKillRequirement"],[32,32,6,30],[32,35,6,33,"calculateKillRequirement"],[32,36,6,34,"zoneId"],[32,42,6,48],[32,44,6,50,"level"],[32,49,6,63],[32,54,6,76],[33,4,7,2],[33,8,7,6,"zoneId"],[33,14,7,12],[33,18,7,16],[33,19,7,17],[33,21,7,19],[33,28,7,26],[33,30,7,28],[33,33,7,32,"level"],[33,38,7,37],[33,41,7,40],[33,42,7,42],[33,43,7,43],[33,44,7,49],[34,4,8,2],[34,8,8,6,"zoneId"],[34,14,8,12],[34,18,8,16],[34,20,8,18],[34,22,8,20],[34,29,8,27],[34,31,8,29],[34,34,8,33,"level"],[34,39,8,38],[34,42,8,41],[34,44,8,44],[34,45,8,45],[34,46,8,50],[35,4,9,2],[35,8,9,6,"zoneId"],[35,14,9,12],[35,18,9,16],[35,20,9,18],[35,22,9,20],[35,29,9,27],[35,31,9,29],[35,34,9,33,"level"],[35,39,9,38],[35,42,9,41],[35,44,9,44],[35,45,9,45],[35,46,9,50],[36,4,10,2],[36,8,10,6,"zoneId"],[36,14,10,12],[36,18,10,16],[36,20,10,18],[36,22,10,20],[36,29,10,27],[36,32,10,30],[36,35,10,34,"level"],[36,40,10,39],[36,43,10,42],[36,45,10,45],[36,46,10,46],[36,47,10,50],[37,4,11,2],[37,11,11,9],[37,14,11,12],[37,17,11,16,"level"],[37,22,11,21],[37,25,11,24],[37,27,11,27],[37,28,11,28],[37,29,11,50],[38,2,12,0],[38,3,12,1],[39,2,55,0],[39,8,55,6,"ZoneContext"],[39,19,55,17],[39,35,55,20],[39,39,55,20,"createContext"],[39,45,55,33],[39,46,55,33,"createContext"],[39,59,55,33],[39,61,55,63,"undefined"],[39,70,55,72],[39,71,55,73],[40,2,57,7],[40,8,57,13,"useZone"],[40,15,57,20],[40,18,57,23,"useZone"],[40,19,57,23],[40,24,57,29],[41,4,57,29,"_s"],[41,6,57,29],[42,4,58,2],[42,10,58,8,"context"],[42,17,58,15],[42,20,58,18],[42,24,58,18,"useContext"],[42,30,58,28],[42,31,58,28,"useContext"],[42,41,58,28],[42,43,58,29,"ZoneContext"],[42,54,58,40],[42,55,58,41],[43,4,59,2],[43,8,59,6],[43,9,59,7,"context"],[43,16,59,14],[43,18,59,16],[44,6,60,4],[44,12,60,10],[44,16,60,14,"Error"],[44,21,60,19],[44,22,60,20],[44,66,60,64],[44,67,60,65],[45,4,61,2],[46,4,62,2],[46,11,62,9,"context"],[46,18,62,16],[47,2,63,0],[47,3,63,1],[48,2,63,2,"_s"],[48,4,63,2],[48,5,57,13,"useZone"],[48,12,57,20],[49,2,65,7],[49,8,65,13,"ZoneProvider"],[49,20,65,25],[49,23,65,28,"ZoneProvider"],[49,24,65,29],[50,4,65,31,"children"],[51,2,65,65],[51,3,65,66],[51,8,65,71],[52,4,65,71,"_s2"],[52,7,65,71],[53,4,66,2],[53,10,66,8],[54,6,66,10,"gameState"],[54,15,66,19],[55,6,66,21,"updateZoneProgress"],[56,4,66,40],[56,5,66,41],[56,8,66,44],[56,12,66,44,"useGame"],[56,24,66,51],[56,25,66,51,"useGame"],[56,32,66,51],[56,34,66,52],[56,35,66,53],[58,4,68,2],[59,4,69,2],[59,10,69,8],[59,11,69,9,"currentZone"],[59,22,69,20],[59,24,69,22,"setCurrentZone"],[59,38,69,36],[59,39,69,37],[59,42,69,40],[59,46,69,40,"useState"],[59,52,69,48],[59,53,69,48,"useState"],[59,61,69,48],[59,63,69,62],[59,69,69,68],[60,6,70,4,"console"],[60,13,70,11],[60,14,70,12,"log"],[60,17,70,15],[60,18,70,16],[60,92,70,90],[60,93,70,91],[61,6,71,4],[61,13,71,11,"ZONES"],[61,26,71,16],[61,27,71,16,"ZONES"],[61,32,71,16],[61,33,71,17],[61,34,71,18],[61,35,71,19],[62,4,72,2],[62,5,72,3],[62,6,72,4],[62,7,72,5],[62,8,72,6],[63,4,73,2],[63,10,73,8],[63,11,73,9,"currentZoneLevel"],[63,27,73,25],[63,29,73,27,"setCurrentZoneLevel"],[63,48,73,46],[63,49,73,47],[63,52,73,50],[63,56,73,50,"useState"],[63,62,73,58],[63,63,73,58,"useState"],[63,71,73,58],[63,73,73,77],[63,79,73,83],[64,6,74,4,"console"],[64,13,74,11],[64,14,74,12,"log"],[64,17,74,15],[64,18,74,16],[64,81,74,79],[64,82,74,80],[65,6,75,4],[65,13,75,11,"ZONES"],[65,26,75,16],[65,27,75,16,"ZONES"],[65,32,75,16],[65,33,75,17],[65,34,75,18],[65,35,75,19],[65,37,75,21,"levels"],[65,43,75,27],[65,44,75,28],[65,45,75,29],[65,46,75,30],[65,50,75,34],[65,54,75,38],[66,4,76,2],[66,5,76,3],[66,6,76,4],[67,4,77,2],[67,10,77,8],[67,11,77,9,"progressionZone"],[67,26,77,24],[67,28,77,26,"setProgressionZone"],[67,46,77,44],[67,47,77,45],[67,50,77,48],[67,54,77,48,"useState"],[67,60,77,56],[67,61,77,56,"useState"],[67,69,77,56],[67,71,77,70],[67,77,77,76],[68,6,78,4,"console"],[68,13,78,11],[68,14,78,12,"log"],[68,17,78,15],[68,18,78,16],[68,90,78,88],[68,91,78,89],[69,6,79,4],[69,13,79,11,"ZONES"],[69,26,79,16],[69,27,79,16,"ZONES"],[69,32,79,16],[69,33,79,17],[69,34,79,18],[69,35,79,19],[70,4,80,2],[70,5,80,3],[70,6,80,4],[70,7,80,5],[70,8,80,6],[71,4,81,2],[71,10,81,8],[71,11,81,9,"hasInitializedZones"],[71,30,81,28],[71,32,81,30,"setHasInitializedZones"],[71,54,81,52],[71,55,81,53],[71,58,81,56],[71,62,81,56,"useState"],[71,68,81,64],[71,69,81,64,"useState"],[71,77,81,64],[71,79,81,65],[71,84,81,70],[71,85,81,71],[71,86,81,72],[71,87,81,73],[72,4,82,2],[72,10,82,8],[72,11,82,9,"zoneProgress"],[72,23,82,21],[72,25,82,23,"setZoneProgress"],[72,40,82,38],[72,41,82,39],[72,44,82,42],[72,48,82,42,"useState"],[72,54,82,50],[72,55,82,50,"useState"],[72,63,82,50],[72,65,82,81],[72,71,82,87],[73,6,83,4],[74,6,84,4],[74,12,84,10,"savedProgress"],[74,25,84,23],[74,28,84,26,"gameState"],[74,37,84,35],[74,39,84,37,"zoneProgress"],[74,51,84,49],[75,6,85,4],[75,10,85,8,"savedProgress"],[75,23,85,21],[75,27,85,25,"Object"],[75,33,85,31],[75,34,85,32,"keys"],[75,38,85,36],[75,39,85,37,"savedProgress"],[75,52,85,50],[75,53,85,51],[75,54,85,52,"length"],[75,60,85,58],[75,63,85,61],[75,64,85,62],[75,66,85,64],[76,8,86,6,"console"],[76,15,86,13],[76,16,86,14,"log"],[76,19,86,17],[76,20,86,18],[76,54,86,52],[76,56,86,54,"savedProgress"],[76,69,86,67],[76,70,86,68],[77,8,87,6],[77,15,87,13,"savedProgress"],[77,28,87,26],[78,6,88,4],[78,7,88,5],[78,13,88,11],[79,8,89,6,"console"],[79,15,89,13],[79,16,89,14,"log"],[79,19,89,17],[79,20,89,18],[79,64,89,62],[79,65,89,63],[80,8,90,6],[80,15,90,13],[81,10,90,15],[81,11,90,16],[81,13,90,18],[82,12,90,20,"zoneId"],[82,18,90,26],[82,20,90,28],[82,21,90,29],[83,12,90,31,"currentLevel"],[83,24,90,43],[83,26,90,45],[83,27,90,46],[84,12,90,48,"killsInLevel"],[84,24,90,60],[84,26,90,62],[84,27,90,63],[85,12,90,65,"completed"],[85,21,90,74],[85,23,90,76],[86,10,90,82],[87,8,90,84],[87,9,90,85],[88,6,91,4],[89,4,92,2],[89,5,92,3],[89,6,92,4],[91,4,94,2],[92,4,95,2],[92,8,95,2,"useEffect"],[92,14,95,11],[92,15,95,11,"useEffect"],[92,24,95,11],[92,26,95,12],[92,32,95,18],[93,6,96,4],[93,10,96,8,"gameState"],[93,19,96,17],[93,21,96,19,"zoneProgress"],[93,33,96,31],[93,37,96,35],[93,38,96,36,"hasInitializedZones"],[93,57,96,55],[93,59,96,57],[94,8,97,6,"console"],[94,15,97,13],[94,16,97,14,"log"],[94,19,97,17],[94,20,97,18],[94,92,97,90],[94,94,97,92,"gameState"],[94,103,97,101],[94,104,97,102,"zoneProgress"],[94,116,97,114],[94,117,97,115],[95,8,98,6,"setZoneProgress"],[95,23,98,21],[95,24,98,22,"gameState"],[95,33,98,31],[95,34,98,32,"zoneProgress"],[95,46,98,44],[95,47,98,45],[97,8,100,6],[98,8,101,6],[98,14,101,12,"progressEntries"],[98,29,101,27],[98,32,101,30,"Object"],[98,38,101,36],[98,39,101,37,"values"],[98,45,101,43],[98,46,101,44,"gameState"],[98,55,101,53],[98,56,101,54,"zoneProgress"],[98,68,101,66],[98,72,101,70],[98,73,101,71],[98,74,101,72],[98,75,101,73],[99,8,102,6],[99,12,102,10,"highestZone"],[99,23,102,21],[99,26,102,24,"ZONES"],[99,39,102,29],[99,40,102,29,"ZONES"],[99,45,102,29],[99,46,102,30],[99,47,102,31],[99,48,102,32],[100,8,103,6],[100,12,103,10,"highestLevel"],[100,24,103,22],[100,27,103,25,"ZONES"],[100,40,103,30],[100,41,103,30,"ZONES"],[100,46,103,30],[100,47,103,31],[100,48,103,32],[100,49,103,33],[100,51,103,35,"levels"],[100,57,103,41],[100,58,103,42],[100,59,103,43],[100,60,103,44],[101,8,105,6],[101,13,105,11],[101,19,105,17,"progress"],[101,27,105,25],[101,31,105,29,"progressEntries"],[101,46,105,44],[101,48,105,46],[102,10,106,8],[102,14,106,12,"progress"],[102,22,106,20],[102,26,106,24,"progress"],[102,34,106,32],[102,35,106,33,"zoneId"],[102,41,106,39],[102,43,106,41],[103,12,107,10],[103,18,107,16,"zone"],[103,22,107,20],[103,25,107,23,"ZONES"],[103,38,107,28],[103,39,107,28,"ZONES"],[103,44,107,28],[103,45,107,29,"find"],[103,49,107,33],[103,50,107,34,"z"],[103,51,107,35],[103,55,107,39,"z"],[103,56,107,40],[103,57,107,41,"id"],[103,59,107,43],[103,64,107,48,"progress"],[103,72,107,56],[103,73,107,57,"zoneId"],[103,79,107,63],[103,80,107,64],[104,12,108,10],[104,16,108,14,"zone"],[104,20,108,18],[104,22,108,20],[105,14,109,12,"highestZone"],[105,25,109,23],[105,28,109,26,"zone"],[105,32,109,30],[106,14,110,12,"highestLevel"],[106,26,110,24],[106,29,110,27,"zone"],[106,33,110,31],[106,34,110,32,"levels"],[106,40,110,38],[106,41,110,39],[106,42,110,40,"progress"],[106,50,110,48],[106,51,110,49,"currentLevel"],[106,63,110,61],[106,67,110,65],[106,68,110,66],[106,72,110,70],[106,73,110,71],[106,74,110,72],[107,12,111,10],[108,10,112,8],[109,8,113,6],[110,8,115,6,"console"],[110,15,115,13],[110,16,115,14,"log"],[110,19,115,17],[110,20,115,18],[110,53,115,51,"highestZone"],[110,64,115,62],[110,65,115,63,"id"],[110,67,115,65],[110,77,115,75,"highestLevel"],[110,89,115,87],[110,91,115,89,"level"],[110,96,115,94],[110,100,115,98],[110,101,115,99],[110,122,115,120],[110,123,115,121],[111,8,116,6,"setProgressionZone"],[111,26,116,24],[111,27,116,25,"highestZone"],[111,38,116,36],[111,39,116,37],[113,8,118,6],[114,8,119,6,"console"],[114,15,119,13],[114,16,119,14,"log"],[114,19,119,17],[114,20,119,18],[114,65,119,63,"highestZone"],[114,76,119,74],[114,77,119,75,"id"],[114,79,119,77],[114,89,119,87,"highestLevel"],[114,101,119,99],[114,103,119,101,"level"],[114,108,119,106],[114,112,119,110],[114,113,119,111],[114,138,119,136],[114,139,119,137],[115,8,120,6,"setCurrentZone"],[115,22,120,20],[115,23,120,21,"highestZone"],[115,34,120,32],[115,35,120,33],[116,8,121,6,"setCurrentZoneLevel"],[116,27,121,25],[116,28,121,26,"highestLevel"],[116,40,121,38],[116,44,121,42,"ZONES"],[116,57,121,47],[116,58,121,47,"ZONES"],[116,63,121,47],[116,64,121,48],[116,65,121,49],[116,66,121,50],[116,68,121,52,"levels"],[116,74,121,58],[116,75,121,59],[116,76,121,60],[116,77,121,61],[116,78,121,62],[117,8,122,6,"setHasInitializedZones"],[117,30,122,28],[117,31,122,29],[117,35,122,33],[117,36,122,34],[117,37,122,35],[117,38,122,36],[118,6,123,4],[118,7,123,5],[118,13,123,11],[118,17,123,15,"gameState"],[118,26,123,24],[118,28,123,26,"zoneProgress"],[118,40,123,38],[118,44,123,42,"hasInitializedZones"],[118,63,123,61],[118,65,123,63],[119,8,124,6],[120,8,125,6,"console"],[120,15,125,13],[120,16,125,14,"log"],[120,19,125,17],[120,20,125,18],[120,90,125,88],[120,91,125,89],[121,8,126,6,"setZoneProgress"],[121,23,126,21],[121,24,126,22,"gameState"],[121,33,126,31],[121,34,126,32,"zoneProgress"],[121,46,126,44],[121,47,126,45],[123,8,128,6],[124,8,129,6],[124,14,129,12,"progressEntries"],[124,29,129,27],[124,32,129,30,"Object"],[124,38,129,36],[124,39,129,37,"values"],[124,45,129,43],[124,46,129,44,"gameState"],[124,55,129,53],[124,56,129,54,"zoneProgress"],[124,68,129,66],[124,72,129,70],[124,73,129,71],[124,74,129,72],[124,75,129,73],[125,8,130,6],[125,12,130,10,"highestZone"],[125,23,130,21],[125,26,130,24,"ZONES"],[125,39,130,29],[125,40,130,29,"ZONES"],[125,45,130,29],[125,46,130,30],[125,47,130,31],[125,48,130,32],[126,8,132,6],[126,13,132,11],[126,19,132,17,"progress"],[126,27,132,25],[126,31,132,29,"progressEntries"],[126,46,132,44],[126,48,132,46],[127,10,133,8],[127,14,133,12,"progress"],[127,22,133,20],[127,26,133,24,"progress"],[127,34,133,32],[127,35,133,33,"zoneId"],[127,41,133,39],[127,43,133,41],[128,12,134,10],[128,18,134,16,"zone"],[128,22,134,20],[128,25,134,23,"ZONES"],[128,38,134,28],[128,39,134,28,"ZONES"],[128,44,134,28],[128,45,134,29,"find"],[128,49,134,33],[128,50,134,34,"z"],[128,51,134,35],[128,55,134,39,"z"],[128,56,134,40],[128,57,134,41,"id"],[128,59,134,43],[128,64,134,48,"progress"],[128,72,134,56],[128,73,134,57,"zoneId"],[128,79,134,63],[128,80,134,64],[129,12,135,10],[129,16,135,14,"zone"],[129,20,135,18],[129,22,135,20],[130,14,136,12,"highestZone"],[130,25,136,23],[130,28,136,26,"zone"],[130,32,136,30],[131,12,137,10],[132,10,138,8],[133,8,139,6],[134,8,141,6,"console"],[134,15,141,13],[134,16,141,14,"log"],[134,19,141,17],[134,20,141,18],[134,57,141,55,"highestZone"],[134,68,141,66],[134,69,141,67,"id"],[134,71,141,69],[134,99,141,97],[134,100,141,98],[135,8,142,6,"setProgressionZone"],[135,26,142,24],[135,27,142,25,"highestZone"],[135,38,142,36],[135,39,142,37],[136,6,143,4],[137,4,144,2],[137,5,144,3],[137,7,144,5],[137,8,144,6,"gameState"],[137,17,144,15],[137,19,144,17,"zoneProgress"],[137,31,144,29],[137,33,144,31,"hasInitializedZones"],[137,52,144,50],[137,53,144,51],[137,54,144,52],[139,4,146,2],[140,4,147,2],[140,8,147,2,"useEffect"],[140,14,147,11],[140,15,147,11,"useEffect"],[140,24,147,11],[140,26,147,12],[140,32,147,18],[141,6,148,4],[141,10,148,8,"gameState"],[141,19,148,17],[141,21,148,19,"ninja"],[141,26,148,24],[141,28,148,26],[142,8,149,6],[142,14,149,12,"recommendedZone"],[142,29,149,27],[142,32,149,30],[142,36,149,30,"getZoneByLevel"],[142,49,149,44],[142,50,149,44,"getZoneByLevel"],[142,64,149,44],[142,66,149,45,"gameState"],[142,75,149,54],[142,76,149,55,"ninja"],[142,81,149,60],[142,82,149,61,"level"],[142,87,149,66],[142,88,149,67],[143,8,150,6],[143,12,150,10,"recommendedZone"],[143,27,150,25],[143,31,150,29],[143,32,150,30,"currentZone"],[143,43,150,41],[143,45,150,43],[144,10,151,8,"setCurrentZone"],[144,24,151,22],[144,25,151,23,"recommendedZone"],[144,40,151,38],[144,41,151,39],[145,10,152,8,"setCurrentZoneLevel"],[145,29,152,27],[145,30,152,28,"recommendedZone"],[145,45,152,43],[145,46,152,44,"levels"],[145,52,152,50],[145,53,152,51],[145,54,152,52],[145,55,152,53],[145,56,152,54],[146,8,153,6],[147,6,154,4],[148,4,155,2],[148,5,155,3],[148,7,155,5],[148,8,155,6,"gameState"],[148,17,155,15],[148,19,155,17,"ninja"],[148,24,155,22],[148,26,155,24,"level"],[148,31,155,29],[148,32,155,30],[148,33,155,31],[150,4,157,2],[151,4,158,2],[151,10,158,8,"selectZone"],[151,20,158,18],[151,23,158,21,"selectZone"],[151,24,158,22,"zoneId"],[151,30,158,36],[151,32,158,38,"levelNumber"],[151,43,158,57],[151,48,158,71],[152,6,159,4],[152,10,159,8],[152,11,159,9,"isZoneUnlockedLocal"],[152,30,159,28],[152,31,159,29,"zoneId"],[152,37,159,35],[152,38,159,36],[152,40,159,38],[153,8,160,6,"console"],[153,15,160,13],[153,16,160,14,"log"],[153,19,160,17],[153,20,160,18],[153,30,160,28,"zoneId"],[153,36,160,34],[153,54,160,52],[153,55,160,53],[154,8,161,6],[154,15,161,13],[154,20,161,18],[155,6,162,4],[156,6,164,4],[156,12,164,10,"zone"],[156,16,164,14],[156,19,164,17,"ZONES"],[156,32,164,22],[156,33,164,22,"ZONES"],[156,38,164,22],[156,39,164,23,"find"],[156,43,164,27],[156,44,164,28,"z"],[156,45,164,29],[156,49,164,33,"z"],[156,50,164,34],[156,51,164,35,"id"],[156,53,164,37],[156,58,164,42,"zoneId"],[156,64,164,48],[156,65,164,49],[157,6,165,4],[157,10,165,8],[157,11,165,9,"zone"],[157,15,165,13],[157,17,165,15],[158,8,166,6,"console"],[158,15,166,13],[158,16,166,14,"log"],[158,19,166,17],[158,20,166,18],[158,30,166,28,"zoneId"],[158,36,166,34],[158,48,166,46],[158,49,166,47],[159,8,167,6],[159,15,167,13],[159,20,167,18],[160,6,168,4],[161,6,170,4],[161,12,170,10,"level"],[161,17,170,15],[161,20,170,18,"zone"],[161,24,170,22],[161,25,170,23,"levels"],[161,31,170,29],[161,32,170,30,"levelNumber"],[161,43,170,41],[161,46,170,44],[161,47,170,45],[161,48,170,46],[162,6,171,4],[162,10,171,8],[162,11,171,9,"level"],[162,16,171,14],[162,18,171,16],[163,8,172,6,"console"],[163,15,172,13],[163,16,172,14,"log"],[163,19,172,17],[163,20,172,18],[163,30,172,28,"zoneId"],[163,36,172,34],[163,46,172,44,"levelNumber"],[163,57,172,55],[163,69,172,67],[163,70,172,68],[164,8,173,6],[164,15,173,13],[164,20,173,18],[165,6,174,4],[166,6,176,4,"console"],[166,13,176,11],[166,14,176,12,"log"],[166,17,176,15],[166,18,176,16],[166,68,176,66,"zoneId"],[166,74,176,72],[166,84,176,82,"levelNumber"],[166,95,176,93],[166,100,176,98,"zone"],[166,104,176,102],[166,105,176,103,"name"],[166,109,176,107],[166,112,176,110],[166,113,176,111],[167,6,177,4,"console"],[167,13,177,11],[167,14,177,12,"log"],[167,17,177,15],[167,18,177,16],[167,44,177,42,"currentZone"],[167,55,177,53],[167,57,177,55,"id"],[167,59,177,57],[167,77,177,75,"currentZoneLevel"],[167,93,177,91],[167,95,177,93,"level"],[167,100,177,98],[167,102,177,100],[167,103,177,101],[168,6,179,4,"setCurrentZone"],[168,20,179,18],[168,21,179,19,"zone"],[168,25,179,23],[168,26,179,24],[169,6,180,4,"setCurrentZoneLevel"],[169,25,180,23],[169,26,180,24,"level"],[169,31,180,29],[169,32,180,30],[170,6,182,4,"console"],[170,13,182,11],[170,14,182,12,"log"],[170,17,182,15],[170,18,182,16],[170,45,182,43,"zoneId"],[170,51,182,49],[170,61,182,59,"levelNumber"],[170,72,182,70],[170,110,182,108],[170,111,182,109],[171,6,183,4],[171,13,183,11],[171,17,183,15],[172,4,184,2],[172,5,184,3],[174,4,186,2],[175,4,187,2],[175,10,187,8,"getZoneProgress"],[175,25,187,23],[175,28,187,27,"zoneId"],[175,34,187,41],[175,38,187,67],[176,6,188,4],[176,13,188,11,"zoneProgress"],[176,25,188,23],[176,26,188,24,"zoneId"],[176,32,188,30],[176,33,188,31],[176,37,188,35],[176,41,188,39],[177,4,189,2],[177,5,189,3],[179,4,191,2],[180,4,192,2],[180,10,192,8,"spawnZoneEnemy"],[180,24,192,22],[180,27,192,25,"spawnZoneEnemy"],[180,28,192,25],[180,33,192,52],[181,6,193,4],[181,10,193,8],[181,11,193,9,"currentZone"],[181,22,193,20],[181,26,193,24],[181,27,193,25,"currentZoneLevel"],[181,43,193,41],[181,45,193,43],[182,8,194,6,"console"],[182,15,194,13],[182,16,194,14,"log"],[182,19,194,17],[182,20,194,18],[182,65,194,63],[182,66,194,64],[183,8,195,6],[183,15,195,13],[183,19,195,17],[184,6,196,4],[186,6,198,4],[187,6,199,4],[187,12,199,10,"enemyTypeIds"],[187,24,199,22],[187,27,199,25,"currentZoneLevel"],[187,43,199,41],[187,44,199,42,"enemyTypes"],[187,54,199,52],[188,6,200,4],[188,12,200,10,"randomEnemyTypeId"],[188,29,200,27],[188,32,200,30,"enemyTypeIds"],[188,44,200,42],[188,45,200,43,"Math"],[188,49,200,47],[188,50,200,48,"floor"],[188,55,200,53],[188,56,200,54,"Math"],[188,60,200,58],[188,61,200,59,"random"],[188,67,200,65],[188,68,200,66],[188,69,200,67],[188,72,200,70,"enemyTypeIds"],[188,84,200,82],[188,85,200,83,"length"],[188,91,200,89],[188,92,200,90],[188,93,200,91],[189,6,201,4],[189,12,201,10,"enemyType"],[189,21,201,19],[189,24,201,22,"ENEMY_TYPES"],[189,37,201,33],[189,38,201,33,"ENEMY_TYPES"],[189,49,201,33],[189,50,201,34,"randomEnemyTypeId"],[189,67,201,51],[189,68,201,52],[190,6,203,4],[190,10,203,8],[190,11,203,9,"enemyType"],[190,20,203,18],[190,22,203,20],[191,8,204,6,"console"],[191,15,204,13],[191,16,204,14,"log"],[191,19,204,17],[191,20,204,18],[191,36,204,34,"randomEnemyTypeId"],[191,53,204,51],[191,65,204,63],[191,66,204,64],[192,8,205,6],[192,15,205,13],[192,19,205,17],[193,6,206,4],[195,6,208,4],[196,6,209,4],[196,12,209,10,"scaledStats"],[196,23,209,21],[196,26,209,24],[196,30,209,24,"calculateEnemyStats"],[196,43,209,43],[196,44,209,43,"calculateEnemyStats"],[196,63,209,43],[196,65,209,44,"enemyType"],[196,74,209,53],[196,76,209,55,"currentZoneLevel"],[196,92,209,71],[196,94,209,73,"currentZone"],[196,105,209,84],[196,106,209,85,"id"],[196,108,209,87],[196,109,209,88],[198,6,211,4],[199,6,212,4],[199,12,212,10,"enemy"],[199,17,212,29],[199,20,212,32],[200,8,213,6,"id"],[200,10,213,8],[200,12,213,10],[200,15,213,13,"randomEnemyTypeId"],[200,32,213,30],[200,36,213,34,"Date"],[200,40,213,38],[200,41,213,39,"now"],[200,44,213,42],[200,45,213,43],[200,46,213,44],[200,50,213,48,"Math"],[200,54,213,52],[200,55,213,53,"random"],[200,61,213,59],[200,62,213,60],[200,63,213,61],[200,65,213,63],[201,8,214,6,"typeId"],[201,14,214,12],[201,16,214,14,"randomEnemyTypeId"],[201,33,214,31],[202,8,215,6,"name"],[202,12,215,10],[202,14,215,12,"enemyType"],[202,23,215,21],[202,24,215,22,"name"],[202,28,215,26],[203,8,216,6,"icon"],[203,12,216,10],[203,14,216,12,"enemyType"],[203,23,216,21],[203,24,216,22,"icon"],[203,28,216,26],[204,8,217,6,"hp"],[204,10,217,8],[204,12,217,10,"scaledStats"],[204,23,217,21],[204,24,217,22,"hp"],[204,26,217,24],[205,8,218,6,"maxHP"],[205,13,218,11],[205,15,218,13,"scaledStats"],[205,26,218,24],[205,27,218,25,"hp"],[205,29,218,27],[206,8,219,6,"attack"],[206,14,219,12],[206,16,219,14,"scaledStats"],[206,27,219,25],[206,28,219,26,"attack"],[206,34,219,32],[207,8,220,6,"xp"],[207,10,220,8],[207,12,220,10,"scaledStats"],[207,23,220,21],[207,24,220,22,"xp"],[207,26,220,24],[208,8,221,6,"resistances"],[208,19,221,17],[208,21,221,19,"scaledStats"],[208,32,221,30],[208,33,221,31,"resistances"],[208,44,221,42],[209,8,222,6,"position"],[209,16,222,14],[209,18,222,16],[210,10,223,8,"x"],[210,11,223,9],[210,13,223,11,"Math"],[210,17,223,15],[210,18,223,16,"random"],[210,24,223,22],[210,25,223,23],[210,26,223,24],[210,29,223,27],[210,32,223,30],[210,35,223,33],[210,37,223,35],[211,10,223,37],[212,10,224,8,"y"],[212,11,224,9],[212,13,224,11,"Math"],[212,17,224,15],[212,18,224,16,"random"],[212,24,224,22],[212,25,224,23],[212,26,224,24],[212,29,224,27],[212,32,224,30],[212,35,224,33],[213,8,225,6],[213,9,225,7],[214,8,226,6,"lastDamaged"],[214,19,226,17],[214,21,226,19],[215,6,227,4],[215,7,227,5],[216,6,229,4,"console"],[216,13,229,11],[216,14,229,12,"log"],[216,17,229,15],[216,18,229,16],[216,32,229,30,"enemy"],[216,37,229,35],[216,38,229,36,"name"],[216,42,229,40],[216,47,229,45,"enemy"],[216,52,229,50],[216,53,229,51,"hp"],[216,55,229,53],[216,63,229,61,"enemy"],[216,68,229,66],[216,69,229,67,"xp"],[216,71,229,69],[216,82,229,80,"currentZone"],[216,93,229,91],[216,94,229,92,"name"],[216,98,229,96],[216,100,229,98],[216,101,229,99],[217,6,230,4],[217,13,230,11,"enemy"],[217,18,230,16],[218,4,231,2],[218,5,231,3],[220,4,233,2],[221,4,234,2],[221,10,234,8,"recordEnemyKill"],[221,25,234,23],[221,28,234,27,"enemy"],[221,33,234,46],[221,37,234,51],[222,6,235,4],[222,10,235,8],[222,11,235,9,"currentZone"],[222,22,235,20],[222,26,235,24],[222,27,235,25,"currentZoneLevel"],[222,43,235,41],[222,45,235,43],[223,6,237,4,"console"],[223,13,237,11],[223,14,237,12,"log"],[223,17,237,15],[223,18,237,16],[223,24,237,22,"enemy"],[223,29,237,27],[223,30,237,28,"name"],[223,34,237,32],[223,47,237,45,"enemy"],[223,52,237,50],[223,53,237,51,"xp"],[223,55,237,53],[223,60,237,58],[223,61,237,59],[224,6,238,4,"console"],[224,13,238,11],[224,14,238,12,"log"],[224,17,238,15],[224,18,238,16],[224,72,238,70,"currentZone"],[224,83,238,81],[224,84,238,82,"id"],[224,86,238,84],[224,96,238,94,"currentZoneLevel"],[224,112,238,110],[224,113,238,111,"level"],[224,118,238,116],[224,120,238,118],[224,121,238,119],[225,6,240,4,"setZoneProgress"],[225,21,240,19],[225,22,240,20,"prev"],[225,26,240,24],[225,30,240,28],[226,8,241,6],[226,14,241,12,"newProgress"],[226,25,241,23],[226,28,241,23,"Object"],[226,34,241,23],[226,35,241,23,"assign"],[226,41,241,23],[226,46,241,31,"prev"],[226,50,241,35],[226,51,241,37],[227,8,242,6],[227,14,242,12,"zoneId"],[227,20,242,18],[227,23,242,21,"currentZone"],[227,34,242,32],[227,35,242,33,"id"],[227,37,242,35],[228,8,244,6],[228,12,244,10],[228,13,244,11,"newProgress"],[228,24,244,22],[228,25,244,23,"zoneId"],[228,31,244,29],[228,32,244,30],[228,34,244,32],[229,10,245,8,"newProgress"],[229,21,245,19],[229,22,245,20,"zoneId"],[229,28,245,26],[229,29,245,27],[229,32,245,30],[230,12,246,10,"zoneId"],[230,18,246,16],[231,12,247,10,"currentLevel"],[231,24,247,22],[231,26,247,24],[231,27,247,25],[232,12,248,10,"killsInLevel"],[232,24,248,22],[232,26,248,24],[232,27,248,25],[233,12,249,10,"completed"],[233,21,249,19],[233,23,249,21],[234,10,250,8],[234,11,250,9],[235,8,251,6],[236,8,253,6],[236,14,253,12,"progress"],[236,22,253,20],[236,25,253,20,"Object"],[236,31,253,20],[236,32,253,20,"assign"],[236,38,253,20],[236,43,253,28,"newProgress"],[236,54,253,39],[236,55,253,40,"zoneId"],[236,61,253,46],[236,62,253,47],[236,63,253,49],[238,8,255,6],[239,8,256,6],[239,14,256,12,"currentZoneLevel"],[239,30,256,28],[239,33,256,31,"currentZone"],[239,44,256,42],[239,45,256,43,"levels"],[239,51,256,49],[239,52,256,50,"progress"],[239,60,256,58],[239,61,256,59,"currentLevel"],[239,73,256,71],[239,76,256,74],[239,77,256,75],[239,78,256,76],[240,8,257,6],[240,14,257,12,"requiredKills"],[240,27,257,25],[240,30,257,28,"currentZoneLevel"],[240,46,257,44],[240,49,257,47,"currentZoneLevel"],[240,65,257,63],[240,66,257,64,"requiredKills"],[240,79,257,77],[240,82,257,80,"calculateKillRequirement"],[240,106,257,104],[240,107,257,105,"zoneId"],[240,113,257,111],[240,115,257,113,"progress"],[240,123,257,121],[240,124,257,122,"currentLevel"],[240,136,257,134],[240,137,257,135],[242,8,259,6],[243,8,260,6],[243,14,260,12,"willCompleteLevel"],[243,31,260,29],[243,34,260,33,"progress"],[243,42,260,41],[243,43,260,42,"killsInLevel"],[243,55,260,54],[243,58,260,57],[243,59,260,58],[243,63,260,63,"requiredKills"],[243,76,260,76],[244,8,262,6],[244,12,262,10,"willCompleteLevel"],[244,29,262,27],[244,31,262,29],[245,10,263,8,"console"],[245,17,263,15],[245,18,263,16,"log"],[245,21,263,19],[245,22,263,20],[245,34,263,32,"progress"],[245,42,263,40],[245,43,263,41,"currentLevel"],[245,55,263,53],[245,72,263,70,"currentZone"],[245,83,263,81],[245,84,263,82,"name"],[245,88,263,86],[245,91,263,89],[245,92,263,90],[247,10,265,8],[248,10,266,8,"progress"],[248,18,266,16],[248,19,266,17,"killsInLevel"],[248,31,266,29],[248,34,266,32,"requiredKills"],[248,47,266,45],[249,10,268,8,"console"],[249,17,268,15],[249,18,268,16,"log"],[249,21,268,19],[249,22,268,20],[249,33,268,31,"zoneId"],[249,39,268,37],[249,49,268,47,"progress"],[249,57,268,55],[249,58,268,56,"currentLevel"],[249,70,268,68],[249,75,268,73,"progress"],[249,83,268,81],[249,84,268,82,"killsInLevel"],[249,96,268,94],[249,100,268,98,"requiredKills"],[249,113,268,111],[249,133,268,131],[249,134,268,132],[250,8,269,6],[250,9,269,7],[250,15,269,13],[251,10,270,8],[252,10,271,8],[252,16,271,14,"zoneKillMultiplier"],[252,34,271,32],[252,37,271,35,"gameState"],[252,46,271,44],[252,47,271,45,"subscriptionBenefits"],[252,67,271,65],[252,69,271,67,"zone_kill_multiplier"],[252,89,271,87],[252,93,271,91],[252,96,271,94],[253,10,272,8],[253,16,272,14,"killsToAdd"],[253,26,272,24],[253,29,272,27,"Math"],[253,33,272,31],[253,34,272,32,"floor"],[253,39,272,37],[253,40,272,38],[253,41,272,39],[253,44,272,42,"zoneKillMultiplier"],[253,62,272,60],[253,63,272,61],[254,10,273,8,"progress"],[254,18,273,16],[254,19,273,17,"killsInLevel"],[254,31,273,29],[254,35,273,33,"killsToAdd"],[254,45,273,43],[255,10,274,8,"console"],[255,17,274,15],[255,18,274,16,"log"],[255,21,274,19],[255,22,274,20],[255,33,274,31,"zoneId"],[255,39,274,37],[255,49,274,47,"progress"],[255,57,274,55],[255,58,274,56,"currentLevel"],[255,70,274,68],[255,75,274,73,"progress"],[255,83,274,81],[255,84,274,82,"killsInLevel"],[255,96,274,94],[255,100,274,98,"requiredKills"],[255,113,274,111],[255,125,274,123,"killsToAdd"],[255,135,274,133],[255,144,274,142,"zoneKillMultiplier"],[255,162,274,160],[255,177,274,175],[255,178,274,176],[256,8,275,6],[258,8,277,6],[259,8,278,6],[259,12,278,10,"willCompleteLevel"],[259,29,278,27],[259,31,278,29],[260,10,279,8,"console"],[260,17,279,15],[260,18,279,16,"log"],[260,21,279,19],[260,22,279,20],[260,34,279,32,"progress"],[260,42,279,40],[260,43,279,41,"currentLevel"],[260,55,279,53],[260,72,279,70,"currentZone"],[260,83,279,81],[260,84,279,82,"name"],[260,88,279,86],[260,91,279,89],[260,92,279,90],[262,10,281,8],[263,10,282,8],[263,14,282,12,"progress"],[263,22,282,20],[263,23,282,21,"currentLevel"],[263,35,282,33],[263,38,282,36],[263,39,282,37],[263,41,282,39],[264,12,283,10,"progress"],[264,20,283,18],[264,21,283,19,"currentLevel"],[264,33,283,31],[264,37,283,35],[264,38,283,36],[265,12,284,10,"progress"],[265,20,284,18],[265,21,284,19,"killsInLevel"],[265,33,284,31],[265,36,284,34],[265,37,284,35],[266,12,285,10,"console"],[266,19,285,17],[266,20,285,18,"log"],[266,23,285,21],[266,24,285,22],[266,61,285,59,"progress"],[266,69,285,67],[266,70,285,68,"currentLevel"],[266,82,285,80],[266,122,285,120],[266,123,285,121],[268,12,287,10],[269,12,288,10],[270,12,289,10],[270,18,289,16,"nextLevel"],[270,27,289,25],[270,30,289,28,"currentZone"],[270,41,289,39],[270,42,289,40,"levels"],[270,48,289,46],[270,49,289,47,"progress"],[270,57,289,55],[270,58,289,56,"currentLevel"],[270,70,289,68],[270,73,289,71],[270,74,289,72],[270,75,289,73],[271,12,290,10],[271,16,290,14,"nextLevel"],[271,25,290,23],[271,29,290,27,"currentZone"],[271,40,290,38],[271,45,290,43,"progressionZone"],[271,60,290,58],[271,62,290,60],[272,14,291,12],[273,14,292,12,"console"],[273,21,292,19],[273,22,292,20,"log"],[273,25,292,23],[273,26,292,24],[273,100,292,98],[273,101,292,99],[274,14,293,12,"setCurrentZoneLevel"],[274,33,293,31],[274,34,293,32,"nextLevel"],[274,43,293,41],[274,44,293,42],[275,14,294,12,"setProgressionZone"],[275,32,294,30],[275,33,294,31,"currentZone"],[275,44,294,42],[275,45,294,43],[275,46,294,44],[275,47,294,45],[276,12,295,10],[276,13,295,11],[276,19,295,17],[277,14,296,12,"console"],[277,21,296,19],[277,22,296,20,"log"],[277,25,296,23],[277,26,296,24],[277,104,296,102],[277,105,296,103],[278,12,297,10],[279,10,298,8],[279,11,298,9],[279,17,298,15],[280,12,299,10],[281,12,300,10,"progress"],[281,20,300,18],[281,21,300,19,"completed"],[281,30,300,28],[281,33,300,31],[281,37,300,35],[282,12,301,10,"console"],[282,19,301,17],[282,20,301,18,"log"],[282,23,301,21],[282,24,301,22],[282,35,301,33,"currentZone"],[282,46,301,44],[282,47,301,45,"name"],[282,51,301,49],[282,84,301,82],[282,85,301,83],[284,12,303,10],[285,12,304,10],[285,18,304,16,"nextZone"],[285,26,304,24],[285,29,304,27,"ZONES"],[285,42,304,32],[285,43,304,32,"ZONES"],[285,48,304,32],[285,49,304,33,"find"],[285,53,304,37],[285,54,304,38,"z"],[285,55,304,39],[285,59,304,43,"z"],[285,60,304,44],[285,61,304,45,"id"],[285,63,304,47],[285,68,304,52,"zoneId"],[285,74,304,58],[285,77,304,61],[285,78,304,62],[285,79,304,63],[286,12,305,10],[286,16,305,14,"nextZone"],[286,24,305,22],[286,26,305,24],[287,14,306,12,"console"],[287,21,306,19],[287,22,306,20,"log"],[287,25,306,23],[287,26,306,24],[287,75,306,73,"zoneId"],[287,81,306,79],[287,93,306,91,"nextZone"],[287,101,306,99],[287,102,306,100,"id"],[287,104,306,102],[287,106,306,104],[287,107,306,105],[289,14,308,12],[290,14,309,12],[290,18,309,16],[290,19,309,17,"newProgress"],[290,30,309,28],[290,31,309,29,"nextZone"],[290,39,309,37],[290,40,309,38,"id"],[290,42,309,40],[290,43,309,41],[290,45,309,43],[291,16,310,14,"newProgress"],[291,27,310,25],[291,28,310,26,"nextZone"],[291,36,310,34],[291,37,310,35,"id"],[291,39,310,37],[291,40,310,38],[291,43,310,41],[292,18,311,16,"zoneId"],[292,24,311,22],[292,26,311,24,"nextZone"],[292,34,311,32],[292,35,311,33,"id"],[292,37,311,35],[293,18,312,16,"currentLevel"],[293,30,312,28],[293,32,312,30],[293,33,312,31],[294,18,313,16,"killsInLevel"],[294,30,313,28],[294,32,313,30],[294,33,313,31],[295,18,314,16,"completed"],[295,27,314,25],[295,29,314,27],[296,16,315,14],[296,17,315,15],[297,14,316,12],[299,14,318,12],[300,14,319,12,"setTimeout"],[300,24,319,22],[300,25,319,23],[300,31,319,29],[301,16,320,14,"console"],[301,23,320,21],[301,24,320,22,"log"],[301,27,320,25],[301,28,320,26],[301,72,320,70,"nextZone"],[301,80,320,78],[301,81,320,79,"id"],[301,83,320,81],[301,93,320,91],[301,94,320,92],[302,16,321,14,"setCurrentZone"],[302,30,321,28],[302,31,321,29,"nextZone"],[302,39,321,37],[302,40,321,38],[303,16,322,14,"setCurrentZoneLevel"],[303,35,322,33],[303,36,322,34,"nextZone"],[303,44,322,42],[303,45,322,43,"levels"],[303,51,322,49],[303,52,322,50],[303,53,322,51],[303,54,322,52],[303,55,322,53],[304,16,323,14,"setProgressionZone"],[304,34,323,32],[304,35,323,33,"nextZone"],[304,43,323,41],[304,44,323,42],[305,14,324,12],[305,15,324,13],[305,17,324,15],[305,20,324,18],[305,21,324,19],[305,22,324,20],[305,23,324,21],[306,12,325,10],[306,13,325,11],[306,19,325,17],[307,14,326,12,"console"],[307,21,326,19],[307,22,326,20,"log"],[307,25,326,23],[307,26,326,24],[307,82,326,80,"zoneId"],[307,88,326,86],[307,90,326,88],[307,91,326,89],[308,12,327,10],[309,10,328,8],[310,8,329,6],[311,8,331,6,"newProgress"],[311,19,331,17],[311,20,331,18,"zoneId"],[311,26,331,24],[311,27,331,25],[311,30,331,28,"progress"],[311,38,331,36],[313,8,333,6],[314,8,334,6,"setTimeout"],[314,18,334,16],[314,19,334,17],[314,25,334,23],[315,10,335,8,"console"],[315,17,335,15],[315,18,335,16,"log"],[315,21,335,19],[315,22,335,20],[315,67,335,65],[315,69,335,67,"newProgress"],[315,80,335,78],[315,81,335,79],[316,10,336,8,"updateZoneProgress"],[316,28,336,26],[316,29,336,27,"newProgress"],[316,40,336,38],[316,41,336,39],[317,8,337,6],[317,9,337,7],[317,11,337,9],[317,12,337,10],[317,13,337,11],[317,14,337,12],[317,15,337,13],[319,8,339,6],[319,15,339,13,"newProgress"],[319,26,339,24],[320,6,340,4],[320,7,340,5],[320,8,340,6],[321,4,341,2],[321,5,341,3],[323,4,343,2],[324,4,344,2],[324,10,344,8,"isZoneUnlockedLocal"],[324,29,344,27],[324,32,344,31,"zoneId"],[324,38,344,45],[324,42,344,59],[325,6,345,4],[325,10,345,8,"zoneId"],[325,16,345,14],[325,21,345,19],[325,22,345,20],[325,24,345,22],[325,31,345,29],[325,35,345,33],[325,36,345,34],[325,37,345,35],[327,6,347,4],[327,12,347,10,"zone"],[327,16,347,14],[327,19,347,17,"ZONES"],[327,32,347,22],[327,33,347,22,"ZONES"],[327,38,347,22],[327,39,347,23,"find"],[327,43,347,27],[327,44,347,28,"z"],[327,45,347,29],[327,49,347,33,"z"],[327,50,347,34],[327,51,347,35,"id"],[327,53,347,37],[327,58,347,42,"zoneId"],[327,64,347,48],[327,65,347,49],[328,6,348,4],[328,10,348,8],[328,11,348,9,"zone"],[328,15,348,13],[328,17,348,15,"unlockRequirement"],[328,34,348,32],[328,35,348,33,"previousZone"],[328,47,348,45],[328,49,348,47],[328,56,348,54],[328,60,348,58],[329,6,350,4],[329,12,350,10,"prevZoneProgress"],[329,28,350,26],[329,31,350,29,"zoneProgress"],[329,43,350,41],[329,44,350,42,"zone"],[329,48,350,46],[329,49,350,47,"unlockRequirement"],[329,66,350,64],[329,67,350,65,"previousZone"],[329,79,350,77],[329,80,350,78],[330,6,351,4],[330,13,351,11,"prevZoneProgress"],[330,29,351,27],[330,31,351,29,"completed"],[330,40,351,38],[330,44,351,42],[330,49,351,47],[331,4,352,2],[331,5,352,3],[333,4,354,2],[334,4,355,2],[334,10,355,8,"getUnlockedZones"],[334,26,355,24],[334,29,355,27,"getUnlockedZones"],[334,30,355,27],[334,35,355,41],[335,6,356,4],[335,13,356,11,"ZONES"],[335,26,356,16],[335,27,356,16,"ZONES"],[335,32,356,16],[335,33,356,17,"filter"],[335,39,356,23],[335,40,356,24,"zone"],[335,44,356,28],[335,48,356,32,"isZoneUnlockedLocal"],[335,67,356,51],[335,68,356,52,"zone"],[335,72,356,56],[335,73,356,57,"id"],[335,75,356,59],[335,76,356,60],[335,77,356,61],[336,4,357,2],[336,5,357,3],[337,4,359,2],[337,10,359,8,"contextValue"],[337,22,359,37],[337,25,359,40,"React"],[337,30,359,45],[337,31,359,45,"default"],[337,38,359,45],[337,39,359,46,"useMemo"],[337,46,359,53],[337,47,359,54],[337,54,359,61],[338,6,360,4,"currentZone"],[338,17,360,15],[339,6,360,17],[340,6,361,4,"currentZoneLevel"],[340,22,361,20],[341,6,362,4,"progressionZone"],[341,21,362,19],[342,6,362,21],[343,6,363,4,"zoneProgress"],[343,18,363,16],[344,6,364,4,"availableZones"],[344,20,364,18],[344,22,364,20,"ZONES"],[344,35,364,25],[344,36,364,25,"ZONES"],[344,41,364,25],[345,6,365,4,"selectZone"],[345,16,365,14],[346,6,366,4,"getZoneProgress"],[346,21,366,19],[347,6,367,4,"spawnZoneEnemy"],[347,20,367,18],[348,6,368,4,"recordEnemyKill"],[348,21,368,19],[349,6,369,4,"isZoneUnlocked"],[349,20,369,18],[349,22,369,20,"isZoneUnlockedLocal"],[349,41,369,39],[350,6,370,4,"getUnlockedZones"],[351,4,371,2],[351,5,371,3],[351,6,371,4],[351,8,371,6],[351,9,372,4,"currentZone"],[351,20,372,15],[351,22,373,4,"currentZoneLevel"],[351,38,373,20],[351,40,374,4,"progressionZone"],[351,55,374,19],[351,57,375,4,"zoneProgress"],[351,69,375,16],[351,71,376,4,"selectZone"],[351,81,376,14],[351,83,377,4,"getZoneProgress"],[351,98,377,19],[351,100,378,4,"spawnZoneEnemy"],[351,114,378,18],[351,116,379,4,"recordEnemyKill"],[351,131,379,19],[351,133,380,4,"isZoneUnlockedLocal"],[351,152,380,23],[351,154,381,4,"getUnlockedZones"],[351,170,381,20],[351,171,382,3],[351,172,382,4],[352,4,384,2],[352,24,385,4],[352,28,385,4,"_reactJsxDevRuntime"],[352,47,385,4],[352,48,385,4,"jsxDEV"],[352,54,385,4],[352,56,385,5,"ZoneContext"],[352,67,385,16],[352,68,385,17,"Provider"],[352,76,385,25],[353,6,385,26,"value"],[353,11,385,31],[353,13,385,33,"contextValue"],[353,25,385,46],[354,6,385,46,"children"],[354,14,385,46],[354,16,386,7,"children"],[355,4,386,15],[356,6,386,15,"fileName"],[356,14,386,15],[356,16,386,15,"_jsxFileName"],[356,28,386,15],[357,6,386,15,"lineNumber"],[357,16,386,15],[358,6,386,15,"columnNumber"],[358,18,386,15],[359,4,386,15],[359,11,387,26],[359,12,387,27],[360,2,389,0],[360,3,389,1],[361,2,389,2,"_s2"],[361,5,389,2],[361,6,65,13,"ZoneProvider"],[361,18,65,25],[362,4,65,25],[362,12,66,44,"useGame"],[362,24,66,51],[362,25,66,51,"useGame"],[362,32,66,51],[363,2,66,51],[364,2,66,51,"_c"],[364,4,66,51],[364,7,65,13,"ZoneProvider"],[364,19,65,25],[365,2,65,25],[365,6,65,25,"_c"],[365,8,65,25],[366,2,65,25,"$RefreshReg$"],[366,14,65,25],[366,15,65,25,"_c"],[366,17,65,25],[367,0,65,25],[367,3]],"functionMap":{"names":["<global>","calculateKillRequirement","useZone","ZoneProvider","useState$argument_0","useEffect$argument_0","ZONES.find$argument_0","selectZone","getZoneProgress","spawnZoneEnemy","recordEnemyKill","setZoneProgress$argument_0","setTimeout$argument_0","isZoneUnlockedLocal","getUnlockedZones","ZONES.filter$argument_0","React.useMemo$argument_0"],"mappings":"AAA;iCCK;CDM;uBE6C;CFM;4BGE;8DCI;GDG;6ECC;GDG;sECC;GDG;iFCE;GDU;YEG;kCCY,6BD;kCC2B,6BD;GFU;YEG;GFQ;qBIG;4BDM,oBC;GJoB;0BKG;GLE;yBMG;GNuC;0BOG;oBCM;sCLgE,wBK;uBCe;aDK;iBCU;ODG;KDG;GPC;8BUG;4BPG,oBO;GVK;2BWG;wBCC,oCD;GXC;sDaE;IbY;CHkB"},"hasCjsExports":false},"type":"js/module"}]}