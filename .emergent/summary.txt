<analysis>
The trajectory documents the extensive evolution and debugging of a mobile RPG, Data Shatter. The work began with setting up a proper Git and EAS Build workflow to resolve persistent build failures on the user's local machine. This involved iterative debugging of  configurations related to Node.js versions, package managers, and build command syntax.

A significant portion of the development focused on implementing and refining core game mechanics, particularly the experience (XP) and combat systems. The user repeatedly requested adjustments to the progression speed, leading to several massive increases in XP and gold rewards. This process introduced numerous bugs, including missed XP on certain ability kills (Whirlwind), conflicting XP calculation systems, and severe performance bottlenecks. The AI engineer engaged in deep, iterative debugging within , refactoring the Area of Effect (AOE) system, introducing and removing various XP awarding mechanisms (immediate vs. batch processing), and adjusting the core game loop's tick rate to balance responsiveness and performance. The  was instrumental in diagnosing complex race conditions and timing issues within the state management contexts.

Other key tasks included refactoring the in-game store to move items to their correct currency type and implementing a backend and frontend admin system for account resets. The most recent task involves fixing a visual lag issue where the XP bar does not update instantly, a problem traced back to an overly aggressive UI throttling mechanism.
</analysis>

<product_requirements>
The application, Data Shatter, is an idle RPG for mobile devices. The primary goal is to provide a satisfying and fast-paced progression loop.

**Core Features Implemented:**
-   **Automatic Combat:** The player character automatically engages in combat with spawning enemies.
-   **Revival System:** A system that allows players to revive upon death using tickets or watching a rewarded ad.
-   **AdMob Monetization:** Google AdMob is integrated to provide rewarded video ads in exchange for in-game items (Revive Tickets).
-   **In-Game Store:** A store where players can purchase items like Revive Tickets using in-game currency (Gems).
-   **Dynamic Progression:** The XP and gold rewards have been massively scaled multiple times to ensure rapid leveling. The XP curve for leveling has been adjusted to be steeper for early levels (1-5000) and then flatten out.
-   **Full Heal on Level Up:** Players' health and energy are fully restored upon leveling up.
-   **Admin Functionality:** An admin role exists () which grants access to a UI button for resetting the player's account data for testing purposes. The visibility of this button is controlled by a database flag ().
</product_requirements>

<key_technical_concepts>
-   **Frameworks**: Expo (with Expo Router), React Native, FastAPI.
-   **State Management**: React Context API (, ) is used for managing global game state, requiring careful synchronization to prevent race conditions.
-   **Build & Deployment**: Expo Application Services (EAS) Build for creating native development and production builds. Extensive debugging of  was performed.
-   **Monetization**:  for rewarded ads.
-   **Performance Optimization**: UI updates are throttled and memoized in the main game view to handle rapid state changes from the fast-paced combat engine.
</key_technical_concepts>

<code_architecture>
The application is a monorepo with an Expo frontend and a FastAPI backend.



-   ****
    -   **Importance**: Defines the build configuration for Expo Application Services (EAS).
    -   **Changes**: Heavily modified to resolve numerous build failures. Adjustments included specifying Node.js versions, switching package managers, and simplifying  to rely on EAS defaults.

-   ****
    -   **Importance**: The core of the game's real-time logic. It manages combat state, enemy interactions, projectile physics, ability usage, and the awarding of XP and gold.
    -   **Changes**: This file has undergone the most significant refactoring. The XP awarding logic was changed multiple times to fix bugs and performance issues, moving from immediate to batch processing and back. The AOE (Area of Effect) system was refactored. The  function was streamlined to a single, efficient calculation. The combat tick processing was modified to manage a death animation queue.

-   ****
    -   **Importance**: Manages the persistent player state, including level, experience, stats, and inventory. It contains the logic for leveling up.
    -   **Changes**: The  function was modified to create a tiered progression curve, making early levels require more XP. The logic already included a full HP/Energy restore on level up.

-   ****
    -   **Importance**: The main UI component for the game screen. It renders the player, enemies, UI elements like the XP bar, and the admin button.
    -   **Changes**: An admin reset button was added, with its visibility tied to a  flag. A throttled state () was introduced to manage frequent UI updates for the XP and level display, which is the source of the current issue.

-   ****
    -   **Importance**: Manages the UI and logic for the in-game store.
    -   **Changes**: Refactored to move the Revive Tickets purchase option from the real-money Gems tab to the in-game currency Items tab, costing 1000 Gems.

-   ****
    -   **Importance**: The FastAPI backend server. It handles user authentication, game state saving/loading, and admin functions.
    -   **Changes**: New endpoints were added to support admin functionality: one to grant a user admin status and another () to reset a player's game save to its initial state. The user profile endpoint was updated to include the  flag.
</code_architecture>

<pending_tasks>
-   **Implement Companions**: A planned game feature that has not been started.
-   **Implement Idle/Offline Progression**: A core feature for an idle RPG that has not been implemented yet.
</pending_tasks>

<current_work>
The most recent task was to solve a persistent visual bug where the XP bar and level display do not update instantly after each enemy kill, creating a disconnect between the action and the reward. The user noted that XP seems to come in chunks, or that they would suddenly jump from level 1 to 3 without seeing the XP bar move.

The AI engineer correctly identified this as a UI update issue, not a problem with the XP calculation itself (which is now highly optimized and synchronous). To diagnose the precise cause, the  was invoked.

The agent's analysis pinpointed the issue within the  file. The problem lies in the  hook, which was implemented to improve UI performance. This hook intentionally limits UI re-renders to 15 FPS and, more critically, filters out small changes by only updating if the new XP value represents a change of more than 1% of the total needed for the next level. For a level 1 player, a single kill does not meet this 1% threshold, so the UI update is skipped, leading to the observed visual lag.
</current_work>

<optional_next_step>
Implement the fix recommended by the : modify the  hook in  to remove the 1% threshold filter, ensuring that every XP gain, no matter how small, triggers a UI update for the XP bar.
</optional_next_step>
