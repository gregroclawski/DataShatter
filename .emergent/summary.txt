<analysis>
The AI engineer's work was highly iterative, primarily focused on fixing critical bugs and implementing new features for an Expo mobile application. Initial efforts included resolving React Hooks order violations, overhauling the equipment system, and enhancing character progression UI (combining stats/skills, dual upgrades, neon theme). A significant portion of the trajectory involved meticulously debugging and fixing persistent issues with the zone progression system's display and kill tracking, often requiring multiple troubleshooting rounds with the  to identify hardcoded values and synchronization problems across UI and context logic. Subsequently, the focus shifted to implementing ability persistence, including backend model updates and frontend context integration, which also required several iterations to resolve  errors and ensure proper save/load. The current task involves addressing the Shadow Clone ability functionality.
</analysis>

<product_requirements>
Idle Ninja Online is a mobile RPG featuring auto-fighting across 50 zones, character progression (up to level 15000), stat points, and level-up animations. The UI includes a battle arena and bottom tabs for Stats, Abilities, Pets, Skills, Store, Raids, and Equipment, all utilizing a Mythic-Tech theme. Core mechanics include a 50-zone system, 25-level gear progression with material upgrades, and a 5-tier Boss Battle System. Secure, server-side login and progression are paramount, using Expo (frontend), FastAPI (backend), and MongoDB.

Recent developments addressed: React Hooks issues, equipment system bugs (key duplication, touch events, persistence), combined Stats/Skills into a Character tab with dual (gold/skill point) bulk upgrades, reactive skill displays, and optimized zone progression (linear kill requirements). Subsequent work fixed zone progress display (top bar and overlay), ability tab disappearance, implemented Whirlwind AOE damage, and began Shadow Clone ability implementation.
</product_requirements>

<key_technical_concepts>
- **Expo & Expo Router**: Mobile app framework with file-based routing.
- **React Native**: Core UI components, Hooks, StyleSheet, Animated API.
- **FastAPI**: Python backend, MongoDB for database.
- **JWT Authentication**: Secure token-based user authentication.
- **Zustand/React Context**: State management for various game systems.
- **react-native-reanimated**: For animations and advanced touch.
</key_technical_concepts>

<code_architecture>
**Directory Structure:**


-   : FastAPI backend.
    -   **Changes**:  and  models updated to include , , , and  for persistence. Save endpoint now logs and handles  and stat upgrade fields.
-   : Main game screen.
    -   **Changes**: Multiple React Hooks order fixes. Overlay rendering logic adjusted.  type expanded.  props updated. Zone progression top bar display fixed to use  and  data, removing hardcoded values. Abilities tab re-added to navigation and overlay rendering.
-   : Abilities display and upgrade.
    -   **Changes**: Integrated  context. Ability upgrade logic now calls  for persistence. Display now shows upgrade requirements.
-   : Displays zone/enemy info.
    -   **Changes**: Removed , added  and . Hardcoded 1000 kill requirements replaced with dynamic . Zone selection logic updated to call  from context.  updated to correctly use context's .
-   : Manages combat logic.
    -   **Changes**: Enemy movement, player/enemy speeds adjusted.  and  added.  and  added to . Integrated  and  for persistence.  dependencies updated to prevent infinite loops.  now includes AOE logic, identifying multiple enemies within .  now uses .  now stores  data.
-   : Manages game state, auto-save, persistence.
    -   **Changes**:  added to   dependency array. Mobile-optimized save/load (local backups, ,  parameter). , , ,  added to  interface. , ,  functions added. Ninja interface updated to , , .  updated to include default .  updated to send , , .
-   : Manages zone progression.
    -   **Changes**: Uses  context. Calls . Initializes  from . , ,  functions added.  updated to track kills for .  function introduced for linear progression.  for  initialization now uses  to run only once, preventing auto-reversion. Duplicate  removed.  uses  and .
-   : Defines equipment types.
    -   **Changes**: uid=0(root) gid=0(root) groups=0(root) generation updated to include  for uniqueness.
-   : Defines zones and enemy data.
    -   **Changes**:  values updated using  for linear progression (all 50 zones).
-   : Defines ability types and .
    -   **Changes**:  interface added.  now includes  and  for persistence. Whirlwind Strike  increased to 500. Whirlwind Strike  doubled to 56. Shadow Clone (, , ). Added , ,  to CombatContextType.
</code_architecture>

<pending_tasks>
- **Backend Persistence**: Ensure all game systems (Companions) are properly integrated with server-side save/load mechanisms.
- **Companions**: Implement battle and support pets with leveling and abilities.
- **Idle/Offline Progression**: Simulate combat mathematically while offline.
- **PlayFab Integration**: Evaluate and potentially integrate PlayFab.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was implementing the Shadow Clone ability. The user requested to double the base damage of the Whirlwind ability and to investigate why the Shadow Clone ability doesn't create a shadow of the player that casts duplicate attacks at 70% damage. The Whirlwind damage increase was completed. The engineer found that the  defines Shadow Clone with , , and , but the  lacked any logic to handle 'Buff' effects or to create visual clones. The engineer has identified that the Shadow Clone system requires adding state to the , creating a visual clone entity, making the clone cast duplicate attacks at 70% damage, and managing its 30-second duration. The first step of adding shadow clone state and logic to the  has just been initiated.
</current_work>

<optional_next_step>
Implement the shadow clone logic within the  function in .
</optional_next_step>

